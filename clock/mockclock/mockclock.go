// Code generated by MockGen. DO NOT EDIT.
// Source: clock.go

package mockclock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	clock "go.pact.im/x/clock"
)

// MockClock is a mock of Clock interface.
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
}

// MockClockMockRecorder is the mock recorder for MockClock.
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance.
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockClock) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockClockMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClock)(nil).Now))
}

// Schedule mocks base method.
func (m *MockClock) Schedule(d time.Duration, f func(time.Time)) clock.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", d, f)
	ret0, _ := ret[0].(clock.Event)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockClockMockRecorder) Schedule(d, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockClock)(nil).Schedule), d, f)
}

// Ticker mocks base method.
func (m *MockClock) Ticker(d time.Duration) clock.Ticker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ticker", d)
	ret0, _ := ret[0].(clock.Ticker)
	return ret0
}

// Ticker indicates an expected call of Ticker.
func (mr *MockClockMockRecorder) Ticker(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ticker", reflect.TypeOf((*MockClock)(nil).Ticker), d)
}

// Timer mocks base method.
func (m *MockClock) Timer(d time.Duration) clock.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timer", d)
	ret0, _ := ret[0].(clock.Timer)
	return ret0
}

// Timer indicates an expected call of Timer.
func (mr *MockClockMockRecorder) Timer(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timer", reflect.TypeOf((*MockClock)(nil).Timer), d)
}

// private mocks base method.
func (m *MockClock) private() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "private")
}

// private indicates an expected call of private.
func (mr *MockClockMockRecorder) private() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "private", reflect.TypeOf((*MockClock)(nil).private))
}
