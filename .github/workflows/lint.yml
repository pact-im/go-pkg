name: Lint
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  golangci-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.0.2
      - name: Install Go
        uses: actions/setup-go@v3.2.0
        with:
          go-version: 1.18.0
      - name: Get Go cache paths
        id: go-env
        run: |
          echo "::set-output name=cache::$(go env GOCACHE)"
          echo "::set-output name=modcache::$(go env GOMODCACHE)"
      - name: Set up Go cache
        uses: actions/cache@v3.0.2
        with:
          key: golangci-lint-${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}
          restore-keys: golangci-lint-${{ runner.os }}-go-
          path: |
            ${{ steps.go-env.outputs.cache }}
            ${{ steps.go-env.outputs.modcache }}
      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.45.2
      - name: Get golangci-lint cache path
        id: golangci-lint-cache-status
        run: |
          echo "::set-output name=dir::$(golangci-lint cache status | head -1 | sed 's/^Dir: //')"
      - name: Set up golangci-lint cache
        uses: actions/cache@v3.0.2
        with:
          key: golangci-lint-${{ runner.os }}-golangci-lint-${{ hashFiles('**/go.mod') }}
          restore-keys: golangci-lint-${{ runner.os }}-golangci-lint-
          path: ${{ steps.golangci-lint-cache-status.outputs.dir }}
      - name: Run golangci-lint
        # Note that we filter some packages since they use type parameters and
        # currently they are not supported in Go SSA analysis tooling. See also
        # https://github.com/golangci/golangci-lint/issues/2649
        run: |
          golangci-lint run --out-format=github-actions -- \
            $(go work edit -json | jq -c -r '[.Use[].DiskPath | select(. != "syncx" and . != "process")] | map_values(. + "/...")[]')

  go-mod-tidy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.0.2
      - name: Install Go
        uses: actions/setup-go@v3.2.0
        with:
          go-version: 1.18.0
      - name: Get Go cache paths
        id: go-env
        run: |
          echo "::set-output name=cache::$(go env GOCACHE)"
          echo "::set-output name=modcache::$(go env GOMODCACHE)"
      - name: Set up Go cache
        uses: actions/cache@v3.0.2
        with:
          key: go-mod-tidy-${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            go-mod-tidy-${{ runner.os }}-go-
          path: |
            ${{ steps.go-env.outputs.cache }}
            ${{ steps.go-env.outputs.modcache }}
      - name: Run go mod tidy
        run: eval "$(go list -m -f '(cd {{printf "%q" .Dir}} && go mod tidy)')"
      - name: Check git diff
        run: git diff --exit-code

  commitlint:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - name: Create config
        run: |
          cat >commitlint.config.js <<EOF
          module.exports = {
            extends: ['@commitlint/config-conventional'],
            rules: {
              'body-max-line-length': [0],
            },
          }
          EOF
      - name: Run commitlint
        uses: wagoid/commitlint-github-action@v4.1.12
