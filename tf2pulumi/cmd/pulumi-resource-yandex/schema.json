{
    "name": "yandex",
    "description": "A Pulumi package for creating and managing Yandex Cloud resources.",
    "keywords": [
        "pulumi",
        "yandex"
    ],
    "license": "MIT",
    "attribution": "This Pulumi package is based on the [`yandex` Terraform Provider](https://github.com/yandex-cloud/terraform-provider-yandex).",
    "repository": "https://github.com/pact-im/go-pkg",
    "publisher": "Pact",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "go.pact.im/x/tf2pulumi/yandex"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/yandex-cloud/terraform-provider-yandex)\n\u003e distributed under [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0.html). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-yandex` repo](https://github.com/pact-im/go-pkg/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-yandex` repo](https://github.com/yandex-cloud/terraform-provider-yandex/issues)."
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/yandex-cloud/terraform-provider-yandex)\n\u003e distributed under [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0.html). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-yandex` repo](https://github.com/pact-im/go-pkg/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-yandex` repo](https://github.com/yandex-cloud/terraform-provider-yandex/issues)."
        }
    },
    "config": {
        "variables": {
            "cloudId": {
                "type": "string",
                "description": "ID of Yandex.Cloud tenant.\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The API endpoint for Yandex.Cloud SDK client.\n"
            },
            "folderId": {
                "type": "string",
                "description": "The default folder ID where resources will be placed.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted,default value is `false`.\n"
            },
            "maxRetries": {
                "type": "number",
                "description": "The maximum number of times an API request is being executed. If the API request still fails, an error is thrown.\n"
            },
            "organizationId": {
                "type": "string"
            },
            "plaintext": {
                "type": "boolean",
                "description": "Disable use of TLS. Default value is `false`.\n"
            },
            "regionId": {
                "type": "string"
            },
            "serviceAccountKeyFile": {
                "type": "string",
                "description": "Either the path to or the contents of a Service Account key file in JSON format.\n"
            },
            "storageAccessKey": {
                "type": "string",
                "description": "Yandex.Cloud storage service access key. Used when a storage data/resource doesn't have an access key explicitly\nspecified.\n"
            },
            "storageEndpoint": {
                "type": "string",
                "description": "Yandex.Cloud storage service endpoint. Default is storage.yandexcloud.net\n"
            },
            "storageSecretKey": {
                "type": "string",
                "description": "Yandex.Cloud storage service secret key. Used when a storage data/resource doesn't have a secret key explicitly\nspecified.\n"
            },
            "token": {
                "type": "string",
                "description": "The access token for API operations.\n"
            },
            "ymqAccessKey": {
                "type": "string",
                "description": "Yandex.Cloud Message Queue service access key. Used when a message queue resource doesn't have an access key explicitly\nspecified.\n"
            },
            "ymqEndpoint": {
                "type": "string",
                "description": "Yandex.Cloud Message Queue service endpoint. Default is message-queue.api.cloud.yandex.net\n"
            },
            "ymqSecretKey": {
                "type": "string",
                "description": "Yandex.Cloud Message Queue service secret key. Used when a message queue resource doesn't have a secret key explicitly\nspecified.\n",
                "secret": true
            },
            "zone": {
                "type": "string",
                "description": "The zone where operations will take place. Examples are ru-central1-a, ru-central2-c, etc.\n"
            }
        }
    },
    "types": {
        "yandex:index/AlbBackendGroupGrpcBackend:AlbBackendGroupGrpcBackend": {
            "properties": {
                "healthcheck": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupGrpcBackendHealthcheck:AlbBackendGroupGrpcBackendHealthcheck",
                    "description": "Healthcheck specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancingConfig": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupGrpcBackendLoadBalancingConfig:AlbBackendGroupGrpcBackendLoadBalancingConfig",
                    "description": "Load Balancing Config specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the backend.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "Port for incoming traffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "References target groups for the backend.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupGrpcBackendTls:AlbBackendGroupGrpcBackendTls",
                    "description": "Tls specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "number",
                    "description": "Weight of the backend. Traffic will be split between backends of the same BackendGroup according to their weights.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "targetGroupIds"
            ]
        },
        "yandex:index/AlbBackendGroupGrpcBackendHealthcheck:AlbBackendGroupGrpcBackendHealthcheck": {
            "properties": {
                "grpcHealthcheck": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck:AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck",
                    "description": "Grpc Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthcheckPort": {
                    "type": "number",
                    "description": "Optional alternative port for health checking.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthyThreshold": {
                    "type": "number",
                    "description": "Number of consecutive successful health checks required to promote endpoint into the healthy state. 0 means 1. Note that during startup, only a single successful health check is required to mark a host healthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpHealthcheck": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck:AlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck",
                    "description": "Http Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "string",
                    "description": "Interval between health checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalJitterPercent": {
                    "type": "number",
                    "description": "An optional jitter amount as a percentage of interval. If specified, during every interval value of (interval_ms * interval_jitter_percent / 100) will be added to the wait time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "streamHealthcheck": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck:AlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck",
                    "description": "Stream Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "description": "Time to wait for a health check response.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unhealthyThreshold": {
                    "type": "number",
                    "description": "Number of consecutive failed health checks required to demote endpoint into the unhealthy state. 0 means 1. Note that for HTTP health checks, a single 503 immediately makes endpoint unhealthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "interval",
                "timeout"
            ]
        },
        "yandex:index/AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck:AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck": {
            "properties": {
                "serviceName": {
                    "type": "string",
                    "description": "Service name for grpc.health.v1.HealthCheckRequest message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck:AlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "\"Host\" HTTP header value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2": {
                    "type": "boolean",
                    "description": "If set, health checks will use HTTP2.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "HTTP path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "yandex:index/AlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck:AlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck": {
            "properties": {
                "receive": {
                    "type": "string",
                    "description": "Data that must be contained in the messages received from targets for a successful health check. If not specified, no messages are expected from targets, and those that are received are not checked.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "send": {
                    "type": "string",
                    "description": "Message sent to targets during TCP data transfer.  If not specified, no data is sent to the target.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupGrpcBackendLoadBalancingConfig:AlbBackendGroupGrpcBackendLoadBalancingConfig": {
            "properties": {
                "localityAwareRoutingPercent": {
                    "type": "number",
                    "description": "Percent of traffic to be sent to the same availability zone. The rest will be equally divided between other zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "Load balancing mode for the backend. Possible values: \"ROUND_ROBIN\", \"RANDOM\", \"LEAST_REQUEST\", \"MAGLEV_HASH\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "panicThreshold": {
                    "type": "number",
                    "description": "If percentage of healthy hosts in the backend is lower than panic_threshold, traffic will be routed to all backends no matter what the health status is. This helps to avoid healthy backends overloading  when everything is bad. Zero means no panic threshold.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strictLocality": {
                    "type": "boolean",
                    "description": "If set, will route requests only to the same availability zone. Balancer won't know about endpoints in other zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupGrpcBackendTls:AlbBackendGroupGrpcBackendTls": {
            "properties": {
                "sni": {
                    "type": "string",
                    "description": "[SNI](https://en.wikipedia.org/wiki/Server_Name_Indication) string for TLS connections.\n* `validation_context.0.trusted_ca_id` - (Optional) Trusted CA certificate ID in the Certificate Manager.\n* `validation_context.0.trusted_ca_bytes` - (Optional) PEM-encoded trusted CA certificate chain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validationContext": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupGrpcBackendTlsValidationContext:AlbBackendGroupGrpcBackendTlsValidationContext",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupGrpcBackendTlsValidationContext:AlbBackendGroupGrpcBackendTlsValidationContext": {
            "properties": {
                "trustedCaBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustedCaId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupHttpBackend:AlbBackendGroupHttpBackend": {
            "properties": {
                "healthcheck": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupHttpBackendHealthcheck:AlbBackendGroupHttpBackendHealthcheck",
                    "description": "Healthcheck specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2": {
                    "type": "boolean",
                    "description": "If set, health checks will use HTTP2.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancingConfig": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupHttpBackendLoadBalancingConfig:AlbBackendGroupHttpBackendLoadBalancingConfig",
                    "description": "Load Balancing Config specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the backend.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "Port for incoming traffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageBucket": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "References target groups for the backend.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupHttpBackendTls:AlbBackendGroupHttpBackendTls",
                    "description": "Tls specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "number",
                    "description": "Weight of the backend. Traffic will be split between backends of the same BackendGroup according to their weights.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/AlbBackendGroupHttpBackendHealthcheck:AlbBackendGroupHttpBackendHealthcheck": {
            "properties": {
                "grpcHealthcheck": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck:AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck",
                    "description": "Grpc Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthcheckPort": {
                    "type": "number",
                    "description": "Optional alternative port for health checking.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthyThreshold": {
                    "type": "number",
                    "description": "Number of consecutive successful health checks required to promote endpoint into the healthy state. 0 means 1. Note that during startup, only a single successful health check is required to mark a host healthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpHealthcheck": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupHttpBackendHealthcheckHttpHealthcheck:AlbBackendGroupHttpBackendHealthcheckHttpHealthcheck",
                    "description": "Http Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "string",
                    "description": "Interval between health checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalJitterPercent": {
                    "type": "number",
                    "description": "An optional jitter amount as a percentage of interval. If specified, during every interval value of (interval_ms * interval_jitter_percent / 100) will be added to the wait time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "streamHealthcheck": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupHttpBackendHealthcheckStreamHealthcheck:AlbBackendGroupHttpBackendHealthcheckStreamHealthcheck",
                    "description": "Stream Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "description": "Time to wait for a health check response.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unhealthyThreshold": {
                    "type": "number",
                    "description": "Number of consecutive failed health checks required to demote endpoint into the unhealthy state. 0 means 1. Note that for HTTP health checks, a single 503 immediately makes endpoint unhealthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "interval",
                "timeout"
            ]
        },
        "yandex:index/AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck:AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck": {
            "properties": {
                "serviceName": {
                    "type": "string",
                    "description": "Service name for grpc.health.v1.HealthCheckRequest message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupHttpBackendHealthcheckHttpHealthcheck:AlbBackendGroupHttpBackendHealthcheckHttpHealthcheck": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "\"Host\" HTTP header value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2": {
                    "type": "boolean",
                    "description": "If set, health checks will use HTTP2.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "HTTP path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "yandex:index/AlbBackendGroupHttpBackendHealthcheckStreamHealthcheck:AlbBackendGroupHttpBackendHealthcheckStreamHealthcheck": {
            "properties": {
                "receive": {
                    "type": "string",
                    "description": "Data that must be contained in the messages received from targets for a successful health check. If not specified, no messages are expected from targets, and those that are received are not checked.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "send": {
                    "type": "string",
                    "description": "Message sent to targets during TCP data transfer.  If not specified, no data is sent to the target.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupHttpBackendLoadBalancingConfig:AlbBackendGroupHttpBackendLoadBalancingConfig": {
            "properties": {
                "localityAwareRoutingPercent": {
                    "type": "number",
                    "description": "Percent of traffic to be sent to the same availability zone. The rest will be equally divided between other zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "Load balancing mode for the backend. Possible values: \"ROUND_ROBIN\", \"RANDOM\", \"LEAST_REQUEST\", \"MAGLEV_HASH\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "panicThreshold": {
                    "type": "number",
                    "description": "If percentage of healthy hosts in the backend is lower than panic_threshold, traffic will be routed to all backends no matter what the health status is. This helps to avoid healthy backends overloading  when everything is bad. Zero means no panic threshold.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strictLocality": {
                    "type": "boolean",
                    "description": "If set, will route requests only to the same availability zone. Balancer won't know about endpoints in other zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupHttpBackendTls:AlbBackendGroupHttpBackendTls": {
            "properties": {
                "sni": {
                    "type": "string",
                    "description": "[SNI](https://en.wikipedia.org/wiki/Server_Name_Indication) string for TLS connections.\n* `validation_context.0.trusted_ca_id` - (Optional) Trusted CA certificate ID in the Certificate Manager.\n* `validation_context.0.trusted_ca_bytes` - (Optional) PEM-encoded trusted CA certificate chain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validationContext": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupHttpBackendTlsValidationContext:AlbBackendGroupHttpBackendTlsValidationContext",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupHttpBackendTlsValidationContext:AlbBackendGroupHttpBackendTlsValidationContext": {
            "properties": {
                "trustedCaBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustedCaId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupSessionAffinity:AlbBackendGroupSessionAffinity": {
            "properties": {
                "connection": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupSessionAffinityConnection:AlbBackendGroupSessionAffinityConnection",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cookie": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupSessionAffinityCookie:AlbBackendGroupSessionAffinityCookie",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "header": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupSessionAffinityHeader:AlbBackendGroupSessionAffinityHeader",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupSessionAffinityConnection:AlbBackendGroupSessionAffinityConnection": {
            "properties": {
                "sourceIp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupSessionAffinityCookie:AlbBackendGroupSessionAffinityCookie": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the backend.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/AlbBackendGroupSessionAffinityHeader:AlbBackendGroupSessionAffinityHeader": {
            "properties": {
                "headerName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "headerName"
            ]
        },
        "yandex:index/AlbBackendGroupStreamBackend:AlbBackendGroupStreamBackend": {
            "properties": {
                "enableProxyProtocol": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthcheck": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupStreamBackendHealthcheck:AlbBackendGroupStreamBackendHealthcheck",
                    "description": "Healthcheck specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancingConfig": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupStreamBackendLoadBalancingConfig:AlbBackendGroupStreamBackendLoadBalancingConfig",
                    "description": "Load Balancing Config specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the backend.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "Port for incoming traffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "References target groups for the backend.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupStreamBackendTls:AlbBackendGroupStreamBackendTls",
                    "description": "Tls specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "number",
                    "description": "Weight of the backend. Traffic will be split between backends of the same BackendGroup according to their weights.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "targetGroupIds"
            ]
        },
        "yandex:index/AlbBackendGroupStreamBackendHealthcheck:AlbBackendGroupStreamBackendHealthcheck": {
            "properties": {
                "grpcHealthcheck": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck:AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck",
                    "description": "Grpc Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthcheckPort": {
                    "type": "number",
                    "description": "Optional alternative port for health checking.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthyThreshold": {
                    "type": "number",
                    "description": "Number of consecutive successful health checks required to promote endpoint into the healthy state. 0 means 1. Note that during startup, only a single successful health check is required to mark a host healthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpHealthcheck": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupStreamBackendHealthcheckHttpHealthcheck:AlbBackendGroupStreamBackendHealthcheckHttpHealthcheck",
                    "description": "Http Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "string",
                    "description": "Interval between health checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalJitterPercent": {
                    "type": "number",
                    "description": "An optional jitter amount as a percentage of interval. If specified, during every interval value of (interval_ms * interval_jitter_percent / 100) will be added to the wait time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "streamHealthcheck": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupStreamBackendHealthcheckStreamHealthcheck:AlbBackendGroupStreamBackendHealthcheckStreamHealthcheck",
                    "description": "Stream Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "description": "Time to wait for a health check response.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unhealthyThreshold": {
                    "type": "number",
                    "description": "Number of consecutive failed health checks required to demote endpoint into the unhealthy state. 0 means 1. Note that for HTTP health checks, a single 503 immediately makes endpoint unhealthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "interval",
                "timeout"
            ]
        },
        "yandex:index/AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck:AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck": {
            "properties": {
                "serviceName": {
                    "type": "string",
                    "description": "Service name for grpc.health.v1.HealthCheckRequest message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupStreamBackendHealthcheckHttpHealthcheck:AlbBackendGroupStreamBackendHealthcheckHttpHealthcheck": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "\"Host\" HTTP header value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2": {
                    "type": "boolean",
                    "description": "If set, health checks will use HTTP2.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "HTTP path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "yandex:index/AlbBackendGroupStreamBackendHealthcheckStreamHealthcheck:AlbBackendGroupStreamBackendHealthcheckStreamHealthcheck": {
            "properties": {
                "receive": {
                    "type": "string",
                    "description": "Data that must be contained in the messages received from targets for a successful health check. If not specified, no messages are expected from targets, and those that are received are not checked.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "send": {
                    "type": "string",
                    "description": "Message sent to targets during TCP data transfer.  If not specified, no data is sent to the target.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupStreamBackendLoadBalancingConfig:AlbBackendGroupStreamBackendLoadBalancingConfig": {
            "properties": {
                "localityAwareRoutingPercent": {
                    "type": "number",
                    "description": "Percent of traffic to be sent to the same availability zone. The rest will be equally divided between other zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "Load balancing mode for the backend. Possible values: \"ROUND_ROBIN\", \"RANDOM\", \"LEAST_REQUEST\", \"MAGLEV_HASH\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "panicThreshold": {
                    "type": "number",
                    "description": "If percentage of healthy hosts in the backend is lower than panic_threshold, traffic will be routed to all backends no matter what the health status is. This helps to avoid healthy backends overloading  when everything is bad. Zero means no panic threshold.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strictLocality": {
                    "type": "boolean",
                    "description": "If set, will route requests only to the same availability zone. Balancer won't know about endpoints in other zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupStreamBackendTls:AlbBackendGroupStreamBackendTls": {
            "properties": {
                "sni": {
                    "type": "string",
                    "description": "[SNI](https://en.wikipedia.org/wiki/Server_Name_Indication) string for TLS connections.\n* `validation_context.0.trusted_ca_id` - (Optional) Trusted CA certificate ID in the Certificate Manager.\n* `validation_context.0.trusted_ca_bytes` - (Optional) PEM-encoded trusted CA certificate chain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validationContext": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupStreamBackendTlsValidationContext:AlbBackendGroupStreamBackendTlsValidationContext",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupStreamBackendTlsValidationContext:AlbBackendGroupStreamBackendTlsValidationContext": {
            "properties": {
                "trustedCaBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustedCaId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbBackendGroupTimeouts:AlbBackendGroupTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/AlbHttpRouterRouteOptions:AlbHttpRouterRouteOptions": {
            "properties": {
                "rbac": {
                    "$ref": "#/types/yandex:index/AlbHttpRouterRouteOptionsRbac:AlbHttpRouterRouteOptionsRbac",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbHttpRouterRouteOptionsRbac:AlbHttpRouterRouteOptionsRbac": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbHttpRouterRouteOptionsRbacPrincipal:AlbHttpRouterRouteOptionsRbacPrincipal"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "principals"
            ]
        },
        "yandex:index/AlbHttpRouterRouteOptionsRbacPrincipal:AlbHttpRouterRouteOptionsRbacPrincipal": {
            "properties": {
                "andPrincipals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal:AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "andPrincipals"
            ]
        },
        "yandex:index/AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal:AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal": {
            "properties": {
                "any": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "header": {
                    "$ref": "#/types/yandex:index/AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeader:AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeader",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeader:AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the HTTP Router. Provided by the client when the HTTP Router is created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "$ref": "#/types/yandex:index/AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeaderValue:AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeaderValue",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeaderValue:AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeaderValue": {
            "properties": {
                "exact": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbHttpRouterTimeouts:AlbHttpRouterTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/AlbLoadBalancerAllocationPolicy:AlbLoadBalancerAllocationPolicy": {
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbLoadBalancerAllocationPolicyLocation:AlbLoadBalancerAllocationPolicyLocation"
                    },
                    "description": "Unique set of locations. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "locations"
            ]
        },
        "yandex:index/AlbLoadBalancerAllocationPolicyLocation:AlbLoadBalancerAllocationPolicyLocation": {
            "properties": {
                "disableTraffic": {
                    "type": "boolean",
                    "description": "If set, will disable all L7 instances in the zone for request handling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "Provided by the client or computed automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "ID of the zone that location is located at.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnetId",
                "zoneId"
            ]
        },
        "yandex:index/AlbLoadBalancerListener:AlbLoadBalancerListener": {
            "properties": {
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbLoadBalancerListenerEndpoint:AlbLoadBalancerListenerEndpoint"
                    },
                    "description": "Network endpoints (addresses and ports) of the listener. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerHttp:AlbLoadBalancerListenerHttp",
                    "description": "HTTP listener resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "name of SNI match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stream": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerStream:AlbLoadBalancerListenerStream",
                    "description": "Stream listener resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerTls:AlbLoadBalancerListenerTls",
                    "description": "TLS listener resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/AlbLoadBalancerListenerEndpoint:AlbLoadBalancerListenerEndpoint": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbLoadBalancerListenerEndpointAddress:AlbLoadBalancerListenerEndpointAddress"
                    },
                    "description": "Provided by the client or computed automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "One or more ports to listen on.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ports"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addresses",
                        "ports"
                    ]
                }
            }
        },
        "yandex:index/AlbLoadBalancerListenerEndpointAddress:AlbLoadBalancerListenerEndpointAddress": {
            "properties": {
                "externalIpv4Address": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerEndpointAddressExternalIpv4Address:AlbLoadBalancerListenerEndpointAddressExternalIpv4Address",
                    "description": "External IPv4 address. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalIpv6Address": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerEndpointAddressExternalIpv6Address:AlbLoadBalancerListenerEndpointAddressExternalIpv6Address",
                    "description": "External IPv6 address. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalIpv4Address": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerEndpointAddressInternalIpv4Address:AlbLoadBalancerListenerEndpointAddressInternalIpv4Address",
                    "description": "Internal IPv4 address. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalIpv4Address",
                        "externalIpv6Address",
                        "internalIpv4Address"
                    ]
                }
            }
        },
        "yandex:index/AlbLoadBalancerListenerEndpointAddressExternalIpv4Address:AlbLoadBalancerListenerEndpointAddressExternalIpv4Address": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Provided by the client or computed automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address"
                    ]
                }
            }
        },
        "yandex:index/AlbLoadBalancerListenerEndpointAddressExternalIpv6Address:AlbLoadBalancerListenerEndpointAddressExternalIpv6Address": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Provided by the client or computed automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address"
                    ]
                }
            }
        },
        "yandex:index/AlbLoadBalancerListenerEndpointAddressInternalIpv4Address:AlbLoadBalancerListenerEndpointAddressInternalIpv4Address": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Provided by the client or computed automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "Provided by the client or computed automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "subnetId"
                    ]
                }
            }
        },
        "yandex:index/AlbLoadBalancerListenerHttp:AlbLoadBalancerListenerHttp": {
            "properties": {
                "handler": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerHttpHandler:AlbLoadBalancerListenerHttpHandler",
                    "description": "HTTP handler that sets plaintext HTTP router. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirects": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerHttpRedirects:AlbLoadBalancerListenerHttpRedirects",
                    "description": "Shortcut for adding http \u003e https redirects. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbLoadBalancerListenerHttpHandler:AlbLoadBalancerListenerHttpHandler": {
            "properties": {
                "allowHttp10": {
                    "type": "boolean",
                    "description": "If set, will enable only HTTP1 protocol with HTTP1.0 support.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2Options": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerHttpHandlerHttp2Options:AlbLoadBalancerListenerHttpHandlerHttp2Options",
                    "description": "If set, will enable HTTP2 protocol for the handler. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpRouterId": {
                    "type": "string",
                    "description": "HTTP router id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbLoadBalancerListenerHttpHandlerHttp2Options:AlbLoadBalancerListenerHttpHandlerHttp2Options": {
            "properties": {
                "maxConcurrentStreams": {
                    "type": "number",
                    "description": "Maximum number of concurrent streams.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbLoadBalancerListenerHttpRedirects:AlbLoadBalancerListenerHttpRedirects": {
            "properties": {
                "httpToHttps": {
                    "type": "boolean",
                    "description": "If set redirects all unencrypted HTTP requests to the same URI with scheme changed to `https`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbLoadBalancerListenerStream:AlbLoadBalancerListenerStream": {
            "properties": {
                "handler": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerStreamHandler:AlbLoadBalancerListenerStreamHandler",
                    "description": "HTTP handler that sets plaintext HTTP router. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbLoadBalancerListenerStreamHandler:AlbLoadBalancerListenerStreamHandler": {
            "properties": {
                "backendGroupId": {
                    "type": "string",
                    "description": "Backend group id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbLoadBalancerListenerTls:AlbLoadBalancerListenerTls": {
            "properties": {
                "defaultHandler": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerTlsDefaultHandler:AlbLoadBalancerListenerTlsDefaultHandler",
                    "description": "TLS handler resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sniHandlers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbLoadBalancerListenerTlsSniHandler:AlbLoadBalancerListenerTlsSniHandler"
                    },
                    "description": "SNI match resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultHandler"
            ]
        },
        "yandex:index/AlbLoadBalancerListenerTlsDefaultHandler:AlbLoadBalancerListenerTlsDefaultHandler": {
            "properties": {
                "certificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Certificate IDs in the Certificate Manager. Multiple TLS certificates can be associated\nwith the same context to allow both RSA and ECDSA certificates. Only the first certificate of each type will be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpHandler": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler:AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler",
                    "description": "HTTP handler resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "streamHandler": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler:AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler",
                    "description": "Stream handler resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificateIds"
            ]
        },
        "yandex:index/AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler:AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler": {
            "properties": {
                "allowHttp10": {
                    "type": "boolean",
                    "description": "If set, will enable only HTTP1 protocol with HTTP1.0 support.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2Options": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options:AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options",
                    "description": "If set, will enable HTTP2 protocol for the handler. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpRouterId": {
                    "type": "string",
                    "description": "HTTP router id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options:AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options": {
            "properties": {
                "maxConcurrentStreams": {
                    "type": "number",
                    "description": "Maximum number of concurrent streams.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler:AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler": {
            "properties": {
                "backendGroupId": {
                    "type": "string",
                    "description": "Backend group id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbLoadBalancerListenerTlsSniHandler:AlbLoadBalancerListenerTlsSniHandler": {
            "properties": {
                "handler": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerTlsSniHandlerHandler:AlbLoadBalancerListenerTlsSniHandlerHandler",
                    "description": "HTTP handler that sets plaintext HTTP router. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "name of SNI match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of server names.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "handler",
                "name",
                "serverNames"
            ]
        },
        "yandex:index/AlbLoadBalancerListenerTlsSniHandlerHandler:AlbLoadBalancerListenerTlsSniHandlerHandler": {
            "properties": {
                "certificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Certificate IDs in the Certificate Manager. Multiple TLS certificates can be associated\nwith the same context to allow both RSA and ECDSA certificates. Only the first certificate of each type will be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpHandler": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler:AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler",
                    "description": "HTTP handler resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "streamHandler": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler:AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler",
                    "description": "Stream handler resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificateIds"
            ]
        },
        "yandex:index/AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler:AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler": {
            "properties": {
                "allowHttp10": {
                    "type": "boolean",
                    "description": "If set, will enable only HTTP1 protocol with HTTP1.0 support.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2Options": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options:AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options",
                    "description": "If set, will enable HTTP2 protocol for the handler. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpRouterId": {
                    "type": "string",
                    "description": "HTTP router id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options:AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options": {
            "properties": {
                "maxConcurrentStreams": {
                    "type": "number",
                    "description": "Maximum number of concurrent streams.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler:AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler": {
            "properties": {
                "backendGroupId": {
                    "type": "string",
                    "description": "Backend group id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbLoadBalancerTimeouts:AlbLoadBalancerTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/AlbTargetGroupTarget:AlbTargetGroupTarget": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "description": "IP address of the target.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIpv4Address": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the subnet that targets are connected to.\nAll targets in the target group must be connected to the same subnet within a single availability zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress"
            ]
        },
        "yandex:index/AlbTargetGroupTimeouts:AlbTargetGroupTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostModifyRequestHeader:AlbVirtualHostModifyRequestHeader": {
            "properties": {
                "append": {
                    "type": "string",
                    "description": "Append string to the header value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "name of the route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remove": {
                    "type": "boolean",
                    "description": "If set, remove the header.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replace": {
                    "type": "string",
                    "description": "New value for a header. Header values support the following \n[formatters](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers#custom-request-response-headers).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/AlbVirtualHostModifyResponseHeader:AlbVirtualHostModifyResponseHeader": {
            "properties": {
                "append": {
                    "type": "string",
                    "description": "Append string to the header value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "name of the route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remove": {
                    "type": "boolean",
                    "description": "If set, remove the header.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replace": {
                    "type": "string",
                    "description": "New value for a header. Header values support the following \n[formatters](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers#custom-request-response-headers).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/AlbVirtualHostRoute:AlbVirtualHostRoute": {
            "properties": {
                "grpcRoute": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteGrpcRoute:AlbVirtualHostRouteGrpcRoute",
                    "description": "GRPC route resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpRoute": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteHttpRoute:AlbVirtualHostRouteHttpRoute",
                    "description": "HTTP route resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "name of the route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeOptions": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteRouteOptions:AlbVirtualHostRouteRouteOptions",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteGrpcRoute:AlbVirtualHostRouteGrpcRoute": {
            "properties": {
                "grpcMatches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbVirtualHostRouteGrpcRouteGrpcMatch:AlbVirtualHostRouteGrpcRouteGrpcMatch"
                    },
                    "description": "Checks \"/\" prefix by default. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "grpcRouteAction": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteGrpcRouteGrpcRouteAction:AlbVirtualHostRouteGrpcRouteGrpcRouteAction",
                    "description": "GRPC route action resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "grpcStatusResponseAction": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction:AlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction",
                    "description": "GRPC status response action resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteGrpcRouteGrpcMatch:AlbVirtualHostRouteGrpcRouteGrpcMatch": {
            "properties": {
                "fqmn": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteGrpcRouteGrpcMatchFqmn:AlbVirtualHostRouteGrpcRouteGrpcMatchFqmn",
                    "description": "If not set, all services/methods are assumed. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteGrpcRouteGrpcMatchFqmn:AlbVirtualHostRouteGrpcRouteGrpcMatchFqmn": {
            "properties": {
                "exact": {
                    "type": "string",
                    "description": "Match exactly.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "description": "Match prefix.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteGrpcRouteGrpcRouteAction:AlbVirtualHostRouteGrpcRouteGrpcRouteAction": {
            "properties": {
                "autoHostRewrite": {
                    "type": "boolean",
                    "description": "If set, will automatically rewrite host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backendGroupId": {
                    "type": "string",
                    "description": "Backend group to route requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostRewrite": {
                    "type": "string",
                    "description": "Host rewrite specifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idleTimeout": {
                    "type": "string",
                    "description": "Specifies the idle timeout (time without any data transfer for the active request) for the\nroute. It is useful for streaming scenarios - one should set idle_timeout to something meaningful and max_timeout\nto the maximum time the stream is allowed to be alive. If not specified, there is no\nper-route idle timeout.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxTimeout": {
                    "type": "string",
                    "description": "Lower timeout may be specified by the client (using grpc-timeout header). If not set, default is \n60 seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backendGroupId"
            ]
        },
        "yandex:index/AlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction:AlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction": {
            "properties": {
                "status": {
                    "type": "string",
                    "description": "The status of the response. Supported values are: ok, invalid_argumet, not_found, \npermission_denied, unauthenticated, unimplemented, internal, unavailable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteHttpRoute:AlbVirtualHostRouteHttpRoute": {
            "properties": {
                "directResponseAction": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteHttpRouteDirectResponseAction:AlbVirtualHostRouteHttpRouteDirectResponseAction",
                    "description": "Direct response action resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpMatches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbVirtualHostRouteHttpRouteHttpMatch:AlbVirtualHostRouteHttpRouteHttpMatch"
                    },
                    "description": "Checks \"/\" prefix by default. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpRouteAction": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteHttpRouteHttpRouteAction:AlbVirtualHostRouteHttpRouteHttpRouteAction",
                    "description": "HTTP route action resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectAction": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteHttpRouteRedirectAction:AlbVirtualHostRouteHttpRouteRedirectAction",
                    "description": "Redirect action resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteHttpRouteDirectResponseAction:AlbVirtualHostRouteHttpRouteDirectResponseAction": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "Response body text.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "number",
                    "description": "The status of the response. Supported values are: ok, invalid_argumet, not_found, \npermission_denied, unauthenticated, unimplemented, internal, unavailable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteHttpRouteHttpMatch:AlbVirtualHostRouteHttpRouteHttpMatch": {
            "properties": {
                "httpMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of methods(strings).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteHttpRouteHttpMatchPath:AlbVirtualHostRouteHttpRouteHttpMatchPath",
                    "description": "If not set, '/' is assumed. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteHttpRouteHttpMatchPath:AlbVirtualHostRouteHttpRouteHttpMatchPath": {
            "properties": {
                "exact": {
                    "type": "string",
                    "description": "Match exactly.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "description": "Match prefix.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteHttpRouteHttpRouteAction:AlbVirtualHostRouteHttpRouteHttpRouteAction": {
            "properties": {
                "autoHostRewrite": {
                    "type": "boolean",
                    "description": "If set, will automatically rewrite host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backendGroupId": {
                    "type": "string",
                    "description": "Backend group to route requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostRewrite": {
                    "type": "string",
                    "description": "Host rewrite specifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idleTimeout": {
                    "type": "string",
                    "description": "Specifies the idle timeout (time without any data transfer for the active request) for the\nroute. It is useful for streaming scenarios - one should set idle_timeout to something meaningful and max_timeout\nto the maximum time the stream is allowed to be alive. If not specified, there is no\nper-route idle timeout.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixRewrite": {
                    "type": "string",
                    "description": "If not empty, matched path prefix will be replaced by this value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "description": "Specifies the request timeout (overall time request processing is allowed to take) for the \nroute. If not set, default is 60 seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upgradeTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of upgrade types. Only specified upgrade types will be allowed. For example, \n\"websocket\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backendGroupId"
            ]
        },
        "yandex:index/AlbVirtualHostRouteHttpRouteRedirectAction:AlbVirtualHostRouteHttpRouteRedirectAction": {
            "properties": {
                "removeQuery": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replaceHost": {
                    "type": "string",
                    "description": "Replaces hostname.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replacePath": {
                    "type": "string",
                    "description": "Replace path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replacePort": {
                    "type": "number",
                    "description": "Replaces port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replacePrefix": {
                    "type": "string",
                    "description": "Replace only matched prefix. Example:\u003cbr/\u003e match:{ prefix_match: \"/some\" } \u003cbr/\u003e \nredirect: { replace_prefix: \"/other\" } \u003cbr/\u003e will redirect \"/something\" to \"/otherthing\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replaceScheme": {
                    "type": "string",
                    "description": "Replaces scheme. If the original scheme is `http` or `https`, will also remove the \n80 or 443 port, if present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "responseCode": {
                    "type": "string",
                    "description": "The HTTP status code to use in the redirect response. Supported values are: \nmoved_permanently, found, see_other, temporary_redirect, permanent_redirect.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteOptions:AlbVirtualHostRouteOptions": {
            "properties": {
                "rbac": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteOptionsRbac:AlbVirtualHostRouteOptionsRbac",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteOptionsRbac:AlbVirtualHostRouteOptionsRbac": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbVirtualHostRouteOptionsRbacPrincipal:AlbVirtualHostRouteOptionsRbacPrincipal"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "principals"
            ]
        },
        "yandex:index/AlbVirtualHostRouteOptionsRbacPrincipal:AlbVirtualHostRouteOptionsRbacPrincipal": {
            "properties": {
                "andPrincipals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal:AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "andPrincipals"
            ]
        },
        "yandex:index/AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal:AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal": {
            "properties": {
                "any": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "header": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeader:AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeader",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeader:AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of the route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeaderValue:AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeaderValue",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeaderValue:AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeaderValue": {
            "properties": {
                "exact": {
                    "type": "string",
                    "description": "Match exactly.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "description": "Match prefix.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteRouteOptions:AlbVirtualHostRouteRouteOptions": {
            "properties": {
                "rbac": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteRouteOptionsRbac:AlbVirtualHostRouteRouteOptionsRbac",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteRouteOptionsRbac:AlbVirtualHostRouteRouteOptionsRbac": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbVirtualHostRouteRouteOptionsRbacPrincipal:AlbVirtualHostRouteRouteOptionsRbacPrincipal"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "principals"
            ]
        },
        "yandex:index/AlbVirtualHostRouteRouteOptionsRbacPrincipal:AlbVirtualHostRouteRouteOptionsRbacPrincipal": {
            "properties": {
                "andPrincipals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal:AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "andPrincipals"
            ]
        },
        "yandex:index/AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal:AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal": {
            "properties": {
                "any": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "header": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeader:AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeader",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeader:AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of the route.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeaderValue:AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeaderValue",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeaderValue:AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeaderValue": {
            "properties": {
                "exact": {
                    "type": "string",
                    "description": "Match exactly.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "description": "Match prefix.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/AlbVirtualHostTimeouts:AlbVirtualHostTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/ApiGatewayTimeouts:ApiGatewayTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/CdnOriginGroupOrigin:CdnOriginGroupOrigin": {
            "properties": {
                "backup": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "originGroupId": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "source"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "originGroupId",
                        "source"
                    ]
                }
            }
        },
        "yandex:index/CdnOriginGroupTimeouts:CdnOriginGroupTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/CdnResourceOptions:CdnResourceOptions": {
            "properties": {
                "allowedHttpMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "HTTP methods for your CDN content. By default the following methods are allowed: GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS. In case some methods are not allowed to the user, they will get the 405 (Method Not Allowed) response. If the method is not supported, the user gets the 501 (Not Implemented) response.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "browserCacheSettings": {
                    "type": "number",
                    "description": "set up a cache period for the end-users browser. Content will be cached due to origin settings. If there are no cache settings on your origin, the content will not be cached. The list of HTTP response codes that can be cached in browsers: 200, 201, 204, 206, 301, 302, 303, 304, 307, 308. Other response codes will not be cached. The default value is 4 days.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cacheHttpHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list HTTP headers that must be included in responses to clients.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "parameter that lets browsers get access to selected resources from a domain different to a domain from which the request is received.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customHostHeader": {
                    "type": "string",
                    "description": "custom value for the Host header. Your server must be able to process requests with the chosen header.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customServerName": {
                    "type": "string",
                    "description": "wildcard additional CNAME. If a resource has a wildcard additional CNAME, you can use your own certificate for content delivery via HTTPS. Read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableCache": {
                    "type": "boolean",
                    "description": "setup a cache status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableProxyForceRanges": {
                    "type": "boolean",
                    "description": "disabling proxy force ranges.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "edgeCacheSettings": {
                    "type": "number",
                    "description": "content will be cached according to origin cache settings. The value applies for a response with codes 200, 201, 204, 206, 301, 302, 303, 304, 307, 308 if an origin server does not have caching HTTP headers. Responses with other codes will not be cached.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchedCompressed": {
                    "type": "boolean",
                    "description": "option helps you to reduce the bandwidth between origin and CDN servers. Also, content delivery speed becomes higher because of reducing the time for compressing files in a CDN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forwardHostHeader": {
                    "type": "boolean",
                    "description": "choose the Forward Host header option if is important to send in the request to the Origin the same Host header as was sent in the request to CDN server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gzipOn": {
                    "type": "boolean",
                    "description": "GZip compression at CDN servers reduces file size by 70% and can be as high as 90%.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreCookie": {
                    "type": "boolean",
                    "description": "set for ignoring cookie.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreQueryParams": {
                    "type": "boolean",
                    "description": "files with different query parameters are cached as objects with the same key regardless of the parameter value. selected by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proxyCacheMethodsSet": {
                    "type": "boolean",
                    "description": "allows caching for GET, HEAD and POST requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryParamsBlacklists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "files with the specified query parameters are cached as objects with the same key, files with other parameters are cached as objects with different keys.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryParamsWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "files with the specified query parameters are cached as objects with different keys, files with other parameters are cached as objects with the same key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectHttpToHttps": {
                    "type": "boolean",
                    "description": "set up a redirect from HTTP to HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectHttpsToHttp": {
                    "type": "boolean",
                    "description": "set up a redirect from HTTPS to HTTP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slice": {
                    "type": "boolean",
                    "description": "files larger than 10 MB will be requested and cached in parts (no larger than 10 MB each part). It reduces time to first byte. The origin must support HTTP Range requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "staticRequestHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "set up custom headers that CDN servers send in requests to origins.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "staticResponseHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedHttpMethods",
                        "browserCacheSettings",
                        "cacheHttpHeaders",
                        "cors",
                        "customHostHeader",
                        "customServerName",
                        "disableCache",
                        "disableProxyForceRanges",
                        "edgeCacheSettings",
                        "fetchedCompressed",
                        "forwardHostHeader",
                        "gzipOn",
                        "ignoreCookie",
                        "ignoreQueryParams",
                        "proxyCacheMethodsSet",
                        "queryParamsBlacklists",
                        "queryParamsWhitelists",
                        "redirectHttpToHttps",
                        "redirectHttpsToHttp",
                        "slice",
                        "staticRequestHeaders",
                        "staticResponseHeaders"
                    ]
                }
            }
        },
        "yandex:index/CdnResourceSslCertificate:CdnResourceSslCertificate": {
            "properties": {
                "certificateManagerId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "status",
                        "type"
                    ]
                }
            }
        },
        "yandex:index/CdnResourceTimeouts:CdnResourceTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/ComputeDiskDiskPlacementPolicy:ComputeDiskDiskPlacementPolicy": {
            "properties": {
                "diskPlacementGroupId": {
                    "type": "string",
                    "description": "Specifies Disk Placement Group id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskPlacementGroupId"
            ]
        },
        "yandex:index/ComputeDiskPlacementGroupTimeouts:ComputeDiskPlacementGroupTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/ComputeDiskTimeouts:ComputeDiskTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/ComputeImageTimeouts:ComputeImageTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/ComputeInstanceBootDisk:ComputeInstanceBootDisk": {
            "properties": {
                "autoDelete": {
                    "type": "boolean",
                    "description": "Whether the disk is auto-deleted when the instance\nis deleted. The default value is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceName": {
                    "type": "string",
                    "description": "Name that can be used to access an attached disk\nunder `/dev/disk/by-id/`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskId": {
                    "type": "string",
                    "description": "ID of the disk that is attached to the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initializeParams": {
                    "$ref": "#/types/yandex:index/ComputeInstanceBootDiskInitializeParams:ComputeInstanceBootDiskInitializeParams",
                    "description": "Parameters for a new disk that will be created\nalongside the new instance. Either `initialize_params` or `disk_id` must be set. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "Type of access to the disk resource. By default, a disk is attached in `READ_WRITE` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deviceName",
                        "diskId",
                        "mode"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceBootDiskInitializeParams:ComputeInstanceBootDiskInitializeParams": {
            "properties": {
                "blockSize": {
                    "type": "number",
                    "description": "Block size of the disk, specified in bytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Description of the boot disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "A disk image to initialize this disk from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the boot disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "number",
                    "description": "Size of the disk in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotId": {
                    "type": "string",
                    "description": "A snapshot to initialize this disk from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Disk type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "blockSize",
                        "description",
                        "imageId",
                        "name",
                        "size",
                        "snapshotId"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceGroupAllocationPolicy:ComputeInstanceGroupAllocationPolicy": {
            "properties": {
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of availability zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "zones"
            ]
        },
        "yandex:index/ComputeInstanceGroupApplicationLoadBalancer:ComputeInstanceGroupApplicationLoadBalancer": {
            "properties": {
                "maxOpeningTrafficDuration": {
                    "type": "number",
                    "description": "Timeout for waiting for the VM to be checked by the load balancer. If the timeout is exceeded, the VM will be turned off based on the deployment policy. Specified in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusMessage": {
                    "type": "string",
                    "description": "The status message of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupDescription": {
                    "type": "string",
                    "description": "A description of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupName": {
                    "type": "string",
                    "description": "The name of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "statusMessage",
                        "targetGroupId"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceGroupDeployPolicy:ComputeInstanceGroupDeployPolicy": {
            "properties": {
                "maxCreating": {
                    "type": "number",
                    "description": "The maximum number of instances that can be created at the same time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxDeleting": {
                    "type": "number",
                    "description": "The maximum number of instances that can be deleted at the same time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxExpansion": {
                    "type": "number",
                    "description": "The maximum number of instances that can be temporarily allocated above the group's target size\nduring the update process.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailable": {
                    "type": "number",
                    "description": "The maximum number of running instances that can be taken offline (stopped or deleted) at the same time\nduring the update process.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startupDuration": {
                    "type": "number",
                    "description": "The amount of time in seconds to allow for an instance to start.\nInstance will be considered up and running (and start receiving traffic) only after the startup_duration\nhas elapsed and all health checks are passed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "description": "Affects the lifecycle of the instance during deployment. If set to `proactive` (default), Instance Groups\ncan forcefully stop a running instance. If `opportunistic`, Instance Groups does not stop a running instance. Instead,\nit will wait until the instance stops itself or becomes unhealthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxExpansion",
                "maxUnavailable"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "maxExpansion",
                        "maxUnavailable",
                        "strategy"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceGroupHealthCheck:ComputeInstanceGroupHealthCheck": {
            "properties": {
                "healthyThreshold": {
                    "type": "number",
                    "description": "The number of successful health checks before the managed instance is declared healthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupHealthCheckHttpOption:ComputeInstanceGroupHealthCheckHttpOption"
                    },
                    "description": "HTTP check options. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "number",
                    "description": "The interval to wait between health checks in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpOptions": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupHealthCheckTcpOptions:ComputeInstanceGroupHealthCheckTcpOptions",
                    "description": "TCP check options. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "number",
                    "description": "The length of time to wait for a response before the health check times out in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unhealthyThreshold": {
                    "type": "number",
                    "description": "The number of failed health checks before the managed instance is declared unhealthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/ComputeInstanceGroupHealthCheckHttpOption:ComputeInstanceGroupHealthCheckHttpOption": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The URL path used for health check requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "The port used for TCP health checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "path",
                "port"
            ]
        },
        "yandex:index/ComputeInstanceGroupHealthCheckTcpOptions:ComputeInstanceGroupHealthCheckTcpOptions": {
            "properties": {
                "port": {
                    "type": "number",
                    "description": "The port used for TCP health checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "yandex:index/ComputeInstanceGroupInstance:ComputeInstanceGroupInstance": {
            "properties": {
                "fqdn": {
                    "type": "string",
                    "description": "DNS record fqdn (must have dot at the end).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name template of the instance.  \nIn order to be unique it must contain at least one of instance unique placeholders:\n{instance.short_id}\n{instance.index}\ncombination of {instance.zone_id} and {instance.index_in_zone}\nExample: my-instance-{instance.index}\nIf not set, default is used: {instance_group.id}-{instance.short_id}\nIt may also contain another placeholders, see metadata doc for full list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceNetworkInterface:ComputeInstanceGroupInstanceNetworkInterface"
                    },
                    "description": "Network specifications for the instance. This can be used multiple times for adding multiple interfaces. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusChangedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusMessage": {
                    "type": "string",
                    "description": "The status message of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The ID of the availability zone where the instance resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fqdn",
                "instanceId",
                "name",
                "networkInterfaces",
                "status",
                "statusChangedAt",
                "statusMessage",
                "zoneId"
            ]
        },
        "yandex:index/ComputeInstanceGroupInstanceNetworkInterface:ComputeInstanceGroupInstanceNetworkInterface": {
            "properties": {
                "index": {
                    "type": "number",
                    "description": "The index of the network interface as generated by the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Manual set static IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4": {
                    "type": "boolean",
                    "description": "True if IPv4 address allocated for the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "Manual set static IPv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address assigned to the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nat": {
                    "type": "boolean",
                    "description": "Flag for using NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natIpAddress": {
                    "type": "string",
                    "description": "A public address that can be used to access the internet over NAT. Use `variables` to set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natIpVersion": {
                    "type": "string",
                    "description": "The IP version for the public address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet to attach this interface to. The subnet must reside in the same zone where this instance was created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "index",
                "ipAddress",
                "ipv4",
                "ipv6",
                "ipv6Address",
                "macAddress",
                "nat",
                "natIpAddress",
                "natIpVersion",
                "subnetId"
            ]
        },
        "yandex:index/ComputeInstanceGroupInstanceTemplate:ComputeInstanceGroupInstanceTemplate": {
            "properties": {
                "bootDisk": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplateBootDisk:ComputeInstanceGroupInstanceTemplateBootDisk",
                    "description": "Boot disk specifications for the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A description of the boot disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname template for the instance.   \nThis field is used to generate the FQDN value of instance.\nThe hostname must be unique within the network and region.\nIf not specified, the hostname will be equal to id of the instance\nand FQDN will be `\u003cid\u003e.auto.internal`. Otherwise FQDN will be `\u003chostname\u003e.\u003cregion_id\u003e.internal`.\nIn order to be unique it must contain at least on of instance unique placeholders:\n{instance.short_id}\n{instance.index}\ncombination of {instance.zone_id} and {instance.index_in_zone}\nExample: my-instance-{instance.index}\nIf not set, `name` value will be used\nIt may also contain another placeholders, see metadata doc for full list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of labels of metric.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of metadata key/value pairs to make available from within the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name template of the instance.  \nIn order to be unique it must contain at least one of instance unique placeholders:\n{instance.short_id}\n{instance.index}\ncombination of {instance.zone_id} and {instance.index_in_zone}\nExample: my-instance-{instance.index}\nIf not set, default is used: {instance_group.id}-{instance.short_id}\nIt may also contain another placeholders, see metadata doc for full list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplateNetworkInterface:ComputeInstanceGroupInstanceTemplateNetworkInterface"
                    },
                    "description": "Network specifications for the instance. This can be used multiple times for adding multiple interfaces. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplateNetworkSetting:ComputeInstanceGroupInstanceTemplateNetworkSetting"
                    },
                    "description": "Network acceleration type for instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "placementPolicy": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplatePlacementPolicy:ComputeInstanceGroupInstanceTemplatePlacementPolicy",
                    "description": "The placement policy configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "platformId": {
                    "type": "string",
                    "description": "The ID of the hardware platform configuration for the instance. The default is 'standard-v1'.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplateResources:ComputeInstanceGroupInstanceTemplateResources",
                    "description": "Compute resource specifications for the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schedulingPolicy": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplateSchedulingPolicy:ComputeInstanceGroupInstanceTemplateSchedulingPolicy",
                    "description": "The scheduling policy configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secondaryDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplateSecondaryDisk:ComputeInstanceGroupInstanceTemplateSecondaryDisk"
                    },
                    "description": "A list of disks to attach to the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "The ID of the service account authorized for this instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bootDisk",
                "networkInterfaces",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bootDisk",
                        "labels",
                        "metadata",
                        "networkInterfaces",
                        "resources"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceGroupInstanceTemplateBootDisk:ComputeInstanceGroupInstanceTemplateBootDisk": {
            "properties": {
                "deviceName": {
                    "type": "string",
                    "description": "This value can be used to reference the device under `/dev/disk/by-id/`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskId": {
                    "type": "string",
                    "description": "ID of the existing disk. To set use variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initializeParams": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams:ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams",
                    "description": "Parameters for creating a disk alongside the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "The access mode to the disk resource. By default a disk is attached in `READ_WRITE` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deviceName"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams:ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description of the boot disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The disk image to initialize this disk from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "number",
                    "description": "The number of instances in the instance group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotId": {
                    "type": "string",
                    "description": "The snapshot to initialize this disk from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Network acceleration type. By default a network is in `STANDARD` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "imageId",
                        "size",
                        "snapshotId"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceGroupInstanceTemplateNetworkInterface:ComputeInstanceGroupInstanceTemplateNetworkInterface": {
            "properties": {
                "dnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord:ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord"
                    },
                    "description": "List of dns records.  The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Manual set static IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4": {
                    "type": "boolean",
                    "description": "True if IPv4 address allocated for the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "Manual set static IPv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6DnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord:ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord"
                    },
                    "description": "List of ipv6 dns records.  The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nat": {
                    "type": "boolean",
                    "description": "Flag for using NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natDnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord:ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord"
                    },
                    "description": "List of nat dns records.  The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natIpAddress": {
                    "type": "string",
                    "description": "A public address that can be used to access the internet over NAT. Use `variables` to set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkId": {
                    "type": "string",
                    "description": "The ID of the network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Security group ids for network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The ID of the subnets to attach this interface to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipAddress",
                        "ipv6",
                        "ipv6Address",
                        "nat"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord:ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone id (if not set, private zone used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "DNS record fqdn (must have dot at the end).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create PTR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fqdn"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fqdn",
                        "ptr"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord:ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone id (if not set, private zone used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "DNS record fqdn (must have dot at the end).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create PTR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fqdn"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fqdn",
                        "ptr"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord:ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone id (if not set, private zone used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "DNS record fqdn (must have dot at the end).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create PTR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fqdn"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fqdn",
                        "ptr"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceGroupInstanceTemplateNetworkSetting:ComputeInstanceGroupInstanceTemplateNetworkSetting": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Network acceleration type. By default a network is in `STANDARD` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/ComputeInstanceGroupInstanceTemplatePlacementPolicy:ComputeInstanceGroupInstanceTemplatePlacementPolicy": {
            "properties": {
                "placementGroupId": {
                    "type": "string",
                    "description": "Specifies the id of the Placement Group to assign to the instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "placementGroupId"
            ]
        },
        "yandex:index/ComputeInstanceGroupInstanceTemplateResources:ComputeInstanceGroupInstanceTemplateResources": {
            "properties": {
                "coreFraction": {
                    "type": "number",
                    "description": "If provided, specifies baseline core performance as a percent.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cores": {
                    "type": "number",
                    "description": "The number of CPU cores for the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gpus": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "number",
                    "description": "The memory size in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cores",
                "memory"
            ]
        },
        "yandex:index/ComputeInstanceGroupInstanceTemplateSchedulingPolicy:ComputeInstanceGroupInstanceTemplateSchedulingPolicy": {
            "properties": {
                "preemptible": {
                    "type": "boolean",
                    "description": "Specifies if the instance is preemptible. Defaults to false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/ComputeInstanceGroupInstanceTemplateSecondaryDisk:ComputeInstanceGroupInstanceTemplateSecondaryDisk": {
            "properties": {
                "deviceName": {
                    "type": "string",
                    "description": "This value can be used to reference the device under `/dev/disk/by-id/`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskId": {
                    "type": "string",
                    "description": "ID of the existing disk. To set use variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initializeParams": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams:ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams",
                    "description": "Parameters for creating a disk alongside the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "The access mode to the disk resource. By default a disk is attached in `READ_WRITE` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams:ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description of the boot disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The disk image to initialize this disk from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "number",
                    "description": "The number of instances in the instance group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotId": {
                    "type": "string",
                    "description": "The snapshot to initialize this disk from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Network acceleration type. By default a network is in `STANDARD` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/ComputeInstanceGroupLoadBalancer:ComputeInstanceGroupLoadBalancer": {
            "properties": {
                "maxOpeningTrafficDuration": {
                    "type": "number",
                    "description": "Timeout for waiting for the VM to be checked by the load balancer. If the timeout is exceeded, the VM will be turned off based on the deployment policy. Specified in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusMessage": {
                    "type": "string",
                    "description": "The status message of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupDescription": {
                    "type": "string",
                    "description": "A description of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupName": {
                    "type": "string",
                    "description": "The name of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "statusMessage",
                        "targetGroupId"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceGroupScalePolicy:ComputeInstanceGroupScalePolicy": {
            "properties": {
                "autoScale": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupScalePolicyAutoScale:ComputeInstanceGroupScalePolicyAutoScale",
                    "description": "The auto scaling policy of the instance group. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedScale": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupScalePolicyFixedScale:ComputeInstanceGroupScalePolicyFixedScale",
                    "description": "The fixed scaling policy of the instance group. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "testAutoScale": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupScalePolicyTestAutoScale:ComputeInstanceGroupScalePolicyTestAutoScale",
                    "description": "The test auto scaling policy of the instance group. Use it to test how the auto scale works. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/ComputeInstanceGroupScalePolicyAutoScale:ComputeInstanceGroupScalePolicyAutoScale": {
            "properties": {
                "cpuUtilizationTarget": {
                    "type": "number",
                    "description": "Target CPU load level.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupScalePolicyAutoScaleCustomRule:ComputeInstanceGroupScalePolicyAutoScaleCustomRule"
                    },
                    "description": "A list of custom rules. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initialSize": {
                    "type": "number",
                    "description": "The initial number of instances in the instance group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "number",
                    "description": "The maximum number of virtual machines in the group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "measurementDuration": {
                    "type": "number",
                    "description": "The amount of time, in seconds, that metrics are averaged for.\nIf the average value at the end of the interval is higher than the `cpu_utilization_target`,\nthe instance group will increase the number of virtual machines in the group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minZoneSize": {
                    "type": "number",
                    "description": "The minimum number of virtual machines in a single availability zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stabilizationDuration": {
                    "type": "number",
                    "description": "The minimum time interval, in seconds, to monitor the load before\nan instance group can reduce the number of virtual machines in the group. During this time, the group\nwill not decrease even if the average load falls below the value of `cpu_utilization_target`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "warmupDuration": {
                    "type": "number",
                    "description": "The warm-up time of the virtual machine, in seconds. During this time,\ntraffic is fed to the virtual machine, but load metrics are not taken into account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "initialSize",
                "measurementDuration"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "initialSize",
                        "measurementDuration",
                        "stabilizationDuration",
                        "warmupDuration"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceGroupScalePolicyAutoScaleCustomRule:ComputeInstanceGroupScalePolicyAutoScaleCustomRule": {
            "properties": {
                "folderId": {
                    "type": "string",
                    "description": "Folder ID of custom metric in Yandex Monitoring that should be used for scaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of labels of metric.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricName": {
                    "type": "string",
                    "description": "The name of metric.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricType": {
                    "type": "string",
                    "description": "Metric type, `GAUGE` or `COUNTER`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ruleType": {
                    "type": "string",
                    "description": "Rule type: `UTILIZATION` - This type means that the metric applies to one instance.\nFirst, Instance Groups calculates the average metric value for each instance,\nthen averages the values for instances in one availability zone.\nThis type of metric must have the `instance_id` label. `WORKLOAD` - This type means that the metric applies to instances in one availability zone.\nThis type of metric must have the `zone_id` label.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "string",
                    "description": "Service of custom metric in Yandex Monitoring that should be used for scaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "number",
                    "description": "Target metric value level.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "metricName",
                "metricType",
                "ruleType",
                "target"
            ]
        },
        "yandex:index/ComputeInstanceGroupScalePolicyFixedScale:ComputeInstanceGroupScalePolicyFixedScale": {
            "properties": {
                "size": {
                    "type": "number",
                    "description": "The number of instances in the instance group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "size"
            ]
        },
        "yandex:index/ComputeInstanceGroupScalePolicyTestAutoScale:ComputeInstanceGroupScalePolicyTestAutoScale": {
            "properties": {
                "cpuUtilizationTarget": {
                    "type": "number",
                    "description": "Target CPU load level.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule:ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule"
                    },
                    "description": "A list of custom rules. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initialSize": {
                    "type": "number",
                    "description": "The initial number of instances in the instance group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "number",
                    "description": "The maximum number of virtual machines in the group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "measurementDuration": {
                    "type": "number",
                    "description": "The amount of time, in seconds, that metrics are averaged for.\nIf the average value at the end of the interval is higher than the `cpu_utilization_target`,\nthe instance group will increase the number of virtual machines in the group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minZoneSize": {
                    "type": "number",
                    "description": "The minimum number of virtual machines in a single availability zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stabilizationDuration": {
                    "type": "number",
                    "description": "The minimum time interval, in seconds, to monitor the load before\nan instance group can reduce the number of virtual machines in the group. During this time, the group\nwill not decrease even if the average load falls below the value of `cpu_utilization_target`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "warmupDuration": {
                    "type": "number",
                    "description": "The warm-up time of the virtual machine, in seconds. During this time,\ntraffic is fed to the virtual machine, but load metrics are not taken into account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "initialSize",
                "measurementDuration"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "initialSize",
                        "measurementDuration",
                        "stabilizationDuration",
                        "warmupDuration"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule:ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule": {
            "properties": {
                "folderId": {
                    "type": "string",
                    "description": "Folder ID of custom metric in Yandex Monitoring that should be used for scaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of labels of metric.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricName": {
                    "type": "string",
                    "description": "The name of metric.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricType": {
                    "type": "string",
                    "description": "Metric type, `GAUGE` or `COUNTER`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ruleType": {
                    "type": "string",
                    "description": "Rule type: `UTILIZATION` - This type means that the metric applies to one instance.\nFirst, Instance Groups calculates the average metric value for each instance,\nthen averages the values for instances in one availability zone.\nThis type of metric must have the `instance_id` label. `WORKLOAD` - This type means that the metric applies to instances in one availability zone.\nThis type of metric must have the `zone_id` label.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "string",
                    "description": "Service of custom metric in Yandex Monitoring that should be used for scaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "number",
                    "description": "Target metric value level.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "metricName",
                "metricType",
                "ruleType",
                "target"
            ]
        },
        "yandex:index/ComputeInstanceGroupTimeouts:ComputeInstanceGroupTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/ComputeInstanceLocalDisk:ComputeInstanceLocalDisk": {
            "properties": {
                "deviceName": {
                    "type": "string",
                    "description": "Name that can be used to access an attached disk\nunder `/dev/disk/by-id/`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeBytes": {
                    "type": "number",
                    "description": "Size of the disk, specified in bytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sizeBytes"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deviceName",
                        "sizeBytes"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceNetworkInterface:ComputeInstanceNetworkInterface": {
            "properties": {
                "dnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceNetworkInterfaceDnsRecord:ComputeInstanceNetworkInterfaceDnsRecord"
                    },
                    "description": "List of configurations for creating ipv4 DNS records. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "index": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The private IP address to assign to the instance. If\nempty, the address will be automatically assigned from the specified subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4": {
                    "type": "boolean",
                    "description": "Allocate an IPv4 address for the interface. The default value is `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6": {
                    "type": "boolean",
                    "description": "If true, allocate an IPv6 address for the interface.\nThe address will be automatically assigned from the specified subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "The private IPv6 address to assign to the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6DnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceNetworkInterfaceIpv6DnsRecord:ComputeInstanceNetworkInterfaceIpv6DnsRecord"
                    },
                    "description": "List of configurations for creating ipv6 DNS records. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nat": {
                    "type": "boolean",
                    "description": "Provide a public address, for instance, to access the internet over NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natDnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceNetworkInterfaceNatDnsRecord:ComputeInstanceNetworkInterfaceNatDnsRecord"
                    },
                    "description": "List of configurations for creating ipv4 NAT DNS records. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natIpAddress": {
                    "type": "string",
                    "description": "Provide a public address, for instance, to access the internet over NAT. Address should be already reserved in web UI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natIpVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Security group ids for network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the subnet to attach this\ninterface to. The subnet must exist in the same zone where this instance will be\ncreated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "index",
                        "ipAddress",
                        "ipv6",
                        "ipv6Address",
                        "macAddress",
                        "nat",
                        "natIpAddress",
                        "natIpVersion",
                        "securityGroupIds",
                        "subnetId"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceNetworkInterfaceDnsRecord:ComputeInstanceNetworkInterfaceDnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone ID (if not set, private zone used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "DNS record FQDN (must have a dot at the end).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create a PTR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL. in seconds\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fqdn"
            ]
        },
        "yandex:index/ComputeInstanceNetworkInterfaceIpv6DnsRecord:ComputeInstanceNetworkInterfaceIpv6DnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone ID (if not set, private zone used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "DNS record FQDN (must have a dot at the end).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create a PTR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL. in seconds\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fqdn"
            ]
        },
        "yandex:index/ComputeInstanceNetworkInterfaceNatDnsRecord:ComputeInstanceNetworkInterfaceNatDnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone ID (if not set, private zone used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "DNS record FQDN (must have a dot at the end).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create a PTR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL. in seconds\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fqdn"
            ]
        },
        "yandex:index/ComputeInstancePlacementPolicy:ComputeInstancePlacementPolicy": {
            "properties": {
                "hostAffinityRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstancePlacementPolicyHostAffinityRule:ComputeInstancePlacementPolicyHostAffinityRule"
                    },
                    "description": "List of host affinity rules. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "Specifies the id of the Placement Group to assign to the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostAffinityRules"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstancePlacementPolicyHostAffinityRule:ComputeInstancePlacementPolicyHostAffinityRule": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Affinity label or one of reserved values - `yc.hostId`, `yc.hostGroupId`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "op": {
                    "type": "string",
                    "description": "Affinity action. The only value supported is `IN`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "op",
                "values"
            ]
        },
        "yandex:index/ComputeInstanceResources:ComputeInstanceResources": {
            "properties": {
                "coreFraction": {
                    "type": "number",
                    "description": "If provided, specifies baseline performance for a core as a percent.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cores": {
                    "type": "number",
                    "description": "CPU cores for the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gpus": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "number",
                    "description": "Memory size in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cores",
                "memory"
            ]
        },
        "yandex:index/ComputeInstanceSchedulingPolicy:ComputeInstanceSchedulingPolicy": {
            "properties": {
                "preemptible": {
                    "type": "boolean",
                    "description": "Specifies if the instance is preemptible. Defaults to false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/ComputeInstanceSecondaryDisk:ComputeInstanceSecondaryDisk": {
            "properties": {
                "autoDelete": {
                    "type": "boolean",
                    "description": "Whether the disk is auto-deleted when the instance\nis deleted. The default value is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceName": {
                    "type": "string",
                    "description": "Name that can be used to access an attached disk\nunder `/dev/disk/by-id/`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskId": {
                    "type": "string",
                    "description": "ID of the disk that is attached to the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "Type of access to the disk resource. By default, a disk is attached in `READ_WRITE` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "deviceName",
                        "diskId"
                    ]
                }
            }
        },
        "yandex:index/ComputeInstanceTimeouts:ComputeInstanceTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/ComputePlacementGroupTimeouts:ComputePlacementGroupTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/ComputeSnapshotTimeouts:ComputeSnapshotTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/ContainerRegistryTimeouts:ContainerRegistryTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/ContainerRepositoryLifecyclePolicyRule:ContainerRepositoryLifecyclePolicyRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the lifecycle policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirePeriod": {
                    "type": "string",
                    "description": "The period of time that must pass after creating a image for it to suit the automatic deletion criteria. It must be a multiple of 24 hours.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retainedTop": {
                    "type": "number",
                    "description": "The number of images to be retained even if the expire_period already expired.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagRegexp": {
                    "type": "string",
                    "description": "Tag to specify a filter as a regular expression. For example `.*` - all images with tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "untagged": {
                    "type": "boolean",
                    "description": "If enabled, rules apply to untagged Docker images.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "retainedTop",
                        "untagged"
                    ]
                }
            }
        },
        "yandex:index/ContainerRepositoryLifecyclePolicyTimeouts:ContainerRepositoryLifecyclePolicyTimeouts": {
            "properties": {
                "default": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/ContainerRepositoryTimeouts:ContainerRepositoryTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/DataprocClusterClusterConfig:DataprocClusterClusterConfig": {
            "properties": {
                "hadoop": {
                    "$ref": "#/types/yandex:index/DataprocClusterClusterConfigHadoop:DataprocClusterClusterConfigHadoop",
                    "description": "Data Proc specific options. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subclusterSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/DataprocClusterClusterConfigSubclusterSpec:DataprocClusterClusterConfigSubclusterSpec"
                    },
                    "description": "Configuration of the Data Proc subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionId": {
                    "type": "string",
                    "description": "Version of Data Proc image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subclusterSpecs"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "subclusterSpecs",
                        "versionId"
                    ]
                }
            }
        },
        "yandex:index/DataprocClusterClusterConfigHadoop:DataprocClusterClusterConfigHadoop": {
            "properties": {
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value pairs that are used to configure cluster services.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of services to run on Data Proc cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshPublicKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SSH public keys to put to the hosts of the cluster. For information on how to connect to the cluster, see [the official documentation](https://cloud.yandex.com/docs/data-proc/operations/connect).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/DataprocClusterClusterConfigSubclusterSpec:DataprocClusterClusterConfigSubclusterSpec": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "If true then assign public IP addresses to the hosts of the subclusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoscalingConfig": {
                    "$ref": "#/types/yandex:index/DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig:DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig",
                    "description": "Autoscaling configuration for compute subclusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostsCount": {
                    "type": "number",
                    "description": "Number of hosts within Data Proc subcluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "(Computed) ID of a new Data Proc cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Data Proc subcluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "$ref": "#/types/yandex:index/DataprocClusterClusterConfigSubclusterSpecResources:DataprocClusterClusterConfigSubclusterSpecResources",
                    "description": "Resources allocated to each host of the Data Proc subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "Role of the subcluster in the Data Proc cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which hosts of the subcluster belong. Subnets of all the subclusters must belong to the same VPC network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hostsCount",
                "name",
                "resources",
                "role",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hostsCount",
                        "id",
                        "name",
                        "resources",
                        "role",
                        "subnetId"
                    ]
                }
            }
        },
        "yandex:index/DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig:DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig": {
            "properties": {
                "cpuUtilizationTarget": {
                    "type": "number",
                    "description": "Defines an autoscaling rule based on the average CPU utilization of the instance group. If not set default autoscaling metric will be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "decommissionTimeout": {
                    "type": "number",
                    "description": "Timeout to gracefully decommission nodes during downscaling. In seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxHostsCount": {
                    "type": "number",
                    "description": "Maximum number of nodes in autoscaling subclusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "measurementDuration": {
                    "type": "number",
                    "description": "Time in seconds allotted for averaging metrics.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preemptible": {
                    "type": "boolean",
                    "description": "Bool flag -- whether to use preemptible compute instances. Preemptible instances are stopped at least once every 24 hours, and can be stopped at any time if their resources are needed by Compute. For more information, see [Preemptible Virtual Machines](https://cloud.yandex.com/docs/compute/concepts/preemptible-vm).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stabilizationDuration": {
                    "type": "number",
                    "description": "Minimum amount of time in seconds allotted for monitoring before Instance Groups can reduce the number of instances in the group. During this time, the group size doesn't decrease, even if the new metric values indicate that it should.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "warmupDuration": {
                    "type": "number",
                    "description": "The warmup time of the instance in seconds. During this time, traffic is sent to the instance, but instance metrics are not collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxHostsCount"
            ]
        },
        "yandex:index/DataprocClusterClusterConfigSubclusterSpecResources:DataprocClusterClusterConfigSubclusterSpecResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of a host. One of `network-hdd` (default) or `network-ssd`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "description": "The ID of the preset for computational resources available to a host. All available presets are listed in the [documentation](https://cloud.yandex.com/docs/data-proc/concepts/instance-types).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "resourcePresetId"
            ]
        },
        "yandex:index/DataprocClusterTimeouts:DataprocClusterTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettings:DatatransferEndpointSettings": {
            "properties": {
                "clickhouseSource": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseSource:DatatransferEndpointSettingsClickhouseSource",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clickhouseTarget": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseTarget:DatatransferEndpointSettingsClickhouseTarget",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mongoSource": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoSource:DatatransferEndpointSettingsMongoSource",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mongoTarget": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoTarget:DatatransferEndpointSettingsMongoTarget",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mysqlSource": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlSource:DatatransferEndpointSettingsMysqlSource",
                    "description": "Settings specific to the MySQL source endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mysqlTarget": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlTarget:DatatransferEndpointSettingsMysqlTarget",
                    "description": "Settings specific to the MySQL target endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postgresSource": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresSource:DatatransferEndpointSettingsPostgresSource",
                    "description": "Settings specific to the PostgreSQL source endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postgresTarget": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresTarget:DatatransferEndpointSettingsPostgresTarget",
                    "description": "Settings specific to the PostgreSQL target endpoint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseSource:DatatransferEndpointSettingsClickhouseSource": {
            "properties": {
                "connection": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseSourceConnection:DatatransferEndpointSettingsClickhouseSourceConnection",
                    "description": "Connection settings. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tables which will not be transfered, formatted as `schemaname.tablename`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tables to transfer, formatted as `schemaname.tablename`. If omitted or an empty list is specified, all tables will be transferred.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of security groups that the transfer associated with this endpoint should use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "excludeTables",
                        "includeTables",
                        "securityGroups",
                        "subnetId"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseSourceConnection:DatatransferEndpointSettingsClickhouseSourceConnection": {
            "properties": {
                "connectionOptions": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions:DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions",
                    "description": "Connection options. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions:DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Database name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mdbClusterId": {
                    "type": "string",
                    "description": "Identifier of the Managed ClickHouse cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onPremise": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise:DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise",
                    "description": "Connection settings of the on-premise ClickHouse server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPassword:DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPassword",
                    "description": "Password for the database access. This is a block with a single field named `raw` which should contain the password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "User for database access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "database",
                        "onPremise",
                        "password",
                        "user"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise:DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise": {
            "properties": {
                "httpPort": {
                    "type": "number",
                    "description": "TCP port number for the HTTP interface of the ClickHouse server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nativePort": {
                    "type": "number",
                    "description": "TCP port number for the native interface of the ClickHouse server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShard:DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShard"
                    },
                    "description": "The list of ClickHouse shards. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsMode": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsMode:DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsMode",
                    "description": "TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "httpPort",
                        "nativePort",
                        "shards",
                        "tlsMode"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShard:DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShard": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ClickHouse server host names.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Arbitrary shard name. This name may be used in `sharding` block to specify custom sharding rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hosts",
                        "name"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsMode:DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsMode": {
            "properties": {
                "disabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled:DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled",
                    "description": "Empty block designating that the connection is not secured, i.e. plaintext connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled:DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled",
                    "description": "If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled",
                        "enabled"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled:DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled": {
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled:DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled": {
            "properties": {
                "caCertificate": {
                    "type": "string",
                    "description": "X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "caCertificate"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPassword:DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPassword": {
            "properties": {
                "raw": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "raw"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseTarget:DatatransferEndpointSettingsClickhouseTarget": {
            "properties": {
                "altNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseTargetAltName:DatatransferEndpointSettingsClickhouseTargetAltName"
                    },
                    "description": "Table renaming rules. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cleanupPolicy": {
                    "type": "string",
                    "description": "How to clean collections when activating the transfer. One of \"DISABLED\", \"DROP\" or \"TRUNCATE\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clickhouseClusterName": {
                    "type": "string",
                    "description": "Name of the ClickHouse cluster. For managed ClickHouse clusters defaults to managed cluster ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connection": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseTargetConnection:DatatransferEndpointSettingsClickhouseTargetConnection",
                    "description": "Connection settings. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of security groups that the transfer associated with this endpoint should use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sharding": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseTargetSharding:DatatransferEndpointSettingsClickhouseTargetSharding",
                    "description": "Shard selection rules for the data being transferred. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "altNames",
                        "cleanupPolicy",
                        "clickhouseClusterName",
                        "securityGroups",
                        "sharding",
                        "subnetId"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseTargetAltName:DatatransferEndpointSettingsClickhouseTargetAltName": {
            "properties": {
                "fromName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "toName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fromName",
                        "toName"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseTargetConnection:DatatransferEndpointSettingsClickhouseTargetConnection": {
            "properties": {
                "connectionOptions": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions:DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions",
                    "description": "Connection options. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions:DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions": {
            "properties": {
                "database": {
                    "type": "string",
                    "description": "Database name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mdbClusterId": {
                    "type": "string",
                    "description": "Identifier of the Managed ClickHouse cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onPremise": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise:DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise",
                    "description": "Connection settings of the on-premise ClickHouse server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPassword:DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPassword",
                    "description": "Password for the database access. This is a block with a single field named `raw` which should contain the password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "User for database access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "database",
                        "onPremise",
                        "password",
                        "user"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise:DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise": {
            "properties": {
                "httpPort": {
                    "type": "number",
                    "description": "TCP port number for the HTTP interface of the ClickHouse server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nativePort": {
                    "type": "number",
                    "description": "TCP port number for the native interface of the ClickHouse server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShard:DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShard"
                    },
                    "description": "The list of ClickHouse shards. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsMode": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsMode:DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsMode",
                    "description": "TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "httpPort",
                        "nativePort",
                        "shards",
                        "tlsMode"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShard:DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShard": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ClickHouse server host names.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Arbitrary shard name. This name may be used in `sharding` block to specify custom sharding rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hosts",
                        "name"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsMode:DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsMode": {
            "properties": {
                "disabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled:DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled",
                    "description": "Empty block designating that the connection is not secured, i.e. plaintext connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled:DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled",
                    "description": "If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled",
                        "enabled"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled:DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled": {
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled:DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled": {
            "properties": {
                "caCertificate": {
                    "type": "string",
                    "description": "X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "caCertificate"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPassword:DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPassword": {
            "properties": {
                "raw": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "raw"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseTargetSharding:DatatransferEndpointSettingsClickhouseTargetSharding": {
            "properties": {
                "columnValueHash": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash:DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash",
                    "description": "Shard data by the hash value of the specified column. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transferId": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsClickhouseTargetShardingTransferId:DatatransferEndpointSettingsClickhouseTargetShardingTransferId",
                    "description": "Shard data by ID of the transfer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "columnValueHash",
                        "transferId"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash:DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash": {
            "properties": {
                "columnName": {
                    "type": "string",
                    "description": "The name of the column to calculate hash from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "columnName"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsClickhouseTargetShardingTransferId:DatatransferEndpointSettingsClickhouseTargetShardingTransferId": {
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettingsMongoSource:DatatransferEndpointSettingsMongoSource": {
            "properties": {
                "collections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoSourceCollection:DatatransferEndpointSettingsMongoSourceCollection"
                    },
                    "description": "The list of the MongoDB collections that should be transferred. If omitted, all available collections will be transferred. The structure of the list item is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connection": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoSourceConnection:DatatransferEndpointSettingsMongoSourceConnection",
                    "description": "Connection settings. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludedCollections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoSourceExcludedCollection:DatatransferEndpointSettingsMongoSourceExcludedCollection"
                    },
                    "description": "The list of the MongoDB collections that should not be transferred.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secondaryPreferredMode": {
                    "type": "boolean",
                    "description": "whether the secondary server should be preferred to the primary when copying data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of security groups that the transfer associated with this endpoint should use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "collections",
                        "excludedCollections",
                        "secondaryPreferredMode",
                        "securityGroups",
                        "subnetId"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMongoSourceCollection:DatatransferEndpointSettingsMongoSourceCollection": {
            "properties": {
                "collectionName": {
                    "type": "string",
                    "description": "Collection name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "collectionName",
                        "databaseName"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMongoSourceConnection:DatatransferEndpointSettingsMongoSourceConnection": {
            "properties": {
                "connectionOptions": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions:DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions",
                    "description": "Connection options. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions:DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions": {
            "properties": {
                "authSource": {
                    "type": "string",
                    "description": "Name of the database associated with the credentials.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mdbClusterId": {
                    "type": "string",
                    "description": "Identifier of the Managed ClickHouse cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onPremise": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise:DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise",
                    "description": "Connection settings of the on-premise ClickHouse server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPassword:DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPassword",
                    "description": "Password for the database access. This is a block with a single field named `raw` which should contain the password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "User for database access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authSource",
                        "onPremise",
                        "password",
                        "user"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise:DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Host names of the replica set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "TCP Port number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicaSet": {
                    "type": "string",
                    "description": "Replica set name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsMode": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsMode:DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsMode",
                    "description": "TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hosts",
                        "port",
                        "replicaSet",
                        "tlsMode"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsMode:DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsMode": {
            "properties": {
                "disabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled:DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled",
                    "description": "Empty block designating that the connection is not secured, i.e. plaintext connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled:DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled",
                    "description": "If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled",
                        "enabled"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled:DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled": {
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled:DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled": {
            "properties": {
                "caCertificate": {
                    "type": "string",
                    "description": "X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "caCertificate"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPassword:DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPassword": {
            "properties": {
                "raw": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "raw"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMongoSourceExcludedCollection:DatatransferEndpointSettingsMongoSourceExcludedCollection": {
            "properties": {
                "collectionName": {
                    "type": "string",
                    "description": "Collection name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "collectionName",
                        "databaseName"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMongoTarget:DatatransferEndpointSettingsMongoTarget": {
            "properties": {
                "cleanupPolicy": {
                    "type": "string",
                    "description": "How to clean collections when activating the transfer. One of \"DISABLED\", \"DROP\" or \"TRUNCATE\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connection": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoTargetConnection:DatatransferEndpointSettingsMongoTargetConnection",
                    "description": "Connection settings. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "database": {
                    "type": "string",
                    "description": "Name of the database to transfer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of security groups that the transfer associated with this endpoint should use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cleanupPolicy",
                        "database",
                        "securityGroups",
                        "subnetId"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMongoTargetConnection:DatatransferEndpointSettingsMongoTargetConnection": {
            "properties": {
                "connectionOptions": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions:DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions",
                    "description": "Connection options. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions:DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions": {
            "properties": {
                "authSource": {
                    "type": "string",
                    "description": "Name of the database associated with the credentials.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mdbClusterId": {
                    "type": "string",
                    "description": "Identifier of the Managed ClickHouse cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onPremise": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise:DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise",
                    "description": "Connection settings of the on-premise ClickHouse server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPassword:DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPassword",
                    "description": "Password for the database access. This is a block with a single field named `raw` which should contain the password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "User for database access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authSource",
                        "onPremise",
                        "password",
                        "user"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise:DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Host names of the replica set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "TCP Port number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicaSet": {
                    "type": "string",
                    "description": "Replica set name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsMode": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsMode:DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsMode",
                    "description": "TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hosts",
                        "port",
                        "replicaSet",
                        "tlsMode"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsMode:DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsMode": {
            "properties": {
                "disabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled:DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled",
                    "description": "Empty block designating that the connection is not secured, i.e. plaintext connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled:DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled",
                    "description": "If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled",
                        "enabled"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled:DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled": {
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled:DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled": {
            "properties": {
                "caCertificate": {
                    "type": "string",
                    "description": "X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "caCertificate"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPassword:DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPassword": {
            "properties": {
                "raw": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "raw"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMysqlSource:DatatransferEndpointSettingsMysqlSource": {
            "properties": {
                "connection": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlSourceConnection:DatatransferEndpointSettingsMysqlSourceConnection",
                    "description": "Connection settings. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "database": {
                    "type": "string",
                    "description": "Name of the database to transfer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeTablesRegexes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Opposite of `include_table_regex`. The tables matching the specified regular expressions will not be transferred.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeTablesRegexes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of regular expressions of table names which should be transferred. A table name is formatted as schemaname.tablename. For example, a single regular expression may look like `^mydb.employees$`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectTransferSettings": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlSourceObjectTransferSettings:DatatransferEndpointSettingsMysqlSourceObjectTransferSettings",
                    "description": "Defines which database schema objects should be transferred, e.g. views, functions, etc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlSourcePassword:DatatransferEndpointSettingsMysqlSourcePassword",
                    "description": "Password for the database access. This is a block with a single field named `raw` which should contain the password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of security groups that the transfer associated with this endpoint should use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceDatabase": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "User for the database access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "database",
                        "excludeTablesRegexes",
                        "includeTablesRegexes",
                        "objectTransferSettings",
                        "password",
                        "securityGroups",
                        "serviceDatabase",
                        "timezone",
                        "user"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMysqlSourceConnection:DatatransferEndpointSettingsMysqlSourceConnection": {
            "properties": {
                "mdbClusterId": {
                    "type": "string",
                    "description": "Identifier of the Managed MySQL cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onPremise": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlSourceConnectionOnPremise:DatatransferEndpointSettingsMysqlSourceConnectionOnPremise",
                    "description": "Connection settings of the on-premise MySQL server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "onPremise"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMysqlSourceConnectionOnPremise:DatatransferEndpointSettingsMysqlSourceConnectionOnPremise": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Host names of the replica set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "TCP Port number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsMode": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsMode:DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsMode",
                    "description": "TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hosts",
                        "port",
                        "subnetId",
                        "tlsMode"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsMode:DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsMode": {
            "properties": {
                "disabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabled:DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabled",
                    "description": "Empty block designating that the connection is not secured, i.e. plaintext connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled:DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled",
                    "description": "If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled",
                        "enabled"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabled:DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabled": {
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled:DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled": {
            "properties": {
                "caCertificate": {
                    "type": "string",
                    "description": "X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "caCertificate"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMysqlSourceObjectTransferSettings:DatatransferEndpointSettingsMysqlSourceObjectTransferSettings": {
            "properties": {
                "routine": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trigger": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "view": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "routine",
                        "trigger",
                        "view"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMysqlSourcePassword:DatatransferEndpointSettingsMysqlSourcePassword": {
            "properties": {
                "raw": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "raw"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMysqlTarget:DatatransferEndpointSettingsMysqlTarget": {
            "properties": {
                "connection": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlTargetConnection:DatatransferEndpointSettingsMysqlTargetConnection",
                    "description": "Connection settings. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "database": {
                    "type": "string",
                    "description": "Name of the database to transfer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlTargetPassword:DatatransferEndpointSettingsMysqlTargetPassword",
                    "description": "Password for the database access. This is a block with a single field named `raw` which should contain the password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of security groups that the transfer associated with this endpoint should use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "skipConstraintChecks": {
                    "type": "boolean",
                    "description": "When true, disables foreign key checks. See [foreign_key_checks](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_foreign_key_checks). False by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sqlMode": {
                    "type": "string",
                    "description": "[sql_mode](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html) to use when interacting with the server. Defaults to \"NO_AUTO_VALUE_ON_ZERO,NO_DIR_IN_CREATE,NO_ENGINE_SUBSTITUTION\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "User for the database access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "database",
                        "password",
                        "securityGroups",
                        "skipConstraintChecks",
                        "sqlMode",
                        "timezone",
                        "user"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMysqlTargetConnection:DatatransferEndpointSettingsMysqlTargetConnection": {
            "properties": {
                "mdbClusterId": {
                    "type": "string",
                    "description": "Identifier of the Managed MySQL cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onPremise": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlTargetConnectionOnPremise:DatatransferEndpointSettingsMysqlTargetConnectionOnPremise",
                    "description": "Connection settings of the on-premise MySQL server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "onPremise"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMysqlTargetConnectionOnPremise:DatatransferEndpointSettingsMysqlTargetConnectionOnPremise": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Host names of the replica set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "TCP Port number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsMode": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsMode:DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsMode",
                    "description": "TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hosts",
                        "port",
                        "subnetId",
                        "tlsMode"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsMode:DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsMode": {
            "properties": {
                "disabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabled:DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabled",
                    "description": "Empty block designating that the connection is not secured, i.e. plaintext connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled:DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled",
                    "description": "If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled",
                        "enabled"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabled:DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabled": {
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled:DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled": {
            "properties": {
                "caCertificate": {
                    "type": "string",
                    "description": "X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "caCertificate"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsMysqlTargetPassword:DatatransferEndpointSettingsMysqlTargetPassword": {
            "properties": {
                "raw": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "raw"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsPostgresSource:DatatransferEndpointSettingsPostgresSource": {
            "properties": {
                "connection": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresSourceConnection:DatatransferEndpointSettingsPostgresSourceConnection",
                    "description": "Connection settings. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "database": {
                    "type": "string",
                    "description": "Name of the database to transfer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tables which will not be transfered, formatted as `schemaname.tablename`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeTables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of tables to transfer, formatted as `schemaname.tablename`. If omitted or an empty list is specified, all tables will be transferred.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectTransferSettings": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresSourceObjectTransferSettings:DatatransferEndpointSettingsPostgresSourceObjectTransferSettings",
                    "description": "Defines which database schema objects should be transferred, e.g. views, functions, etc.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresSourcePassword:DatatransferEndpointSettingsPostgresSourcePassword",
                    "description": "Password for the database access. This is a block with a single field named `raw` which should contain the password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of security groups that the transfer associated with this endpoint should use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceSchema": {
                    "type": "string",
                    "description": "Name of the database schema in which auxiliary tables needed for the transfer will be created. Empty `service_schema` implies schema \"public\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slotGigabyteLagLimit": {
                    "type": "number",
                    "description": "Maximum WAL size held by the replication slot, in gigabytes. Exceeding this limit will result in a replication failure and deletion of the replication slot. Unlimited by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "User for the database access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "database",
                        "excludeTables",
                        "includeTables",
                        "objectTransferSettings",
                        "password",
                        "securityGroups",
                        "serviceSchema",
                        "slotGigabyteLagLimit",
                        "user"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsPostgresSourceConnection:DatatransferEndpointSettingsPostgresSourceConnection": {
            "properties": {
                "mdbClusterId": {
                    "type": "string",
                    "description": "Identifier of the Managed MySQL cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onPremise": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresSourceConnectionOnPremise:DatatransferEndpointSettingsPostgresSourceConnectionOnPremise",
                    "description": "Connection settings of the on-premise MySQL server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "onPremise"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsPostgresSourceConnectionOnPremise:DatatransferEndpointSettingsPostgresSourceConnectionOnPremise": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Host names of the replica set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "TCP Port number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsMode": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsMode:DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsMode",
                    "description": "TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hosts",
                        "port",
                        "subnetId",
                        "tlsMode"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsMode:DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsMode": {
            "properties": {
                "disabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabled:DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabled",
                    "description": "Empty block designating that the connection is not secured, i.e. plaintext connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled:DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled",
                    "description": "If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled",
                        "enabled"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabled:DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabled": {
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled:DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled": {
            "properties": {
                "caCertificate": {
                    "type": "string",
                    "description": "X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "caCertificate"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsPostgresSourceObjectTransferSettings:DatatransferEndpointSettingsPostgresSourceObjectTransferSettings": {
            "properties": {
                "cast": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "collation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "constraint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultValues": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fkConstraint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "function": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "index": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "materializedView": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rule": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sequence": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sequenceOwnedBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "table": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trigger": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "view": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cast",
                        "collation",
                        "constraint",
                        "defaultValues",
                        "fkConstraint",
                        "function",
                        "index",
                        "materializedView",
                        "policy",
                        "primaryKey",
                        "rule",
                        "sequence",
                        "sequenceOwnedBy",
                        "table",
                        "trigger",
                        "type",
                        "view"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsPostgresSourcePassword:DatatransferEndpointSettingsPostgresSourcePassword": {
            "properties": {
                "raw": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "raw"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsPostgresTarget:DatatransferEndpointSettingsPostgresTarget": {
            "properties": {
                "connection": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresTargetConnection:DatatransferEndpointSettingsPostgresTargetConnection",
                    "description": "Connection settings. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "database": {
                    "type": "string",
                    "description": "Name of the database to transfer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresTargetPassword:DatatransferEndpointSettingsPostgresTargetPassword",
                    "description": "Password for the database access. This is a block with a single field named `raw` which should contain the password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of security groups that the transfer associated with this endpoint should use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "User for the database access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "database",
                        "password",
                        "securityGroups",
                        "user"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsPostgresTargetConnection:DatatransferEndpointSettingsPostgresTargetConnection": {
            "properties": {
                "mdbClusterId": {
                    "type": "string",
                    "description": "Identifier of the Managed MySQL cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "onPremise": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresTargetConnectionOnPremise:DatatransferEndpointSettingsPostgresTargetConnectionOnPremise",
                    "description": "Connection settings of the on-premise MySQL server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "onPremise"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsPostgresTargetConnectionOnPremise:DatatransferEndpointSettingsPostgresTargetConnectionOnPremise": {
            "properties": {
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Host names of the replica set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "TCP Port number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tlsMode": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsMode:DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsMode",
                    "description": "TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "hosts",
                        "port",
                        "subnetId",
                        "tlsMode"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsMode:DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsMode": {
            "properties": {
                "disabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabled:DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabled",
                    "description": "Empty block designating that the connection is not secured, i.e. plaintext connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled:DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled",
                    "description": "If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "disabled",
                        "enabled"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabled:DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabled": {
            "type": "object"
        },
        "yandex:index/DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled:DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled": {
            "properties": {
                "caCertificate": {
                    "type": "string",
                    "description": "X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "caCertificate"
                    ]
                }
            }
        },
        "yandex:index/DatatransferEndpointSettingsPostgresTargetPassword:DatatransferEndpointSettingsPostgresTargetPassword": {
            "properties": {
                "raw": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "raw"
                    ]
                }
            }
        },
        "yandex:index/DnsRecordSetTimeouts:DnsRecordSetTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/DnsZoneTimeouts:DnsZoneTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/FunctionContent:FunctionContent": {
            "properties": {
                "zipFilename": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "zipFilename"
            ]
        },
        "yandex:index/FunctionPackage:FunctionPackage": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "objectName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sha256": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "objectName"
            ]
        },
        "yandex:index/FunctionScalingPolicyPolicy:FunctionScalingPolicyPolicy": {
            "properties": {
                "tag": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneInstancesLimit": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneRequestsLimit": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "tag"
            ]
        },
        "yandex:index/FunctionSecret:FunctionSecret": {
            "properties": {
                "environmentVariable": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "environmentVariable",
                "id",
                "key",
                "versionId"
            ]
        },
        "yandex:index/FunctionTimeouts:FunctionTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/FunctionTriggerDlq:FunctionTriggerDlq": {
            "properties": {
                "queueId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccountId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "queueId",
                "serviceAccountId"
            ]
        },
        "yandex:index/FunctionTriggerFunction:FunctionTriggerFunction": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retryAttempts": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retryInterval": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccountId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "yandex:index/FunctionTriggerIot:FunctionTriggerIot": {
            "properties": {
                "deviceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registryId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topic": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "registryId"
            ]
        },
        "yandex:index/FunctionTriggerLogGroup:FunctionTriggerLogGroup": {
            "properties": {
                "batchCutoff": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "batchSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "batchCutoff",
                "logGroupIds"
            ]
        },
        "yandex:index/FunctionTriggerLogging:FunctionTriggerLogging": {
            "properties": {
                "batchCutoff": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "batchSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "levels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "batchCutoff",
                "groupId",
                "levels",
                "resourceIds",
                "resourceTypes"
            ]
        },
        "yandex:index/FunctionTriggerMessageQueue:FunctionTriggerMessageQueue": {
            "properties": {
                "batchCutoff": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "batchSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queueId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccountId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visibilityTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "batchCutoff",
                "queueId",
                "serviceAccountId"
            ]
        },
        "yandex:index/FunctionTriggerObjectStorage:FunctionTriggerObjectStorage": {
            "properties": {
                "bucketId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "create": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delete": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "suffix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "update": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucketId"
            ]
        },
        "yandex:index/FunctionTriggerTimeouts:FunctionTriggerTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/FunctionTriggerTimer:FunctionTriggerTimer": {
            "properties": {
                "cronExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cronExpression"
            ]
        },
        "yandex:index/IamServiceAccountTimeouts:IamServiceAccountTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/IotCoreBrokerTimeouts:IotCoreBrokerTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/IotCoreDeviceTimeouts:IotCoreDeviceTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/IotCoreRegistryTimeouts:IotCoreRegistryTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/KmsSecretCiphertextTimeouts:KmsSecretCiphertextTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/KmsSymmetricKeyTimeouts:KmsSymmetricKeyTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/KubernetesClusterKmsProvider:KubernetesClusterKmsProvider": {
            "properties": {
                "keyId": {
                    "type": "string",
                    "description": "KMS key ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/KubernetesClusterMaster:KubernetesClusterMaster": {
            "properties": {
                "clusterCaCertificate": {
                    "type": "string",
                    "description": "(Computed) PEM-encoded public certificate that is the root of trust for the Kubernetes cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalV4Address": {
                    "type": "string",
                    "description": "(Computed) An IPv4 external network address that is assigned to the master.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalV4Endpoint": {
                    "type": "string",
                    "description": "(Computed) External endpoint that can be used to access Kubernetes cluster API from the internet (outside of the cloud).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalV4Address": {
                    "type": "string",
                    "description": "(Computed) An IPv4 internal network address that is assigned to the master.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalV4Endpoint": {
                    "type": "string",
                    "description": "(Computed) Internal endpoint that can be used to connect to the master from cloud networks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenancePolicy": {
                    "$ref": "#/types/yandex:index/KubernetesClusterMasterMaintenancePolicy:KubernetesClusterMasterMaintenancePolicy",
                    "description": "(Optional) (Computed) Maintenance policy for Kubernetes master.\nIf policy is omitted, automatic revision upgrades of the kubernetes master are enabled and could happen at any time.\nRevision upgrades are performed only within the same minor version, e.g. 1.13.\nMinor version upgrades (e.g. 1.13-\u003e1.14) should be performed manually. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "boolean",
                    "description": "(Optional) (Computed) Boolean flag. When `true`, Kubernetes master will have visible ipv4 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regional": {
                    "$ref": "#/types/yandex:index/KubernetesClusterMasterRegional:KubernetesClusterMasterRegional",
                    "description": "(Optional) Initialize parameters for Regional Master (highly available master). The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of security group IDs to which the Kubernetes cluster belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "(Optional) (Computed) Version of Kubernetes that will be used for master.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/KubernetesClusterMasterVersionInfo:KubernetesClusterMasterVersionInfo"
                    },
                    "description": "(Computed) Information about cluster version. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zonal": {
                    "$ref": "#/types/yandex:index/KubernetesClusterMasterZonal:KubernetesClusterMasterZonal",
                    "description": "(Optional) Initialize parameters for Zonal Master (single node master). The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterCaCertificate",
                        "externalV4Address",
                        "externalV4Endpoint",
                        "internalV4Address",
                        "internalV4Endpoint",
                        "publicIp",
                        "version",
                        "versionInfos"
                    ]
                }
            }
        },
        "yandex:index/KubernetesClusterMasterMaintenancePolicy:KubernetesClusterMasterMaintenancePolicy": {
            "properties": {
                "autoUpgrade": {
                    "type": "boolean",
                    "description": "(Required) Boolean flag that specifies if master can be upgraded automatically. When omitted, default value is TRUE.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/KubernetesClusterMasterMaintenancePolicyMaintenanceWindow:KubernetesClusterMasterMaintenancePolicyMaintenanceWindow"
                    },
                    "description": "(Optional) (Computed) This structure specifies maintenance window, when update for master is allowed. When omitted, it defaults to any time.\nTo specify time of day interval, for all days, one element should be provided, with two fields set, `start_time` and `duration`.\nPlease see `zonal_cluster_resource_name` config example.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoUpgrade"
            ]
        },
        "yandex:index/KubernetesClusterMasterMaintenancePolicyMaintenanceWindow:KubernetesClusterMasterMaintenancePolicyMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "duration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "startTime"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "day",
                        "duration",
                        "startTime"
                    ]
                }
            }
        },
        "yandex:index/KubernetesClusterMasterRegional:KubernetesClusterMasterRegional": {
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/KubernetesClusterMasterRegionalLocation:KubernetesClusterMasterRegionalLocation"
                    },
                    "description": "Array of locations, where master instances will be allocated. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "(Required) Name of availability region (e.g. \"ru-central1\"), where master instances will be allocated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "region"
            ]
        },
        "yandex:index/KubernetesClusterMasterRegionalLocation:KubernetesClusterMasterRegionalLocation": {
            "properties": {
                "subnetId": {
                    "type": "string",
                    "description": "(Optional) ID of the subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "(Optional) ID of the availability zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/KubernetesClusterMasterVersionInfo:KubernetesClusterMasterVersionInfo": {
            "properties": {
                "currentVersion": {
                    "type": "string",
                    "description": "Current Kubernetes version, major.minor (e.g. 1.15).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "newRevisionAvailable": {
                    "type": "boolean",
                    "description": "Boolean flag.\nNewer revisions may include Kubernetes patches (e.g 1.15.1 \u003e 1.15.2) as well\nas some internal component updates - new features or bug fixes in yandex-specific\ncomponents either on the master or nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "newRevisionSummary": {
                    "type": "string",
                    "description": "Human readable description of the changes to be applied\nwhen updating to the latest revision. Empty if new_revision_available is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionDeprecated": {
                    "type": "boolean",
                    "description": "Boolean flag. The current version is on the deprecation schedule,\ncomponent (master or node group) should be upgraded.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "currentVersion",
                "newRevisionAvailable",
                "newRevisionSummary",
                "versionDeprecated"
            ]
        },
        "yandex:index/KubernetesClusterMasterZonal:KubernetesClusterMasterZonal": {
            "properties": {
                "subnetId": {
                    "type": "string",
                    "description": "(Optional) ID of the subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "(Optional) ID of the availability zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "zone"
                    ]
                }
            }
        },
        "yandex:index/KubernetesClusterNetworkImplementation:KubernetesClusterNetworkImplementation": {
            "properties": {
                "cilium": {
                    "$ref": "#/types/yandex:index/KubernetesClusterNetworkImplementationCilium:KubernetesClusterNetworkImplementationCilium",
                    "description": "(Optional) Cilium network implementation configuration. No options exist.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cilium"
                    ]
                }
            }
        },
        "yandex:index/KubernetesClusterNetworkImplementationCilium:KubernetesClusterNetworkImplementationCilium": {
            "type": "object"
        },
        "yandex:index/KubernetesClusterTimeouts:KubernetesClusterTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/KubernetesNodeGroupAllocationPolicy:KubernetesNodeGroupAllocationPolicy": {
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/KubernetesNodeGroupAllocationPolicyLocation:KubernetesNodeGroupAllocationPolicyLocation"
                    },
                    "description": "Repeated field, that specify subnets (zones), that will be used by node group compute instances. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "locations"
                    ]
                }
            }
        },
        "yandex:index/KubernetesNodeGroupAllocationPolicyLocation:KubernetesNodeGroupAllocationPolicyLocation": {
            "properties": {
                "subnetId": {
                    "type": "string",
                    "description": "ID of the subnet, that will be used by one compute instance in node group.\n",
                    "deprecationMessage": "subnet_id is deprecated",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "ID of the availability zone where for one compute instance in node group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "subnetId",
                        "zone"
                    ]
                }
            }
        },
        "yandex:index/KubernetesNodeGroupDeployPolicy:KubernetesNodeGroupDeployPolicy": {
            "properties": {
                "maxExpansion": {
                    "type": "number",
                    "description": "The maximum number of instances that can be temporarily allocated above the group's target size during the update.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailable": {
                    "type": "number",
                    "description": "The maximum number of running instances that can be taken offline during update.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxExpansion",
                "maxUnavailable"
            ]
        },
        "yandex:index/KubernetesNodeGroupInstanceTemplate:KubernetesNodeGroupInstanceTemplate": {
            "properties": {
                "bootDisk": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupInstanceTemplateBootDisk:KubernetesNodeGroupInstanceTemplateBootDisk",
                    "description": "The specifications for boot disks that will be attached to the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerRuntime": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupInstanceTemplateContainerRuntime:KubernetesNodeGroupInstanceTemplateContainerRuntime",
                    "description": "Container runtime configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels that will be assigned to compute nodes (instances), created by the Node Group.\n---\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The set of metadata `key:value` pairs assigned to this instance template. This includes custom metadata and predefined keys. **Note**: key \"user-data\" won't be provided into instances. It reserved for internal activity in `kubernetes_node_group` resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name template of the instance.\nIn order to be unique it must contain at least one of instance unique placeholders:\n{instance.short_id}\n{instance.index}\ncombination of {instance.zone_id} and {instance.index_in_zone}\nExample: my-instance-{instance.index}\nIf not set, default is used: {instance_group.id}-{instance.short_id}\nIt may also contain another placeholders, see [Compute Instance group metadata doc](https://cloud.yandex.com/en-ru/docs/compute/api-ref/grpc/instance_group_service) for full list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nat": {
                    "type": "boolean",
                    "description": "A public address that can be used to access the internet over NAT.\n",
                    "deprecationMessage": "nat is deprecated",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkAccelerationType": {
                    "type": "string",
                    "description": "Type of network acceleration. Values: `standard`, `software_accelerated`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/KubernetesNodeGroupInstanceTemplateNetworkInterface:KubernetesNodeGroupInstanceTemplateNetworkInterface"
                    },
                    "description": "An array with the network interfaces that will be attached to the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "placementPolicy": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupInstanceTemplatePlacementPolicy:KubernetesNodeGroupInstanceTemplatePlacementPolicy",
                    "description": "The placement policy configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "platformId": {
                    "type": "string",
                    "description": "The ID of the hardware platform configuration for the node group compute instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupInstanceTemplateResources:KubernetesNodeGroupInstanceTemplateResources",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schedulingPolicy": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupInstanceTemplateSchedulingPolicy:KubernetesNodeGroupInstanceTemplateSchedulingPolicy",
                    "description": "The scheduling policy for the instances in node group. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bootDisk",
                        "metadata",
                        "nat",
                        "networkAccelerationType",
                        "platformId",
                        "schedulingPolicy"
                    ]
                }
            }
        },
        "yandex:index/KubernetesNodeGroupInstanceTemplateBootDisk:KubernetesNodeGroupInstanceTemplateBootDisk": {
            "properties": {
                "size": {
                    "type": "number",
                    "description": "The number of instances in the node group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of container runtime. Values: `docker`, `containerd`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "size",
                        "type"
                    ]
                }
            }
        },
        "yandex:index/KubernetesNodeGroupInstanceTemplateContainerRuntime:KubernetesNodeGroupInstanceTemplateContainerRuntime": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of container runtime. Values: `docker`, `containerd`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "yandex:index/KubernetesNodeGroupInstanceTemplateNetworkInterface:KubernetesNodeGroupInstanceTemplateNetworkInterface": {
            "properties": {
                "ipv4": {
                    "type": "boolean",
                    "description": "Allocate an IPv4 address for the interface. The default value is `true`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4DnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord:KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord"
                    },
                    "description": "List of configurations for creating ipv4 DNS records. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6": {
                    "type": "boolean",
                    "description": "If true, allocate an IPv6 address for the interface. The address will be automatically assigned from the specified subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6DnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord:KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord"
                    },
                    "description": "List of configurations for creating ipv6 DNS records. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nat": {
                    "type": "boolean",
                    "description": "A public address that can be used to access the internet over NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Security group ids for network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the subnets.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnetIds"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ipv6",
                        "nat",
                        "subnetIds"
                    ]
                }
            }
        },
        "yandex:index/KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord:KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone ID (if not set, private zone is used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "DNS record FQDN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create a PTR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL (in seconds).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fqdn"
            ]
        },
        "yandex:index/KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord:KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone ID (if not set, private zone is used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "DNS record FQDN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create a PTR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL (in seconds).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fqdn"
            ]
        },
        "yandex:index/KubernetesNodeGroupInstanceTemplatePlacementPolicy:KubernetesNodeGroupInstanceTemplatePlacementPolicy": {
            "properties": {
                "placementGroupId": {
                    "type": "string",
                    "description": "Specifies the id of the Placement Group to assign to the instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "placementGroupId"
            ]
        },
        "yandex:index/KubernetesNodeGroupInstanceTemplateResources:KubernetesNodeGroupInstanceTemplateResources": {
            "properties": {
                "coreFraction": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cores": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gpus": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "coreFraction",
                        "cores",
                        "memory"
                    ]
                }
            }
        },
        "yandex:index/KubernetesNodeGroupInstanceTemplateSchedulingPolicy:KubernetesNodeGroupInstanceTemplateSchedulingPolicy": {
            "properties": {
                "preemptible": {
                    "type": "boolean",
                    "description": "Specifies if the instance is preemptible. Defaults to false.\n---\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "preemptible"
                    ]
                }
            }
        },
        "yandex:index/KubernetesNodeGroupMaintenancePolicy:KubernetesNodeGroupMaintenancePolicy": {
            "properties": {
                "autoRepair": {
                    "type": "boolean",
                    "description": "Boolean flag that specifies if node group can be repaired automatically. When omitted, default value is TRUE.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoUpgrade": {
                    "type": "boolean",
                    "description": "Boolean flag that specifies if node group can be upgraded automatically. When omitted, default value is TRUE.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/KubernetesNodeGroupMaintenancePolicyMaintenanceWindow:KubernetesNodeGroupMaintenancePolicyMaintenanceWindow"
                    },
                    "description": "(Computed) Set of day intervals, when maintenance is allowed for this node group. When omitted, it defaults to any time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoRepair",
                "autoUpgrade"
            ]
        },
        "yandex:index/KubernetesNodeGroupMaintenancePolicyMaintenanceWindow:KubernetesNodeGroupMaintenancePolicyMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "duration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "duration",
                "startTime"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "day",
                        "duration",
                        "startTime"
                    ]
                }
            }
        },
        "yandex:index/KubernetesNodeGroupScalePolicy:KubernetesNodeGroupScalePolicy": {
            "properties": {
                "autoScale": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupScalePolicyAutoScale:KubernetesNodeGroupScalePolicyAutoScale",
                    "description": "Scale policy for an autoscaled node group. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedScale": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupScalePolicyFixedScale:KubernetesNodeGroupScalePolicyFixedScale",
                    "description": "Scale policy for a fixed scale node group. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fixedScale"
                    ]
                }
            }
        },
        "yandex:index/KubernetesNodeGroupScalePolicyAutoScale:KubernetesNodeGroupScalePolicyAutoScale": {
            "properties": {
                "initial": {
                    "type": "number",
                    "description": "Initial number of instances in the node group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "max": {
                    "type": "number",
                    "description": "Maximum number of instances in the node group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "number",
                    "description": "Minimum number of instances in the node group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "initial",
                "max",
                "min"
            ]
        },
        "yandex:index/KubernetesNodeGroupScalePolicyFixedScale:KubernetesNodeGroupScalePolicyFixedScale": {
            "properties": {
                "size": {
                    "type": "number",
                    "description": "The number of instances in the node group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "size"
                    ]
                }
            }
        },
        "yandex:index/KubernetesNodeGroupTimeouts:KubernetesNodeGroupTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/KubernetesNodeGroupVersionInfo:KubernetesNodeGroupVersionInfo": {
            "properties": {
                "currentVersion": {
                    "type": "string",
                    "description": "Current Kubernetes version, major.minor (e.g. 1.15).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "newRevisionAvailable": {
                    "type": "boolean",
                    "description": "True/false flag.\nNewer revisions may include Kubernetes patches (e.g 1.15.1 \u003e 1.15.2) as well\nas some internal component updates - new features or bug fixes in yandex-specific\ncomponents either on the master or nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "newRevisionSummary": {
                    "type": "string",
                    "description": "Human readable description of the changes to be applied\nwhen updating to the latest revision. Empty if new_revision_available is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionDeprecated": {
                    "type": "boolean",
                    "description": "True/false flag. The current version is on the deprecation schedule,\ncomponent (master or node group) should be upgraded.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "currentVersion",
                "newRevisionAvailable",
                "newRevisionSummary",
                "versionDeprecated"
            ]
        },
        "yandex:index/LbNetworkLoadBalancerAttachedTargetGroup:LbNetworkLoadBalancerAttachedTargetGroup": {
            "properties": {
                "healthchecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/LbNetworkLoadBalancerAttachedTargetGroupHealthcheck:LbNetworkLoadBalancerAttachedTargetGroupHealthcheck"
                    },
                    "description": "A HealthCheck resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupId": {
                    "type": "string",
                    "description": "ID of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "healthchecks",
                "targetGroupId"
            ]
        },
        "yandex:index/LbNetworkLoadBalancerAttachedTargetGroupHealthcheck:LbNetworkLoadBalancerAttachedTargetGroupHealthcheck": {
            "properties": {
                "healthyThreshold": {
                    "type": "number",
                    "description": "Number of successful health checks required in order to set the `HEALTHY` status for the target.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpOptions": {
                    "$ref": "#/types/yandex:index/LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptions:LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptions",
                    "description": "Options for HTTP health check. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "number",
                    "description": "The interval between health checks. The default is 2 seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the listener. The name must be unique for each listener on a single load balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpOptions": {
                    "$ref": "#/types/yandex:index/LbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptions:LbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptions",
                    "description": "Options for TCP health check. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "number",
                    "description": "Timeout for a target to return a response for the health check. The default is 1 second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unhealthyThreshold": {
                    "type": "number",
                    "description": "Number of failed health checks before changing the status to `UNHEALTHY`. The default is 2.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptions:LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptions": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "URL path to set for health checking requests for every target in the target group. For example `/ping`. The default path is `/`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "Port for incoming traffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "yandex:index/LbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptions:LbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptions": {
            "properties": {
                "port": {
                    "type": "number",
                    "description": "Port for incoming traffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "yandex:index/LbNetworkLoadBalancerListener:LbNetworkLoadBalancerListener": {
            "properties": {
                "externalAddressSpec": {
                    "$ref": "#/types/yandex:index/LbNetworkLoadBalancerListenerExternalAddressSpec:LbNetworkLoadBalancerListenerExternalAddressSpec",
                    "description": "External IP address specification. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalAddressSpec": {
                    "$ref": "#/types/yandex:index/LbNetworkLoadBalancerListenerInternalAddressSpec:LbNetworkLoadBalancerListenerInternalAddressSpec",
                    "description": "Internal IP address specification. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the listener. The name must be unique for each listener on a single load balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "Port for incoming traffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for incoming traffic. TCP or UDP and the default is TCP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetPort": {
                    "type": "number",
                    "description": "Port of a target. The default is the same as listener's port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "port",
                        "protocol",
                        "targetPort"
                    ]
                }
            }
        },
        "yandex:index/LbNetworkLoadBalancerListenerExternalAddressSpec:LbNetworkLoadBalancerListenerExternalAddressSpec": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Internal IP address for a listener. Must belong to the subnet that is referenced in subnet_id. IP address will be allocated if it wasn't been set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipVersion": {
                    "type": "string",
                    "description": "IP version of the internal addresses that the load balancer works with. Must be one of ipv4 or ipv6. The default is ipv4.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address"
                    ]
                }
            }
        },
        "yandex:index/LbNetworkLoadBalancerListenerInternalAddressSpec:LbNetworkLoadBalancerListenerInternalAddressSpec": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Internal IP address for a listener. Must belong to the subnet that is referenced in subnet_id. IP address will be allocated if it wasn't been set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipVersion": {
                    "type": "string",
                    "description": "IP version of the internal addresses that the load balancer works with. Must be one of ipv4 or ipv6. The default is ipv4.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the subnet to which the internal IP address belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "subnetId"
                    ]
                }
            }
        },
        "yandex:index/LbNetworkLoadBalancerTimeouts:LbNetworkLoadBalancerTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/LbTargetGroupTarget:LbTargetGroupTarget": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "IP address of the target.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the subnet that targets are connected to. \nAll targets in the target group must be connected to the same subnet within a single availability zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "subnetId"
            ]
        },
        "yandex:index/LbTargetGroupTimeouts:LbTargetGroupTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/LockboxSecretTimeouts:LockboxSecretTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/LockboxSecretVersionEntry:LockboxSecretVersionEntry": {
            "properties": {
                "command": {
                    "$ref": "#/types/yandex:index/LockboxSecretVersionEntryCommand:LockboxSecretVersionEntryCommand",
                    "description": "The command that generates the text value of the entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "description": "The key of the entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "textValue": {
                    "type": "string",
                    "description": "The text value of the entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key"
            ]
        },
        "yandex:index/LockboxSecretVersionEntryCommand:LockboxSecretVersionEntryCommand": {
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of arguments to be passed to the script/command.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of environment variables to set before calling the script/command.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The path to the script or command to execute.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "yandex:index/LockboxSecretVersionTimeouts:LockboxSecretVersionTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/LoggingGroupTimeouts:LoggingGroupTimeouts": {
            "properties": {
                "default": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbClickhouseClusterAccess:MdbClickhouseClusterAccess": {
            "properties": {
                "dataLens": {
                    "type": "boolean",
                    "description": "Allow access for DataLens. Can be either `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataTransfer": {
                    "type": "boolean",
                    "description": "Allow access for DataTransfer. Can be either `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metrika": {
                    "type": "boolean",
                    "description": "Allow access for Yandex.Metrika. Can be either `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverless": {
                    "type": "boolean",
                    "description": "Allow access for Serverless. Can be either `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webSql": {
                    "type": "boolean",
                    "description": "Allow access for Web SQL. Can be either `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "yandexQuery": {
                    "type": "boolean",
                    "description": "Allow access for YandexQuery. Can be either `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbClickhouseClusterBackupWindowStart:MdbClickhouseClusterBackupWindowStart": {
            "properties": {
                "hours": {
                    "type": "number",
                    "description": "The hour at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minutes": {
                    "type": "number",
                    "description": "The minute at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbClickhouseClusterClickhouse:MdbClickhouseClusterClickhouse": {
            "properties": {
                "config": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterClickhouseConfig:MdbClickhouseClusterClickhouseConfig",
                    "description": "Main ClickHouse cluster configuration.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterClickhouseResources:MdbClickhouseClusterClickhouseResources",
                    "description": "Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ]
        },
        "yandex:index/MdbClickhouseClusterClickhouseConfig:MdbClickhouseClusterClickhouseConfig": {
            "properties": {
                "backgroundPoolSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backgroundSchedulePoolSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterClickhouseConfigCompression:MdbClickhouseClusterClickhouseConfigCompression"
                    },
                    "description": "Data compression configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "geobaseUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "graphiteRollups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterClickhouseConfigGraphiteRollup:MdbClickhouseClusterClickhouseConfigGraphiteRollup"
                    },
                    "description": "Graphite rollup configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafka": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterClickhouseConfigKafka:MdbClickhouseClusterClickhouseConfigKafka",
                    "description": "Kafka connection configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaTopics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterClickhouseConfigKafkaTopic:MdbClickhouseClusterClickhouseConfigKafkaTopic"
                    },
                    "description": "Kafka topic connection configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keepAliveTimeout": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "markCacheSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConcurrentQueries": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConnections": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPartitionSizeToDrop": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxTableSizeToDrop": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeTree": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterClickhouseConfigMergeTree:MdbClickhouseClusterClickhouseConfigMergeTree",
                    "description": "MergeTree engine configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricLogEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricLogRetentionSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricLogRetentionTime": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "partLogRetentionSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "partLogRetentionTime": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryLogRetentionSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryLogRetentionTime": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryThreadLogEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryThreadLogRetentionSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryThreadLogRetentionTime": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rabbitmq": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterClickhouseConfigRabbitmq:MdbClickhouseClusterClickhouseConfigRabbitmq",
                    "description": "RabbitMQ connection configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "textLogEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "textLogLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "textLogRetentionSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "textLogRetentionTime": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timezone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "traceLogEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "traceLogRetentionSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "traceLogRetentionTime": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uncompressedCacheSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "backgroundPoolSize",
                        "backgroundSchedulePoolSize",
                        "geobaseUri",
                        "kafka",
                        "keepAliveTimeout",
                        "logLevel",
                        "markCacheSize",
                        "maxConcurrentQueries",
                        "maxConnections",
                        "maxPartitionSizeToDrop",
                        "maxTableSizeToDrop",
                        "mergeTree",
                        "metricLogEnabled",
                        "metricLogRetentionSize",
                        "metricLogRetentionTime",
                        "partLogRetentionSize",
                        "partLogRetentionTime",
                        "queryLogRetentionSize",
                        "queryLogRetentionTime",
                        "queryThreadLogEnabled",
                        "queryThreadLogRetentionSize",
                        "queryThreadLogRetentionTime",
                        "rabbitmq",
                        "textLogEnabled",
                        "textLogLevel",
                        "textLogRetentionSize",
                        "textLogRetentionTime",
                        "timezone",
                        "traceLogEnabled",
                        "traceLogRetentionSize",
                        "traceLogRetentionTime",
                        "uncompressedCacheSize"
                    ]
                }
            }
        },
        "yandex:index/MdbClickhouseClusterClickhouseConfigCompression:MdbClickhouseClusterClickhouseConfigCompression": {
            "properties": {
                "method": {
                    "type": "string",
                    "description": "Method: Compression method. Two methods are available: LZ4 and zstd.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minPartSize": {
                    "type": "number",
                    "description": "Min part size: Minimum size (in bytes) of a data part in a table. ClickHouse only applies the rule to tables with data parts greater than or equal to the Min part size value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minPartSizeRatio": {
                    "type": "number",
                    "description": "Min part size ratio: Minimum table part size to total table size ratio. ClickHouse only applies the rule to tables in which this ratio is greater than or equal to the Min part size ratio value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "method",
                "minPartSize",
                "minPartSizeRatio"
            ]
        },
        "yandex:index/MdbClickhouseClusterClickhouseConfigGraphiteRollup:MdbClickhouseClusterClickhouseConfigGraphiteRollup": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Graphite rollup configuration name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "patterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterClickhouseConfigGraphiteRollupPattern:MdbClickhouseClusterClickhouseConfigGraphiteRollupPattern"
                    },
                    "description": "Set of thinning rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/MdbClickhouseClusterClickhouseConfigGraphiteRollupPattern:MdbClickhouseClusterClickhouseConfigGraphiteRollupPattern": {
            "properties": {
                "function": {
                    "type": "string",
                    "description": "Aggregation function name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "description": "Regular expression that the metric name must match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention:MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention"
                    },
                    "description": "Retain parameters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "function"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "function",
                        "regexp"
                    ]
                }
            }
        },
        "yandex:index/MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention:MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention": {
            "properties": {
                "age": {
                    "type": "number",
                    "description": "Minimum data age in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "precision": {
                    "type": "number",
                    "description": "Accuracy of determining the age of the data in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "age",
                "precision"
            ]
        },
        "yandex:index/MdbClickhouseClusterClickhouseConfigKafka:MdbClickhouseClusterClickhouseConfigKafka": {
            "properties": {
                "saslMechanism": {
                    "type": "string",
                    "description": "SASL mechanism used in kafka authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslPassword": {
                    "type": "string",
                    "description": "User password on kafka server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "saslUsername": {
                    "type": "string",
                    "description": "Username on kafka server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityProtocol": {
                    "type": "string",
                    "description": "Security protocol used to connect to kafka server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "saslMechanism",
                        "saslPassword",
                        "saslUsername",
                        "securityProtocol"
                    ]
                }
            }
        },
        "yandex:index/MdbClickhouseClusterClickhouseConfigKafkaTopic:MdbClickhouseClusterClickhouseConfigKafkaTopic": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Graphite rollup configuration name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterClickhouseConfigKafkaTopicSettings:MdbClickhouseClusterClickhouseConfigKafkaTopicSettings",
                    "description": "Kafka connection settngs sanem as `kafka` block.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/MdbClickhouseClusterClickhouseConfigKafkaTopicSettings:MdbClickhouseClusterClickhouseConfigKafkaTopicSettings": {
            "properties": {
                "saslMechanism": {
                    "type": "string",
                    "description": "SASL mechanism used in kafka authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslPassword": {
                    "type": "string",
                    "description": "User password on kafka server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "saslUsername": {
                    "type": "string",
                    "description": "Username on kafka server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityProtocol": {
                    "type": "string",
                    "description": "Security protocol used to connect to kafka server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbClickhouseClusterClickhouseConfigMergeTree:MdbClickhouseClusterClickhouseConfigMergeTree": {
            "properties": {
                "maxBytesToMergeAtMinSpaceInPool": {
                    "type": "number",
                    "description": "Max bytes to merge at min space in pool: Maximum total size of a data part to merge when the number of free threads in the background pool is minimum.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxReplicatedMergesInQueue": {
                    "type": "number",
                    "description": "Max replicated merges in queue: Maximum number of merge tasks that can be in the ReplicatedMergeTree queue at the same time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge": {
                    "type": "number",
                    "description": "Number of free entries in pool to lower max size of merge: Threshold value of free entries in the pool. If the number of entries in the pool falls below this value, ClickHouse reduces the maximum size of a data part to merge. This helps handle small merges faster, rather than filling the pool with lengthy merges.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "partsToDelayInsert": {
                    "type": "number",
                    "description": "Parts to delay insert: Number of active data parts in a table, on exceeding which ClickHouse starts artificially reduce the rate of inserting data into the table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "partsToThrowInsert": {
                    "type": "number",
                    "description": "Parts to throw insert: Threshold value of active data parts in a table, on exceeding which ClickHouse throws the 'Too many parts ...' exception.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicatedDeduplicationWindow": {
                    "type": "number",
                    "description": "Replicated deduplication window: Number of recent hash blocks that ZooKeeper will store (the old ones will be deleted).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicatedDeduplicationWindowSeconds": {
                    "type": "number",
                    "description": "Replicated deduplication window seconds: Time during which ZooKeeper stores the hash blocks (the old ones wil be deleted).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "maxBytesToMergeAtMinSpaceInPool",
                        "maxReplicatedMergesInQueue",
                        "numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge",
                        "partsToDelayInsert",
                        "partsToThrowInsert",
                        "replicatedDeduplicationWindow",
                        "replicatedDeduplicationWindowSeconds"
                    ]
                }
            }
        },
        "yandex:index/MdbClickhouseClusterClickhouseConfigRabbitmq:MdbClickhouseClusterClickhouseConfigRabbitmq": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "RabbitMQ user password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "RabbitMQ username.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "password",
                        "username"
                    ]
                }
            }
        },
        "yandex:index/MdbClickhouseClusterClickhouseResources:MdbClickhouseClusterClickhouseResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a ZooKeeper host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of ZooKeeper hosts.\nFor more information see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/storage).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ]
        },
        "yandex:index/MdbClickhouseClusterCloudStorage:MdbClickhouseClusterCloudStorage": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to use Yandex Object Storage for storing ClickHouse data. Can be either `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "yandex:index/MdbClickhouseClusterDatabase:MdbClickhouseClusterDatabase": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Graphite rollup configuration name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/MdbClickhouseClusterFormatSchema:MdbClickhouseClusterFormatSchema": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Graphite rollup configuration name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "Model file URL. You can only use models stored in Yandex Object Storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "uri"
            ]
        },
        "yandex:index/MdbClickhouseClusterHost:MdbClickhouseClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Sets whether the host should get a public IP address on creation. Can be either `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardName": {
                    "type": "string",
                    "description": "The name of the shard to which the host belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the ClickHouse host will be created.\nFor more information see [the official documentation](https://cloud.yandex.com/docs/overview/concepts/geo-scope).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fqdn",
                        "shardName",
                        "subnetId",
                        "type",
                        "zone"
                    ]
                }
            }
        },
        "yandex:index/MdbClickhouseClusterMaintenanceWindow:MdbClickhouseClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "yandex:index/MdbClickhouseClusterMlModel:MdbClickhouseClusterMlModel": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Graphite rollup configuration name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "Model file URL. You can only use models stored in Yandex Object Storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "uri"
            ]
        },
        "yandex:index/MdbClickhouseClusterShardGroup:MdbClickhouseClusterShardGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the shard group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Graphite rollup configuration name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of shards names that belong to the shard group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "shardNames"
            ]
        },
        "yandex:index/MdbClickhouseClusterTimeouts:MdbClickhouseClusterTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbClickhouseClusterUser:MdbClickhouseClusterUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Graphite rollup configuration name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "RabbitMQ user password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterUserPermission:MdbClickhouseClusterUserPermission"
                    },
                    "description": "Set of permissions granted to the user. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "quotas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterUserQuota:MdbClickhouseClusterUserQuota"
                    },
                    "description": "Set of user quotas. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterUserSettings:MdbClickhouseClusterUserSettings",
                    "description": "Kafka connection settngs sanem as `kafka` block.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "password"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "password",
                        "settings"
                    ]
                }
            }
        },
        "yandex:index/MdbClickhouseClusterUserPermission:MdbClickhouseClusterUserPermission": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database that the permission grants access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName"
            ]
        },
        "yandex:index/MdbClickhouseClusterUserQuota:MdbClickhouseClusterUserQuota": {
            "properties": {
                "errors": {
                    "type": "number",
                    "description": "The number of queries that threw exception.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "executionTime": {
                    "type": "number",
                    "description": "The total query execution time, in milliseconds (wall time).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalDuration": {
                    "type": "number",
                    "description": "Duration of interval for quota in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queries": {
                    "type": "number",
                    "description": "The total number of queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readRows": {
                    "type": "number",
                    "description": "The total number of source rows read from tables for running the query, on all remote servers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resultRows": {
                    "type": "number",
                    "description": "The total number of rows given as the result.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "intervalDuration"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "errors",
                        "executionTime",
                        "intervalDuration",
                        "queries",
                        "readRows",
                        "resultRows"
                    ]
                }
            }
        },
        "yandex:index/MdbClickhouseClusterUserSettings:MdbClickhouseClusterUserSettings": {
            "properties": {
                "addHttpCorsHeader": {
                    "type": "boolean",
                    "description": "Include CORS headers in HTTP responces.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowDdl": {
                    "type": "boolean",
                    "description": "Allows or denies DDL queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compile": {
                    "type": "boolean",
                    "description": "Enable compilation of queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compileExpressions": {
                    "type": "boolean",
                    "description": "Turn on expression compilation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectTimeout": {
                    "type": "number",
                    "description": "Connect timeout in milliseconds on the socket used for communicating with the client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "countDistinctImplementation": {
                    "type": "string",
                    "description": "Specifies which of the uniq* functions should be used to perform the COUNT(DISTINCT …) construction.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "distinctOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow when using DISTINCT. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "distributedAggregationMemoryEfficient": {
                    "type": "boolean",
                    "description": "Determine the behavior of distributed subqueries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "distributedDdlTaskTimeout": {
                    "type": "number",
                    "description": "Timeout for DDL queries, in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "distributedProductMode": {
                    "type": "string",
                    "description": "Changes the behaviour of distributed subqueries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "emptyResultForAggregationByEmptySet": {
                    "type": "boolean",
                    "description": "Allows to retunr empty result.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableHttpCompression": {
                    "type": "boolean",
                    "description": "Enables or disables data compression in the response to an HTTP request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fallbackToStaleReplicasForDistributedQueries": {
                    "type": "boolean",
                    "description": "Forces a query to an out-of-date replica if updated data is not available.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forceIndexByDate": {
                    "type": "boolean",
                    "description": "Disables query execution if the index can’t be used by date.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forcePrimaryKey": {
                    "type": "boolean",
                    "description": "Disables query execution if indexing by the primary key is not possible.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupByOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow while GROUP BY operation. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupByTwoLevelThreshold": {
                    "type": "number",
                    "description": "Sets the threshold of the number of keys, after that the two-level aggregation should be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupByTwoLevelThresholdBytes": {
                    "type": "number",
                    "description": "Sets the threshold of the number of bytes, after that the two-level aggregation should be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpConnectionTimeout": {
                    "type": "number",
                    "description": "Timeout for HTTP connection in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpHeadersProgressInterval": {
                    "type": "number",
                    "description": "Sets minimal interval between notifications about request process in HTTP header X-ClickHouse-Progress.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpReceiveTimeout": {
                    "type": "number",
                    "description": "Timeout for HTTP connection in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpSendTimeout": {
                    "type": "number",
                    "description": "Timeout for HTTP connection in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputFormatDefaultsForOmittedFields": {
                    "type": "boolean",
                    "description": "When performing INSERT queries, replace omitted input column values with default values of the respective columns.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputFormatValuesInterpretExpressions": {
                    "type": "boolean",
                    "description": "Enables or disables the full SQL parser if the fast stream parser can’t parse the data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insertQuorum": {
                    "type": "number",
                    "description": "Enables the quorum writes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insertQuorumTimeout": {
                    "type": "number",
                    "description": "Write to a quorum timeout in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow in JOIN. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinUseNulls": {
                    "type": "boolean",
                    "description": "Sets the type of JOIN behaviour. When merging tables, empty cells may appear. ClickHouse fills them differently based on this setting.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinedSubqueryRequiresAlias": {
                    "type": "boolean",
                    "description": "Require aliases for subselects and table functions in FROM that more than one table is present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lowCardinalityAllowInNativeFormat": {
                    "type": "boolean",
                    "description": "Allows or restricts using the LowCardinality data type with the Native format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAstDepth": {
                    "type": "number",
                    "description": "Maximum abstract syntax tree depth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAstElements": {
                    "type": "number",
                    "description": "Maximum abstract syntax tree elements.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBlockSize": {
                    "type": "number",
                    "description": "A recommendation for what size of the block (in a count of rows) to load from tables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesBeforeExternalGroupBy": {
                    "type": "number",
                    "description": "Limit in bytes for using memoru for GROUP BY before using swap on disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesBeforeExternalSort": {
                    "type": "number",
                    "description": "This setting is equivalent of the max_bytes_before_external_group_by setting, except for it is for sort operation (ORDER BY), not aggregation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesInDistinct": {
                    "type": "number",
                    "description": "Limits the maximum size of a hash table in bytes (uncompressed data) when using DISTINCT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesInJoin": {
                    "type": "number",
                    "description": "Limit on maximum size of the hash table for JOIN, in bytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesInSet": {
                    "type": "number",
                    "description": "Limit on the number of bytes in the set resulting from the execution of the IN section.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesToRead": {
                    "type": "number",
                    "description": "Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesToSort": {
                    "type": "number",
                    "description": "Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesToTransfer": {
                    "type": "number",
                    "description": "Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary table when using GLOBAL IN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxColumnsToRead": {
                    "type": "number",
                    "description": "Limits the maximum number of columns that can be read from a table in a single query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxExecutionTime": {
                    "type": "number",
                    "description": "Limits the maximum query execution time in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxExpandedAstElements": {
                    "type": "number",
                    "description": "Maximum abstract syntax tree depth after after expansion of aliases.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxInsertBlockSize": {
                    "type": "number",
                    "description": "The size of blocks (in a count of rows) to form for insertion into a table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxMemoryUsage": {
                    "type": "number",
                    "description": "Limits the maximum memory usage (in bytes) for processing queries on a single server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxMemoryUsageForUser": {
                    "type": "number",
                    "description": "Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNetworkBandwidth": {
                    "type": "number",
                    "description": "Limits the speed of the data exchange over the network in bytes per second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNetworkBandwidthForUser": {
                    "type": "number",
                    "description": "Limits the speed of the data exchange over the network in bytes per second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxQuerySize": {
                    "type": "number",
                    "description": "The maximum part of a query that can be taken to RAM for parsing with the SQL parser.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxReplicaDelayForDistributedQueries": {
                    "type": "number",
                    "description": "Disables lagging replicas for distributed queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxResultBytes": {
                    "type": "number",
                    "description": "Limits the number of bytes in the result.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxResultRows": {
                    "type": "number",
                    "description": "Limits the number of rows in the result.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRowsInDistinct": {
                    "type": "number",
                    "description": "Limits the maximum number of different rows when using DISTINCT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRowsInJoin": {
                    "type": "number",
                    "description": "Limit on maximum size of the hash table for JOIN, in rows.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRowsInSet": {
                    "type": "number",
                    "description": "Limit on the number of rows in the set resulting from the execution of the IN section.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRowsToGroupBy": {
                    "type": "number",
                    "description": "Limits the maximum number of unique keys received from aggregation function.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRowsToRead": {
                    "type": "number",
                    "description": "Limits the maximum number of rows that can be read from a table when running a query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRowsToSort": {
                    "type": "number",
                    "description": "Limits the maximum number of rows that can be read from a table for sorting.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRowsToTransfer": {
                    "type": "number",
                    "description": "Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using GLOBAL IN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxTemporaryColumns": {
                    "type": "number",
                    "description": "Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxTemporaryNonConstColumns": {
                    "type": "number",
                    "description": "Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxThreads": {
                    "type": "number",
                    "description": "The maximum number of query processing threads, excluding threads for retrieving data from remote servers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeTreeMaxBytesToUseCache": {
                    "type": "number",
                    "description": "If ClickHouse should read more than merge_tree_max_bytes_to_use_cache bytes in one query, it doesn’t use the cache of uncompressed blocks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeTreeMaxRowsToUseCache": {
                    "type": "number",
                    "description": "If ClickHouse should read more than merge_tree_max_rows_to_use_cache rows in one query, it doesn’t use the cache of uncompressed blocks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeTreeMinBytesForConcurrentRead": {
                    "type": "number",
                    "description": "If the number of bytes to read from one file of a MergeTree-engine table exceeds merge_tree_min_bytes_for_concurrent_read, then ClickHouse tries to concurrently read from this file in several threads.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeTreeMinRowsForConcurrentRead": {
                    "type": "number",
                    "description": "If the number of rows to be read from a file of a MergeTree table exceeds merge_tree_min_rows_for_concurrent_read then ClickHouse tries to perform a concurrent reading from this file on several threads.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minBytesToUseDirectIo": {
                    "type": "number",
                    "description": "The minimum data volume required for using direct I/O access to the storage disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minCountToCompile": {
                    "type": "number",
                    "description": "How many times to potentially use a compiled chunk of code before running compilation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minCountToCompileExpression": {
                    "type": "number",
                    "description": "A query waits for expression compilation process to complete prior to continuing execution.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minExecutionSpeed": {
                    "type": "number",
                    "description": "Minimal execution speed in rows per second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minExecutionSpeedBytes": {
                    "type": "number",
                    "description": "Minimal execution speed in bytes per second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minInsertBlockSizeBytes": {
                    "type": "number",
                    "description": "Sets the minimum number of bytes in the block which can be inserted into a table by an INSERT query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minInsertBlockSizeRows": {
                    "type": "number",
                    "description": "Sets the minimum number of rows in the block which can be inserted into a table by an INSERT query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "outputFormatJsonQuote64bitIntegers": {
                    "type": "boolean",
                    "description": "If the value is true, integers appear in quotes when using JSON* Int64 and UInt64 formats (for compatibility with most JavaScript implementations); otherwise, integers are output without the quotes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "outputFormatJsonQuoteDenormals": {
                    "type": "boolean",
                    "description": "Enables +nan, -nan, +inf, -inf outputs in JSON output format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "number",
                    "description": "Query priority.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "quotaMode": {
                    "type": "string",
                    "description": "Quota accounting mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow while read. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "number",
                    "description": "Restricts permissions for reading data, write data and change settings queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "receiveTimeout": {
                    "type": "number",
                    "description": "Receive timeout in milliseconds on the socket used for communicating with the client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationAlterPartitionsSync": {
                    "type": "number",
                    "description": "For ALTER ... ATTACH|DETACH|DROP queries, you can use the replication_alter_partitions_sync setting to set up waiting.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resultOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow in result. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "selectSequentialConsistency": {
                    "type": "boolean",
                    "description": "Enables or disables sequential consistency for SELECT queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendProgressInHttpHeaders": {
                    "type": "boolean",
                    "description": "Enables or disables X-ClickHouse-Progress HTTP response headers in clickhouse-server responses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendTimeout": {
                    "type": "number",
                    "description": "Send timeout in milliseconds on the socket used for communicating with the client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "setOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow in the set resulting. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "skipUnavailableShards": {
                    "type": "boolean",
                    "description": "Enables or disables silently skipping of unavailable shards.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow while sort. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeoutOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transferOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transformNullIn": {
                    "type": "boolean",
                    "description": "Enables equality of NULL values for IN operator.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useUncompressedCache": {
                    "type": "boolean",
                    "description": "Whether to use a cache of uncompressed blocks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addHttpCorsHeader",
                        "allowDdl",
                        "compile",
                        "compileExpressions",
                        "connectTimeout",
                        "countDistinctImplementation",
                        "distinctOverflowMode",
                        "distributedAggregationMemoryEfficient",
                        "distributedDdlTaskTimeout",
                        "distributedProductMode",
                        "emptyResultForAggregationByEmptySet",
                        "enableHttpCompression",
                        "fallbackToStaleReplicasForDistributedQueries",
                        "forceIndexByDate",
                        "forcePrimaryKey",
                        "groupByOverflowMode",
                        "groupByTwoLevelThreshold",
                        "groupByTwoLevelThresholdBytes",
                        "httpConnectionTimeout",
                        "httpHeadersProgressInterval",
                        "httpReceiveTimeout",
                        "httpSendTimeout",
                        "inputFormatDefaultsForOmittedFields",
                        "inputFormatValuesInterpretExpressions",
                        "insertQuorum",
                        "insertQuorumTimeout",
                        "joinOverflowMode",
                        "joinUseNulls",
                        "joinedSubqueryRequiresAlias",
                        "lowCardinalityAllowInNativeFormat",
                        "maxAstDepth",
                        "maxAstElements",
                        "maxBlockSize",
                        "maxBytesBeforeExternalGroupBy",
                        "maxBytesBeforeExternalSort",
                        "maxBytesInDistinct",
                        "maxBytesInJoin",
                        "maxBytesInSet",
                        "maxBytesToRead",
                        "maxBytesToSort",
                        "maxBytesToTransfer",
                        "maxColumnsToRead",
                        "maxExecutionTime",
                        "maxExpandedAstElements",
                        "maxInsertBlockSize",
                        "maxMemoryUsage",
                        "maxMemoryUsageForUser",
                        "maxNetworkBandwidth",
                        "maxNetworkBandwidthForUser",
                        "maxQuerySize",
                        "maxReplicaDelayForDistributedQueries",
                        "maxResultBytes",
                        "maxResultRows",
                        "maxRowsInDistinct",
                        "maxRowsInJoin",
                        "maxRowsInSet",
                        "maxRowsToGroupBy",
                        "maxRowsToRead",
                        "maxRowsToSort",
                        "maxRowsToTransfer",
                        "maxTemporaryColumns",
                        "maxTemporaryNonConstColumns",
                        "maxThreads",
                        "mergeTreeMaxBytesToUseCache",
                        "mergeTreeMaxRowsToUseCache",
                        "mergeTreeMinBytesForConcurrentRead",
                        "mergeTreeMinRowsForConcurrentRead",
                        "minBytesToUseDirectIo",
                        "minCountToCompile",
                        "minCountToCompileExpression",
                        "minExecutionSpeed",
                        "minExecutionSpeedBytes",
                        "minInsertBlockSizeBytes",
                        "minInsertBlockSizeRows",
                        "outputFormatJsonQuote64bitIntegers",
                        "outputFormatJsonQuoteDenormals",
                        "priority",
                        "quotaMode",
                        "readOverflowMode",
                        "readonly",
                        "receiveTimeout",
                        "replicationAlterPartitionsSync",
                        "resultOverflowMode",
                        "selectSequentialConsistency",
                        "sendProgressInHttpHeaders",
                        "sendTimeout",
                        "setOverflowMode",
                        "skipUnavailableShards",
                        "sortOverflowMode",
                        "timeoutOverflowMode",
                        "transferOverflowMode",
                        "transformNullIn",
                        "useUncompressedCache"
                    ]
                }
            }
        },
        "yandex:index/MdbClickhouseClusterZookeeper:MdbClickhouseClusterZookeeper": {
            "properties": {
                "resources": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterZookeeperResources:MdbClickhouseClusterZookeeperResources",
                    "description": "Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "resources"
                    ]
                }
            }
        },
        "yandex:index/MdbClickhouseClusterZookeeperResources:MdbClickhouseClusterZookeeperResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a ZooKeeper host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of ZooKeeper hosts.\nFor more information see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/storage).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "diskSize",
                        "diskTypeId",
                        "resourcePresetId"
                    ]
                }
            }
        },
        "yandex:index/MdbElasticSearchClusterConfig:MdbElasticSearchClusterConfig": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "description": "Password for admin user of Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "dataNode": {
                    "$ref": "#/types/yandex:index/MdbElasticSearchClusterConfigDataNode:MdbElasticSearchClusterConfigDataNode",
                    "description": "Configuration for Elasticsearch data nodes subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "edition": {
                    "type": "string",
                    "description": "Edition of Elasticsearch. For more information, see [the official documentation](https://cloud.yandex.com/en-ru/docs/managed-elasticsearch/concepts/es-editions).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterNode": {
                    "$ref": "#/types/yandex:index/MdbElasticSearchClusterConfigMasterNode:MdbElasticSearchClusterConfigMasterNode",
                    "description": "Configuration for Elasticsearch master nodes subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of Elasticsearch plugins to install.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "adminPassword",
                "dataNode"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adminPassword",
                        "dataNode",
                        "edition",
                        "version"
                    ]
                }
            }
        },
        "yandex:index/MdbElasticSearchClusterConfigDataNode:MdbElasticSearchClusterConfigDataNode": {
            "properties": {
                "resources": {
                    "$ref": "#/types/yandex:index/MdbElasticSearchClusterConfigDataNodeResources:MdbElasticSearchClusterConfigDataNodeResources",
                    "description": "Resources allocated to hosts of the Elasticsearch master nodes subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ]
        },
        "yandex:index/MdbElasticSearchClusterConfigDataNodeResources:MdbElasticSearchClusterConfigDataNodeResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of Elasticsearch hosts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ]
        },
        "yandex:index/MdbElasticSearchClusterConfigMasterNode:MdbElasticSearchClusterConfigMasterNode": {
            "properties": {
                "resources": {
                    "$ref": "#/types/yandex:index/MdbElasticSearchClusterConfigMasterNodeResources:MdbElasticSearchClusterConfigMasterNodeResources",
                    "description": "Resources allocated to hosts of the Elasticsearch master nodes subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ]
        },
        "yandex:index/MdbElasticSearchClusterConfigMasterNodeResources:MdbElasticSearchClusterConfigMasterNodeResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of Elasticsearch hosts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ]
        },
        "yandex:index/MdbElasticSearchClusterHost:MdbElasticSearchClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Sets whether the host should get a public IP address on creation. Can be either `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "User defined host name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs. The subnet must\nbe a part of the network to which the cluster belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the Elasticsearch host will be created.\nFor more information see [the official documentation](https://cloud.yandex.com/docs/overview/concepts/geo-scope).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fqdn",
                        "name",
                        "subnetId",
                        "type",
                        "zone"
                    ]
                }
            }
        },
        "yandex:index/MdbElasticSearchClusterMaintenanceWindow:MdbElasticSearchClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "yandex:index/MdbElasticSearchClusterTimeouts:MdbElasticSearchClusterTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbGreenplumClusterAccess:MdbGreenplumClusterAccess": {
            "properties": {
                "dataLens": {
                    "type": "boolean",
                    "description": "Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataTransfer": {
                    "type": "boolean",
                    "description": "Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webSql": {
                    "type": "boolean",
                    "description": "Allows access for [SQL queries in the management console](https://cloud.yandex.com/docs/managed-mysql/operations/web-sql-query).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbGreenplumClusterBackupWindowStart:MdbGreenplumClusterBackupWindowStart": {
            "properties": {
                "hours": {
                    "type": "number",
                    "description": "The hour at which backup will be started (UTC).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minutes": {
                    "type": "number",
                    "description": "The minute at which backup will be started (UTC).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbGreenplumClusterMaintenanceWindow:MdbGreenplumClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of the week (in `DDD` format). Allowed values: \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of the day in UTC (in `HH` format). Allowed value is between 0 and 23.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "yandex:index/MdbGreenplumClusterMasterHost:MdbGreenplumClusterMasterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "(Computed) The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignPublicIp",
                "fqdn"
            ]
        },
        "yandex:index/MdbGreenplumClusterMasterSubcluster:MdbGreenplumClusterMasterSubcluster": {
            "properties": {
                "resources": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterMasterSubclusterResources:MdbGreenplumClusterMasterSubclusterResources",
                    "description": "Resources allocated to hosts for segment subcluster of the Greenplum cluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ]
        },
        "yandex:index/MdbGreenplumClusterMasterSubclusterResources:MdbGreenplumClusterMasterSubclusterResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ]
        },
        "yandex:index/MdbGreenplumClusterPoolerConfig:MdbGreenplumClusterPoolerConfig": {
            "properties": {
                "poolClientIdleTimeout": {
                    "type": "number",
                    "description": "Value for `pool_client_idle_timeout` [parameter in Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_ttl-integer).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "poolSize": {
                    "type": "number",
                    "description": "Value for `pool_size` [parameter in Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_size-integer).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "poolingMode": {
                    "type": "string",
                    "description": "Mode that the connection pooler is working in. See descriptions of all modes in the [documentation for Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool-string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbGreenplumClusterSegmentHost:MdbGreenplumClusterSegmentHost": {
            "properties": {
                "fqdn": {
                    "type": "string",
                    "description": "(Computed) The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fqdn"
            ]
        },
        "yandex:index/MdbGreenplumClusterSegmentSubcluster:MdbGreenplumClusterSegmentSubcluster": {
            "properties": {
                "resources": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterSegmentSubclusterResources:MdbGreenplumClusterSegmentSubclusterResources",
                    "description": "Resources allocated to hosts for segment subcluster of the Greenplum cluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ]
        },
        "yandex:index/MdbGreenplumClusterSegmentSubclusterResources:MdbGreenplumClusterSegmentSubclusterResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ]
        },
        "yandex:index/MdbGreenplumClusterTimeouts:MdbGreenplumClusterTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbKafkaClusterConfig:MdbKafkaClusterConfig": {
            "properties": {
                "access": {
                    "$ref": "#/types/yandex:index/MdbKafkaClusterConfigAccess:MdbKafkaClusterConfigAccess",
                    "description": "Access policy to the Kafka cluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Determines whether each broker will be assigned a public IP address. The default is `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "brokersCount": {
                    "type": "number",
                    "description": "Count of brokers per availability zone. The default is `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafka": {
                    "$ref": "#/types/yandex:index/MdbKafkaClusterConfigKafka:MdbKafkaClusterConfigKafka",
                    "description": "Configuration of the Kafka subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schemaRegistry": {
                    "type": "boolean",
                    "description": "Enables managed schema registry on cluster. The default is `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unmanagedTopics": {
                    "type": "boolean",
                    "description": "Allows to use Kafka AdminAPI to manage topics. The default is `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of the Kafka server software.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of availability zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zookeeper": {
                    "$ref": "#/types/yandex:index/MdbKafkaClusterConfigZookeeper:MdbKafkaClusterConfigZookeeper",
                    "description": "Configuration of the ZooKeeper subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kafka",
                "version",
                "zones"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kafka",
                        "version",
                        "zones",
                        "zookeeper"
                    ]
                }
            }
        },
        "yandex:index/MdbKafkaClusterConfigAccess:MdbKafkaClusterConfigAccess": {
            "properties": {
                "dataTransfer": {
                    "type": "boolean",
                    "description": "Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbKafkaClusterConfigKafka:MdbKafkaClusterConfigKafka": {
            "properties": {
                "kafkaConfig": {
                    "$ref": "#/types/yandex:index/MdbKafkaClusterConfigKafkaKafkaConfig:MdbKafkaClusterConfigKafkaKafkaConfig",
                    "description": "User-defined settings for the Kafka cluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "$ref": "#/types/yandex:index/MdbKafkaClusterConfigKafkaResources:MdbKafkaClusterConfigKafkaResources",
                    "description": "Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ]
        },
        "yandex:index/MdbKafkaClusterConfigKafkaKafkaConfig:MdbKafkaClusterConfigKafkaKafkaConfig": {
            "properties": {
                "autoCreateTopicsEnable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compressionType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultReplicationFactor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logFlushIntervalMessages": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logFlushIntervalMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logFlushSchedulerIntervalMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logPreallocate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRetentionBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRetentionHours": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRetentionMinutes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRetentionMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logSegmentBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageMaxBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numPartitions": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offsetsRetentionMinutes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicaFetchMaxBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "socketReceiveBufferBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "socketSendBufferBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslCipherSuites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sslCipherSuites"
                    ]
                }
            }
        },
        "yandex:index/MdbKafkaClusterConfigKafkaResources:MdbKafkaClusterConfigKafkaResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a ZooKeeper host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of ZooKeeper hosts.\nFor more information see [the official documentation](https://cloud.yandex.com/docs/managed-kafka/concepts/storage).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ]
        },
        "yandex:index/MdbKafkaClusterConfigZookeeper:MdbKafkaClusterConfigZookeeper": {
            "properties": {
                "resources": {
                    "$ref": "#/types/yandex:index/MdbKafkaClusterConfigZookeeperResources:MdbKafkaClusterConfigZookeeperResources",
                    "description": "Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "resources"
                    ]
                }
            }
        },
        "yandex:index/MdbKafkaClusterConfigZookeeperResources:MdbKafkaClusterConfigZookeeperResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a ZooKeeper host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of ZooKeeper hosts.\nFor more information see [the official documentation](https://cloud.yandex.com/docs/managed-kafka/concepts/storage).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "diskSize",
                        "diskTypeId",
                        "resourcePresetId"
                    ]
                }
            }
        },
        "yandex:index/MdbKafkaClusterHost:MdbKafkaClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Determines whether each broker will be assigned a public IP address. The default is `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "health": {
                    "type": "string",
                    "description": "Health of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "The role type to grant to the topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The availability zone where the Kafka host was created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignPublicIp",
                "health",
                "name",
                "role",
                "subnetId",
                "zoneId"
            ]
        },
        "yandex:index/MdbKafkaClusterMaintenanceWindow:MdbKafkaClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of the week (in `DDD` format). Allowed values: \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of the day in UTC (in `HH` format). Allowed value is between 1 and 24.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "yandex:index/MdbKafkaClusterTimeouts:MdbKafkaClusterTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbKafkaClusterTopic:MdbKafkaClusterTopic": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "partitions": {
                    "type": "number",
                    "description": "The number of the topic's partitions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationFactor": {
                    "type": "number",
                    "description": "Amount of data copies (replicas) for the topic in the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicConfig": {
                    "$ref": "#/types/yandex:index/MdbKafkaClusterTopicTopicConfig:MdbKafkaClusterTopicTopicConfig",
                    "description": "User-defined settings for the topic. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "partitions",
                "replicationFactor"
            ]
        },
        "yandex:index/MdbKafkaClusterTopicTopicConfig:MdbKafkaClusterTopicTopicConfig": {
            "properties": {
                "cleanupPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compressionType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteRetentionMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileDeleteDelayMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flushMessages": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flushMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxMessageBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minCompactionLagMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minInsyncReplicas": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preallocate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "segmentBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbKafkaClusterUser:MdbKafkaClusterUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaClusterUserPermission:MdbKafkaClusterUserPermission"
                    },
                    "description": "Set of permissions granted to the user. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "password"
            ]
        },
        "yandex:index/MdbKafkaClusterUserPermission:MdbKafkaClusterUserPermission": {
            "properties": {
                "role": {
                    "type": "string",
                    "description": "The role type to grant to the topic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicName": {
                    "type": "string",
                    "description": "The name of the topic that the permission grants access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "role",
                "topicName"
            ]
        },
        "yandex:index/MdbKafkaConnectorConnectorConfigMirrormaker:MdbKafkaConnectorConnectorConfigMirrormaker": {
            "properties": {
                "replicationFactor": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceCluster": {
                    "$ref": "#/types/yandex:index/MdbKafkaConnectorConnectorConfigMirrormakerSourceCluster:MdbKafkaConnectorConnectorConfigMirrormakerSourceCluster",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetCluster": {
                    "$ref": "#/types/yandex:index/MdbKafkaConnectorConnectorConfigMirrormakerTargetCluster:MdbKafkaConnectorConnectorConfigMirrormakerTargetCluster",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topics": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "replicationFactor",
                "sourceCluster",
                "targetCluster",
                "topics"
            ]
        },
        "yandex:index/MdbKafkaConnectorConnectorConfigMirrormakerSourceCluster:MdbKafkaConnectorConnectorConfigMirrormakerSourceCluster": {
            "properties": {
                "alias": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalClusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster:MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thisClusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisCluster:MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisCluster"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "thisClusters"
                    ]
                }
            }
        },
        "yandex:index/MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster:MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster": {
            "properties": {
                "bootstrapServers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslMechanism": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "saslUsername": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityProtocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bootstrapServers"
            ]
        },
        "yandex:index/MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisCluster:MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisCluster": {
            "type": "object"
        },
        "yandex:index/MdbKafkaConnectorConnectorConfigMirrormakerTargetCluster:MdbKafkaConnectorConnectorConfigMirrormakerTargetCluster": {
            "properties": {
                "alias": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalClusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster:MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thisClusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisCluster:MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisCluster"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "thisClusters"
                    ]
                }
            }
        },
        "yandex:index/MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster:MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster": {
            "properties": {
                "bootstrapServers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslMechanism": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "saslUsername": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityProtocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bootstrapServers"
            ]
        },
        "yandex:index/MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisCluster:MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisCluster": {
            "type": "object"
        },
        "yandex:index/MdbKafkaConnectorConnectorConfigS3Sink:MdbKafkaConnectorConnectorConfigS3Sink": {
            "properties": {
                "fileCompressionType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileMaxRecords": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "s3Connection": {
                    "$ref": "#/types/yandex:index/MdbKafkaConnectorConnectorConfigS3SinkS3Connection:MdbKafkaConnectorConnectorConfigS3SinkS3Connection",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topics": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fileCompressionType",
                "s3Connection",
                "topics"
            ]
        },
        "yandex:index/MdbKafkaConnectorConnectorConfigS3SinkS3Connection:MdbKafkaConnectorConnectorConfigS3SinkS3Connection": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalS3s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3:MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "externalS3s"
            ]
        },
        "yandex:index/MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3:MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretAccessKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "endpoint"
            ]
        },
        "yandex:index/MdbKafkaTopicTimeouts:MdbKafkaTopicTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbKafkaTopicTopicConfig:MdbKafkaTopicTopicConfig": {
            "properties": {
                "cleanupPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compressionType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteRetentionMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileDeleteDelayMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flushMessages": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flushMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxMessageBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minCompactionLagMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minInsyncReplicas": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preallocate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "segmentBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMongodbClusterClusterConfig:MdbMongodbClusterClusterConfig": {
            "properties": {
                "access": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterClusterConfigAccess:MdbMongodbClusterClusterConfigAccess",
                    "description": "Access policy to the MongoDB cluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupWindowStart": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterClusterConfigBackupWindowStart:MdbMongodbClusterClusterConfigBackupWindowStart",
                    "description": "Time to start the daily backup, in the UTC timezone. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "featureCompatibilityVersion": {
                    "type": "string",
                    "description": "Feature compatibility version of MongoDB. If not provided version is taken. Can be either `5.0`, `4.4`, `4.2` and `4.0`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mongod": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterClusterConfigMongod:MdbMongodbClusterClusterConfigMongod",
                    "description": "Configuration of the mongod service. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of MongoDB (either 5.0, 4.4, 4.2 or 4.0).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "featureCompatibilityVersion",
                        "version"
                    ]
                }
            }
        },
        "yandex:index/MdbMongodbClusterClusterConfigAccess:MdbMongodbClusterClusterConfigAccess": {
            "properties": {
                "dataLens": {
                    "type": "boolean",
                    "description": "Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataTransfer": {
                    "type": "boolean",
                    "description": "Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMongodbClusterClusterConfigBackupWindowStart:MdbMongodbClusterClusterConfigBackupWindowStart": {
            "properties": {
                "hours": {
                    "type": "number",
                    "description": "The hour at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minutes": {
                    "type": "number",
                    "description": "The minute at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMongodbClusterClusterConfigMongod:MdbMongodbClusterClusterConfigMongod": {
            "properties": {
                "auditLog": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterClusterConfigMongodAuditLog:MdbMongodbClusterClusterConfigMongodAuditLog",
                    "description": "A set of audit log settings \n(see the [auditLog](https://www.mongodb.com/docs/manual/reference/configuration-options/#auditlog-options) option).\nThe structure is documented below. Available only in enterprise edition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "security": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterClusterConfigMongodSecurity:MdbMongodbClusterClusterConfigMongodSecurity",
                    "description": "A set of MongoDB Security settings\n(see the [security](https://www.mongodb.com/docs/manual/reference/configuration-options/#security-options) option).\nThe structure is documented below. Available only in enterprise edition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "setParameter": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterClusterConfigMongodSetParameter:MdbMongodbClusterClusterConfigMongodSetParameter",
                    "description": "A set of MongoDB Server Parameters \n(see the [setParameter](https://www.mongodb.com/docs/manual/reference/configuration-options/#setparameter-option) option).\nThe structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMongodbClusterClusterConfigMongodAuditLog:MdbMongodbClusterClusterConfigMongodAuditLog": {
            "properties": {
                "filter": {
                    "type": "string",
                    "description": "Configuration of the audit log filter in JSON format.\nFor more information see [auditLog.filter](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-auditLog.filter)\ndescription in the official documentation. Available only in enterprise edition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runtimeConfiguration": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMongodbClusterClusterConfigMongodSecurity:MdbMongodbClusterClusterConfigMongodSecurity": {
            "properties": {
                "enableEncryption": {
                    "type": "boolean",
                    "description": "Enables the encryption for the WiredTiger storage engine. Can be either true or false.\nFor more information see [security.enableEncryption](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.enableEncryption)\ndescription in the official documentation. Available only in enterprise edition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kmip": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterClusterConfigMongodSecurityKmip:MdbMongodbClusterClusterConfigMongodSecurityKmip",
                    "description": "Configuration of the third party key management appliance via the Key Management Interoperability Protocol (KMIP)\n(see [Encryption tutorial](https://www.mongodb.com/docs/rapid/tutorial/configure-encryption) ). Requires `enable_encryption` to be true.\nThe structure is documented below. Available only in enterprise edition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMongodbClusterClusterConfigMongodSecurityKmip:MdbMongodbClusterClusterConfigMongodSecurityKmip": {
            "properties": {
                "clientCertificate": {
                    "type": "string",
                    "description": "String containing the client certificate used for authenticating MongoDB to the KMIP server.\nFor more information see [security.kmip.clientCertificateFile](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.clientCertificateFile)\ndescription in the official documentation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyIdentifier": {
                    "type": "string",
                    "description": "Unique KMIP identifier for an existing key within the KMIP server.\nFor more information see [security.kmip.keyIdentifier](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.keyIdentifier)\ndescription in the official documentation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "Port number to use to communicate with the KMIP server. Default: 5696\nFor more information see [security.kmip.port](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.port)\ndescription in the official documentation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCa": {
                    "type": "string",
                    "description": "Path to CA File. Used for validating secure client connection to KMIP server.\nFor more information see [security.kmip.serverCAFile](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.serverCAFile)\ndescription in the official documentation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverName": {
                    "type": "string",
                    "description": "Hostname or IP address of the KMIP server to connect to.\nFor more information see [security.kmip.serverName](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.serverName)\ndescription in the official documentation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMongodbClusterClusterConfigMongodSetParameter:MdbMongodbClusterClusterConfigMongodSetParameter": {
            "properties": {
                "auditAuthorizationSuccess": {
                    "type": "boolean",
                    "description": "Enables the auditing of authorization successes. Can be either true or false.\nFor more information, see the [auditAuthorizationSuccess](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.auditAuthorizationSuccess)\ndescription in the official documentation. Available only in enterprise edition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMongodbClusterDatabase:MdbMongodbClusterDatabase": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host. Computed on server side.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/MdbMongodbClusterHost:MdbMongodbClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "-(Optional)  Should this host have assigned public IP assigned. Can be either `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "health": {
                    "type": "string",
                    "description": "The health of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host. Computed on server side.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "The role of the cluster (either PRIMARY or SECONDARY).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardName": {
                    "type": "string",
                    "description": "The name of the shard to which the host belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs. The subnet must\nbe a part of the network to which the cluster belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The availability zone where the MongoDB host will be created.\nFor more information see [the official documentation](https://cloud.yandex.com/docs/overview/concepts/geo-scope).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnetId",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "assignPublicIp",
                        "health",
                        "name",
                        "role",
                        "shardName",
                        "subnetId",
                        "type",
                        "zoneId"
                    ]
                }
            }
        },
        "yandex:index/MdbMongodbClusterMaintenanceWindow:MdbMongodbClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "yandex:index/MdbMongodbClusterResources:MdbMongodbClusterResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a MongoDB host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of MongoDB hosts.\nFor more information see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/storage).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ]
        },
        "yandex:index/MdbMongodbClusterTimeouts:MdbMongodbClusterTimeouts": {
            "properties": {
                "default": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMongodbClusterUser:MdbMongodbClusterUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host. Computed on server side.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMongodbClusterUserPermission:MdbMongodbClusterUserPermission"
                    },
                    "description": "Set of permissions granted to the user. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "password"
            ]
        },
        "yandex:index/MdbMongodbClusterUserPermission:MdbMongodbClusterUserPermission": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database that the permission grants access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles of the user in this database. For more information see [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/concepts/users-and-roles).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName"
            ]
        },
        "yandex:index/MdbMysqlClusterAccess:MdbMysqlClusterAccess": {
            "properties": {
                "dataLens": {
                    "type": "boolean",
                    "description": "Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataTransfer": {
                    "type": "boolean",
                    "description": "Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webSql": {
                    "type": "boolean",
                    "description": "Allows access for [SQL queries in the management console](https://cloud.yandex.com/docs/managed-mysql/operations/web-sql-query).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMysqlClusterBackupWindowStart:MdbMysqlClusterBackupWindowStart": {
            "properties": {
                "hours": {
                    "type": "number",
                    "description": "The hour at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minutes": {
                    "type": "number",
                    "description": "The minute at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMysqlClusterDatabase:MdbMysqlClusterDatabase": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Host state name. It should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please refer to `replication_source_name` parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/MdbMysqlClusterHost:MdbMysqlClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Sets whether the host should get a public IP address. It can be changed on the fly only when `name` is set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupPriority": {
                    "type": "number",
                    "description": "Host backup priority. Value is between 0 and 100, default is 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Host state name. It should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please refer to `replication_source_name` parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "number",
                    "description": "Host master promotion priority. Value is between 0 and 100, default is 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationSource": {
                    "type": "string",
                    "description": "Host replication source (fqdn), when replication_source is empty then host is in HA group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationSourceName": {
                    "type": "string",
                    "description": "Host replication source name points to host's `name` from which this host should replicate. When not set then host in HA group. It works only when `name` is set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the MySQL host will be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fqdn",
                        "replicationSource",
                        "subnetId",
                        "zone"
                    ]
                }
            }
        },
        "yandex:index/MdbMysqlClusterMaintenanceWindow:MdbMysqlClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of the week (in `DDD` format). Allowed values: \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of the day in UTC (in `HH` format). Allowed value is between 0 and 23.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "yandex:index/MdbMysqlClusterPerformanceDiagnostics:MdbMysqlClusterPerformanceDiagnostics": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable performance diagnostics\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sessionsSamplingInterval": {
                    "type": "number",
                    "description": "Interval (in seconds) for my_stat_activity sampling Acceptable values are 1 to 86400, inclusive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statementsSamplingInterval": {
                    "type": "number",
                    "description": "Interval (in seconds) for my_stat_statements sampling Acceptable values are 1 to 86400, inclusive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sessionsSamplingInterval",
                "statementsSamplingInterval"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "sessionsSamplingInterval",
                        "statementsSamplingInterval"
                    ]
                }
            }
        },
        "yandex:index/MdbMysqlClusterResources:MdbMysqlClusterResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a MySQL host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of MySQL hosts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ]
        },
        "yandex:index/MdbMysqlClusterRestore:MdbMysqlClusterRestore": {
            "properties": {
                "backupId": {
                    "type": "string",
                    "description": "Backup ID. The cluster will be created from the specified backup. [How to get a list of MySQL backups](https://cloud.yandex.com/docs/managed-mysql/operations/cluster-backups).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "time": {
                    "type": "string",
                    "description": "Timestamp of the moment to which the MySQL cluster should be restored. (Format: \"2006-01-02T15:04:05\" - UTC). When not set, current time is used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backupId"
            ]
        },
        "yandex:index/MdbMysqlClusterTimeouts:MdbMysqlClusterTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMysqlClusterUser:MdbMysqlClusterUser": {
            "properties": {
                "authenticationPlugin": {
                    "type": "string",
                    "description": "Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD` (for version 5.7 `MYSQL_NATIVE_PASSWORD`, `SHA256_PASSWORD`)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionLimits": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterUserConnectionLimits:MdbMysqlClusterUserConnectionLimits",
                    "description": "User's connection limits. The structure is documented below.\nIf the attribute is not specified there will be no changes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List user's global permissions     \nAllowed permissions:  `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS` for clear list use empty list.\nIf the attribute is not specified there will be no changes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Host state name. It should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please refer to `replication_source_name` parameter.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMysqlClusterUserPermission:MdbMysqlClusterUserPermission"
                    },
                    "description": "Set of permissions granted to the user. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "password"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authenticationPlugin",
                        "globalPermissions",
                        "name",
                        "password"
                    ]
                }
            }
        },
        "yandex:index/MdbMysqlClusterUserConnectionLimits:MdbMysqlClusterUserConnectionLimits": {
            "properties": {
                "maxConnectionsPerHour": {
                    "type": "number",
                    "description": "Max connections per hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxQuestionsPerHour": {
                    "type": "number",
                    "description": "Max questions per hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUpdatesPerHour": {
                    "type": "number",
                    "description": "Max updates per hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUserConnections": {
                    "type": "number",
                    "description": "Max user connections.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMysqlClusterUserPermission:MdbMysqlClusterUserPermission": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database that the permission grants access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List user's roles in the database.\nAllowed roles: `ALL`,`ALTER`,`ALTER_ROUTINE`,`CREATE`,`CREATE_ROUTINE`,`CREATE_TEMPORARY_TABLES`,\n`CREATE_VIEW`,`DELETE`,`DROP`,`EVENT`,`EXECUTE`,`INDEX`,`INSERT`,`LOCK_TABLES`,`SELECT`,`SHOW_VIEW`,`TRIGGER`,`UPDATE`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName"
            ]
        },
        "yandex:index/MdbMysqlDatabaseTimeouts:MdbMysqlDatabaseTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMysqlUserConnectionLimits:MdbMysqlUserConnectionLimits": {
            "properties": {
                "maxConnectionsPerHour": {
                    "type": "number",
                    "description": "Max connections per hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxQuestionsPerHour": {
                    "type": "number",
                    "description": "Max questions per hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUpdatesPerHour": {
                    "type": "number",
                    "description": "Max updates per hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUserConnections": {
                    "type": "number",
                    "description": "Max user connections.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbMysqlUserPermission:MdbMysqlUserPermission": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database that the permission grants access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List user's roles in the database.\nAllowed roles: `ALL`,`ALTER`,`ALTER_ROUTINE`,`CREATE`,`CREATE_ROUTINE`,`CREATE_TEMPORARY_TABLES`,\n`CREATE_VIEW`,`DELETE`,`DROP`,`EVENT`,`EXECUTE`,`INDEX`,`INSERT`,`LOCK_TABLES`,`SELECT`,`SHOW_VIEW`,`TRIGGER`,`UPDATE`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName"
            ]
        },
        "yandex:index/MdbMysqlUserTimeouts:MdbMysqlUserTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbPostgresqlClusterConfig:MdbPostgresqlClusterConfig": {
            "properties": {
                "access": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlClusterConfigAccess:MdbPostgresqlClusterConfigAccess",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autofailover": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupRetainPeriodDays": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupWindowStart": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlClusterConfigBackupWindowStart:MdbPostgresqlClusterConfigBackupWindowStart",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "performanceDiagnostics": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlClusterConfigPerformanceDiagnostics:MdbPostgresqlClusterConfigPerformanceDiagnostics",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "poolerConfig": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlClusterConfigPoolerConfig:MdbPostgresqlClusterConfigPoolerConfig",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postgresqlConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlClusterConfigResources:MdbPostgresqlClusterConfigResources",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autofailover",
                        "backupRetainPeriodDays",
                        "postgresqlConfig",
                        "resources",
                        "version"
                    ]
                }
            }
        },
        "yandex:index/MdbPostgresqlClusterConfigAccess:MdbPostgresqlClusterConfigAccess": {
            "properties": {
                "dataLens": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataTransfer": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverless": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webSql": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "webSql"
                    ]
                }
            }
        },
        "yandex:index/MdbPostgresqlClusterConfigBackupWindowStart:MdbPostgresqlClusterConfigBackupWindowStart": {
            "properties": {
                "hours": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minutes": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbPostgresqlClusterConfigPerformanceDiagnostics:MdbPostgresqlClusterConfigPerformanceDiagnostics": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sessionsSamplingInterval": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statementsSamplingInterval": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sessionsSamplingInterval",
                "statementsSamplingInterval"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "sessionsSamplingInterval",
                        "statementsSamplingInterval"
                    ]
                }
            }
        },
        "yandex:index/MdbPostgresqlClusterConfigPoolerConfig:MdbPostgresqlClusterConfigPoolerConfig": {
            "properties": {
                "poolDiscard": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "poolingMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbPostgresqlClusterConfigResources:MdbPostgresqlClusterConfigResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "resourcePresetId"
            ]
        },
        "yandex:index/MdbPostgresqlClusterDatabase:MdbPostgresqlClusterDatabase": {
            "properties": {
                "extensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlClusterDatabaseExtension:MdbPostgresqlClusterDatabaseExtension"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lcCollate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lcType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "owner": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templateDb": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "owner"
            ]
        },
        "yandex:index/MdbPostgresqlClusterDatabaseExtension:MdbPostgresqlClusterDatabaseExtension": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/MdbPostgresqlClusterHost:MdbPostgresqlClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationSource": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationSourceName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fqdn",
                        "name",
                        "priority",
                        "replicationSource",
                        "replicationSourceName",
                        "role",
                        "subnetId",
                        "zone"
                    ]
                }
            }
        },
        "yandex:index/MdbPostgresqlClusterMaintenanceWindow:MdbPostgresqlClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "yandex:index/MdbPostgresqlClusterRestore:MdbPostgresqlClusterRestore": {
            "properties": {
                "backupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "time": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeInclusive": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backupId"
            ]
        },
        "yandex:index/MdbPostgresqlClusterTimeouts:MdbPostgresqlClusterTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbPostgresqlClusterUser:MdbPostgresqlClusterUser": {
            "properties": {
                "connLimit": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "grants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "login": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlClusterUserPermission:MdbPostgresqlClusterUserPermission"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "password"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "connLimit",
                        "grants",
                        "name",
                        "password",
                        "settings"
                    ]
                }
            }
        },
        "yandex:index/MdbPostgresqlClusterUserPermission:MdbPostgresqlClusterUserPermission": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName"
            ]
        },
        "yandex:index/MdbPostgresqlDatabaseExtension:MdbPostgresqlDatabaseExtension": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the database extension. For more information on available extensions see [the official documentation](https://cloud.yandex.com/docs/managed-postgresql/operations/cluster-extensions).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of the extension.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/MdbPostgresqlDatabaseTimeouts:MdbPostgresqlDatabaseTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbPostgresqlUserPermission:MdbPostgresqlUserPermission": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database that the permission grants access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName"
            ]
        },
        "yandex:index/MdbPostgresqlUserTimeouts:MdbPostgresqlUserTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbRedisClusterConfig:MdbRedisClusterConfig": {
            "properties": {
                "clientOutputBufferLimitNormal": {
                    "type": "string",
                    "description": "Normal clients output buffer limits.\nSee [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1841).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientOutputBufferLimitPubsub": {
                    "type": "string",
                    "description": "Pubsub clients output buffer limits.\nSee [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1843).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "databases": {
                    "type": "number",
                    "description": "Number of databases (changing requires redis-server restart).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxmemoryPolicy": {
                    "type": "string",
                    "description": "Redis key eviction policy for a dataset that reaches maximum memory.\nCan be any of the listed in [the official RedisDB documentation](https://docs.redislabs.com/latest/rs/administering/database-operations/eviction-policy/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifyKeyspaceEvents": {
                    "type": "string",
                    "description": "Select the events that Redis will notify among a set of classes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "Password for the Redis cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "slowlogLogSlowerThan": {
                    "type": "number",
                    "description": "Log slow queries below this number in microseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slowlogMaxLen": {
                    "type": "number",
                    "description": "Slow queries log length.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "number",
                    "description": "Close the connection after a client is idle for N seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of Redis (6.2).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clientOutputBufferLimitNormal",
                        "clientOutputBufferLimitPubsub",
                        "databases",
                        "maxmemoryPolicy",
                        "notifyKeyspaceEvents",
                        "password",
                        "slowlogLogSlowerThan",
                        "slowlogMaxLen",
                        "timeout",
                        "version"
                    ]
                }
            }
        },
        "yandex:index/MdbRedisClusterHost:MdbRedisClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Sets whether the host should get a public IP address or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicaPriority": {
                    "type": "number",
                    "description": "Replica priority of a current replica (usable for non-sharded only).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardName": {
                    "type": "string",
                    "description": "The name of the shard to which the host belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs. The subnet must\nbe a part of the network to which the cluster belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the Redis host will be created.\nFor more information see [the official documentation](https://cloud.yandex.com/docs/overview/concepts/geo-scope).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fqdn",
                        "shardName",
                        "subnetId",
                        "zone"
                    ]
                }
            }
        },
        "yandex:index/MdbRedisClusterMaintenanceWindow:MdbRedisClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "yandex:index/MdbRedisClusterResources:MdbRedisClusterResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of Redis hosts - environment default is used if missing.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "resourcePresetId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "diskSize",
                        "diskTypeId",
                        "resourcePresetId"
                    ]
                }
            }
        },
        "yandex:index/MdbRedisClusterTimeouts:MdbRedisClusterTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbSqlServerClusterBackupWindowStart:MdbSqlServerClusterBackupWindowStart": {
            "properties": {
                "hours": {
                    "type": "number",
                    "description": "The hour at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minutes": {
                    "type": "number",
                    "description": "The minute at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/MdbSqlServerClusterDatabase:MdbSqlServerClusterDatabase": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/MdbSqlServerClusterHost:MdbSqlServerClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Sets whether the host should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the SQLServer host will be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "fqdn",
                        "subnetId",
                        "zone"
                    ]
                }
            }
        },
        "yandex:index/MdbSqlServerClusterResources:MdbSqlServerClusterResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a SQLServer host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of SQLServer hosts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ]
        },
        "yandex:index/MdbSqlServerClusterTimeouts:MdbSqlServerClusterTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/MdbSqlServerClusterUser:MdbSqlServerClusterUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbSqlServerClusterUserPermission:MdbSqlServerClusterUserPermission"
                    },
                    "description": "Set of permissions granted to the user. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "password"
            ]
        },
        "yandex:index/MdbSqlServerClusterUserPermission:MdbSqlServerClusterUserPermission": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database that the permission grants access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List user's roles in the database.\nAllowed roles: `OWNER`, `SECURITYADMIN`, `ACCESSADMIN`, `BACKUPOPERATOR`, `DDLADMIN`, `DATAWRITER`, `DATAREADER`, `DENYDATAWRITER`, `DENYDATAREADER`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName"
            ]
        },
        "yandex:index/OrganizationManagerGroupMembershipTimeouts:OrganizationManagerGroupMembershipTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/OrganizationManagerGroupTimeouts:OrganizationManagerGroupTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/OrganizationManagerSamlFederationSecuritySettings:OrganizationManagerSamlFederationSecuritySettings": {
            "properties": {
                "encryptedAssertions": {
                    "type": "boolean",
                    "description": "Enable encrypted assertions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "encryptedAssertions"
            ]
        },
        "yandex:index/OrganizationManagerSamlFederationTimeouts:OrganizationManagerSamlFederationTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/ResourceManagerCloudTimeouts:ResourceManagerCloudTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/ResourcemanagerFolderTimeouts:ResourcemanagerFolderTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/ServerlessContainerImage:ServerlessContainerImage": {
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "digest": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Invoke URL for the Yandex Cloud Serverless Container\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workDir": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "digest",
                        "url"
                    ]
                }
            }
        },
        "yandex:index/ServerlessContainerSecret:ServerlessContainerSecret": {
            "properties": {
                "environmentVariable": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "environmentVariable",
                "id",
                "key",
                "versionId"
            ]
        },
        "yandex:index/ServerlessContainerTimeouts:ServerlessContainerTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/StorageBucketAnonymousAccessFlags:StorageBucketAnonymousAccessFlags": {
            "properties": {
                "list": {
                    "type": "boolean",
                    "description": "Allows to list object in bucket anonymously.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "read": {
                    "type": "boolean",
                    "description": "Allows to read objects in bucket anonymously.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/StorageBucketCorsRule:StorageBucketCorsRule": {
            "properties": {
                "allowedHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which headers are allowed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowedOrigins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies which origins are allowed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "exposeHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies expose header in the response.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAgeSeconds": {
                    "type": "number",
                    "description": "Specifies time in seconds that browser can cache the response for a preflight request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowedMethods",
                "allowedOrigins"
            ]
        },
        "yandex:index/StorageBucketGrant:StorageBucketGrant": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for the rule. Must be less than or equal to 255 characters in length.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "permissions",
                "type"
            ]
        },
        "yandex:index/StorageBucketHttps:StorageBucketHttps": {
            "properties": {
                "certificateId": {
                    "type": "string",
                    "description": "— Id of the certificate in Certificate Manager, that will be used for bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificateId"
            ]
        },
        "yandex:index/StorageBucketLifecycleRule:StorageBucketLifecycleRule": {
            "properties": {
                "abortIncompleteMultipartUploadDays": {
                    "type": "number",
                    "description": "Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies lifecycle rule status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiration": {
                    "$ref": "#/types/yandex:index/StorageBucketLifecycleRuleExpiration:StorageBucketLifecycleRuleExpiration",
                    "description": "Specifies a period in the object's expire (documented below).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for the rule. Must be less than or equal to 255 characters in length.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "noncurrentVersionExpiration": {
                    "$ref": "#/types/yandex:index/StorageBucketLifecycleRuleNoncurrentVersionExpiration:StorageBucketLifecycleRuleNoncurrentVersionExpiration",
                    "description": "Specifies when noncurrent object versions expire (documented below).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "noncurrentVersionTransitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/StorageBucketLifecycleRuleNoncurrentVersionTransition:StorageBucketLifecycleRuleNoncurrentVersionTransition"
                    },
                    "description": "Specifies when noncurrent object versions transitions (documented below).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "description": "Object key prefix identifying one or more objects to which the rule applies.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/StorageBucketLifecycleRuleTransition:StorageBucketLifecycleRuleTransition"
                    },
                    "description": "Specifies a period in the object's transitions (documented below).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "id"
                    ]
                }
            }
        },
        "yandex:index/StorageBucketLifecycleRuleExpiration:StorageBucketLifecycleRuleExpiration": {
            "properties": {
                "date": {
                    "type": "string",
                    "description": "Specifies the date after which you want the corresponding action to take effect.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "days": {
                    "type": "number",
                    "description": "Specifies the number of days after object creation when the specific rule action takes effect.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiredObjectDeleteMarker": {
                    "type": "boolean",
                    "description": "On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Object Storage to delete expired object delete markers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/StorageBucketLifecycleRuleNoncurrentVersionExpiration:StorageBucketLifecycleRuleNoncurrentVersionExpiration": {
            "properties": {
                "days": {
                    "type": "number",
                    "description": "Specifies the number of days noncurrent object versions expire.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/StorageBucketLifecycleRuleNoncurrentVersionTransition:StorageBucketLifecycleRuleNoncurrentVersionTransition": {
            "properties": {
                "days": {
                    "type": "number",
                    "description": "Specifies the number of days noncurrent object versions transition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageClass": {
                    "type": "string",
                    "description": "Specifies the storage class to which you want the noncurrent object versions to transition. Can only be `COLD` or `STANDARD_IA`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "storageClass"
            ]
        },
        "yandex:index/StorageBucketLifecycleRuleTransition:StorageBucketLifecycleRuleTransition": {
            "properties": {
                "date": {
                    "type": "string",
                    "description": "Specifies the date after which you want the corresponding action to take effect.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "days": {
                    "type": "number",
                    "description": "Specifies the number of days after object creation when the specific rule action takes effect.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageClass": {
                    "type": "string",
                    "description": "Specifies the storage class to which you want the object to transition. Can only be `COLD` or `STANDARD_IA`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "storageClass"
            ]
        },
        "yandex:index/StorageBucketLogging:StorageBucketLogging": {
            "properties": {
                "targetBucket": {
                    "type": "string",
                    "description": "The name of the bucket that will receive the log objects.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetPrefix": {
                    "type": "string",
                    "description": "To specify a key prefix for log objects.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "targetBucket"
            ]
        },
        "yandex:index/StorageBucketServerSideEncryptionConfiguration:StorageBucketServerSideEncryptionConfiguration": {
            "properties": {
                "rule": {
                    "$ref": "#/types/yandex:index/StorageBucketServerSideEncryptionConfigurationRule:StorageBucketServerSideEncryptionConfigurationRule",
                    "description": "A single object for server-side encryption by default configuration. (documented below)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rule"
            ]
        },
        "yandex:index/StorageBucketServerSideEncryptionConfigurationRule:StorageBucketServerSideEncryptionConfigurationRule": {
            "properties": {
                "applyServerSideEncryptionByDefault": {
                    "$ref": "#/types/yandex:index/StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault:StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault",
                    "description": "A single object for setting server-side encryption by default. (documented below)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "applyServerSideEncryptionByDefault"
            ]
        },
        "yandex:index/StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault:StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault": {
            "properties": {
                "kmsMasterKeyId": {
                    "type": "string",
                    "description": "The KMS master key ID used for the SSE-KMS encryption.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sseAlgorithm": {
                    "type": "string",
                    "description": "The server-side encryption algorithm to use. Single valid value is `aws:kms`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kmsMasterKeyId",
                "sseAlgorithm"
            ]
        },
        "yandex:index/StorageBucketVersioning:StorageBucketVersioning": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/StorageBucketWebsite:StorageBucketWebsite": {
            "properties": {
                "errorDocument": {
                    "type": "string",
                    "description": "An absolute path to the document to return in case of a 4XX error.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexDocument": {
                    "type": "string",
                    "description": "Storage returns this index document when requests are made to the root domain or any of the subfolders.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectAllRequestsTo": {
                    "type": "string",
                    "description": "A hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (`http://` or `https://`) to use when redirecting requests. The default is the protocol that is used in the original request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routingRules": {
                    "type": "string",
                    "description": "A json array containing [routing rules](https://cloud.yandex.com/docs/storage/s3/api-ref/hosting/upload#request-scheme) describing redirect behavior and when redirects are applied.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/VpcAddressExternalIpv4Address:VpcAddressExternalIpv4Address": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Allocated IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ddosProtectionProvider": {
                    "type": "string",
                    "description": "Enable DDOS protection. Possible values are: \"qrator\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "outgoingSmtpCapability": {
                    "type": "string",
                    "description": "Wanted outgoing smtp capability.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "Zone for allocating address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "address",
                        "ddosProtectionProvider",
                        "outgoingSmtpCapability",
                        "zoneId"
                    ]
                }
            }
        },
        "yandex:index/VpcAddressTimeouts:VpcAddressTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/VpcDefaultSecurityGroupEgress:VpcDefaultSecurityGroupEgress": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the security group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fromPort": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Id of the security group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this security group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "predefinedTarget": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "toPort": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "v4CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "v6CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "labels",
                        "protocol"
                    ]
                }
            }
        },
        "yandex:index/VpcDefaultSecurityGroupIngress:VpcDefaultSecurityGroupIngress": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the security group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fromPort": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Id of the security group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this security group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "predefinedTarget": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "toPort": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "v4CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "v6CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "labels",
                        "protocol"
                    ]
                }
            }
        },
        "yandex:index/VpcDefaultSecurityGroupTimeouts:VpcDefaultSecurityGroupTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/VpcGatewaySharedEgressGateway:VpcGatewaySharedEgressGateway": {
            "type": "object"
        },
        "yandex:index/VpcGatewayTimeouts:VpcGatewayTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/VpcNetworkTimeouts:VpcNetworkTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/VpcRouteTableStaticRoute:VpcRouteTableStaticRoute": {
            "properties": {
                "destinationPrefix": {
                    "type": "string",
                    "description": "Route prefix in CIDR notation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayId": {
                    "type": "string",
                    "description": "ID of the gateway used ad next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextHopAddress": {
                    "type": "string",
                    "description": "Address of the next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/VpcRouteTableTimeouts:VpcRouteTableTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/VpcSecurityGroupEgress:VpcSecurityGroupEgress": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the security group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fromPort": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Id of the rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this security group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "predefinedTarget": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "toPort": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "v4CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "v6CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "labels",
                        "protocol"
                    ]
                }
            }
        },
        "yandex:index/VpcSecurityGroupIngress:VpcSecurityGroupIngress": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the security group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fromPort": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Id of the rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this security group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "predefinedTarget": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "toPort": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "v4CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "v6CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "protocol"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "labels",
                        "protocol"
                    ]
                }
            }
        },
        "yandex:index/VpcSecurityGroupRuleTimeouts:VpcSecurityGroupRuleTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "read": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/VpcSecurityGroupTimeouts:VpcSecurityGroupTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/VpcSubnetDhcpOptions:VpcSubnetDhcpOptions": {
            "properties": {
                "domainName": {
                    "type": "string",
                    "description": "Domain name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainNameServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Domain name server IP addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "NTP server IP addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/VpcSubnetTimeouts:VpcSubnetTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/YdbDatabaseDedicatedLocation:YdbDatabaseDedicatedLocation": {
            "properties": {
                "region": {
                    "$ref": "#/types/yandex:index/YdbDatabaseDedicatedLocationRegion:YdbDatabaseDedicatedLocationRegion",
                    "description": "Region for the Yandex Database cluster.\nThe structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/YdbDatabaseDedicatedLocationRegion:YdbDatabaseDedicatedLocationRegion": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Region ID for the Yandex Database cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "yandex:index/YdbDatabaseDedicatedScalePolicy:YdbDatabaseDedicatedScalePolicy": {
            "properties": {
                "fixedScale": {
                    "$ref": "#/types/yandex:index/YdbDatabaseDedicatedScalePolicyFixedScale:YdbDatabaseDedicatedScalePolicyFixedScale",
                    "description": "Fixed scaling policy for the Yandex Database cluster.\nThe structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fixedScale"
            ]
        },
        "yandex:index/YdbDatabaseDedicatedScalePolicyFixedScale:YdbDatabaseDedicatedScalePolicyFixedScale": {
            "properties": {
                "size": {
                    "type": "number",
                    "description": "Number of instances for the Yandex Database cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "size"
            ]
        },
        "yandex:index/YdbDatabaseDedicatedStorageConfig:YdbDatabaseDedicatedStorageConfig": {
            "properties": {
                "groupCount": {
                    "type": "number",
                    "description": "Amount of storage groups of selected type for the Yandex Database cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageTypeId": {
                    "type": "string",
                    "description": "Storage type ID for the Yandex Database cluster.\nAvailable presets can be obtained via `yc ydb storage-type list` command.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupCount",
                "storageTypeId"
            ]
        },
        "yandex:index/YdbDatabaseDedicatedTimeouts:YdbDatabaseDedicatedTimeouts": {
            "properties": {
                "default": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/YdbDatabaseServerlessTimeouts:YdbDatabaseServerlessTimeouts": {
            "properties": {
                "default": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/getAlbBackendGroupGrpcBackend:getAlbBackendGroupGrpcBackend": {
            "properties": {
                "healthcheck": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupGrpcBackendHealthcheck:getAlbBackendGroupGrpcBackendHealthcheck",
                    "description": "Healthcheck specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancingConfig": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupGrpcBackendLoadBalancingConfig:getAlbBackendGroupGrpcBackendLoadBalancingConfig",
                    "description": "Load Balancing Config specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "- Name of the Backend Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "Port for incoming traffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "References target groups for the backend.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupGrpcBackendTls:getAlbBackendGroupGrpcBackendTls",
                    "description": "Tls specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "number",
                    "description": "Weight of the backend. Traffic will be split between backends of the same BackendGroup according to their weights.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "healthcheck",
                "loadBalancingConfig",
                "name",
                "port",
                "targetGroupIds",
                "tls",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupGrpcBackendHealthcheck:getAlbBackendGroupGrpcBackendHealthcheck": {
            "properties": {
                "grpcHealthcheck": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck:getAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck",
                    "description": "Grpc Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthcheckPort": {
                    "type": "number",
                    "description": "Optional alternative port for health checking.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthyThreshold": {
                    "type": "number",
                    "description": "Number of consecutive successful health checks required to promote endpoint into the healthy state. 0 means 1. Note that during startup, only a single successful health check is required to mark a host healthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpHealthcheck": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck:getAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck",
                    "description": "Http Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "string",
                    "description": "Interval between health checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalJitterPercent": {
                    "type": "number",
                    "description": "An optional jitter amount as a percentage of interval. If specified, during every interval value of (interval_ms * interval_jitter_percent / 100) will be added to the wait time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "streamHealthcheck": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck:getAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck",
                    "description": "Stream Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "description": "Time to wait for a health check response.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unhealthyThreshold": {
                    "type": "number",
                    "description": "Number of consecutive failed health checks required to demote endpoint into the unhealthy state. 0 means 1. Note that for HTTP health checks, a single 503 immediately makes endpoint unhealthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "grpcHealthcheck",
                "healthcheckPort",
                "healthyThreshold",
                "httpHealthcheck",
                "interval",
                "intervalJitterPercent",
                "streamHealthcheck",
                "timeout",
                "unhealthyThreshold"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck:getAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck": {
            "properties": {
                "serviceName": {
                    "type": "string",
                    "description": "Optional service name for grpc.health.v1.HealthCheckRequest message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "serviceName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck:getAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Optional \"Host\" HTTP header value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2": {
                    "type": "boolean",
                    "description": "If set, health checks will use HTTP2.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "HTTP path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "host",
                "http2",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck:getAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck": {
            "properties": {
                "receive": {
                    "type": "string",
                    "description": "Optional text that must be contained in the messages received from targets for a successful health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "send": {
                    "type": "string",
                    "description": "Optional message text sent to targets during TCP data transfer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "receive",
                "send"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupGrpcBackendLoadBalancingConfig:getAlbBackendGroupGrpcBackendLoadBalancingConfig": {
            "properties": {
                "localityAwareRoutingPercent": {
                    "type": "number",
                    "description": "Percent of traffic to be sent to the same availability zone. The rest will be equally divided between other zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "Load balancing mode for the backend.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "panicThreshold": {
                    "type": "number",
                    "description": "If percentage of healthy hosts in the backend is lower than panic_threshold, traffic will be routed to all backends no matter what the health status is. This helps to avoid healthy backends overloading  when everything is bad. Zero means no panic threshold.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strictLocality": {
                    "type": "boolean",
                    "description": "If set, will route requests only to the same availability zone. Balancer won't know about endpoints in other zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "localityAwareRoutingPercent",
                "mode",
                "panicThreshold",
                "strictLocality"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupGrpcBackendTls:getAlbBackendGroupGrpcBackendTls": {
            "properties": {
                "sni": {
                    "type": "string",
                    "description": "[SNI](https://en.wikipedia.org/wiki/Server_Name_Indication) string for TLS connections.\n* `validation_context.0.trusted_ca_id` - Trusted CA certificate ID in the Certificate Manager.\n* `validation_context.0.trusted_ca_bytes` - PEM-encoded trusted CA certificate chain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validationContext": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupGrpcBackendTlsValidationContext:getAlbBackendGroupGrpcBackendTlsValidationContext",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sni",
                "validationContext"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupGrpcBackendTlsValidationContext:getAlbBackendGroupGrpcBackendTlsValidationContext": {
            "properties": {
                "trustedCaBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustedCaId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "trustedCaBytes",
                "trustedCaId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupHttpBackend:getAlbBackendGroupHttpBackend": {
            "properties": {
                "healthcheck": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupHttpBackendHealthcheck:getAlbBackendGroupHttpBackendHealthcheck",
                    "description": "Healthcheck specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2": {
                    "type": "boolean",
                    "description": "If set, health checks will use HTTP2.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancingConfig": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupHttpBackendLoadBalancingConfig:getAlbBackendGroupHttpBackendLoadBalancingConfig",
                    "description": "Load Balancing Config specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "- Name of the Backend Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "Port for incoming traffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageBucket": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "References target groups for the backend.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupHttpBackendTls:getAlbBackendGroupHttpBackendTls",
                    "description": "Tls specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "number",
                    "description": "Weight of the backend. Traffic will be split between backends of the same BackendGroup according to their weights.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "healthcheck",
                "http2",
                "loadBalancingConfig",
                "name",
                "port",
                "storageBucket",
                "targetGroupIds",
                "tls",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupHttpBackendHealthcheck:getAlbBackendGroupHttpBackendHealthcheck": {
            "properties": {
                "grpcHealthcheck": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck:getAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck",
                    "description": "Grpc Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthcheckPort": {
                    "type": "number",
                    "description": "Optional alternative port for health checking.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthyThreshold": {
                    "type": "number",
                    "description": "Number of consecutive successful health checks required to promote endpoint into the healthy state. 0 means 1. Note that during startup, only a single successful health check is required to mark a host healthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpHealthcheck": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupHttpBackendHealthcheckHttpHealthcheck:getAlbBackendGroupHttpBackendHealthcheckHttpHealthcheck",
                    "description": "Http Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "string",
                    "description": "Interval between health checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalJitterPercent": {
                    "type": "number",
                    "description": "An optional jitter amount as a percentage of interval. If specified, during every interval value of (interval_ms * interval_jitter_percent / 100) will be added to the wait time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "streamHealthcheck": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupHttpBackendHealthcheckStreamHealthcheck:getAlbBackendGroupHttpBackendHealthcheckStreamHealthcheck",
                    "description": "Stream Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "description": "Time to wait for a health check response.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unhealthyThreshold": {
                    "type": "number",
                    "description": "Number of consecutive failed health checks required to demote endpoint into the unhealthy state. 0 means 1. Note that for HTTP health checks, a single 503 immediately makes endpoint unhealthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "grpcHealthcheck",
                "healthcheckPort",
                "healthyThreshold",
                "httpHealthcheck",
                "interval",
                "intervalJitterPercent",
                "streamHealthcheck",
                "timeout",
                "unhealthyThreshold"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck:getAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck": {
            "properties": {
                "serviceName": {
                    "type": "string",
                    "description": "Optional service name for grpc.health.v1.HealthCheckRequest message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "serviceName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupHttpBackendHealthcheckHttpHealthcheck:getAlbBackendGroupHttpBackendHealthcheckHttpHealthcheck": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Optional \"Host\" HTTP header value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2": {
                    "type": "boolean",
                    "description": "If set, health checks will use HTTP2.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "HTTP path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "host",
                "http2",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupHttpBackendHealthcheckStreamHealthcheck:getAlbBackendGroupHttpBackendHealthcheckStreamHealthcheck": {
            "properties": {
                "receive": {
                    "type": "string",
                    "description": "Optional text that must be contained in the messages received from targets for a successful health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "send": {
                    "type": "string",
                    "description": "Optional message text sent to targets during TCP data transfer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "receive",
                "send"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupHttpBackendLoadBalancingConfig:getAlbBackendGroupHttpBackendLoadBalancingConfig": {
            "properties": {
                "localityAwareRoutingPercent": {
                    "type": "number",
                    "description": "Percent of traffic to be sent to the same availability zone. The rest will be equally divided between other zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "Load balancing mode for the backend.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "panicThreshold": {
                    "type": "number",
                    "description": "If percentage of healthy hosts in the backend is lower than panic_threshold, traffic will be routed to all backends no matter what the health status is. This helps to avoid healthy backends overloading  when everything is bad. Zero means no panic threshold.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strictLocality": {
                    "type": "boolean",
                    "description": "If set, will route requests only to the same availability zone. Balancer won't know about endpoints in other zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "localityAwareRoutingPercent",
                "mode",
                "panicThreshold",
                "strictLocality"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupHttpBackendTls:getAlbBackendGroupHttpBackendTls": {
            "properties": {
                "sni": {
                    "type": "string",
                    "description": "[SNI](https://en.wikipedia.org/wiki/Server_Name_Indication) string for TLS connections.\n* `validation_context.0.trusted_ca_id` - Trusted CA certificate ID in the Certificate Manager.\n* `validation_context.0.trusted_ca_bytes` - PEM-encoded trusted CA certificate chain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validationContext": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupHttpBackendTlsValidationContext:getAlbBackendGroupHttpBackendTlsValidationContext",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sni",
                "validationContext"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupHttpBackendTlsValidationContext:getAlbBackendGroupHttpBackendTlsValidationContext": {
            "properties": {
                "trustedCaBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustedCaId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "trustedCaBytes",
                "trustedCaId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupSessionAffinity:getAlbBackendGroupSessionAffinity": {
            "properties": {
                "connection": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupSessionAffinityConnection:getAlbBackendGroupSessionAffinityConnection",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cookie": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupSessionAffinityCookie:getAlbBackendGroupSessionAffinityCookie",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "header": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupSessionAffinityHeader:getAlbBackendGroupSessionAffinityHeader",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "connection",
                "cookie",
                "header"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupSessionAffinityConnection:getAlbBackendGroupSessionAffinityConnection": {
            "properties": {
                "sourceIp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sourceIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupSessionAffinityCookie:getAlbBackendGroupSessionAffinityCookie": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- Name of the Backend Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupSessionAffinityHeader:getAlbBackendGroupSessionAffinityHeader": {
            "properties": {
                "headerName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "headerName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupStreamBackend:getAlbBackendGroupStreamBackend": {
            "properties": {
                "enableProxyProtocol": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthcheck": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupStreamBackendHealthcheck:getAlbBackendGroupStreamBackendHealthcheck",
                    "description": "Healthcheck specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadBalancingConfig": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupStreamBackendLoadBalancingConfig:getAlbBackendGroupStreamBackendLoadBalancingConfig",
                    "description": "Load Balancing Config specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "- Name of the Backend Group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "Port for incoming traffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "References target groups for the backend.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupStreamBackendTls:getAlbBackendGroupStreamBackendTls",
                    "description": "Tls specification that will be used by this backend. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "weight": {
                    "type": "number",
                    "description": "Weight of the backend. Traffic will be split between backends of the same BackendGroup according to their weights.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enableProxyProtocol",
                "healthcheck",
                "loadBalancingConfig",
                "name",
                "port",
                "targetGroupIds",
                "tls",
                "weight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupStreamBackendHealthcheck:getAlbBackendGroupStreamBackendHealthcheck": {
            "properties": {
                "grpcHealthcheck": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck:getAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck",
                    "description": "Grpc Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthcheckPort": {
                    "type": "number",
                    "description": "Optional alternative port for health checking.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "healthyThreshold": {
                    "type": "number",
                    "description": "Number of consecutive successful health checks required to promote endpoint into the healthy state. 0 means 1. Note that during startup, only a single successful health check is required to mark a host healthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpHealthcheck": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupStreamBackendHealthcheckHttpHealthcheck:getAlbBackendGroupStreamBackendHealthcheckHttpHealthcheck",
                    "description": "Http Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "string",
                    "description": "Interval between health checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalJitterPercent": {
                    "type": "number",
                    "description": "An optional jitter amount as a percentage of interval. If specified, during every interval value of (interval_ms * interval_jitter_percent / 100) will be added to the wait time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "streamHealthcheck": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupStreamBackendHealthcheckStreamHealthcheck:getAlbBackendGroupStreamBackendHealthcheckStreamHealthcheck",
                    "description": "Stream Healthcheck specification that will be used by this healthcheck. Structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "description": "Time to wait for a health check response.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unhealthyThreshold": {
                    "type": "number",
                    "description": "Number of consecutive failed health checks required to demote endpoint into the unhealthy state. 0 means 1. Note that for HTTP health checks, a single 503 immediately makes endpoint unhealthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "grpcHealthcheck",
                "healthcheckPort",
                "healthyThreshold",
                "httpHealthcheck",
                "interval",
                "intervalJitterPercent",
                "streamHealthcheck",
                "timeout",
                "unhealthyThreshold"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck:getAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck": {
            "properties": {
                "serviceName": {
                    "type": "string",
                    "description": "Optional service name for grpc.health.v1.HealthCheckRequest message.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "serviceName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupStreamBackendHealthcheckHttpHealthcheck:getAlbBackendGroupStreamBackendHealthcheckHttpHealthcheck": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Optional \"Host\" HTTP header value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2": {
                    "type": "boolean",
                    "description": "If set, health checks will use HTTP2.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "HTTP path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "host",
                "http2",
                "path"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupStreamBackendHealthcheckStreamHealthcheck:getAlbBackendGroupStreamBackendHealthcheckStreamHealthcheck": {
            "properties": {
                "receive": {
                    "type": "string",
                    "description": "Optional text that must be contained in the messages received from targets for a successful health check.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "send": {
                    "type": "string",
                    "description": "Optional message text sent to targets during TCP data transfer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "receive",
                "send"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupStreamBackendLoadBalancingConfig:getAlbBackendGroupStreamBackendLoadBalancingConfig": {
            "properties": {
                "localityAwareRoutingPercent": {
                    "type": "number",
                    "description": "Percent of traffic to be sent to the same availability zone. The rest will be equally divided between other zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "Load balancing mode for the backend.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "panicThreshold": {
                    "type": "number",
                    "description": "If percentage of healthy hosts in the backend is lower than panic_threshold, traffic will be routed to all backends no matter what the health status is. This helps to avoid healthy backends overloading  when everything is bad. Zero means no panic threshold.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strictLocality": {
                    "type": "boolean",
                    "description": "If set, will route requests only to the same availability zone. Balancer won't know about endpoints in other zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "localityAwareRoutingPercent",
                "mode",
                "panicThreshold",
                "strictLocality"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupStreamBackendTls:getAlbBackendGroupStreamBackendTls": {
            "properties": {
                "sni": {
                    "type": "string",
                    "description": "[SNI](https://en.wikipedia.org/wiki/Server_Name_Indication) string for TLS connections.\n* `validation_context.0.trusted_ca_id` - Trusted CA certificate ID in the Certificate Manager.\n* `validation_context.0.trusted_ca_bytes` - PEM-encoded trusted CA certificate chain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "validationContext": {
                    "$ref": "#/types/yandex:index/getAlbBackendGroupStreamBackendTlsValidationContext:getAlbBackendGroupStreamBackendTlsValidationContext",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sni",
                "validationContext"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbBackendGroupStreamBackendTlsValidationContext:getAlbBackendGroupStreamBackendTlsValidationContext": {
            "properties": {
                "trustedCaBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustedCaId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "trustedCaBytes",
                "trustedCaId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbHttpRouterRouteOption:getAlbHttpRouterRouteOption": {
            "properties": {
                "rbacs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbHttpRouterRouteOptionRbac:getAlbHttpRouterRouteOptionRbac"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rbacs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbHttpRouterRouteOptionRbac:getAlbHttpRouterRouteOptionRbac": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbHttpRouterRouteOptionRbacPrincipal:getAlbHttpRouterRouteOptionRbacPrincipal"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "principals"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbHttpRouterRouteOptionRbacPrincipal:getAlbHttpRouterRouteOptionRbacPrincipal": {
            "properties": {
                "andPrincipals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbHttpRouterRouteOptionRbacPrincipalAndPrincipal:getAlbHttpRouterRouteOptionRbacPrincipalAndPrincipal"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "andPrincipals"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbHttpRouterRouteOptionRbacPrincipalAndPrincipal:getAlbHttpRouterRouteOptionRbacPrincipalAndPrincipal": {
            "properties": {
                "any": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeader:getAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeader"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "any",
                "headers",
                "remoteIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeader:getAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "- Name of the HTTP Router.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeaderValue:getAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeaderValue"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeaderValue:getAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeaderValue": {
            "properties": {
                "exact": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "exact",
                "prefix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerAllocationPolicy:getAlbLoadBalancerAllocationPolicy": {
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerAllocationPolicyLocation:getAlbLoadBalancerAllocationPolicyLocation"
                    },
                    "description": "Unique set of locations. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "locations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerAllocationPolicyLocation:getAlbLoadBalancerAllocationPolicyLocation": {
            "properties": {
                "disableTraffic": {
                    "type": "boolean",
                    "description": "If set, will disable all L7 instances in the zone for request handling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "Provided by the client or computed automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "ID of the zone that location is located at.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "disableTraffic",
                "subnetId",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListener:getAlbLoadBalancerListener": {
            "properties": {
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerEndpoint:getAlbLoadBalancerListenerEndpoint"
                    },
                    "description": "Network endpoints (addresses and ports) of the listener. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "https": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerHttp:getAlbLoadBalancerListenerHttp"
                    },
                    "description": "HTTP listener resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Load Balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "streams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerStream:getAlbLoadBalancerListenerStream"
                    },
                    "description": "Stream listener resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerTl:getAlbLoadBalancerListenerTl"
                    },
                    "description": "TLS listener resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endpoints",
                "https",
                "name",
                "streams",
                "tls"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerEndpoint:getAlbLoadBalancerListenerEndpoint": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerEndpointAddress:getAlbLoadBalancerListenerEndpointAddress"
                    },
                    "description": "Provided by the client or computed automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "One or more ports to listen on.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addresses",
                "ports"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerEndpointAddress:getAlbLoadBalancerListenerEndpointAddress": {
            "properties": {
                "externalIpv4Addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerEndpointAddressExternalIpv4Address:getAlbLoadBalancerListenerEndpointAddressExternalIpv4Address"
                    },
                    "description": "External IPv4 address. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalIpv6Addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerEndpointAddressExternalIpv6Address:getAlbLoadBalancerListenerEndpointAddressExternalIpv6Address"
                    },
                    "description": "External IPv6 address. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalIpv4Addresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerEndpointAddressInternalIpv4Address:getAlbLoadBalancerListenerEndpointAddressInternalIpv4Address"
                    },
                    "description": "Internal IPv4 address. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalIpv4Addresses",
                "externalIpv6Addresses",
                "internalIpv4Addresses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerEndpointAddressExternalIpv4Address:getAlbLoadBalancerListenerEndpointAddressExternalIpv4Address": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Provided by the client or computed automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerEndpointAddressExternalIpv6Address:getAlbLoadBalancerListenerEndpointAddressExternalIpv6Address": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Provided by the client or computed automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerEndpointAddressInternalIpv4Address:getAlbLoadBalancerListenerEndpointAddressInternalIpv4Address": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "Provided by the client or computed automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "Provided by the client or computed automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerHttp:getAlbLoadBalancerListenerHttp": {
            "properties": {
                "handlers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerHttpHandler:getAlbLoadBalancerListenerHttpHandler"
                    },
                    "description": "HTTP handler that sets plaintext HTTP router. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerHttpRedirect:getAlbLoadBalancerListenerHttpRedirect"
                    },
                    "description": "Shortcut for adding http \u003e https redirects. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "handlers",
                "redirects"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerHttpHandler:getAlbLoadBalancerListenerHttpHandler": {
            "properties": {
                "allowHttp10": {
                    "type": "boolean",
                    "description": "If set, will enable only HTTP1 protocol with HTTP1.0 support.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2Options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerHttpHandlerHttp2Option:getAlbLoadBalancerListenerHttpHandlerHttp2Option"
                    },
                    "description": "If set, will enable HTTP2 protocol for the handler. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpRouterId": {
                    "type": "string",
                    "description": "HTTP router id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowHttp10",
                "http2Options",
                "httpRouterId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerHttpHandlerHttp2Option:getAlbLoadBalancerListenerHttpHandlerHttp2Option": {
            "properties": {
                "maxConcurrentStreams": {
                    "type": "number",
                    "description": "Maximum number of concurrent streams.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxConcurrentStreams"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerHttpRedirect:getAlbLoadBalancerListenerHttpRedirect": {
            "properties": {
                "httpToHttps": {
                    "type": "boolean",
                    "description": "If set redirects all unencrypted HTTP requests to the same URI with scheme changed to `https`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "httpToHttps"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerStream:getAlbLoadBalancerListenerStream": {
            "properties": {
                "handlers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerStreamHandler:getAlbLoadBalancerListenerStreamHandler"
                    },
                    "description": "HTTP handler that sets plaintext HTTP router. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "handlers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerStreamHandler:getAlbLoadBalancerListenerStreamHandler": {
            "properties": {
                "backendGroupId": {
                    "type": "string",
                    "description": "Backend group id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backendGroupId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerTl:getAlbLoadBalancerListenerTl": {
            "properties": {
                "defaultHandlers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerTlDefaultHandler:getAlbLoadBalancerListenerTlDefaultHandler"
                    },
                    "description": "TLS handler resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sniHandlers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerTlSniHandler:getAlbLoadBalancerListenerTlSniHandler"
                    },
                    "description": "SNI match resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "defaultHandlers",
                "sniHandlers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerTlDefaultHandler:getAlbLoadBalancerListenerTlDefaultHandler": {
            "properties": {
                "certificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Certificate IDs in the Certificate Manager. Multiple TLS certificates can be associated with the\nsame context to allow both RSA and ECDSA certificates. Only the first certificate of each type will be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpHandlers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerTlDefaultHandlerHttpHandler:getAlbLoadBalancerListenerTlDefaultHandlerHttpHandler"
                    },
                    "description": "HTTP handler resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "streamHandlers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerTlDefaultHandlerStreamHandler:getAlbLoadBalancerListenerTlDefaultHandlerStreamHandler"
                    },
                    "description": "Stream handler resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificateIds",
                "httpHandlers",
                "streamHandlers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerTlDefaultHandlerHttpHandler:getAlbLoadBalancerListenerTlDefaultHandlerHttpHandler": {
            "properties": {
                "allowHttp10": {
                    "type": "boolean",
                    "description": "If set, will enable only HTTP1 protocol with HTTP1.0 support.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2Options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerTlDefaultHandlerHttpHandlerHttp2Option:getAlbLoadBalancerListenerTlDefaultHandlerHttpHandlerHttp2Option"
                    },
                    "description": "If set, will enable HTTP2 protocol for the handler. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpRouterId": {
                    "type": "string",
                    "description": "HTTP router id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowHttp10",
                "http2Options",
                "httpRouterId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerTlDefaultHandlerHttpHandlerHttp2Option:getAlbLoadBalancerListenerTlDefaultHandlerHttpHandlerHttp2Option": {
            "properties": {
                "maxConcurrentStreams": {
                    "type": "number",
                    "description": "Maximum number of concurrent streams.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxConcurrentStreams"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerTlDefaultHandlerStreamHandler:getAlbLoadBalancerListenerTlDefaultHandlerStreamHandler": {
            "properties": {
                "backendGroupId": {
                    "type": "string",
                    "description": "Backend group id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backendGroupId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerTlSniHandler:getAlbLoadBalancerListenerTlSniHandler": {
            "properties": {
                "handlers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerTlSniHandlerHandler:getAlbLoadBalancerListenerTlSniHandlerHandler"
                    },
                    "description": "HTTP handler that sets plaintext HTTP router. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Load Balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of server names.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "handlers",
                "name",
                "serverNames"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerTlSniHandlerHandler:getAlbLoadBalancerListenerTlSniHandlerHandler": {
            "properties": {
                "certificateIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Certificate IDs in the Certificate Manager. Multiple TLS certificates can be associated with the\nsame context to allow both RSA and ECDSA certificates. Only the first certificate of each type will be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpHandlers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandler:getAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandler"
                    },
                    "description": "HTTP handler resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "streamHandlers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerTlSniHandlerHandlerStreamHandler:getAlbLoadBalancerListenerTlSniHandlerHandlerStreamHandler"
                    },
                    "description": "Stream handler resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "certificateIds",
                "httpHandlers",
                "streamHandlers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandler:getAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandler": {
            "properties": {
                "allowHttp10": {
                    "type": "boolean",
                    "description": "If set, will enable only HTTP1 protocol with HTTP1.0 support.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "http2Options": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandlerHttp2Option:getAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandlerHttp2Option"
                    },
                    "description": "If set, will enable HTTP2 protocol for the handler. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpRouterId": {
                    "type": "string",
                    "description": "HTTP router id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowHttp10",
                "http2Options",
                "httpRouterId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandlerHttp2Option:getAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandlerHttp2Option": {
            "properties": {
                "maxConcurrentStreams": {
                    "type": "number",
                    "description": "Maximum number of concurrent streams.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxConcurrentStreams"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerListenerTlSniHandlerHandlerStreamHandler:getAlbLoadBalancerListenerTlSniHandlerHandlerStreamHandler": {
            "properties": {
                "backendGroupId": {
                    "type": "string",
                    "description": "Backend group id.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backendGroupId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbLoadBalancerTimeouts:getAlbLoadBalancerTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/getAlbTargetGroupTarget:getAlbTargetGroupTarget": {
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateIpv4Address": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipAddress",
                "privateIpv4Address",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostModifyRequestHeader:getAlbVirtualHostModifyRequestHeader": {
            "properties": {
                "append": {
                    "type": "string",
                    "description": "Append string to the header value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Virtual Host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remove": {
                    "type": "boolean",
                    "description": "If set, remove the header.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replace": {
                    "type": "string",
                    "description": "New value for a header. Header values support the following\n[formatters](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers#custom-request-response-headers).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "append",
                "name",
                "remove",
                "replace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostModifyResponseHeader:getAlbVirtualHostModifyResponseHeader": {
            "properties": {
                "append": {
                    "type": "string",
                    "description": "Append string to the header value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Virtual Host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remove": {
                    "type": "boolean",
                    "description": "If set, remove the header.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replace": {
                    "type": "string",
                    "description": "New value for a header. Header values support the following\n[formatters](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers#custom-request-response-headers).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "append",
                "name",
                "remove",
                "replace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRoute:getAlbVirtualHostRoute": {
            "properties": {
                "grpcRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteGrpcRoute:getAlbVirtualHostRouteGrpcRoute"
                    },
                    "description": "GRPC route resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteHttpRoute:getAlbVirtualHostRouteHttpRoute"
                    },
                    "description": "HTTP route resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Virtual Host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteRouteOption:getAlbVirtualHostRouteRouteOption"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "grpcRoutes",
                "httpRoutes",
                "name",
                "routeOptions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteGrpcRoute:getAlbVirtualHostRouteGrpcRoute": {
            "properties": {
                "grpcMatches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteGrpcRouteGrpcMatch:getAlbVirtualHostRouteGrpcRouteGrpcMatch"
                    },
                    "description": "Checks \"/\" prefix by default. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "grpcRouteActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteGrpcRouteGrpcRouteAction:getAlbVirtualHostRouteGrpcRouteGrpcRouteAction"
                    },
                    "description": "GRPC route action resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "grpcStatusResponseActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction:getAlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction"
                    },
                    "description": "(Required) GRPC status response action resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "grpcMatches",
                "grpcRouteActions",
                "grpcStatusResponseActions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteGrpcRouteGrpcMatch:getAlbVirtualHostRouteGrpcRouteGrpcMatch": {
            "properties": {
                "fqmns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteGrpcRouteGrpcMatchFqmn:getAlbVirtualHostRouteGrpcRouteGrpcMatchFqmn"
                    },
                    "description": "If not set, all services/methods are assumed. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fqmns"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteGrpcRouteGrpcMatchFqmn:getAlbVirtualHostRouteGrpcRouteGrpcMatchFqmn": {
            "properties": {
                "exact": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "exact",
                "prefix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteGrpcRouteGrpcRouteAction:getAlbVirtualHostRouteGrpcRouteGrpcRouteAction": {
            "properties": {
                "autoHostRewrite": {
                    "type": "boolean",
                    "description": "If set, will automatically rewrite host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backendGroupId": {
                    "type": "string",
                    "description": "Backend group to route requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostRewrite": {
                    "type": "string",
                    "description": "Host rewrite specifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idleTimeout": {
                    "type": "string",
                    "description": "Specifies the idle timeout (time without any data transfer for the active request) for the route. It\nis useful for streaming scenarios - one should set idle_timeout to something meaningful and max_timeout to the maximum\ntime the stream is allowed to be alive. If not specified, there is no per-route idle timeout.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxTimeout": {
                    "type": "string",
                    "description": "Lower timeout may be specified by the client (using grpc-timeout header). If not set, default is 60\nseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoHostRewrite",
                "backendGroupId",
                "hostRewrite",
                "idleTimeout",
                "maxTimeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction:getAlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction": {
            "properties": {
                "status": {
                    "type": "string",
                    "description": "The status of the response. Supported values are: ok, invalid_argumet, not_found, permission_denied,\nunauthenticated, unimplemented, internal, unavailable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteHttpRoute:getAlbVirtualHostRouteHttpRoute": {
            "properties": {
                "directResponseActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteHttpRouteDirectResponseAction:getAlbVirtualHostRouteHttpRouteDirectResponseAction"
                    },
                    "description": "(Required) Direct response action resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpMatches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteHttpRouteHttpMatch:getAlbVirtualHostRouteHttpRouteHttpMatch"
                    },
                    "description": "Checks \"/\" prefix by default. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpRouteActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteHttpRouteHttpRouteAction:getAlbVirtualHostRouteHttpRouteHttpRouteAction"
                    },
                    "description": "HTTP route action resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectActions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteHttpRouteRedirectAction:getAlbVirtualHostRouteHttpRouteRedirectAction"
                    },
                    "description": "Redirect action resource. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "directResponseActions",
                "httpMatches",
                "httpRouteActions",
                "redirectActions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteHttpRouteDirectResponseAction:getAlbVirtualHostRouteHttpRouteDirectResponseAction": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "Response body text.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "number",
                    "description": "The status of the response. Supported values are: ok, invalid_argumet, not_found, permission_denied,\nunauthenticated, unimplemented, internal, unavailable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "body",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteHttpRouteHttpMatch:getAlbVirtualHostRouteHttpRouteHttpMatch": {
            "properties": {
                "httpMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of methods(strings).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteHttpRouteHttpMatchPath:getAlbVirtualHostRouteHttpRouteHttpMatchPath"
                    },
                    "description": "If not set, '/' is assumed. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "httpMethods",
                "paths"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteHttpRouteHttpMatchPath:getAlbVirtualHostRouteHttpRouteHttpMatchPath": {
            "properties": {
                "exact": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "exact",
                "prefix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteHttpRouteHttpRouteAction:getAlbVirtualHostRouteHttpRouteHttpRouteAction": {
            "properties": {
                "autoHostRewrite": {
                    "type": "boolean",
                    "description": "If set, will automatically rewrite host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backendGroupId": {
                    "type": "string",
                    "description": "Backend group to route requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostRewrite": {
                    "type": "string",
                    "description": "Host rewrite specifier.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idleTimeout": {
                    "type": "string",
                    "description": "Specifies the idle timeout (time without any data transfer for the active request) for the route. It\nis useful for streaming scenarios - one should set idle_timeout to something meaningful and max_timeout to the maximum\ntime the stream is allowed to be alive. If not specified, there is no per-route idle timeout.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixRewrite": {
                    "type": "string",
                    "description": "If not empty, matched path prefix will be replaced by this value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "string",
                    "description": "Specifies the request timeout (overall time request processing is allowed to take) for the route. If not\nset, default is 60 seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "upgradeTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of upgrade types. Only specified upgrade types will be allowed. For example,\n\"websocket\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoHostRewrite",
                "backendGroupId",
                "hostRewrite",
                "idleTimeout",
                "prefixRewrite",
                "timeout",
                "upgradeTypes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteHttpRouteRedirectAction:getAlbVirtualHostRouteHttpRouteRedirectAction": {
            "properties": {
                "removeQuery": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replaceHost": {
                    "type": "string",
                    "description": "Replaces hostname.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replacePath": {
                    "type": "string",
                    "description": "Replace path.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replacePort": {
                    "type": "number",
                    "description": "Replaces port.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replacePrefix": {
                    "type": "string",
                    "description": "Replace only matched prefix. Example:\u003cbr/\u003e match:{ prefix_match: \"/some\" } \u003cbr/\u003e\nredirect: { replace_prefix: \"/other\" } \u003cbr/\u003e will redirect \"/something\" to \"/otherthing\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replaceScheme": {
                    "type": "string",
                    "description": "Replaces scheme. If the original scheme is `http` or `https`, will also remove the 80 or 443 port,\nif present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "responseCode": {
                    "type": "string",
                    "description": "The HTTP status code to use in the redirect response. Supported values are:\nmoved_permanently, found, see_other, temporary_redirect, permanent_redirect.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "removeQuery",
                "replaceHost",
                "replacePath",
                "replacePort",
                "replacePrefix",
                "replaceScheme",
                "responseCode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteOption:getAlbVirtualHostRouteOption": {
            "properties": {
                "rbacs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteOptionRbac:getAlbVirtualHostRouteOptionRbac"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rbacs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteOptionRbac:getAlbVirtualHostRouteOptionRbac": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteOptionRbacPrincipal:getAlbVirtualHostRouteOptionRbacPrincipal"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "principals"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteOptionRbacPrincipal:getAlbVirtualHostRouteOptionRbacPrincipal": {
            "properties": {
                "andPrincipals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteOptionRbacPrincipalAndPrincipal:getAlbVirtualHostRouteOptionRbacPrincipalAndPrincipal"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "andPrincipals"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteOptionRbacPrincipalAndPrincipal:getAlbVirtualHostRouteOptionRbacPrincipalAndPrincipal": {
            "properties": {
                "any": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeader:getAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeader"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "any",
                "headers",
                "remoteIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeader:getAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Virtual Host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeaderValue:getAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeaderValue"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeaderValue:getAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeaderValue": {
            "properties": {
                "exact": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "exact",
                "prefix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteRouteOption:getAlbVirtualHostRouteRouteOption": {
            "properties": {
                "rbacs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteRouteOptionRbac:getAlbVirtualHostRouteRouteOptionRbac"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "rbacs"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteRouteOptionRbac:getAlbVirtualHostRouteRouteOptionRbac": {
            "properties": {
                "action": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "principals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteRouteOptionRbacPrincipal:getAlbVirtualHostRouteRouteOptionRbacPrincipal"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "principals"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteRouteOptionRbacPrincipal:getAlbVirtualHostRouteRouteOptionRbacPrincipal": {
            "properties": {
                "andPrincipals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipal:getAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipal"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "andPrincipals"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipal:getAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipal": {
            "properties": {
                "any": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeader:getAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeader"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "remoteIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "any",
                "headers",
                "remoteIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeader:getAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Virtual Host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeaderValue:getAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeaderValue"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "values"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeaderValue:getAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeaderValue": {
            "properties": {
                "exact": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "exact",
                "prefix"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getCdnOriginGroupOrigin:getCdnOriginGroupOrigin": {
            "properties": {
                "backup": {
                    "type": "boolean",
                    "description": "specifies whether the origin is used in its origin group as backup. A backup origin is used when one of active origins becomes unavailable.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "the origin is enabled and used as a source for the CDN. Default is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "originGroupId": {
                    "type": "number",
                    "description": "The ID of a specific origin group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "source": {
                    "type": "string",
                    "description": "IP address or Domain name of your origin and the port;\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backup",
                "enabled",
                "originGroupId",
                "source"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getCdnResourceOptions:getCdnResourceOptions": {
            "properties": {
                "allowedHttpMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "HTTP methods for your CDN content. By default the following methods are allowed: GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS. In case some methods are not allowed to the user, they will get the 405 (Method Not Allowed) response. If the method is not supported, the user gets the 501 (Not Implemented) response.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "browserCacheSettings": {
                    "type": "number",
                    "description": "set up a cache period for the end-users browser. Content will be cached due to origin settings. If there are no cache settings on your origin, the content will not be cached. The list of HTTP response codes that can be cached in browsers: 200, 201, 204, 206, 301, 302, 303, 304, 307, 308. Other response codes will not be cached. The default value is 4 days.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cacheHttpHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list HTTP headers that must be included in responses to clients.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "parameter that lets browsers get access to selected resources from a domain different to a domain from which the request is received.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customHostHeader": {
                    "type": "string",
                    "description": "custom value for the Host header. Your server must be able to process requests with the chosen header.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customServerName": {
                    "type": "string",
                    "description": "wildcard additional CNAME. If a resource has a wildcard additional CNAME, you can use your own certificate for content delivery via HTTPS. Read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableCache": {
                    "type": "boolean",
                    "description": "setup a cache status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "disableProxyForceRanges": {
                    "type": "boolean",
                    "description": "disabling proxy force ranges.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "edgeCacheSettings": {
                    "type": "number",
                    "description": "content will be cached according to origin cache settings. The value applies for a response with codes 200, 201, 204, 206, 301, 302, 303, 304, 307, 308 if an origin server does not have caching HTTP headers. Responses with other codes will not be cached.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fetchedCompressed": {
                    "type": "boolean",
                    "description": "option helps you to reduce the bandwidth between origin and CDN servers. Also, content delivery speed becomes higher because of reducing the time for compressing files in a CDN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forwardHostHeader": {
                    "type": "boolean",
                    "description": "choose the Forward Host header option if is important to send in the request to the Origin the same Host header as was sent in the request to CDN server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gzipOn": {
                    "type": "boolean",
                    "description": "GZip compression at CDN servers reduces file size by 70% and can be as high as 90%.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreCookie": {
                    "type": "boolean",
                    "description": "set for ignoring cookie.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ignoreQueryParams": {
                    "type": "boolean",
                    "description": "files with different query parameters are cached as objects with the same key regardless of the parameter value. selected by default.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "proxyCacheMethodsSet": {
                    "type": "boolean",
                    "description": "allows caching for GET, HEAD and POST requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryParamsBlacklists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "files with the specified query parameters are cached as objects with the same key, files with other parameters are cached as objects with different keys.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryParamsWhitelists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "files with the specified query parameters are cached as objects with different keys, files with other parameters are cached as objects with the same key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectHttpToHttps": {
                    "type": "boolean",
                    "description": "set up a redirect from HTTPS to HTTP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "redirectHttpsToHttp": {
                    "type": "boolean",
                    "description": "set up a redirect from HTTP to HTTPS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slice": {
                    "type": "boolean",
                    "description": "files larger than 10 MB will be requested and cached in parts (no larger than 10 MB each part). It reduces time to first byte. The origin must support HTTP Range requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "staticRequestHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "set up custom headers that CDN servers send in requests to origins.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "staticResponseHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "allowedHttpMethods",
                "browserCacheSettings",
                "cacheHttpHeaders",
                "cors",
                "customHostHeader",
                "customServerName",
                "disableCache",
                "disableProxyForceRanges",
                "edgeCacheSettings",
                "fetchedCompressed",
                "forwardHostHeader",
                "gzipOn",
                "ignoreCookie",
                "ignoreQueryParams",
                "proxyCacheMethodsSet",
                "queryParamsBlacklists",
                "queryParamsWhitelists",
                "redirectHttpToHttps",
                "redirectHttpsToHttp",
                "slice",
                "staticRequestHeaders",
                "staticResponseHeaders"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getCdnResourceSslCertificate:getCdnResourceSslCertificate": {
            "properties": {
                "certificateManagerId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "status",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "type"
                    ]
                }
            }
        },
        "yandex:index/getComputeDiskDiskPlacementPolicy:getComputeDiskDiskPlacementPolicy": {
            "properties": {
                "diskPlacementGroupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskPlacementGroupId"
            ]
        },
        "yandex:index/getComputeInstanceBootDisk:getComputeInstanceBootDisk": {
            "properties": {
                "autoDelete": {
                    "type": "boolean",
                    "description": "Specifies whether the disk is auto-deleted when the instance is deleted.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceName": {
                    "type": "string",
                    "description": "Name of the device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskId": {
                    "type": "string",
                    "description": "ID of the disk that is attached to the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initializeParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceBootDiskInitializeParam:getComputeInstanceBootDiskInitializeParam"
                    },
                    "description": "Parameters used for creating a disk alongside the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "Access to the Disk resource. By default, a disk is attached in `READ_WRITE` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoDelete",
                "deviceName",
                "diskId",
                "initializeParams",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceBootDiskInitializeParam:getComputeInstanceBootDiskInitializeParam": {
            "properties": {
                "blockSize": {
                    "type": "number",
                    "description": "The block size of the disk in bytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "Description of the boot disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "A disk image to initialize this disk from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "number",
                    "description": "Size of the disk in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotId": {
                    "type": "string",
                    "description": "A snapshot to initialize this disk from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Disk type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "blockSize",
                "description",
                "imageId",
                "name",
                "size",
                "snapshotId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupAllocationPolicy:getComputeInstanceGroupAllocationPolicy": {
            "properties": {
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of availability zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "zones"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupApplicationBalancerState:getComputeInstanceGroupApplicationBalancerState": {
            "properties": {
                "statusMessage": {
                    "type": "string",
                    "description": "The status message of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupId": {
                    "type": "string",
                    "description": "The ID of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "statusMessage",
                "targetGroupId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupApplicationLoadBalancer:getComputeInstanceGroupApplicationLoadBalancer": {
            "properties": {
                "maxOpeningTrafficDuration": {
                    "type": "number",
                    "description": "Timeout for waiting for the VM to be checked by the load balancer. If the timeout is exceeded, the VM will be turned off based on the deployment policy. Specified in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusMessage": {
                    "type": "string",
                    "description": "The status message of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupDescription": {
                    "type": "string",
                    "description": "A description of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupId": {
                    "type": "string",
                    "description": "The ID of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupName": {
                    "type": "string",
                    "description": "The name of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxOpeningTrafficDuration",
                "statusMessage",
                "targetGroupDescription",
                "targetGroupId",
                "targetGroupLabels",
                "targetGroupName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupDeployPolicy:getComputeInstanceGroupDeployPolicy": {
            "properties": {
                "maxCreating": {
                    "type": "number",
                    "description": "The maximum number of instances that can be created at the same time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxDeleting": {
                    "type": "number",
                    "description": "The maximum number of instances that can be deleted at the same time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxExpansion": {
                    "type": "number",
                    "description": "The maximum number of instances that can be temporarily allocated above the group's target size during the update process.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailable": {
                    "type": "number",
                    "description": "The maximum number of running instances that can be taken offline (stopped or deleted) at the same time\nduring the update process.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startupDuration": {
                    "type": "number",
                    "description": "The amount of time in seconds to allow for an instance to start.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "strategy": {
                    "type": "string",
                    "description": "Affects the lifecycle of the instance during deployment. If set to `proactive` (default), Instance Groups\ncan forcefully stop a running instance. If `opportunistic`, Instance Groups does not stop a running instance. Instead,\nit will wait until the instance stops itself or becomes unhealthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxCreating",
                "maxDeleting",
                "maxExpansion",
                "maxUnavailable",
                "startupDuration",
                "strategy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupHealthCheck:getComputeInstanceGroupHealthCheck": {
            "properties": {
                "healthyThreshold": {
                    "type": "number",
                    "description": "The number of successful health checks before the managed instance is declared healthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupHealthCheckHttpOption:getComputeInstanceGroupHealthCheckHttpOption"
                    },
                    "description": "HTTP check options. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "number",
                    "description": "The interval between health checks in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupHealthCheckTcpOption:getComputeInstanceGroupHealthCheckTcpOption"
                    },
                    "description": "TCP check options. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "number",
                    "description": "Timeout for the managed instance to return a response for the health check in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unhealthyThreshold": {
                    "type": "number",
                    "description": "The number of failed health checks before the managed instance is declared unhealthy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "healthyThreshold",
                "httpOptions",
                "interval",
                "tcpOptions",
                "timeout",
                "unhealthyThreshold"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupHealthCheckHttpOption:getComputeInstanceGroupHealthCheckHttpOption": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The URL path used for health check requests.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "The port to use for TCP health checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "path",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupHealthCheckTcpOption:getComputeInstanceGroupHealthCheckTcpOption": {
            "properties": {
                "port": {
                    "type": "number",
                    "description": "The port to use for TCP health checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstance:getComputeInstanceGroupInstance": {
            "properties": {
                "fqdn": {
                    "type": "string",
                    "description": "The Fully Qualified Domain Name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "instanceId": {
                    "type": "string",
                    "description": "The ID of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the managed instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupInstanceNetworkInterface:getComputeInstanceGroupInstanceNetworkInterface"
                    },
                    "description": "An array with the network interfaces attached to the managed instance. The structure is documented below.\n* `status_changed_at` -The timestamp when the status of the managed instance was last changed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusChangedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusMessage": {
                    "type": "string",
                    "description": "The status message of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The ID of the availability zone where the instance resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fqdn",
                "instanceId",
                "name",
                "networkInterfaces",
                "status",
                "statusChangedAt",
                "statusMessage",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstanceNetworkInterface:getComputeInstanceGroupInstanceNetworkInterface": {
            "properties": {
                "index": {
                    "type": "number",
                    "description": "The index of the network interface as generated by the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The private IP address to assign to the instance. If empty, the address is automatically assigned from the specified subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4": {
                    "type": "boolean",
                    "description": "Is IPv4 address assigned.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "Manual set static IPv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "description": "The MAC address assigned to the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nat": {
                    "type": "boolean",
                    "description": "The instance's public address for accessing the internet over NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natIpAddress": {
                    "type": "string",
                    "description": "The public IP address of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natIpVersion": {
                    "type": "string",
                    "description": "The IP version for the public address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet to attach this interface to. The subnet must reside in the same zone where this instance was created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "index",
                "ipAddress",
                "ipv4",
                "ipv6",
                "ipv6Address",
                "macAddress",
                "nat",
                "natIpAddress",
                "natIpVersion",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstanceTemplate:getComputeInstanceGroupInstanceTemplate": {
            "properties": {
                "bootDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupInstanceTemplateBootDisk:getComputeInstanceGroupInstanceTemplateBootDisk"
                    },
                    "description": "The specifications for boot disk that will be attached to the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "A description of the boot disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostname": {
                    "type": "string",
                    "description": "Hostname temaplate for the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of labels applied to this instance.\n* `resources.0.memory` - The memory size allocated to the instance.\n* `resources.0.cores` - Number of CPU cores allocated to the instance.\n* `resources.0.core_fraction` - Baseline core performance as a percent.\n* `resources.0.gpus` - Number of GPU cores allocated to the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The set of metadata `key:value` pairs assigned to this instance template. This includes custom metadata and predefined keys.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the managed instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupInstanceTemplateNetworkInterface:getComputeInstanceGroupInstanceTemplateNetworkInterface"
                    },
                    "description": "An array with the network interfaces attached to the managed instance. The structure is documented below.\n* `status_changed_at` -The timestamp when the status of the managed instance was last changed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupInstanceTemplateNetworkSetting:getComputeInstanceGroupInstanceTemplateNetworkSetting"
                    },
                    "description": "Network acceleration settings. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "placementPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupInstanceTemplatePlacementPolicy:getComputeInstanceGroupInstanceTemplatePlacementPolicy"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "platformId": {
                    "type": "string",
                    "description": "The ID of the hardware platform configuration for the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupInstanceTemplateResource:getComputeInstanceGroupInstanceTemplateResource"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schedulingPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupInstanceTemplateSchedulingPolicy:getComputeInstanceGroupInstanceTemplateSchedulingPolicy"
                    },
                    "description": "The scheduling policy for the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secondaryDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupInstanceTemplateSecondaryDisk:getComputeInstanceGroupInstanceTemplateSecondaryDisk"
                    },
                    "description": "An array with the secondary disks that will be attached to the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "The service account ID for the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bootDisks",
                "description",
                "hostname",
                "labels",
                "metadata",
                "name",
                "networkInterfaces",
                "networkSettings",
                "placementPolicies",
                "platformId",
                "resources",
                "schedulingPolicies",
                "secondaryDisks",
                "serviceAccountId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstanceTemplateBootDisk:getComputeInstanceGroupInstanceTemplateBootDisk": {
            "properties": {
                "deviceName": {
                    "type": "string",
                    "description": "This value can be used to reference the device under `/dev/disk/by-id/`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskId": {
                    "type": "string",
                    "description": "ID of the existing disk. To set use variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initializeParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupInstanceTemplateBootDiskInitializeParam:getComputeInstanceGroupInstanceTemplateBootDiskInitializeParam"
                    },
                    "description": "The parameters used for creating a disk alongside the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "The access mode to the disk resource. By default a disk is attached in `READ_WRITE` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deviceName",
                "diskId",
                "initializeParams",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstanceTemplateBootDiskInitializeParam:getComputeInstanceGroupInstanceTemplateBootDiskInitializeParam": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description of the boot disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The disk image to initialize this disk from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "number",
                    "description": "The size of the disk in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotId": {
                    "type": "string",
                    "description": "The snapshot to initialize this disk from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Network acceleration type. By default a network is in `STANDARD` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "imageId",
                "size",
                "snapshotId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstanceTemplateNetworkInterface:getComputeInstanceGroupInstanceTemplateNetworkInterface": {
            "properties": {
                "dnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord:getComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord"
                    },
                    "description": "List of dns records.  The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The private IP address to assign to the instance. If empty, the address is automatically assigned from the specified subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4": {
                    "type": "boolean",
                    "description": "Is IPv4 address assigned.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "description": "Manual set static IPv6 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6DnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord:getComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord"
                    },
                    "description": "List of ipv6 dns records.  The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nat": {
                    "type": "boolean",
                    "description": "The instance's public address for accessing the internet over NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natDnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord:getComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord"
                    },
                    "description": "List of nat dns records.  The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natIpAddress": {
                    "type": "string",
                    "description": "The public IP address of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkId": {
                    "type": "string",
                    "description": "The ID of the network.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Security group ids for network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the subnets.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnsRecords",
                "ipAddress",
                "ipv4",
                "ipv6",
                "ipv6Address",
                "ipv6DnsRecords",
                "nat",
                "natDnsRecords",
                "natIpAddress",
                "networkId",
                "securityGroupIds",
                "subnetIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord:getComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone id (if not set, private zone is used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The Fully Qualified Domain Name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create PTR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnsZoneId",
                "fqdn",
                "ptr",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord:getComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone id (if not set, private zone is used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The Fully Qualified Domain Name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create PTR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnsZoneId",
                "fqdn",
                "ptr",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord:getComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone id (if not set, private zone is used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The Fully Qualified Domain Name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create PTR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnsZoneId",
                "fqdn",
                "ptr",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstanceTemplateNetworkSetting:getComputeInstanceGroupInstanceTemplateNetworkSetting": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Network acceleration type. By default a network is in `STANDARD` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstanceTemplatePlacementPolicy:getComputeInstanceGroupInstanceTemplatePlacementPolicy": {
            "properties": {
                "placementGroupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "placementGroupId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstanceTemplateResource:getComputeInstanceGroupInstanceTemplateResource": {
            "properties": {
                "coreFraction": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cores": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gpus": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "coreFraction",
                "cores",
                "gpus",
                "memory"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstanceTemplateSchedulingPolicy:getComputeInstanceGroupInstanceTemplateSchedulingPolicy": {
            "properties": {
                "preemptible": {
                    "type": "boolean",
                    "description": "Specifies if the instance is preemptible. Defaults to false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "preemptible"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstanceTemplateSecondaryDisk:getComputeInstanceGroupInstanceTemplateSecondaryDisk": {
            "properties": {
                "deviceName": {
                    "type": "string",
                    "description": "This value can be used to reference the device under `/dev/disk/by-id/`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskId": {
                    "type": "string",
                    "description": "ID of the existing disk. To set use variables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initializeParams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParam:getComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParam"
                    },
                    "description": "The parameters used for creating a disk alongside the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "The access mode to the disk resource. By default a disk is attached in `READ_WRITE` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deviceName",
                "diskId",
                "initializeParams",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParam:getComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParam": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description of the boot disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "imageId": {
                    "type": "string",
                    "description": "The disk image to initialize this disk from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "number",
                    "description": "The size of the disk in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotId": {
                    "type": "string",
                    "description": "The snapshot to initialize this disk from.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Network acceleration type. By default a network is in `STANDARD` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "imageId",
                "size",
                "snapshotId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupLoadBalancer:getComputeInstanceGroupLoadBalancer": {
            "properties": {
                "maxOpeningTrafficDuration": {
                    "type": "number",
                    "description": "Timeout for waiting for the VM to be checked by the load balancer. If the timeout is exceeded, the VM will be turned off based on the deployment policy. Specified in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusMessage": {
                    "type": "string",
                    "description": "The status message of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupDescription": {
                    "type": "string",
                    "description": "A description of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupId": {
                    "type": "string",
                    "description": "The ID of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupName": {
                    "type": "string",
                    "description": "The name of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxOpeningTrafficDuration",
                "statusMessage",
                "targetGroupDescription",
                "targetGroupId",
                "targetGroupLabels",
                "targetGroupName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupLoadBalancerState:getComputeInstanceGroupLoadBalancerState": {
            "properties": {
                "statusMessage": {
                    "type": "string",
                    "description": "The status message of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupId": {
                    "type": "string",
                    "description": "The ID of the target group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "statusMessage",
                "targetGroupId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupScalePolicy:getComputeInstanceGroupScalePolicy": {
            "properties": {
                "autoScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupScalePolicyAutoScale:getComputeInstanceGroupScalePolicyAutoScale"
                    },
                    "description": "The auto scaling policy of the instance group. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupScalePolicyFixedScale:getComputeInstanceGroupScalePolicyFixedScale"
                    },
                    "description": "The fixed scaling policy of the instance group. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "testAutoScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupScalePolicyTestAutoScale:getComputeInstanceGroupScalePolicyTestAutoScale"
                    },
                    "description": "The test auto scaling policy of the instance group. Use it to test how the auto scale works. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoScales",
                "fixedScales",
                "testAutoScales"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupScalePolicyAutoScale:getComputeInstanceGroupScalePolicyAutoScale": {
            "properties": {
                "cpuUtilizationTarget": {
                    "type": "number",
                    "description": "Target CPU load level.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupScalePolicyAutoScaleCustomRule:getComputeInstanceGroupScalePolicyAutoScaleCustomRule"
                    },
                    "description": "A list of custom rules. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initialSize": {
                    "type": "number",
                    "description": "The initial number of instances in the instance group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "number",
                    "description": "The maximum number of virtual machines in the group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "measurementDuration": {
                    "type": "number",
                    "description": "The amount of time, in seconds, that metrics are averaged for.\nIf the average value at the end of the interval is higher than the `cpu_utilization_target`,\nthe instance group will increase the number of virtual machines in the group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minZoneSize": {
                    "type": "number",
                    "description": "The minimum number of virtual machines in a single availability zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stabilizationDuration": {
                    "type": "number",
                    "description": "The minimum time interval, in seconds, to monitor the load before\nan instance group can reduce the number of virtual machines in the group. During this time, the group\nwill not decrease even if the average load falls below the value of `cpu_utilization_target`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "warmupDuration": {
                    "type": "number",
                    "description": "The warm-up time of the virtual machine, in seconds. During this time,\ntraffic is fed to the virtual machine, but load metrics are not taken into account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpuUtilizationTarget",
                "customRules",
                "initialSize",
                "maxSize",
                "measurementDuration",
                "minZoneSize",
                "stabilizationDuration",
                "warmupDuration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupScalePolicyAutoScaleCustomRule:getComputeInstanceGroupScalePolicyAutoScaleCustomRule": {
            "properties": {
                "folderId": {
                    "type": "string",
                    "description": "Folder ID of custom metric in Yandex Monitoring that should be used for scaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of labels applied to this instance.\n* `resources.0.memory` - The memory size allocated to the instance.\n* `resources.0.cores` - Number of CPU cores allocated to the instance.\n* `resources.0.core_fraction` - Baseline core performance as a percent.\n* `resources.0.gpus` - Number of GPU cores allocated to the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricName": {
                    "type": "string",
                    "description": "The name of metric.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricType": {
                    "type": "string",
                    "description": "Metric type, `GAUGE` or `COUNTER`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ruleType": {
                    "type": "string",
                    "description": "Rule type: `UTILIZATION` - This type means that the metric applies to one instance.\nFirst, Instance Groups calculates the average metric value for each instance,\nthen averages the values for instances in one availability zone.\nThis type of metric must have the `instance_id` label. `WORKLOAD` - This type means that the metric applies to instances in one availability zone.\nThis type of metric must have the `zone_id` label.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "string",
                    "description": "Service of custom metric in Yandex Monitoring that should be used for scaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "number",
                    "description": "Target metric value level.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "folderId",
                "labels",
                "metricName",
                "metricType",
                "ruleType",
                "service",
                "target"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupScalePolicyFixedScale:getComputeInstanceGroupScalePolicyFixedScale": {
            "properties": {
                "size": {
                    "type": "number",
                    "description": "The size of the disk in GB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupScalePolicyTestAutoScale:getComputeInstanceGroupScalePolicyTestAutoScale": {
            "properties": {
                "cpuUtilizationTarget": {
                    "type": "number",
                    "description": "Target CPU load level.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceGroupScalePolicyTestAutoScaleCustomRule:getComputeInstanceGroupScalePolicyTestAutoScaleCustomRule"
                    },
                    "description": "A list of custom rules. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "initialSize": {
                    "type": "number",
                    "description": "The initial number of instances in the instance group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "number",
                    "description": "The maximum number of virtual machines in the group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "measurementDuration": {
                    "type": "number",
                    "description": "The amount of time, in seconds, that metrics are averaged for.\nIf the average value at the end of the interval is higher than the `cpu_utilization_target`,\nthe instance group will increase the number of virtual machines in the group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minZoneSize": {
                    "type": "number",
                    "description": "The minimum number of virtual machines in a single availability zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stabilizationDuration": {
                    "type": "number",
                    "description": "The minimum time interval, in seconds, to monitor the load before\nan instance group can reduce the number of virtual machines in the group. During this time, the group\nwill not decrease even if the average load falls below the value of `cpu_utilization_target`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "warmupDuration": {
                    "type": "number",
                    "description": "The warm-up time of the virtual machine, in seconds. During this time,\ntraffic is fed to the virtual machine, but load metrics are not taken into account.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpuUtilizationTarget",
                "customRules",
                "initialSize",
                "maxSize",
                "measurementDuration",
                "minZoneSize",
                "stabilizationDuration",
                "warmupDuration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceGroupScalePolicyTestAutoScaleCustomRule:getComputeInstanceGroupScalePolicyTestAutoScaleCustomRule": {
            "properties": {
                "folderId": {
                    "type": "string",
                    "description": "Folder ID of custom metric in Yandex Monitoring that should be used for scaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of labels applied to this instance.\n* `resources.0.memory` - The memory size allocated to the instance.\n* `resources.0.cores` - Number of CPU cores allocated to the instance.\n* `resources.0.core_fraction` - Baseline core performance as a percent.\n* `resources.0.gpus` - Number of GPU cores allocated to the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricName": {
                    "type": "string",
                    "description": "The name of metric.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricType": {
                    "type": "string",
                    "description": "Metric type, `GAUGE` or `COUNTER`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ruleType": {
                    "type": "string",
                    "description": "Rule type: `UTILIZATION` - This type means that the metric applies to one instance.\nFirst, Instance Groups calculates the average metric value for each instance,\nthen averages the values for instances in one availability zone.\nThis type of metric must have the `instance_id` label. `WORKLOAD` - This type means that the metric applies to instances in one availability zone.\nThis type of metric must have the `zone_id` label.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "string",
                    "description": "Service of custom metric in Yandex Monitoring that should be used for scaling.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "target": {
                    "type": "number",
                    "description": "Target metric value level.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "folderId",
                "labels",
                "metricName",
                "metricType",
                "ruleType",
                "service",
                "target"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceLocalDisk:getComputeInstanceLocalDisk": {
            "properties": {
                "deviceName": {
                    "type": "string",
                    "description": "Name of the device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sizeBytes": {
                    "type": "number",
                    "description": "Size of the disk, specified in bytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deviceName",
                "sizeBytes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "sizeBytes"
                    ]
                }
            }
        },
        "yandex:index/getComputeInstanceNetworkInterface:getComputeInstanceNetworkInterface": {
            "properties": {
                "dnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceNetworkInterfaceDnsRecord:getComputeInstanceNetworkInterfaceDnsRecord"
                    },
                    "description": "List of configurations for creating ipv4 DNS records. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "index": {
                    "type": "number",
                    "description": "The index of the network interface, generated by the server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The assignd private IP address to the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4": {
                    "type": "boolean",
                    "description": "Show if IPv4 address is assigned to the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6Address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6DnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceNetworkInterfaceIpv6DnsRecord:getComputeInstanceNetworkInterfaceIpv6DnsRecord"
                    },
                    "description": "List of configurations for creating ipv6 DNS records. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "macAddress": {
                    "type": "string",
                    "description": "MAC address that is assigned to the network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nat": {
                    "type": "boolean",
                    "description": "Assigned for the instance's public address that is used to access the internet over NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natDnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstanceNetworkInterfaceNatDnsRecord:getComputeInstanceNetworkInterfaceNatDnsRecord"
                    },
                    "description": "List of configurations for creating ipv4 NAT DNS records. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natIpAddress": {
                    "type": "string",
                    "description": "Public IP address of the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "natIpVersion": {
                    "type": "string",
                    "description": "IP version for the public address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Security group ids for network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "ID of the subnet to attach this interface to. The subnet must reside in the same zone where this instance was created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnsRecords",
                "index",
                "ipAddress",
                "ipv4",
                "ipv6",
                "ipv6Address",
                "ipv6DnsRecords",
                "macAddress",
                "nat",
                "natDnsRecords",
                "natIpAddress",
                "natIpVersion",
                "securityGroupIds",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceNetworkInterfaceDnsRecord:getComputeInstanceNetworkInterfaceDnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone ID (if not set, private zone is used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "DNS record FQDN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create a TR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL. in seconds\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnsZoneId",
                "fqdn",
                "ptr",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceNetworkInterfaceIpv6DnsRecord:getComputeInstanceNetworkInterfaceIpv6DnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone ID (if not set, private zone is used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "DNS record FQDN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create a TR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL. in seconds\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnsZoneId",
                "fqdn",
                "ptr",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceNetworkInterfaceNatDnsRecord:getComputeInstanceNetworkInterfaceNatDnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone ID (if not set, private zone is used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "DNS record FQDN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create a TR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL. in seconds\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnsZoneId",
                "fqdn",
                "ptr",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstancePlacementPolicy:getComputeInstancePlacementPolicy": {
            "properties": {
                "hostAffinityRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getComputeInstancePlacementPolicyHostAffinityRule:getComputeInstancePlacementPolicyHostAffinityRule"
                    },
                    "description": "List of host affinity rules. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "placementGroupId": {
                    "type": "string",
                    "description": "Specifies the id of the Placement Group to assign to the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hostAffinityRules"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstancePlacementPolicyHostAffinityRule:getComputeInstancePlacementPolicyHostAffinityRule": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Affinity label or one of reserved values - `yc.hostId`, `yc.hostGroupId`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "op": {
                    "type": "string",
                    "description": "Affinity action. The only value supported is `IN`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "op",
                "values"
            ]
        },
        "yandex:index/getComputeInstanceResource:getComputeInstanceResource": {
            "properties": {
                "coreFraction": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cores": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gpus": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "coreFraction",
                "cores",
                "gpus",
                "memory"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceSchedulingPolicy:getComputeInstanceSchedulingPolicy": {
            "properties": {
                "preemptible": {
                    "type": "boolean",
                    "description": "(Optional) Specifies if the instance is preemptible. Defaults to false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "preemptible"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getComputeInstanceSecondaryDisk:getComputeInstanceSecondaryDisk": {
            "properties": {
                "autoDelete": {
                    "type": "boolean",
                    "description": "Specifies whether the disk is auto-deleted when the instance is deleted.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceName": {
                    "type": "string",
                    "description": "Name of the device.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskId": {
                    "type": "string",
                    "description": "ID of the disk that is attached to the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mode": {
                    "type": "string",
                    "description": "Access to the Disk resource. By default, a disk is attached in `READ_WRITE` mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoDelete",
                "deviceName",
                "diskId",
                "mode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getContainerRepositoryLifecyclePolicyRule:getContainerRepositoryLifecyclePolicyRule": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the lifecycle policy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expirePeriod": {
                    "type": "string",
                    "description": "The period of time that must pass after creating a image for it to suit the automatic deletion criteria. It must be a multiple of 24 hours.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retainedTop": {
                    "type": "number",
                    "description": "The number of images to be retained even if the expire_period already expired.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tagRegexp": {
                    "type": "string",
                    "description": "Tag to specify a filter as a regular expression. For example `.*` - all images with tags.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "untagged": {
                    "type": "boolean",
                    "description": "If enabled, rules apply to untagged Docker images.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "expirePeriod",
                "retainedTop",
                "tagRegexp",
                "untagged"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getContainerRepositoryLifecyclePolicyTimeouts:getContainerRepositoryLifecyclePolicyTimeouts": {
            "properties": {
                "default": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/getDataprocClusterClusterConfig:getDataprocClusterClusterConfig": {
            "properties": {
                "hadoops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getDataprocClusterClusterConfigHadoop:getDataprocClusterClusterConfigHadoop"
                    },
                    "description": "Data Proc specific options. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subclusterSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getDataprocClusterClusterConfigSubclusterSpec:getDataprocClusterClusterConfigSubclusterSpec"
                    },
                    "description": "Configuration of the Data Proc subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionId": {
                    "type": "string",
                    "description": "Version of Data Proc image.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hadoops",
                "subclusterSpecs",
                "versionId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getDataprocClusterClusterConfigHadoop:getDataprocClusterClusterConfigHadoop": {
            "properties": {
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value pairs used to configure cluster services.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of services launched on Data Proc cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sshPublicKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of SSH public keys distributed to the hosts of the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "properties",
                "services",
                "sshPublicKeys"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getDataprocClusterClusterConfigSubclusterSpec:getDataprocClusterClusterConfigSubclusterSpec": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "The hosts of the subclusters have public IP addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoscalingConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getDataprocClusterClusterConfigSubclusterSpecAutoscalingConfig:getDataprocClusterClusterConfigSubclusterSpecAutoscalingConfig"
                    },
                    "description": "Optional autoscaling configuration for compute subclusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hostsCount": {
                    "type": "number",
                    "description": "Number of hosts within Data Proc subcluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "ID of the Data Proc subcluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Data Proc cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getDataprocClusterClusterConfigSubclusterSpecResource:getDataprocClusterClusterConfigSubclusterSpecResource"
                    },
                    "description": "Resources allocated to each host of the Data Proc subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "Role of the subcluster in the Data Proc cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which hosts of the subcluster belong.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignPublicIp",
                "autoscalingConfigs",
                "hostsCount",
                "id",
                "name",
                "resources",
                "role",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getDataprocClusterClusterConfigSubclusterSpecAutoscalingConfig:getDataprocClusterClusterConfigSubclusterSpecAutoscalingConfig": {
            "properties": {
                "cpuUtilizationTarget": {
                    "type": "number",
                    "description": "Defines an autoscaling rule based on the average CPU utilization of the instance group. If not set default autoscaling metric will be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "decommissionTimeout": {
                    "type": "number",
                    "description": "Timeout to gracefully decommission nodes during downscaling. In seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxHostsCount": {
                    "type": "number",
                    "description": "Maximum number of nodes in autoscaling subclusters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "measurementDuration": {
                    "type": "number",
                    "description": "Time in seconds allotted for averaging metrics.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preemptible": {
                    "type": "boolean",
                    "description": "Bool flag -- whether to use preemptible compute instances. Preemptible instances are stopped at least once every 24 hours, and can be stopped at any time if their resources are needed by Compute. For more information, see [Preemptible Virtual Machines](https://cloud.yandex.com/docs/compute/concepts/preemptible-vm).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stabilizationDuration": {
                    "type": "number",
                    "description": "Minimum amount of time in seconds allotted for monitoring before Instance Groups can reduce the number of instances in the group. During this time, the group size doesn't decrease, even if the new metric values indicate that it should.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "warmupDuration": {
                    "type": "number",
                    "description": "The warmup time of the instance in seconds. During this time, traffic is sent to the instance, but instance metrics are not collected.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cpuUtilizationTarget",
                "decommissionTimeout",
                "maxHostsCount",
                "measurementDuration",
                "preemptible",
                "stabilizationDuration",
                "warmupDuration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getDataprocClusterClusterConfigSubclusterSpecResource:getDataprocClusterClusterConfigSubclusterSpecResource": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of a host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "description": "The ID of the preset for computational resources available to a host. All available presets are listed in the [documentation](https://cloud.yandex.com/docs/data-proc/concepts/instance-types).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getDnsZoneTimeouts:getDnsZoneTimeouts": {
            "properties": {
                "create": {
                    "type": "string"
                },
                "delete": {
                    "type": "string"
                },
                "update": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "yandex:index/getFunctionScalingPolicyPolicy:getFunctionScalingPolicyPolicy": {
            "properties": {
                "tag": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneInstancesLimit": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneRequestsLimit": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "tag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getFunctionSecret:getFunctionSecret": {
            "properties": {
                "environmentVariable": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "environmentVariable",
                "id",
                "key",
                "versionId"
            ]
        },
        "yandex:index/getFunctionTriggerDlq:getFunctionTriggerDlq": {
            "properties": {
                "queueId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccountId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "queueId",
                "serviceAccountId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getFunctionTriggerFunction:getFunctionTriggerFunction": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retryAttempts": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retryInterval": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccountId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tag": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "retryAttempts",
                "retryInterval",
                "serviceAccountId",
                "tag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getFunctionTriggerIot:getFunctionTriggerIot": {
            "properties": {
                "deviceId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "registryId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topic": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "deviceId",
                "registryId",
                "topic"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getFunctionTriggerLogGroup:getFunctionTriggerLogGroup": {
            "properties": {
                "batchCutoff": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "batchSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "batchCutoff",
                "batchSize",
                "logGroupIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getFunctionTriggerLogging:getFunctionTriggerLogging": {
            "properties": {
                "batchCutoff": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "batchSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "levels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "batchCutoff",
                "batchSize",
                "groupId",
                "levels",
                "resourceIds",
                "resourceTypes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getFunctionTriggerMessageQueue:getFunctionTriggerMessageQueue": {
            "properties": {
                "batchCutoff": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "batchSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queueId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceAccountId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "visibilityTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "batchCutoff",
                "batchSize",
                "queueId",
                "serviceAccountId",
                "visibilityTimeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getFunctionTriggerObjectStorage:getFunctionTriggerObjectStorage": {
            "properties": {
                "bucketId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "create": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delete": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "suffix": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "update": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucketId",
                "create",
                "delete",
                "prefix",
                "suffix",
                "update"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getFunctionTriggerTimer:getFunctionTriggerTimer": {
            "properties": {
                "cronExpression": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cronExpression"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getIamPolicyBinding:getIamPolicyBinding": {
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of identities that will be granted the privilege in the `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "The role/permission that will be granted to the members.\nSee the [IAM Roles] documentation for a complete list of roles.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "members",
                "role"
            ]
        },
        "yandex:index/getKubernetesClusterKmsProvider:getKubernetesClusterKmsProvider": {
            "properties": {
                "keyId": {
                    "type": "string",
                    "description": "KMS key ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "keyId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesClusterMaster:getKubernetesClusterMaster": {
            "properties": {
                "clusterCaCertificate": {
                    "type": "string",
                    "description": "PEM-encoded public certificate that is the root of trust for the Kubernetes cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalV4Address": {
                    "type": "string",
                    "description": "An IPv4 external network address that is assigned to the master.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalV4Endpoint": {
                    "type": "string",
                    "description": "External endpoint that can be used to access Kubernetes cluster API from the internet (outside of the cloud).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalV4Address": {
                    "type": "string",
                    "description": "An IPv4 internal network address that is assigned to the master.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalV4Endpoint": {
                    "type": "string",
                    "description": "Internal endpoint that can be used to connect to the master from cloud networks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenancePolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesClusterMasterMaintenancePolicy:getKubernetesClusterMasterMaintenancePolicy"
                    },
                    "description": "Maintenance policy for Kubernetes master. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicIp": {
                    "type": "boolean",
                    "description": "Boolean flag. When `true`, Kubernetes master have visible ipv4 address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesClusterMasterRegional:getKubernetesClusterMasterRegional"
                    },
                    "description": "Information about cluster regional master. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of security groups IDs of the Kubernetes cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kubernetes master.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesClusterMasterVersionInfo:getKubernetesClusterMasterVersionInfo"
                    },
                    "description": "Information about cluster version. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zonals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesClusterMasterZonal:getKubernetesClusterMasterZonal"
                    },
                    "description": "Information about cluster zonal master. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterCaCertificate",
                "externalV4Address",
                "externalV4Endpoint",
                "internalV4Address",
                "internalV4Endpoint",
                "maintenancePolicies",
                "publicIp",
                "regionals",
                "securityGroupIds",
                "version",
                "versionInfos",
                "zonals"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesClusterMasterMaintenancePolicy:getKubernetesClusterMasterMaintenancePolicy": {
            "properties": {
                "autoUpgrade": {
                    "type": "boolean",
                    "description": "Boolean flag that specifies if master can be upgraded automatically.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesClusterMasterMaintenancePolicyMaintenanceWindow:getKubernetesClusterMasterMaintenancePolicyMaintenanceWindow"
                    },
                    "description": "Set of day intervals, when maintenance is allowed, when update for master is allowed.\nWhen omitted, it defaults to any time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoUpgrade",
                "maintenanceWindows"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesClusterMasterMaintenancePolicyMaintenanceWindow:getKubernetesClusterMasterMaintenancePolicyMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "duration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "day",
                "duration",
                "startTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesClusterMasterRegional:getKubernetesClusterMasterRegional": {
            "properties": {
                "region": {
                    "type": "string",
                    "description": "ID of the availability region where the master compute instances resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesClusterMasterVersionInfo:getKubernetesClusterMasterVersionInfo": {
            "properties": {
                "currentVersion": {
                    "type": "string",
                    "description": "Current Kubernetes version, major.minor (e.g. 1.15).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "newRevisionAvailable": {
                    "type": "boolean",
                    "description": "True/false flag.\nNewer revisions may include Kubernetes patches (e.g 1.15.1 \u003e 1.15.2) as well\nas some internal component updates - new features or bug fixes in yandex-specific\ncomponents either on the master or nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "newRevisionSummary": {
                    "type": "string",
                    "description": "Human readable description of the changes to be applied\nwhen updating to the latest revision. Empty if new_revision_available is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionDeprecated": {
                    "type": "boolean",
                    "description": "True/false flag. The current version is on the deprecation schedule,\ncomponent (master or node group) should be upgraded.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "currentVersion",
                "newRevisionAvailable",
                "newRevisionSummary",
                "versionDeprecated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesClusterMasterZonal:getKubernetesClusterMasterZonal": {
            "properties": {
                "zone": {
                    "type": "string",
                    "description": "ID of the availability zone where the master compute instance resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesClusterNetworkImplementation:getKubernetesClusterNetworkImplementation": {
            "properties": {
                "cilias": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesClusterNetworkImplementationCilia:getKubernetesClusterNetworkImplementationCilia"
                    },
                    "description": "Cilium network implementation configuration. No options exist.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cilias"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesClusterNetworkImplementationCilia:getKubernetesClusterNetworkImplementationCilia": {
            "properties": {
                "routingMode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "routingMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupAllocationPolicy:getKubernetesNodeGroupAllocationPolicy": {
            "properties": {
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesNodeGroupAllocationPolicyLocation:getKubernetesNodeGroupAllocationPolicyLocation"
                    },
                    "description": "Repeated field, that specify subnets (zones), that will be used by node group compute instances. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "locations"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupAllocationPolicyLocation:getKubernetesNodeGroupAllocationPolicyLocation": {
            "properties": {
                "subnetId": {
                    "type": "string",
                    "description": "ID of the subnet, that will be used by one compute instance in node group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "ID of the availability zone where for one compute instance in node group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subnetId",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupDeployPolicy:getKubernetesNodeGroupDeployPolicy": {
            "properties": {
                "maxExpansion": {
                    "type": "number",
                    "description": "The maximum number of instances that can be temporarily allocated above the group's target size during the update.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUnavailable": {
                    "type": "number",
                    "description": "The maximum number of running instances that can be taken offline during update.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxExpansion",
                "maxUnavailable"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupInstanceTemplate:getKubernetesNodeGroupInstanceTemplate": {
            "properties": {
                "bootDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesNodeGroupInstanceTemplateBootDisk:getKubernetesNodeGroupInstanceTemplateBootDisk"
                    },
                    "description": "The specifications for boot disks that will be attached to the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerRuntimes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesNodeGroupInstanceTemplateContainerRuntime:getKubernetesNodeGroupInstanceTemplateContainerRuntime"
                    },
                    "description": "Container runtime configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels assigned to compute nodes (instances), created by the Node Group.\n---\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The set of metadata `key:value` pairs assigned to this instance template. This includes custom metadata and predefined keys.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of a specific Kubernetes node group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nat": {
                    "type": "boolean",
                    "description": "A public address that can be used to access the internet over NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkAccelerationType": {
                    "type": "string",
                    "description": "Type of network acceleration. Values: `standard`, `software_accelerated`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesNodeGroupInstanceTemplateNetworkInterface:getKubernetesNodeGroupInstanceTemplateNetworkInterface"
                    },
                    "description": "An array with the network interfaces that will be attached to the instance. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "placementPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesNodeGroupInstanceTemplatePlacementPolicy:getKubernetesNodeGroupInstanceTemplatePlacementPolicy"
                    },
                    "description": "(Optional) The placement policy configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "platformId": {
                    "type": "string",
                    "description": "The ID of the hardware platform configuration for the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesNodeGroupInstanceTemplateResource:getKubernetesNodeGroupInstanceTemplateResource"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schedulingPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesNodeGroupInstanceTemplateSchedulingPolicy:getKubernetesNodeGroupInstanceTemplateSchedulingPolicy"
                    },
                    "description": "The scheduling policy for the instances in node group. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bootDisks",
                "containerRuntimes",
                "labels",
                "metadata",
                "name",
                "nat",
                "networkAccelerationType",
                "networkInterfaces",
                "placementPolicies",
                "platformId",
                "resources",
                "schedulingPolicies"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupInstanceTemplateBootDisk:getKubernetesNodeGroupInstanceTemplateBootDisk": {
            "properties": {
                "size": {
                    "type": "number",
                    "description": "The number of instances in the node group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of container runtime. Values: `docker`, `containerd`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "size",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupInstanceTemplateContainerRuntime:getKubernetesNodeGroupInstanceTemplateContainerRuntime": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of container runtime. Values: `docker`, `containerd`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupInstanceTemplateNetworkInterface:getKubernetesNodeGroupInstanceTemplateNetworkInterface": {
            "properties": {
                "ipv4": {
                    "type": "boolean",
                    "description": "Indicates whether the IPv4 address has been assigned.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv4DnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord:getKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord"
                    },
                    "description": "List of configurations for creating ipv4 DNS records. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6": {
                    "type": "boolean",
                    "description": "Indicates whether the IPv6 address has been assigned.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipv6DnsRecords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord:getKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord"
                    },
                    "description": "List of configurations for creating ipv6 DNS records. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nat": {
                    "type": "boolean",
                    "description": "A public address that can be used to access the internet over NAT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Security group ids for network interface.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IDs of the subnets.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ipv4",
                "ipv4DnsRecords",
                "ipv6",
                "ipv6DnsRecords",
                "nat",
                "securityGroupIds",
                "subnetIds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord:getKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone ID (if not set, private zone is used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "DNS record FQDN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create a PTR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL (in seconds).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnsZoneId",
                "fqdn",
                "ptr",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord:getKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord": {
            "properties": {
                "dnsZoneId": {
                    "type": "string",
                    "description": "DNS zone ID (if not set, private zone is used).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "DNS record FQDN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ptr": {
                    "type": "boolean",
                    "description": "When set to true, also create a PTR DNS record.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ttl": {
                    "type": "number",
                    "description": "DNS record TTL (in seconds).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dnsZoneId",
                "fqdn",
                "ptr",
                "ttl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupInstanceTemplatePlacementPolicy:getKubernetesNodeGroupInstanceTemplatePlacementPolicy": {
            "properties": {
                "placementGroupId": {
                    "type": "string",
                    "description": "(Optional) Specifies the id of the Placement Group to assign to the instances.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "placementGroupId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupInstanceTemplateResource:getKubernetesNodeGroupInstanceTemplateResource": {
            "properties": {
                "coreFraction": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cores": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gpus": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "memory": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "coreFraction",
                "cores",
                "gpus",
                "memory"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupInstanceTemplateSchedulingPolicy:getKubernetesNodeGroupInstanceTemplateSchedulingPolicy": {
            "properties": {
                "preemptible": {
                    "type": "boolean",
                    "description": "Specifies if the instance is preemptible. Defaults to false.\n---\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "preemptible"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupMaintenancePolicy:getKubernetesNodeGroupMaintenancePolicy": {
            "properties": {
                "autoRepair": {
                    "type": "boolean",
                    "description": "Boolean flag.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoUpgrade": {
                    "type": "boolean",
                    "description": "Boolean flag.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maintenanceWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesNodeGroupMaintenancePolicyMaintenanceWindow:getKubernetesNodeGroupMaintenancePolicyMaintenanceWindow"
                    },
                    "description": "Set of day intervals, when maintenance is allowed for this node group.\nWhen omitted, it defaults to any time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoRepair",
                "autoUpgrade",
                "maintenanceWindows"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupMaintenancePolicyMaintenanceWindow:getKubernetesNodeGroupMaintenancePolicyMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "duration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startTime": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "day",
                "duration",
                "startTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupScalePolicy:getKubernetesNodeGroupScalePolicy": {
            "properties": {
                "autoScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesNodeGroupScalePolicyAutoScale:getKubernetesNodeGroupScalePolicyAutoScale"
                    },
                    "description": "Scale policy for an autoscaled node group. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fixedScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getKubernetesNodeGroupScalePolicyFixedScale:getKubernetesNodeGroupScalePolicyFixedScale"
                    },
                    "description": "Scale policy for a fixed scale node group. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoScales",
                "fixedScales"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupScalePolicyAutoScale:getKubernetesNodeGroupScalePolicyAutoScale": {
            "properties": {
                "initial": {
                    "type": "number",
                    "description": "Initial number of instances in the node group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "max": {
                    "type": "number",
                    "description": "Maximum number of instances in the node group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "min": {
                    "type": "number",
                    "description": "Minimum number of instances in the node group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "initial",
                "max",
                "min"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupScalePolicyFixedScale:getKubernetesNodeGroupScalePolicyFixedScale": {
            "properties": {
                "size": {
                    "type": "number",
                    "description": "The number of instances in the node group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getKubernetesNodeGroupVersionInfo:getKubernetesNodeGroupVersionInfo": {
            "properties": {
                "currentVersion": {
                    "type": "string",
                    "description": "Current Kubernetes version, major.minor (e.g. 1.15).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "newRevisionAvailable": {
                    "type": "boolean",
                    "description": "True/false flag.\nNewer revisions may include Kubernetes patches (e.g 1.15.1 \u003e 1.15.2) as well\nas some internal component updates - new features or bug fixes in yandex-specific\ncomponents either on the master or nodes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "newRevisionSummary": {
                    "type": "string",
                    "description": "Human readable description of the changes to be applied\nwhen updating to the latest revision. Empty if new_revision_available is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionDeprecated": {
                    "type": "boolean",
                    "description": "True/false flag. The current version is on the deprecation schedule,\ncomponent (master or node group) should be upgraded.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "currentVersion",
                "newRevisionAvailable",
                "newRevisionSummary",
                "versionDeprecated"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getLbNetworkLoadBalancerAttachedTargetGroup:getLbNetworkLoadBalancerAttachedTargetGroup": {
            "properties": {
                "healthchecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getLbNetworkLoadBalancerAttachedTargetGroupHealthcheck:getLbNetworkLoadBalancerAttachedTargetGroupHealthcheck"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetGroupId": {
                    "type": "string",
                    "description": "ID of the target group that attached to the network load balancer.\n* `healthcheck.0.name` - Name of the health check.\n* `healthcheck.0.interval` - The interval between health checks.\n* `healthcheck.0.timeout` - Timeout for a target to return a response for the health check.\n* `healthcheck.0.unhealthy_threshold` - Number of failed health checks before changing the status to `UNHEALTHY`.\n* `healthcheck.0.healthy_threshold` - Number of successful health checks required in order to set the `HEALTHY` status for the target.\n* `healthcheck.0.tcp_options.0.port` - Port to use for TCP health checks.\n* `healthcheck.0.http_options.0.port` - Port to use for HTTP health checks.\n* `healthcheck.0.http_options.0.path` - URL path to use for HTTP health checks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "healthchecks",
                "targetGroupId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getLbNetworkLoadBalancerAttachedTargetGroupHealthcheck:getLbNetworkLoadBalancerAttachedTargetGroupHealthcheck": {
            "properties": {
                "healthyThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOption:getLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOption"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "interval": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "- Name of the network load balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tcpOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOption:getLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOption"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unhealthyThreshold": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "healthyThreshold",
                "httpOptions",
                "interval",
                "name",
                "tcpOptions",
                "timeout",
                "unhealthyThreshold"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOption:getLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOption": {
            "properties": {
                "path": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "Port for incoming traffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "path",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOption:getLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOption": {
            "properties": {
                "port": {
                    "type": "number",
                    "description": "Port for incoming traffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getLbNetworkLoadBalancerListener:getLbNetworkLoadBalancerListener": {
            "properties": {
                "externalAddressSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getLbNetworkLoadBalancerListenerExternalAddressSpec:getLbNetworkLoadBalancerListenerExternalAddressSpec"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "internalAddressSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getLbNetworkLoadBalancerListenerInternalAddressSpec:getLbNetworkLoadBalancerListenerInternalAddressSpec"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "- Name of the network load balancer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "Port for incoming traffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol for incoming traffic.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetPort": {
                    "type": "number",
                    "description": "Port of a target. \n* `external_address_spec.0.address` - External IP address of a listener.\n* `external_address_spec.0.ip_version` - IP version of the external addresses.\n* `internal_address_spec.0.subnet_id` - Subnet ID to which the internal IP address belongs\n* `internal_address_spec.0.address` - Internal IP address of a listener.\n* `internal_address_spec.0.ip_version` - IP version of the internal addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "externalAddressSpecs",
                "internalAddressSpecs",
                "name",
                "port",
                "protocol",
                "targetPort"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getLbNetworkLoadBalancerListenerExternalAddressSpec:getLbNetworkLoadBalancerListenerExternalAddressSpec": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "ipVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getLbNetworkLoadBalancerListenerInternalAddressSpec:getLbNetworkLoadBalancerListenerInternalAddressSpec": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipVersion": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "ipVersion",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getLbTargetGroupTarget:getLbTargetGroupTarget": {
            "properties": {
                "address": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "subnetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getLockboxSecretCurrentVersion:getLockboxSecretCurrentVersion": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The version creation timestamp.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The version description.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destroyAt": {
                    "type": "string",
                    "description": "The version destroy timestamp.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The version ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "payloadEntryKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of keys that the version contains (doesn't include the values).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretId": {
                    "type": "string",
                    "description": "The Yandex Cloud Lockbox secret ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The version status.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "description",
                "destroyAt",
                "id",
                "payloadEntryKeys",
                "secretId",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getLockboxSecretVersionEntry:getLockboxSecretVersionEntry": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "textValue": {
                    "type": "string",
                    "description": "The text value of the entry.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "textValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterAccess:getMdbClickhouseClusterAccess": {
            "properties": {
                "dataLens": {
                    "type": "boolean",
                    "description": "Allow access for Web SQL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataTransfer": {
                    "type": "boolean",
                    "description": "Allow access for DataTransfer\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metrika": {
                    "type": "boolean",
                    "description": "Allow access for Yandex.Metrika.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverless": {
                    "type": "boolean",
                    "description": "Allow access for Serverless.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webSql": {
                    "type": "boolean",
                    "description": "Allow access for DataLens.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "yandexQuery": {
                    "type": "boolean",
                    "description": "Allow access for YandexQuery\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dataLens",
                "dataTransfer",
                "metrika",
                "serverless",
                "webSql",
                "yandexQuery"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterBackupWindowStart:getMdbClickhouseClusterBackupWindowStart": {
            "properties": {
                "hours": {
                    "type": "number",
                    "description": "The hour at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minutes": {
                    "type": "number",
                    "description": "The minute at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hours",
                "minutes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterClickhouse:getMdbClickhouseClusterClickhouse": {
            "properties": {
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterClickhouseConfig:getMdbClickhouseClusterClickhouseConfig"
                    },
                    "description": "Main ClickHouse cluster configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterClickhouseResource:getMdbClickhouseClusterClickhouseResource"
                    },
                    "description": "Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "configs",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterClickhouseConfig:getMdbClickhouseClusterClickhouseConfig": {
            "properties": {
                "backgroundPoolSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backgroundSchedulePoolSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterClickhouseConfigCompression:getMdbClickhouseClusterClickhouseConfigCompression"
                    },
                    "description": "Data compression configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "geobaseUri": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "graphiteRollups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterClickhouseConfigGraphiteRollup:getMdbClickhouseClusterClickhouseConfigGraphiteRollup"
                    },
                    "description": "Graphite rollup configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkaTopics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterClickhouseConfigKafkaTopic:getMdbClickhouseClusterClickhouseConfigKafkaTopic"
                    },
                    "description": "Kafka topic connection configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafkas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterClickhouseConfigKafka:getMdbClickhouseClusterClickhouseConfigKafka"
                    },
                    "description": "Kafka connection configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keepAliveTimeout": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "markCacheSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConcurrentQueries": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxConnections": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPartitionSizeToDrop": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxTableSizeToDrop": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeTrees": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterClickhouseConfigMergeTree:getMdbClickhouseClusterClickhouseConfigMergeTree"
                    },
                    "description": "MergeTree engine configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricLogEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricLogRetentionSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricLogRetentionTime": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "partLogRetentionSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "partLogRetentionTime": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryLogRetentionSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryLogRetentionTime": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryThreadLogEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryThreadLogRetentionSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryThreadLogRetentionTime": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rabbitmqs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterClickhouseConfigRabbitmq:getMdbClickhouseClusterClickhouseConfigRabbitmq"
                    },
                    "description": "RabbitMQ connection configuration. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "textLogEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "textLogLevel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "textLogRetentionSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "textLogRetentionTime": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timezone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "traceLogEnabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "traceLogRetentionSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "traceLogRetentionTime": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uncompressedCacheSize": {
                    "type": "number",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "backgroundPoolSize",
                "backgroundSchedulePoolSize",
                "compressions",
                "geobaseUri",
                "graphiteRollups",
                "kafkas",
                "kafkaTopics",
                "keepAliveTimeout",
                "logLevel",
                "markCacheSize",
                "maxConcurrentQueries",
                "maxConnections",
                "maxPartitionSizeToDrop",
                "maxTableSizeToDrop",
                "mergeTrees",
                "metricLogEnabled",
                "metricLogRetentionSize",
                "metricLogRetentionTime",
                "partLogRetentionSize",
                "partLogRetentionTime",
                "queryLogRetentionSize",
                "queryLogRetentionTime",
                "queryThreadLogEnabled",
                "queryThreadLogRetentionSize",
                "queryThreadLogRetentionTime",
                "rabbitmqs",
                "textLogEnabled",
                "textLogLevel",
                "textLogRetentionSize",
                "textLogRetentionTime",
                "timezone",
                "traceLogEnabled",
                "traceLogRetentionSize",
                "traceLogRetentionTime",
                "uncompressedCacheSize"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterClickhouseConfigCompression:getMdbClickhouseClusterClickhouseConfigCompression": {
            "properties": {
                "method": {
                    "type": "string",
                    "description": "Method: Compression method. Two methods are available: LZ4 and zstd.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minPartSize": {
                    "type": "number",
                    "description": "Min part size: Minimum size (in bytes) of a data part in a table. ClickHouse only applies the rule to tables with data parts greater than or equal to the Min part size value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minPartSizeRatio": {
                    "type": "number",
                    "description": "Min part size ratio: Minimum table part size to total table size ratio. ClickHouse only applies the rule to tables in which this ratio is greater than or equal to the Min part size ratio value.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "method",
                "minPartSize",
                "minPartSizeRatio"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterClickhouseConfigGraphiteRollup:getMdbClickhouseClusterClickhouseConfigGraphiteRollup": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the ClickHouse cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "patterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterClickhouseConfigGraphiteRollupPattern:getMdbClickhouseClusterClickhouseConfigGraphiteRollupPattern"
                    },
                    "description": "Set of thinning rules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "patterns"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterClickhouseConfigGraphiteRollupPattern:getMdbClickhouseClusterClickhouseConfigGraphiteRollupPattern": {
            "properties": {
                "function": {
                    "type": "string",
                    "description": "Aggregation function name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regexp": {
                    "type": "string",
                    "description": "Regular expression that the metric name must match.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention:getMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention"
                    },
                    "description": "Retain parameters.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "function",
                "regexp",
                "retentions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention:getMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention": {
            "properties": {
                "age": {
                    "type": "number",
                    "description": "Minimum data age in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "precision": {
                    "type": "number",
                    "description": "Accuracy of determining the age of the data in seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "age",
                "precision"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterClickhouseConfigKafka:getMdbClickhouseClusterClickhouseConfigKafka": {
            "properties": {
                "saslMechanism": {
                    "type": "string",
                    "description": "SASL mechanism used in kafka authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslPassword": {
                    "type": "string",
                    "description": "User password on kafka server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslUsername": {
                    "type": "string",
                    "description": "Username on kafka server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityProtocol": {
                    "type": "string",
                    "description": "Security protocol used to connect to kafka server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "saslMechanism",
                "saslPassword",
                "saslUsername",
                "securityProtocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterClickhouseConfigKafkaTopic:getMdbClickhouseClusterClickhouseConfigKafkaTopic": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the ClickHouse cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterClickhouseConfigKafkaTopicSetting:getMdbClickhouseClusterClickhouseConfigKafkaTopicSetting"
                    },
                    "description": "Kafka connection settngs sanem as `kafka` block.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "settings"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterClickhouseConfigKafkaTopicSetting:getMdbClickhouseClusterClickhouseConfigKafkaTopicSetting": {
            "properties": {
                "saslMechanism": {
                    "type": "string",
                    "description": "SASL mechanism used in kafka authentication.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslPassword": {
                    "type": "string",
                    "description": "User password on kafka server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslUsername": {
                    "type": "string",
                    "description": "Username on kafka server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityProtocol": {
                    "type": "string",
                    "description": "Security protocol used to connect to kafka server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "saslMechanism",
                "saslPassword",
                "saslUsername",
                "securityProtocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterClickhouseConfigMergeTree:getMdbClickhouseClusterClickhouseConfigMergeTree": {
            "properties": {
                "maxBytesToMergeAtMinSpaceInPool": {
                    "type": "number",
                    "description": "Max bytes to merge at min space in pool: Maximum total size of a data part to merge when the number of free threads in the background pool is minimum.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxReplicatedMergesInQueue": {
                    "type": "number",
                    "description": "Max replicated merges in queue: Maximum number of merge tasks that can be in the ReplicatedMergeTree queue at the same time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge": {
                    "type": "number",
                    "description": "Number of free entries in pool to lower max size of merge: Threshold value of free entries in the pool. If the number of entries in the pool falls below this value, ClickHouse reduces the maximum size of a data part to merge. This helps handle small merges faster, rather than filling the pool with lengthy merges.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "partsToDelayInsert": {
                    "type": "number",
                    "description": "Parts to delay insert: Number of active data parts in a table, on exceeding which ClickHouse starts artificially reduce the rate of inserting data into the table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "partsToThrowInsert": {
                    "type": "number",
                    "description": "Parts to throw insert: Threshold value of active data parts in a table, on exceeding which ClickHouse throws the 'Too many parts ...' exception.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicatedDeduplicationWindow": {
                    "type": "number",
                    "description": "Replicated deduplication window: Number of recent hash blocks that ZooKeeper will store (the old ones will be deleted).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicatedDeduplicationWindowSeconds": {
                    "type": "number",
                    "description": "Replicated deduplication window seconds: Time during which ZooKeeper stores the hash blocks (the old ones wil be deleted).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxBytesToMergeAtMinSpaceInPool",
                "maxReplicatedMergesInQueue",
                "numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge",
                "partsToDelayInsert",
                "partsToThrowInsert",
                "replicatedDeduplicationWindow",
                "replicatedDeduplicationWindowSeconds"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterClickhouseConfigRabbitmq:getMdbClickhouseClusterClickhouseConfigRabbitmq": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "RabbitMQ user password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "RabbitMQ username.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterClickhouseResource:getMdbClickhouseClusterClickhouseResource": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a ClickHouse or ZooKeeper host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of ClickHouse or ZooKeeper hosts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterCloudStorage:getMdbClickhouseClusterCloudStorage": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "(Required) Whether to use Yandex Object Storage for storing ClickHouse data. Can be either `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "yandex:index/getMdbClickhouseClusterDatabase:getMdbClickhouseClusterDatabase": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the ClickHouse cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterFormatSchema:getMdbClickhouseClusterFormatSchema": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the ClickHouse cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "Model file URL. You can only use models stored in Yandex Object Storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "uri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterHost:getMdbClickhouseClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Sets whether the host should get a public IP address on creation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardName": {
                    "type": "string",
                    "description": "The name of the shard to which the host belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the ClickHouse host will be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignPublicIp",
                "fqdn",
                "shardName",
                "subnetId",
                "type",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterMaintenanceWindow:getMdbClickhouseClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "day",
                "hour",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterMlModel:getMdbClickhouseClusterMlModel": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the ClickHouse cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "Model file URL. You can only use models stored in Yandex Object Storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "uri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterShardGroup:getMdbClickhouseClusterShardGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the shard group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ClickHouse cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of shards names that belong to the shard group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "shardNames"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterUser:getMdbClickhouseClusterUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the ClickHouse cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterUserPermission:getMdbClickhouseClusterUserPermission"
                    },
                    "description": "Set of permissions granted to the user. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "quotas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterUserQuota:getMdbClickhouseClusterUserQuota"
                    },
                    "description": "Set of user quotas. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterUserSetting:getMdbClickhouseClusterUserSetting"
                    },
                    "description": "Kafka connection settngs sanem as `kafka` block.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "permissions",
                "quotas",
                "settings"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterUserPermission:getMdbClickhouseClusterUserPermission": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database that the permission grants access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterUserQuota:getMdbClickhouseClusterUserQuota": {
            "properties": {
                "errors": {
                    "type": "number",
                    "description": "The number of queries that threw exception.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "executionTime": {
                    "type": "number",
                    "description": "The total query execution time, in milliseconds (wall time).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalDuration": {
                    "type": "number",
                    "description": "Duration of interval for quota in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queries": {
                    "type": "number",
                    "description": "The total number of queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readRows": {
                    "type": "number",
                    "description": "The total number of source rows read from tables for running the query, on all remote servers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resultRows": {
                    "type": "number",
                    "description": "The total number of rows given as the result.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "errors",
                "executionTime",
                "intervalDuration",
                "queries",
                "readRows",
                "resultRows"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterUserSetting:getMdbClickhouseClusterUserSetting": {
            "properties": {
                "addHttpCorsHeader": {
                    "type": "boolean",
                    "description": "Include CORS headers in HTTP responces.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "allowDdl": {
                    "type": "boolean",
                    "description": "Allows or denies DDL queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compile": {
                    "type": "boolean",
                    "description": "Enable compilation of queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compileExpressions": {
                    "type": "boolean",
                    "description": "Turn on expression compilation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectTimeout": {
                    "type": "number",
                    "description": "Connect timeout in milliseconds on the socket used for communicating with the client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "countDistinctImplementation": {
                    "type": "string",
                    "description": "Specifies which of the uniq* functions should be used to perform the COUNT(DISTINCT …) construction.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "distinctOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow when using DISTINCT. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "distributedAggregationMemoryEfficient": {
                    "type": "boolean",
                    "description": "Determine the behavior of distributed subqueries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "distributedDdlTaskTimeout": {
                    "type": "number",
                    "description": "Timeout for DDL queries, in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "distributedProductMode": {
                    "type": "string",
                    "description": "Changes the behaviour of distributed subqueries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "emptyResultForAggregationByEmptySet": {
                    "type": "boolean",
                    "description": "Allows to retunr empty result.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableHttpCompression": {
                    "type": "boolean",
                    "description": "Enables or disables data compression in the response to an HTTP request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fallbackToStaleReplicasForDistributedQueries": {
                    "type": "boolean",
                    "description": "Forces a query to an out-of-date replica if updated data is not available.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forceIndexByDate": {
                    "type": "boolean",
                    "description": "Disables query execution if the index can’t be used by date.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forcePrimaryKey": {
                    "type": "boolean",
                    "description": "Disables query execution if indexing by the primary key is not possible.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupByOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow while GROUP BY operation. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupByTwoLevelThreshold": {
                    "type": "number",
                    "description": "Sets the threshold of the number of keys, after that the two-level aggregation should be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupByTwoLevelThresholdBytes": {
                    "type": "number",
                    "description": "Sets the threshold of the number of bytes, after that the two-level aggregation should be used.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpConnectionTimeout": {
                    "type": "number",
                    "description": "Timeout for HTTP connection in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpHeadersProgressInterval": {
                    "type": "number",
                    "description": "Sets minimal interval between notifications about request process in HTTP header X-ClickHouse-Progress.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpReceiveTimeout": {
                    "type": "number",
                    "description": "Timeout for HTTP connection in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpSendTimeout": {
                    "type": "number",
                    "description": "Timeout for HTTP connection in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputFormatDefaultsForOmittedFields": {
                    "type": "boolean",
                    "description": "When performing INSERT queries, replace omitted input column values with default values of the respective columns.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inputFormatValuesInterpretExpressions": {
                    "type": "boolean",
                    "description": "Enables or disables the full SQL parser if the fast stream parser can’t parse the data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insertQuorum": {
                    "type": "number",
                    "description": "Enables the quorum writes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insertQuorumTimeout": {
                    "type": "number",
                    "description": "Write to a quorum timeout in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow in JOIN. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinUseNulls": {
                    "type": "boolean",
                    "description": "Sets the type of JOIN behaviour. When merging tables, empty cells may appear. ClickHouse fills them differently based on this setting.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "joinedSubqueryRequiresAlias": {
                    "type": "boolean",
                    "description": "Require aliases for subselects and table functions in FROM that more than one table is present.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "lowCardinalityAllowInNativeFormat": {
                    "type": "boolean",
                    "description": "Allows or restricts using the LowCardinality data type with the Native format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAstDepth": {
                    "type": "number",
                    "description": "Maximum abstract syntax tree depth.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxAstElements": {
                    "type": "number",
                    "description": "Maximum abstract syntax tree elements.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBlockSize": {
                    "type": "number",
                    "description": "A recommendation for what size of the block (in a count of rows) to load from tables.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesBeforeExternalGroupBy": {
                    "type": "number",
                    "description": "Limit in bytes for using memoru for GROUP BY before using swap on disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesBeforeExternalSort": {
                    "type": "number",
                    "description": "This setting is equivalent of the max_bytes_before_external_group_by setting, except for it is for sort operation (ORDER BY), not aggregation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesInDistinct": {
                    "type": "number",
                    "description": "Limits the maximum size of a hash table in bytes (uncompressed data) when using DISTINCT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesInJoin": {
                    "type": "number",
                    "description": "Limit on maximum size of the hash table for JOIN, in bytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesInSet": {
                    "type": "number",
                    "description": "Limit on the number of bytes in the set resulting from the execution of the IN section.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesToRead": {
                    "type": "number",
                    "description": "Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesToSort": {
                    "type": "number",
                    "description": "Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxBytesToTransfer": {
                    "type": "number",
                    "description": "Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary table when using GLOBAL IN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxColumnsToRead": {
                    "type": "number",
                    "description": "Limits the maximum number of columns that can be read from a table in a single query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxExecutionTime": {
                    "type": "number",
                    "description": "Limits the maximum query execution time in milliseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxExpandedAstElements": {
                    "type": "number",
                    "description": "Maximum abstract syntax tree depth after after expansion of aliases.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxInsertBlockSize": {
                    "type": "number",
                    "description": "The size of blocks (in a count of rows) to form for insertion into a table.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxMemoryUsage": {
                    "type": "number",
                    "description": "Limits the maximum memory usage (in bytes) for processing queries on a single server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxMemoryUsageForUser": {
                    "type": "number",
                    "description": "Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNetworkBandwidth": {
                    "type": "number",
                    "description": "Limits the speed of the data exchange over the network in bytes per second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNetworkBandwidthForUser": {
                    "type": "number",
                    "description": "Limits the speed of the data exchange over the network in bytes per second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxQuerySize": {
                    "type": "number",
                    "description": "The maximum part of a query that can be taken to RAM for parsing with the SQL parser.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxReplicaDelayForDistributedQueries": {
                    "type": "number",
                    "description": "Disables lagging replicas for distributed queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxResultBytes": {
                    "type": "number",
                    "description": "Limits the number of bytes in the result.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxResultRows": {
                    "type": "number",
                    "description": "Limits the number of rows in the result.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRowsInDistinct": {
                    "type": "number",
                    "description": "Limits the maximum number of different rows when using DISTINCT.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRowsInJoin": {
                    "type": "number",
                    "description": "Limit on maximum size of the hash table for JOIN, in rows.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRowsInSet": {
                    "type": "number",
                    "description": "Limit on the number of rows in the set resulting from the execution of the IN section.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRowsToGroupBy": {
                    "type": "number",
                    "description": "Limits the maximum number of unique keys received from aggregation function.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRowsToRead": {
                    "type": "number",
                    "description": "Limits the maximum number of rows that can be read from a table when running a query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRowsToSort": {
                    "type": "number",
                    "description": "Limits the maximum number of rows that can be read from a table for sorting.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRowsToTransfer": {
                    "type": "number",
                    "description": "Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using GLOBAL IN.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxTemporaryColumns": {
                    "type": "number",
                    "description": "Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxTemporaryNonConstColumns": {
                    "type": "number",
                    "description": "Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxThreads": {
                    "type": "number",
                    "description": "The maximum number of query processing threads, excluding threads for retrieving data from remote servers.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeTreeMaxBytesToUseCache": {
                    "type": "number",
                    "description": "If ClickHouse should read more than merge_tree_max_bytes_to_use_cache bytes in one query, it doesn’t use the cache of uncompressed blocks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeTreeMaxRowsToUseCache": {
                    "type": "number",
                    "description": "If ClickHouse should read more than merge_tree_max_rows_to_use_cache rows in one query, it doesn’t use the cache of uncompressed blocks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeTreeMinBytesForConcurrentRead": {
                    "type": "number",
                    "description": "If the number of bytes to read from one file of a MergeTree-engine table exceeds merge_tree_min_bytes_for_concurrent_read, then ClickHouse tries to concurrently read from this file in several threads.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mergeTreeMinRowsForConcurrentRead": {
                    "type": "number",
                    "description": "If the number of rows to be read from a file of a MergeTree table exceeds merge_tree_min_rows_for_concurrent_read then ClickHouse tries to perform a concurrent reading from this file on several threads.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minBytesToUseDirectIo": {
                    "type": "number",
                    "description": "The minimum data volume required for using direct I/O access to the storage disk.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minCountToCompile": {
                    "type": "number",
                    "description": "How many times to potentially use a compiled chunk of code before running compilation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minCountToCompileExpression": {
                    "type": "number",
                    "description": "A query waits for expression compilation process to complete prior to continuing execution.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minExecutionSpeed": {
                    "type": "number",
                    "description": "Minimal execution speed in rows per second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minExecutionSpeedBytes": {
                    "type": "number",
                    "description": "Minimal execution speed in bytes per second.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minInsertBlockSizeBytes": {
                    "type": "number",
                    "description": "Sets the minimum number of bytes in the block which can be inserted into a table by an INSERT query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minInsertBlockSizeRows": {
                    "type": "number",
                    "description": "Sets the minimum number of rows in the block which can be inserted into a table by an INSERT query.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "outputFormatJsonQuote64bitIntegers": {
                    "type": "boolean",
                    "description": "If the value is true, integers appear in quotes when using JSON* Int64 and UInt64 formats (for compatibility with most JavaScript implementations); otherwise, integers are output without the quotes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "outputFormatJsonQuoteDenormals": {
                    "type": "boolean",
                    "description": "Enables +nan, -nan, +inf, -inf outputs in JSON output format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "number",
                    "description": "Query priority.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "quotaMode": {
                    "type": "string",
                    "description": "Quota accounting mode.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow while read. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "number",
                    "description": "Restricts permissions for reading data, write data and change settings queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "receiveTimeout": {
                    "type": "number",
                    "description": "Receive timeout in milliseconds on the socket used for communicating with the client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationAlterPartitionsSync": {
                    "type": "number",
                    "description": "For ALTER ... ATTACH|DETACH|DROP queries, you can use the replication_alter_partitions_sync setting to set up waiting.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resultOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow in result. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "selectSequentialConsistency": {
                    "type": "boolean",
                    "description": "Enables or disables sequential consistency for SELECT queries.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendProgressInHttpHeaders": {
                    "type": "boolean",
                    "description": "Enables or disables X-ClickHouse-Progress HTTP response headers in clickhouse-server responses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendTimeout": {
                    "type": "number",
                    "description": "Send timeout in milliseconds on the socket used for communicating with the client.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "setOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow in the set resulting. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "skipUnavailableShards": {
                    "type": "boolean",
                    "description": "Enables or disables silently skipping of unavailable shards.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sortOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow while sort. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeoutOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transferOverflowMode": {
                    "type": "string",
                    "description": "Sets behaviour on overflow. Possible values:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "transformNullIn": {
                    "type": "boolean",
                    "description": "Enables equality of NULL values for IN operator.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "useUncompressedCache": {
                    "type": "boolean",
                    "description": "Whether to use a cache of uncompressed blocks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "addHttpCorsHeader",
                "allowDdl",
                "compile",
                "compileExpressions",
                "connectTimeout",
                "countDistinctImplementation",
                "distinctOverflowMode",
                "distributedAggregationMemoryEfficient",
                "distributedDdlTaskTimeout",
                "distributedProductMode",
                "emptyResultForAggregationByEmptySet",
                "enableHttpCompression",
                "fallbackToStaleReplicasForDistributedQueries",
                "forceIndexByDate",
                "forcePrimaryKey",
                "groupByOverflowMode",
                "groupByTwoLevelThreshold",
                "groupByTwoLevelThresholdBytes",
                "httpConnectionTimeout",
                "httpHeadersProgressInterval",
                "httpReceiveTimeout",
                "httpSendTimeout",
                "inputFormatDefaultsForOmittedFields",
                "inputFormatValuesInterpretExpressions",
                "insertQuorum",
                "insertQuorumTimeout",
                "joinOverflowMode",
                "joinUseNulls",
                "joinedSubqueryRequiresAlias",
                "lowCardinalityAllowInNativeFormat",
                "maxAstDepth",
                "maxAstElements",
                "maxBlockSize",
                "maxBytesBeforeExternalGroupBy",
                "maxBytesBeforeExternalSort",
                "maxBytesInDistinct",
                "maxBytesInJoin",
                "maxBytesInSet",
                "maxBytesToRead",
                "maxBytesToSort",
                "maxBytesToTransfer",
                "maxColumnsToRead",
                "maxExecutionTime",
                "maxExpandedAstElements",
                "maxInsertBlockSize",
                "maxMemoryUsage",
                "maxMemoryUsageForUser",
                "maxNetworkBandwidth",
                "maxNetworkBandwidthForUser",
                "maxQuerySize",
                "maxReplicaDelayForDistributedQueries",
                "maxResultBytes",
                "maxResultRows",
                "maxRowsInDistinct",
                "maxRowsInJoin",
                "maxRowsInSet",
                "maxRowsToGroupBy",
                "maxRowsToRead",
                "maxRowsToSort",
                "maxRowsToTransfer",
                "maxTemporaryColumns",
                "maxTemporaryNonConstColumns",
                "maxThreads",
                "mergeTreeMaxBytesToUseCache",
                "mergeTreeMaxRowsToUseCache",
                "mergeTreeMinBytesForConcurrentRead",
                "mergeTreeMinRowsForConcurrentRead",
                "minBytesToUseDirectIo",
                "minCountToCompile",
                "minCountToCompileExpression",
                "minExecutionSpeed",
                "minExecutionSpeedBytes",
                "minInsertBlockSizeBytes",
                "minInsertBlockSizeRows",
                "outputFormatJsonQuote64bitIntegers",
                "outputFormatJsonQuoteDenormals",
                "priority",
                "quotaMode",
                "readOverflowMode",
                "readonly",
                "receiveTimeout",
                "replicationAlterPartitionsSync",
                "resultOverflowMode",
                "selectSequentialConsistency",
                "sendProgressInHttpHeaders",
                "sendTimeout",
                "setOverflowMode",
                "skipUnavailableShards",
                "sortOverflowMode",
                "timeoutOverflowMode",
                "transferOverflowMode",
                "transformNullIn",
                "useUncompressedCache"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterZookeeper:getMdbClickhouseClusterZookeeper": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterZookeeperResource:getMdbClickhouseClusterZookeeperResource"
                    },
                    "description": "Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbClickhouseClusterZookeeperResource:getMdbClickhouseClusterZookeeperResource": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a ClickHouse or ZooKeeper host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of ClickHouse or ZooKeeper hosts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbElasticSearchClusterConfig:getMdbElasticSearchClusterConfig": {
            "properties": {
                "adminPassword": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbElasticSearchClusterConfigDataNode:getMdbElasticSearchClusterConfigDataNode"
                    },
                    "description": "Configuration for Elasticsearch data nodes subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "edition": {
                    "type": "string",
                    "description": "Edition of Elasticsearch. For more information, see [the official documentation](https://cloud.yandex.com/en-ru/docs/managed-elasticsearch/concepts/es-editions).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbElasticSearchClusterConfigMasterNode:getMdbElasticSearchClusterConfigMasterNode"
                    },
                    "description": "Configuration for Elasticsearch master nodes subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "plugins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of requested Elasticsearch plugins.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "adminPassword",
                "dataNodes",
                "edition",
                "masterNodes",
                "plugins",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbElasticSearchClusterConfigDataNode:getMdbElasticSearchClusterConfigDataNode": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbElasticSearchClusterConfigDataNodeResource:getMdbElasticSearchClusterConfigDataNodeResource"
                    },
                    "description": "Resources allocated to hosts of the Elasticsearch master nodes subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbElasticSearchClusterConfigDataNodeResource:getMdbElasticSearchClusterConfigDataNodeResource": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a Elasticsearch host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of Elasticsearch hosts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbElasticSearchClusterConfigMasterNode:getMdbElasticSearchClusterConfigMasterNode": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbElasticSearchClusterConfigMasterNodeResource:getMdbElasticSearchClusterConfigMasterNodeResource"
                    },
                    "description": "Resources allocated to hosts of the Elasticsearch master nodes subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbElasticSearchClusterConfigMasterNodeResource:getMdbElasticSearchClusterConfigMasterNodeResource": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a Elasticsearch host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of Elasticsearch hosts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbElasticSearchClusterHost:getMdbElasticSearchClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Sets whether the host should get a public IP address on creation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Elasticsearch cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of a maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour need to be specified with the weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the Elasticsearch host will be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignPublicIp",
                "fqdn",
                "name",
                "subnetId",
                "type",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbElasticSearchClusterMaintenanceWindow:getMdbElasticSearchClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of the week for a maintenance window if the window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of the day in UTC time zone (1-24) for a maintenance window if the window type is weekly.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of a maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour need to be specified with the weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "day",
                "hour",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbGreenplumClusterAccess:getMdbGreenplumClusterAccess": {
            "properties": {
                "dataLens": {
                    "type": "boolean",
                    "description": "(Optional) Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataTransfer": {
                    "type": "boolean",
                    "description": "(Optional) Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webSql": {
                    "type": "boolean",
                    "description": "(Optional) Allows access for [SQL queries in the management console](https://cloud.yandex.com/docs/managed-mysql/operations/web-sql-query).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dataLens",
                "dataTransfer",
                "webSql"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbGreenplumClusterBackupWindowStart:getMdbGreenplumClusterBackupWindowStart": {
            "properties": {
                "hours": {
                    "type": "number",
                    "description": "The hour at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minutes": {
                    "type": "number",
                    "description": "The minute at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hours",
                "minutes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbGreenplumClusterMaintenanceWindow:getMdbGreenplumClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of the week (in `DDD` format). Value is one of: \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of the day in UTC (in `HH` format). Value is between 1 and 24.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "day",
                "hour",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbGreenplumClusterMasterHost:getMdbGreenplumClusterMasterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Flag that indicates whether master hosts was created with a public IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignPublicIp",
                "fqdn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbGreenplumClusterMasterSubcluster:getMdbGreenplumClusterMasterSubcluster": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbGreenplumClusterMasterSubclusterResource:getMdbGreenplumClusterMasterSubclusterResource"
                    },
                    "description": "Resources allocated to hosts for segment subcluster of the Greenplum cluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbGreenplumClusterMasterSubclusterResource:getMdbGreenplumClusterMasterSubclusterResource": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a Greenplum host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage for Greenplum hosts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbGreenplumClusterPoolerConfig:getMdbGreenplumClusterPoolerConfig": {
            "properties": {
                "poolClientIdleTimeout": {
                    "type": "number",
                    "description": "Value for `pool_client_idle_timeout` [parameter in Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_ttl-integer).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "poolSize": {
                    "type": "number",
                    "description": "Value for `pool_size` [parameter in Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_size-integer).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "poolingMode": {
                    "type": "string",
                    "description": "Mode that the connection pooler is working in. See descriptions of all modes in the [documentation for Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool-string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbGreenplumClusterSegmentHost:getMdbGreenplumClusterSegmentHost": {
            "properties": {
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fqdn"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbGreenplumClusterSegmentSubcluster:getMdbGreenplumClusterSegmentSubcluster": {
            "properties": {
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbGreenplumClusterSegmentSubclusterResource:getMdbGreenplumClusterSegmentSubclusterResource"
                    },
                    "description": "Resources allocated to hosts for segment subcluster of the Greenplum cluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbGreenplumClusterSegmentSubclusterResource:getMdbGreenplumClusterSegmentSubclusterResource": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a Greenplum host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage for Greenplum hosts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaClusterAccess:getMdbKafkaClusterAccess": {
            "properties": {
                "dataTransfer": {
                    "type": "boolean",
                    "description": "Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dataTransfer"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaClusterConfig:getMdbKafkaClusterConfig": {
            "properties": {
                "access": {
                    "$ref": "#/types/yandex:index/getMdbKafkaClusterConfigAccess:getMdbKafkaClusterConfigAccess",
                    "description": "(Optional) Access policy to the Kafka cluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "The flag that defines whether a public IP address is assigned to the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "brokersCount": {
                    "type": "number",
                    "description": "(Optional) Count of brokers per availability zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kafka": {
                    "$ref": "#/types/yandex:index/getMdbKafkaClusterConfigKafka:getMdbKafkaClusterConfigKafka",
                    "description": "(Optional) Configuration of the Kafka subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schemaRegistry": {
                    "type": "boolean",
                    "description": "(Optional) Enables managed schema registry on cluster. Can be either `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unmanagedTopics": {
                    "type": "boolean",
                    "description": "(Optional) Allows to use Kafka AdminAPI to manage topics. Can be either `true` or `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "(Required) Version of the Kafka server software.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of availability zones.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zookeeper": {
                    "$ref": "#/types/yandex:index/getMdbKafkaClusterConfigZookeeper:getMdbKafkaClusterConfigZookeeper",
                    "description": "(Optional) Configuration of the ZooKeeper subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kafka",
                "version",
                "zones",
                "zookeeper"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "kafka",
                        "version",
                        "zones"
                    ]
                }
            }
        },
        "yandex:index/getMdbKafkaClusterConfigAccess:getMdbKafkaClusterConfigAccess": {
            "properties": {
                "dataTransfer": {
                    "type": "boolean",
                    "description": "Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbKafkaClusterConfigKafka:getMdbKafkaClusterConfigKafka": {
            "properties": {
                "kafkaConfig": {
                    "$ref": "#/types/yandex:index/getMdbKafkaClusterConfigKafkaKafkaConfig:getMdbKafkaClusterConfigKafkaKafkaConfig",
                    "description": "(Optional) User-defined settings for the Kafka cluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "$ref": "#/types/yandex:index/getMdbKafkaClusterConfigKafkaResources:getMdbKafkaClusterConfigKafkaResources",
                    "description": "(Optional) Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ]
        },
        "yandex:index/getMdbKafkaClusterConfigKafkaKafkaConfig:getMdbKafkaClusterConfigKafkaKafkaConfig": {
            "properties": {
                "autoCreateTopicsEnable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compressionType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "defaultReplicationFactor": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logFlushIntervalMessages": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logFlushIntervalMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logFlushSchedulerIntervalMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logPreallocate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRetentionBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRetentionHours": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRetentionMinutes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logRetentionMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "logSegmentBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageMaxBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numPartitions": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "offsetsRetentionMinutes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicaFetchMaxBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "socketReceiveBufferBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "socketSendBufferBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sslCipherSuites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "sslCipherSuites"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaClusterConfigKafkaResources:getMdbKafkaClusterConfigKafkaResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "(Optional) Volume of the storage available to a ZooKeeper host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "(Optional) Type of the storage of ZooKeeper hosts.\nFor more information see [the official documentation](https://cloud.yandex.com/docs/managed-kafka/concepts/storage).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ]
        },
        "yandex:index/getMdbKafkaClusterConfigZookeeper:getMdbKafkaClusterConfigZookeeper": {
            "properties": {
                "resources": {
                    "$ref": "#/types/yandex:index/getMdbKafkaClusterConfigZookeeperResources:getMdbKafkaClusterConfigZookeeperResources",
                    "description": "(Optional) Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaClusterConfigZookeeperResources:getMdbKafkaClusterConfigZookeeperResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "(Optional) Volume of the storage available to a ZooKeeper host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "(Optional) Type of the storage of ZooKeeper hosts.\nFor more information see [the official documentation](https://cloud.yandex.com/docs/managed-kafka/concepts/storage).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaClusterHost:getMdbKafkaClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "The flag that defines whether a public IP address is assigned to the node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "health": {
                    "type": "string",
                    "description": "Health of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Kafka cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "Role of the host in the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The availability zone where the Kafka host was created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignPublicIp",
                "health",
                "name",
                "role",
                "subnetId",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaClusterMaintenanceWindow:getMdbKafkaClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of the week (in `DDD` format). Value is one of: \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of the day in UTC (in `HH` format). Value is between 1 and 24.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "day",
                "hour",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaClusterTopic:getMdbKafkaClusterTopic": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the Kafka cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Kafka cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "partitions": {
                    "type": "number",
                    "description": "(Required) The number of the topic's partitions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationFactor": {
                    "type": "number",
                    "description": "(Required) Amount of data copies (replicas) for the topic in the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicConfig": {
                    "$ref": "#/types/yandex:index/getMdbKafkaClusterTopicTopicConfig:getMdbKafkaClusterTopicTopicConfig",
                    "description": "(Required) User-defined settings for the topic. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "name",
                "partitions",
                "replicationFactor"
            ]
        },
        "yandex:index/getMdbKafkaClusterTopicTopicConfig:getMdbKafkaClusterTopicTopicConfig": {
            "properties": {
                "cleanupPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compressionType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteRetentionMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileDeleteDelayMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flushMessages": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flushMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxMessageBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minCompactionLagMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minInsyncReplicas": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preallocate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "segmentBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbKafkaClusterUser:getMdbKafkaClusterUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Kafka cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "(Required) The password of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbKafkaClusterUserPermission:getMdbKafkaClusterUserPermission"
                    },
                    "description": "(Optional) Set of permissions granted to the user. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "password"
            ]
        },
        "yandex:index/getMdbKafkaClusterUserPermission:getMdbKafkaClusterUserPermission": {
            "properties": {
                "role": {
                    "type": "string",
                    "description": "Role of the host in the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topicName": {
                    "type": "string",
                    "description": "(Required) The name of the topic that the permission grants access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "role",
                "topicName"
            ]
        },
        "yandex:index/getMdbKafkaConnectorConnectorConfigMirrormaker:getMdbKafkaConnectorConnectorConfigMirrormaker": {
            "properties": {
                "replicationFactor": {
                    "type": "number",
                    "description": "Replication factor for topics created in target cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceClusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbKafkaConnectorConnectorConfigMirrormakerSourceCluster:getMdbKafkaConnectorConnectorConfigMirrormakerSourceCluster"
                    },
                    "description": "Settings for source cluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetClusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbKafkaConnectorConnectorConfigMirrormakerTargetCluster:getMdbKafkaConnectorConnectorConfigMirrormakerTargetCluster"
                    },
                    "description": "Settings for target cluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topics": {
                    "type": "string",
                    "description": "The pattern for topic names to be copied to s3 bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "replicationFactor",
                "sourceClusters",
                "targetClusters",
                "topics"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaConnectorConnectorConfigMirrormakerSourceCluster:getMdbKafkaConnectorConnectorConfigMirrormakerSourceCluster": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "Name of the cluster. Used also as a topic prefix\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalClusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster:getMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster"
                    },
                    "description": "Connection params for external cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thisClusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisCluster:getMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisCluster"
                    },
                    "description": "Using this section in the cluster definition (source or target) means it's this cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alias",
                "externalClusters",
                "thisClusters"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster:getMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster": {
            "properties": {
                "bootstrapServers": {
                    "type": "string",
                    "description": "List of bootstrap servers to connect to cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslMechanism": {
                    "type": "string",
                    "description": "Type of SASL authentification mechanism to use\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslPassword": {
                    "type": "string",
                    "description": "Password to use in SASL authentification mechanism\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslUsername": {
                    "type": "string",
                    "description": "Username to use in SASL authentification mechanism\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityProtocol": {
                    "type": "string",
                    "description": "Security protocol to use\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bootstrapServers",
                "saslMechanism",
                "saslPassword",
                "saslUsername",
                "securityProtocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisCluster:getMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisCluster": {
            "type": "object"
        },
        "yandex:index/getMdbKafkaConnectorConnectorConfigMirrormakerTargetCluster:getMdbKafkaConnectorConnectorConfigMirrormakerTargetCluster": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "Name of the cluster. Used also as a topic prefix\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalClusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster:getMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster"
                    },
                    "description": "Connection params for external cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "thisClusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisCluster:getMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisCluster"
                    },
                    "description": "Using this section in the cluster definition (source or target) means it's this cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "alias",
                "externalClusters",
                "thisClusters"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster:getMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster": {
            "properties": {
                "bootstrapServers": {
                    "type": "string",
                    "description": "List of bootstrap servers to connect to cluster\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslMechanism": {
                    "type": "string",
                    "description": "Type of SASL authentification mechanism to use\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslPassword": {
                    "type": "string",
                    "description": "Password to use in SASL authentification mechanism\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "saslUsername": {
                    "type": "string",
                    "description": "Username to use in SASL authentification mechanism\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityProtocol": {
                    "type": "string",
                    "description": "Security protocol to use\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bootstrapServers",
                "saslMechanism",
                "saslPassword",
                "saslUsername",
                "securityProtocol"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisCluster:getMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisCluster": {
            "type": "object"
        },
        "yandex:index/getMdbKafkaConnectorConnectorConfigS3Sink:getMdbKafkaConnectorConnectorConfigS3Sink": {
            "properties": {
                "fileCompressionType": {
                    "type": "string",
                    "description": "Сompression type for messages. Cannot be changed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileMaxRecords": {
                    "type": "number",
                    "description": "Max records per file.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "s3Connections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbKafkaConnectorConnectorConfigS3SinkS3Connection:getMdbKafkaConnectorConnectorConfigS3SinkS3Connection"
                    },
                    "description": "Settings for connection to s3-compatible storage. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topics": {
                    "type": "string",
                    "description": "The pattern for topic names to be copied to s3 bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fileCompressionType",
                "fileMaxRecords",
                "s3Connections",
                "topics"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaConnectorConnectorConfigS3SinkS3Connection:getMdbKafkaConnectorConnectorConfigS3SinkS3Connection": {
            "properties": {
                "bucketName": {
                    "type": "string",
                    "description": "Name of the bucket in s3-compatible storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "externalS3s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3:getMdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3"
                    },
                    "description": "Connection params for external s3-compatible storage. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "externalS3s"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3:getMdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "ID of aws-compatible static key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoint": {
                    "type": "string",
                    "description": "URL of s3-compatible storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "region of s3-compatible storage. [Available region list](https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/regions/Regions.html).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "Secret key of aws-compatible static key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "endpoint",
                "region",
                "secretAccessKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbKafkaTopicTopicConfig:getMdbKafkaTopicTopicConfig": {
            "properties": {
                "cleanupPolicy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compressionType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteRetentionMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileDeleteDelayMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flushMessages": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flushMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxMessageBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minCompactionLagMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minInsyncReplicas": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preallocate": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionMs": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "segmentBytes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cleanupPolicy",
                "compressionType",
                "deleteRetentionMs",
                "fileDeleteDelayMs",
                "flushMessages",
                "flushMs",
                "maxMessageBytes",
                "minCompactionLagMs",
                "minInsyncReplicas",
                "preallocate",
                "retentionBytes",
                "retentionMs",
                "segmentBytes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbMongodbClusterClusterConfig:getMdbMongodbClusterClusterConfig": {
            "properties": {
                "access": {
                    "$ref": "#/types/yandex:index/getMdbMongodbClusterClusterConfigAccess:getMdbMongodbClusterClusterConfigAccess",
                    "description": "Access policy to MongoDB cluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupWindowStart": {
                    "$ref": "#/types/yandex:index/getMdbMongodbClusterClusterConfigBackupWindowStart:getMdbMongodbClusterClusterConfigBackupWindowStart",
                    "description": "Time to start the daily backup, in the UTC timezone. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "featureCompatibilityVersion": {
                    "type": "string",
                    "description": "Feature compatibility version of MongoDB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mongod": {
                    "$ref": "#/types/yandex:index/getMdbMongodbClusterClusterConfigMongod:getMdbMongodbClusterClusterConfigMongod",
                    "description": "(Optional) Configuration of the mongod service. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of MongoDB (either 5.0, 5.0-enterprise, 4.4, 4.4-enterprise, 4.2, 4.0 or 3.6).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "featureCompatibilityVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbMongodbClusterClusterConfigAccess:getMdbMongodbClusterClusterConfigAccess": {
            "properties": {
                "dataLens": {
                    "type": "boolean",
                    "description": "Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataTransfer": {
                    "type": "boolean",
                    "description": "(Optional) Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbMongodbClusterClusterConfigBackupWindowStart:getMdbMongodbClusterClusterConfigBackupWindowStart": {
            "properties": {
                "hours": {
                    "type": "number",
                    "description": "The hour at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minutes": {
                    "type": "number",
                    "description": "The minute at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbMongodbClusterClusterConfigMongod:getMdbMongodbClusterClusterConfigMongod": {
            "properties": {
                "auditLog": {
                    "$ref": "#/types/yandex:index/getMdbMongodbClusterClusterConfigMongodAuditLog:getMdbMongodbClusterClusterConfigMongodAuditLog",
                    "description": "(Optional) A set of audit log settings\n(see the [auditLog](https://www.mongodb.com/docs/manual/reference/configuration-options/#auditlog-options) option).\nThe structure is documented below. Available only in enterprise edition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "security": {
                    "$ref": "#/types/yandex:index/getMdbMongodbClusterClusterConfigMongodSecurity:getMdbMongodbClusterClusterConfigMongodSecurity",
                    "description": "(Optional) A set of MongoDB Security settings\n(see the [security](https://www.mongodb.com/docs/manual/reference/configuration-options/#security-options) option).\nThe structure is documented below. Available only in enterprise edition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "setParameter": {
                    "$ref": "#/types/yandex:index/getMdbMongodbClusterClusterConfigMongodSetParameter:getMdbMongodbClusterClusterConfigMongodSetParameter",
                    "description": "(Optional) A set of MongoDB Server Parameters\n(see the [setParameter](https://www.mongodb.com/docs/manual/reference/configuration-options/#setparameter-option) option).\nThe structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbMongodbClusterClusterConfigMongodAuditLog:getMdbMongodbClusterClusterConfigMongodAuditLog": {
            "properties": {
                "filter": {
                    "type": "string",
                    "description": "(Optional) Configuration of the audit log filter in JSON format.\nFor more information see [auditLog.filter](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-auditLog.filter)\ndescription in the official documentation. Available only in enterprise edition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "runtimeConfiguration": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbMongodbClusterClusterConfigMongodSecurity:getMdbMongodbClusterClusterConfigMongodSecurity": {
            "properties": {
                "enableEncryption": {
                    "type": "boolean",
                    "description": "(Optional) Enables the encryption for the WiredTiger storage engine. Can be either true or false.\nFor more information see [security.enableEncryption](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.enableEncryption)\ndescription in the official documentation. Available only in enterprise edition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kmip": {
                    "$ref": "#/types/yandex:index/getMdbMongodbClusterClusterConfigMongodSecurityKmip:getMdbMongodbClusterClusterConfigMongodSecurityKmip",
                    "description": "(Optional) Configuration of the third party key management appliance via the Key Management Interoperability Protocol (KMIP)\n(see [Encryption tutorial](https://www.mongodb.com/docs/rapid/tutorial/configure-encryption) ). Requires `enable_encryption` to be true.\nThe structure is documented below. Available only in enterprise edition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbMongodbClusterClusterConfigMongodSecurityKmip:getMdbMongodbClusterClusterConfigMongodSecurityKmip": {
            "properties": {
                "clientCertificate": {
                    "type": "string",
                    "description": "(Required) String containing the client certificate used for authenticating MongoDB to the KMIP server.\nFor more information see [security.kmip.clientCertificateFile](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.clientCertificateFile)\ndescription in the official documentation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "keyIdentifier": {
                    "type": "string",
                    "description": "(Optional) Unique KMIP identifier for an existing key within the KMIP server.\nFor more information see [security.kmip.keyIdentifier](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.keyIdentifier)\ndescription in the official documentation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "(Optional) Port number to use to communicate with the KMIP server. Default: 5696\nFor more information see [security.kmip.port](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.port)\ndescription in the official documentation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverCa": {
                    "type": "string",
                    "description": "(Required) Path to CA File. Used for validating secure client connection to KMIP server.\nFor more information see [security.kmip.serverCAFile](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.serverCAFile)\ndescription in the official documentation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverName": {
                    "type": "string",
                    "description": "(Required) Hostname or IP address of the KMIP server to connect to.\nFor more information see [security.kmip.serverName](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.serverName)\ndescription in the official documentation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbMongodbClusterClusterConfigMongodSetParameter:getMdbMongodbClusterClusterConfigMongodSetParameter": {
            "properties": {
                "auditAuthorizationSuccess": {
                    "type": "boolean",
                    "description": "(Optional) Enables the auditing of authorization successes. Can be either true or false.\nFor more information, see the [auditAuthorizationSuccess](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.auditAuthorizationSuccess)\ndescription in the official documentation. Available only in enterprise edition.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbMongodbClusterDatabase:getMdbMongodbClusterDatabase": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the MongoDB cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbMongodbClusterHost:getMdbMongodbClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Has assigned public IP.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "health": {
                    "type": "string",
                    "description": "The health of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MongoDB cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "The role of the cluster (either PRIMARY or SECONDARY).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardName": {
                    "type": "string",
                    "description": "The name of the shard to which the host belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs. The subnet must\nbe a part of the network to which the cluster belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "The availability zone where the MongoDB host will be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignPublicIp",
                "health",
                "name",
                "role",
                "shardName",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbMongodbClusterMaintenanceWindow:getMdbMongodbClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbMongodbClusterResources:getMdbMongodbClusterResources": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "The ID of the storage type. For more information, see [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/concepts/storage)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbMongodbClusterUser:getMdbMongodbClusterUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the MongoDB cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbMongodbClusterUserPermission:getMdbMongodbClusterUserPermission"
                    },
                    "description": "Set of permissions granted to the user. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbMongodbClusterUserPermission:getMdbMongodbClusterUserPermission": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database that the permission grants access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) List of strings. The roles of the user in this database. For more information see [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/concepts/users-and-roles).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "yandex:index/getMdbMysqlClusterAccess:getMdbMysqlClusterAccess": {
            "properties": {
                "dataLens": {
                    "type": "boolean",
                    "description": "Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataTransfer": {
                    "type": "boolean",
                    "description": "(Optional) Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webSql": {
                    "type": "boolean",
                    "description": "Allows access for [SQL queries in the management console](https://cloud.yandex.com/docs/managed-mysql/operations/web-sql-query).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dataLens",
                "dataTransfer",
                "webSql"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbMysqlClusterBackupWindowStart:getMdbMysqlClusterBackupWindowStart": {
            "properties": {
                "hours": {
                    "type": "number",
                    "description": "The hour at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minutes": {
                    "type": "number",
                    "description": "The minute at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hours",
                "minutes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbMysqlClusterDatabase:getMdbMysqlClusterDatabase": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the MySQL cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbMysqlClusterHost:getMdbMysqlClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Sets whether the host should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupPriority": {
                    "type": "number",
                    "description": "Host backup priority. Value is between 0 and 100, default is 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "number",
                    "description": "Host master promotion priority. Value is between 0 and 100, default is 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationSource": {
                    "type": "string",
                    "description": "Host replication source (fqdn), case when replication_source is empty then host in HA group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the MySQL host will be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignPublicIp",
                "backupPriority",
                "fqdn",
                "priority",
                "replicationSource",
                "subnetId",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbMysqlClusterMaintenanceWindow:getMdbMysqlClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of the week (in `DDD` format). Value is one of: \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of the day in UTC (in `HH` format). Value is between 1 and 24.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "day",
                "hour",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbMysqlClusterPerformanceDiagnostic:getMdbMysqlClusterPerformanceDiagnostic": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable performance diagnostics\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sessionsSamplingInterval": {
                    "type": "number",
                    "description": "Interval (in seconds) for my_stat_activity sampling Acceptable values are 1 to 86400, inclusive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statementsSamplingInterval": {
                    "type": "number",
                    "description": "Interval (in seconds) for my_stat_statements sampling Acceptable values are 1 to 86400, inclusive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "sessionsSamplingInterval",
                "statementsSamplingInterval"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbMysqlClusterResource:getMdbMysqlClusterResource": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a MySQL host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage for MySQL hosts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbMysqlClusterUser:getMdbMysqlClusterUser": {
            "properties": {
                "authenticationPlugin": {
                    "type": "string",
                    "description": "Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionLimits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbMysqlClusterUserConnectionLimit:getMdbMysqlClusterUserConnectionLimit"
                    },
                    "description": "User's connection limits. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "globalPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List user's global permissions. Allowed values: `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS` or empty list.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the MySQL cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbMysqlClusterUserPermission:getMdbMysqlClusterUserPermission"
                    },
                    "description": "Set of permissions granted to the user. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authenticationPlugin",
                "connectionLimits",
                "globalPermissions",
                "name",
                "password",
                "permissions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbMysqlClusterUserConnectionLimit:getMdbMysqlClusterUserConnectionLimit": {
            "properties": {
                "maxConnectionsPerHour": {
                    "type": "number",
                    "description": "Max connections per hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxQuestionsPerHour": {
                    "type": "number",
                    "description": "Max questions per hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUpdatesPerHour": {
                    "type": "number",
                    "description": "Max updates per hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUserConnections": {
                    "type": "number",
                    "description": "Max user connections.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxConnectionsPerHour",
                "maxQuestionsPerHour",
                "maxUpdatesPerHour",
                "maxUserConnections"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbMysqlClusterUserPermission:getMdbMysqlClusterUserPermission": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database that the permission grants access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List user's roles in the database.\nAllowed roles: `ALL`,`ALTER`,`ALTER_ROUTINE`,`CREATE`,`CREATE_ROUTINE`,`CREATE_TEMPORARY_TABLES`,\n`CREATE_VIEW`,`DELETE`,`DROP`,`EVENT`,`EXECUTE`,`INDEX`,`INSERT`,`LOCK_TABLES`,`SELECT`,`SHOW_VIEW`,`TRIGGER`,`UPDATE`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "roles"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbMysqlUserConnectionLimit:getMdbMysqlUserConnectionLimit": {
            "properties": {
                "maxConnectionsPerHour": {
                    "type": "number",
                    "description": "Max connections per hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxQuestionsPerHour": {
                    "type": "number",
                    "description": "Max questions per hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUpdatesPerHour": {
                    "type": "number",
                    "description": "Max updates per hour.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxUserConnections": {
                    "type": "number",
                    "description": "Max user connections.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxConnectionsPerHour",
                "maxQuestionsPerHour",
                "maxUpdatesPerHour",
                "maxUserConnections"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbMysqlUserPermission:getMdbMysqlUserPermission": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database that the permission grants access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List user's roles in the database.\nAllowed roles: `ALL`,`ALTER`,`ALTER_ROUTINE`,`CREATE`,`CREATE_ROUTINE`,`CREATE_TEMPORARY_TABLES`,\n`CREATE_VIEW`,`DELETE`,`DROP`,`EVENT`,`EXECUTE`,`INDEX`,`INSERT`,`LOCK_TABLES`,`SELECT`,`SHOW_VIEW`,`TRIGGER`,`UPDATE`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbPostgresqlClusterConfig:getMdbPostgresqlClusterConfig": {
            "properties": {
                "accesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbPostgresqlClusterConfigAccess:getMdbPostgresqlClusterConfigAccess"
                    },
                    "description": "Access policy to the PostgreSQL cluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autofailover": {
                    "type": "boolean",
                    "description": "Configuration setting which enables/disables autofailover in cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupRetainPeriodDays": {
                    "type": "number",
                    "description": "The period in days during which backups are stored.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupWindowStarts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbPostgresqlClusterConfigBackupWindowStart:getMdbPostgresqlClusterConfigBackupWindowStart"
                    },
                    "description": "Time to start the daily backup, in the UTC timezone. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "performanceDiagnostics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbPostgresqlClusterConfigPerformanceDiagnostic:getMdbPostgresqlClusterConfigPerformanceDiagnostic"
                    },
                    "description": "Cluster performance diagnostics settings. The structure is documented below. [YC Documentation](https://cloud.yandex.com/docs/managed-postgresql/api-ref/grpc/cluster_service#PerformanceDiagnostics)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "poolerConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbPostgresqlClusterConfigPoolerConfig:getMdbPostgresqlClusterConfigPoolerConfig"
                    },
                    "description": "Configuration of the connection pooler. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postgresqlConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "PostgreSQL cluster config.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbPostgresqlClusterConfigResource:getMdbPostgresqlClusterConfigResource"
                    },
                    "description": "Resources allocated to hosts of the PostgreSQL cluster. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of the PostgreSQL cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accesses",
                "autofailover",
                "backupRetainPeriodDays",
                "backupWindowStarts",
                "performanceDiagnostics",
                "poolerConfigs",
                "postgresqlConfig",
                "resources",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbPostgresqlClusterConfigAccess:getMdbPostgresqlClusterConfigAccess": {
            "properties": {
                "dataLens": {
                    "type": "boolean",
                    "description": "Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dataTransfer": {
                    "type": "boolean",
                    "description": "(Optional) Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverless": {
                    "type": "boolean",
                    "description": "Allow access for [connection to managed databases from functions](https://cloud.yandex.com/docs/functions/operations/database-connection)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "webSql": {
                    "type": "boolean",
                    "description": "Allow access for [SQL queries in the management console](https://cloud.yandex.com/docs/managed-postgresql/operations/web-sql-query)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dataLens",
                "dataTransfer",
                "serverless",
                "webSql"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbPostgresqlClusterConfigBackupWindowStart:getMdbPostgresqlClusterConfigBackupWindowStart": {
            "properties": {
                "hours": {
                    "type": "number",
                    "description": "The hour at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minutes": {
                    "type": "number",
                    "description": "The minute at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hours",
                "minutes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbPostgresqlClusterConfigPerformanceDiagnostic:getMdbPostgresqlClusterConfigPerformanceDiagnostic": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Flag, when true, performance diagnostics is enabled\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sessionsSamplingInterval": {
                    "type": "number",
                    "description": "Interval (in seconds) for pg_stat_activity sampling Acceptable values are 1 to 86400, inclusive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statementsSamplingInterval": {
                    "type": "number",
                    "description": "Interval (in seconds) for pg_stat_statements sampling Acceptable values are 1 to 86400, inclusive.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "sessionsSamplingInterval",
                "statementsSamplingInterval"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbPostgresqlClusterConfigPoolerConfig:getMdbPostgresqlClusterConfigPoolerConfig": {
            "properties": {
                "poolDiscard": {
                    "type": "boolean",
                    "description": "Value for `pool_discard` [parameter in Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_discard-yesno).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "poolingMode": {
                    "type": "string",
                    "description": "Mode that the connection pooler is working in. See descriptions of all modes in the [documentation for Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool-string.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "poolDiscard",
                "poolingMode"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbPostgresqlClusterConfigResource:getMdbPostgresqlClusterConfigResource": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a PostgreSQL host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage for PostgreSQL hosts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbPostgresqlClusterHost:getMdbPostgresqlClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Sets whether the host should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "number",
                    "description": "Host priority in HA group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationSource": {
                    "type": "string",
                    "description": "Host replication source (fqdn), case when replication_source is empty then host in HA group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "role": {
                    "type": "string",
                    "description": "Role of the host in the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the PostgreSQL host will be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignPublicIp",
                "fqdn",
                "priority",
                "replicationSource",
                "role",
                "subnetId",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbPostgresqlClusterMaintenanceWindow:getMdbPostgresqlClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of the week (in `DDD` format). Value is one of: \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of the day in UTC (in `HH` format). Value is between 1 and 24.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "day",
                "hour",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbPostgresqlDatabaseExtension:getMdbPostgresqlDatabaseExtension": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the PostgreSQL cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of the extension.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "yandex:index/getMdbPostgresqlUserPermission:getMdbPostgresqlUserPermission": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database that the permission grants access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbRedisClusterConfig:getMdbRedisClusterConfig": {
            "properties": {
                "clientOutputBufferLimitNormal": {
                    "type": "string",
                    "description": "Normal clients output buffer limits.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clientOutputBufferLimitPubsub": {
                    "type": "string",
                    "description": "Pubsub clients output buffer limits.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "databases": {
                    "type": "number",
                    "description": "Number of databases (changing requires redis-server restart).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxmemoryPolicy": {
                    "type": "string",
                    "description": "Redis key eviction policy for a dataset that reaches maximum memory.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notifyKeyspaceEvents": {
                    "type": "string",
                    "description": "Select the events that Redis will notify among a set of classes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slowlogLogSlowerThan": {
                    "type": "number",
                    "description": "Log slow queries below this number in microseconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slowlogMaxLen": {
                    "type": "number",
                    "description": "Slow queries log length.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeout": {
                    "type": "number",
                    "description": "Close the connection after a client is idle for N seconds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "version": {
                    "type": "string",
                    "description": "Version of Redis (6.2).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clientOutputBufferLimitNormal",
                "clientOutputBufferLimitPubsub",
                "databases",
                "maxmemoryPolicy",
                "notifyKeyspaceEvents",
                "slowlogLogSlowerThan",
                "slowlogMaxLen",
                "timeout",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbRedisClusterHost:getMdbRedisClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Sets whether the host should get a public IP address or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicaPriority": {
                    "type": "number",
                    "description": "Replica priority of a current replica (usable for non-sharded only).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shardName": {
                    "type": "string",
                    "description": "The name of the shard to which the host belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs. The subnet must\nbe a part of the network to which the cluster belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the Redis host will be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignPublicIp",
                "fqdn",
                "replicaPriority",
                "shardName",
                "subnetId",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbRedisClusterMaintenanceWindow:getMdbRedisClusterMaintenanceWindow": {
            "properties": {
                "day": {
                    "type": "string",
                    "description": "Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "hour": {
                    "type": "number",
                    "description": "Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "day",
                "hour",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbRedisClusterResource:getMdbRedisClusterResource": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage of a host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbSqlserverClusterBackupWindowStart:getMdbSqlserverClusterBackupWindowStart": {
            "properties": {
                "hours": {
                    "type": "number",
                    "description": "The hour at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minutes": {
                    "type": "number",
                    "description": "The minute at which backup will be started.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "hours",
                "minutes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbSqlserverClusterDatabase:getMdbSqlserverClusterDatabase": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SQLServer cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbSqlserverClusterHost:getMdbSqlserverClusterHost": {
            "properties": {
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Sets whether the host should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the SQLServer host will be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "assignPublicIp",
                "fqdn",
                "subnetId",
                "zone"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbSqlserverClusterResource:getMdbSqlserverClusterResource": {
            "properties": {
                "diskSize": {
                    "type": "number",
                    "description": "Volume of the storage available to a SQLServer host, in gigabytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskTypeId": {
                    "type": "string",
                    "description": "Type of the storage for SQLServer hosts.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourcePresetId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "diskSize",
                "diskTypeId",
                "resourcePresetId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbSqlserverClusterUser:getMdbSqlserverClusterUser": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the SQLServer cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getMdbSqlserverClusterUserPermission:getMdbSqlserverClusterUserPermission"
                    },
                    "description": "Set of permissions granted to the user. The structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "password",
                "permissions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getMdbSqlserverClusterUserPermission:getMdbSqlserverClusterUserPermission": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "The name of the database that the permission grants access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List user's roles in the database.\nAllowed roles: `OWNER`, `SECURITYADMIN`, `ACCESSADMIN`, `BACKUPOPERATOR`, `DDLADMIN`, `DATAWRITER`, `DATAREADER`, `DENYDATAWRITER`, `DENYDATAREADER`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "roles"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getOrganizationmanagerGroupMember:getOrganizationmanagerGroupMember": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The ID of the member.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of the member.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getOrganizationmanagerSamlFederationSecuritySetting:getOrganizationmanagerSamlFederationSecuritySetting": {
            "properties": {
                "encryptedAssertions": {
                    "type": "boolean",
                    "description": "Indicates whether encrypted assertions are enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "encryptedAssertions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getServerlessContainerImage:getServerlessContainerImage": {
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "digest": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "Invoke URL of the Yandex Cloud Serverless Container\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workDir": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "args",
                "commands",
                "digest",
                "environment",
                "url",
                "workDir"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getServerlessContainerSecret:getServerlessContainerSecret": {
            "properties": {
                "environmentVariable": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "versionId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "environmentVariable",
                "id",
                "key",
                "versionId"
            ]
        },
        "yandex:index/getVpcAddressExternalIpv4Address:getVpcAddressExternalIpv4Address": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "IP address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ddosProtectionProvider": {
                    "type": "string",
                    "description": "DDOS protection provider.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "outgoingSmtpCapability": {
                    "type": "string",
                    "description": "Outgoing smtp capability.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneId": {
                    "type": "string",
                    "description": "Zone for allocating address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "address",
                "ddosProtectionProvider",
                "outgoingSmtpCapability",
                "zoneId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getVpcGatewaySharedEgressGateway:getVpcGatewaySharedEgressGateway": {
            "type": "object"
        },
        "yandex:index/getVpcRouteTableStaticRoute:getVpcRouteTableStaticRoute": {
            "properties": {
                "destinationPrefix": {
                    "type": "string",
                    "description": "Route prefix in CIDR notation.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gatewayId": {
                    "type": "string",
                    "description": "ID of the gateway used as next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextHopAddress": {
                    "type": "string",
                    "description": "Address of the next hop.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationPrefix",
                "gatewayId",
                "nextHopAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getVpcSecurityGroupEgress:getVpcSecurityGroupEgress": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fromPort": {
                    "type": "number",
                    "description": "Minimum port number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Id of the rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "Port number (if applied to a single port).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "predefinedTarget": {
                    "type": "string",
                    "description": "Special-purpose targets. `self_security_group` refers to this particular security group. `loadbalancer_healthchecks` represents [loadbalancer health check nodes](https://cloud.yandex.com/docs/network-load-balancer/concepts/health-check).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "One of `ANY`, `TCP`, `UDP`, `ICMP`, `IPV6_ICMP`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "Security Group ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "toPort": {
                    "type": "number",
                    "description": "Maximum port number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "v4CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The blocks of  IPv4 addresses for this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "v6CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The blocks of  IPv6 addresses for this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "fromPort",
                "id",
                "labels",
                "port",
                "predefinedTarget",
                "protocol",
                "securityGroupId",
                "toPort",
                "v4CidrBlocks",
                "v6CidrBlocks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getVpcSecurityGroupIngress:getVpcSecurityGroupIngress": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fromPort": {
                    "type": "number",
                    "description": "Minimum port number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Id of the rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "port": {
                    "type": "number",
                    "description": "Port number (if applied to a single port).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "predefinedTarget": {
                    "type": "string",
                    "description": "Special-purpose targets. `self_security_group` refers to this particular security group. `loadbalancer_healthchecks` represents [loadbalancer health check nodes](https://cloud.yandex.com/docs/network-load-balancer/concepts/health-check).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "protocol": {
                    "type": "string",
                    "description": "One of `ANY`, `TCP`, `UDP`, `ICMP`, `IPV6_ICMP`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "Security Group ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "toPort": {
                    "type": "number",
                    "description": "Maximum port number.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "v4CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The blocks of  IPv4 addresses for this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "v6CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The blocks of  IPv6 addresses for this rule.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "fromPort",
                "id",
                "labels",
                "port",
                "predefinedTarget",
                "protocol",
                "securityGroupId",
                "toPort",
                "v4CidrBlocks",
                "v6CidrBlocks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getVpcSubnetDhcpOption:getVpcSubnetDhcpOption": {
            "properties": {
                "domainName": {
                    "type": "string",
                    "description": "Domain name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "domainNameServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Domain name server IP addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ntpServers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "NTP server IP addresses.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "domainName",
                "domainNameServers",
                "ntpServers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getYdbDatabaseDedicatedLocation:getYdbDatabaseDedicatedLocation": {
            "properties": {
                "regions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getYdbDatabaseDedicatedLocationRegion:getYdbDatabaseDedicatedLocationRegion"
                    },
                    "description": "Region of the Yandex Database cluster.\nThe structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getYdbDatabaseDedicatedLocationZone:getYdbDatabaseDedicatedLocationZone"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "regions",
                "zones"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getYdbDatabaseDedicatedLocationRegion:getYdbDatabaseDedicatedLocationRegion": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Region ID of the Yandex Database cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getYdbDatabaseDedicatedLocationZone:getYdbDatabaseDedicatedLocationZone": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Region ID of the Yandex Database cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getYdbDatabaseDedicatedScalePolicy:getYdbDatabaseDedicatedScalePolicy": {
            "properties": {
                "fixedScales": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/getYdbDatabaseDedicatedScalePolicyFixedScale:getYdbDatabaseDedicatedScalePolicyFixedScale"
                    },
                    "description": "Fixed scaling policy of the Yandex Database cluster.\nThe structure is documented below.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fixedScales"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getYdbDatabaseDedicatedScalePolicyFixedScale:getYdbDatabaseDedicatedScalePolicyFixedScale": {
            "properties": {
                "size": {
                    "type": "number",
                    "description": "Number of instances in the Yandex Database cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "yandex:index/getYdbDatabaseDedicatedStorageConfig:getYdbDatabaseDedicatedStorageConfig": {
            "properties": {
                "groupCount": {
                    "type": "number",
                    "description": "Amount of storage groups of selected type in the Yandex Database cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageTypeId": {
                    "type": "string",
                    "description": "Storage type ID of the Yandex Database cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupCount",
                "storageTypeId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the yandex package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "cloudId": {
                "type": "string",
                "description": "ID of Yandex.Cloud tenant.\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The API endpoint for Yandex.Cloud SDK client.\n"
            },
            "folderId": {
                "type": "string",
                "description": "The default folder ID where resources will be placed.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted,default value is `false`.\n"
            },
            "maxRetries": {
                "type": "number",
                "description": "The maximum number of times an API request is being executed. If the API request still fails, an error is thrown.\n"
            },
            "organizationId": {
                "type": "string"
            },
            "plaintext": {
                "type": "boolean",
                "description": "Disable use of TLS. Default value is `false`.\n"
            },
            "regionId": {
                "type": "string"
            },
            "serviceAccountKeyFile": {
                "type": "string",
                "description": "Either the path to or the contents of a Service Account key file in JSON format.\n"
            },
            "storageAccessKey": {
                "type": "string",
                "description": "Yandex.Cloud storage service access key. Used when a storage data/resource doesn't have an access key explicitly\nspecified.\n"
            },
            "storageEndpoint": {
                "type": "string",
                "description": "Yandex.Cloud storage service endpoint. Default is storage.yandexcloud.net\n"
            },
            "storageSecretKey": {
                "type": "string",
                "description": "Yandex.Cloud storage service secret key. Used when a storage data/resource doesn't have a secret key explicitly\nspecified.\n"
            },
            "token": {
                "type": "string",
                "description": "The access token for API operations.\n"
            },
            "ymqAccessKey": {
                "type": "string",
                "description": "Yandex.Cloud Message Queue service access key. Used when a message queue resource doesn't have an access key explicitly\nspecified.\n"
            },
            "ymqEndpoint": {
                "type": "string",
                "description": "Yandex.Cloud Message Queue service endpoint. Default is message-queue.api.cloud.yandex.net\n"
            },
            "ymqSecretKey": {
                "type": "string",
                "description": "Yandex.Cloud Message Queue service secret key. Used when a message queue resource doesn't have a secret key explicitly\nspecified.\n",
                "secret": true
            },
            "zone": {
                "type": "string",
                "description": "The zone where operations will take place. Examples are ru-central1-a, ru-central2-c, etc.\n"
            }
        },
        "inputProperties": {
            "cloudId": {
                "type": "string",
                "description": "ID of Yandex.Cloud tenant.\n"
            },
            "endpoint": {
                "type": "string",
                "description": "The API endpoint for Yandex.Cloud SDK client.\n"
            },
            "folderId": {
                "type": "string",
                "description": "The default folder ID where resources will be placed.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Explicitly allow the provider to perform \"insecure\" SSL requests. If omitted,default value is `false`.\n"
            },
            "maxRetries": {
                "type": "number",
                "description": "The maximum number of times an API request is being executed. If the API request still fails, an error is thrown.\n"
            },
            "organizationId": {
                "type": "string"
            },
            "plaintext": {
                "type": "boolean",
                "description": "Disable use of TLS. Default value is `false`.\n"
            },
            "regionId": {
                "type": "string"
            },
            "serviceAccountKeyFile": {
                "type": "string",
                "description": "Either the path to or the contents of a Service Account key file in JSON format.\n"
            },
            "storageAccessKey": {
                "type": "string",
                "description": "Yandex.Cloud storage service access key. Used when a storage data/resource doesn't have an access key explicitly\nspecified.\n"
            },
            "storageEndpoint": {
                "type": "string",
                "description": "Yandex.Cloud storage service endpoint. Default is storage.yandexcloud.net\n"
            },
            "storageSecretKey": {
                "type": "string",
                "description": "Yandex.Cloud storage service secret key. Used when a storage data/resource doesn't have a secret key explicitly\nspecified.\n"
            },
            "token": {
                "type": "string",
                "description": "The access token for API operations.\n"
            },
            "ymqAccessKey": {
                "type": "string",
                "description": "Yandex.Cloud Message Queue service access key. Used when a message queue resource doesn't have an access key explicitly\nspecified.\n"
            },
            "ymqEndpoint": {
                "type": "string",
                "description": "Yandex.Cloud Message Queue service endpoint. Default is message-queue.api.cloud.yandex.net\n"
            },
            "ymqSecretKey": {
                "type": "string",
                "description": "Yandex.Cloud Message Queue service secret key. Used when a message queue resource doesn't have a secret key explicitly\nspecified.\n",
                "secret": true
            },
            "zone": {
                "type": "string",
                "description": "The zone where operations will take place. Examples are ru-central1-a, ru-central2-c, etc.\n"
            }
        }
    },
    "resources": {
        "yandex:index/albBackendGroup:AlbBackendGroup": {
            "description": "Creates a backend group in the specified folder and adds the specified backends to it.\nFor more information, see [the official documentation](https://cloud.yandex.com/en/docs/application-load-balancer/concepts/backend-group).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst test_backend_group = new yandex.AlbBackendGroup(\"test-backend-group\", {\n    httpBackends: [{\n        healthcheck: {\n            httpHealthcheck: {\n                path: \"/\",\n            },\n            interval: \"1s\",\n            timeout: \"1s\",\n        },\n        http2: true,\n        loadBalancingConfig: {\n            panicThreshold: 50,\n        },\n        name: \"test-http-backend\",\n        port: 8080,\n        targetGroupIds: [yandex_alb_target_group_test_target_group.id],\n        tls: {\n            sni: \"backend-domain.internal\",\n        },\n        weight: 1,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ntest_backend_group = yandex.AlbBackendGroup(\"test-backend-group\", http_backends=[yandex.AlbBackendGroupHttpBackendArgs(\n    healthcheck=yandex.AlbBackendGroupHttpBackendHealthcheckArgs(\n        http_healthcheck=yandex.AlbBackendGroupHttpBackendHealthcheckHttpHealthcheckArgs(\n            path=\"/\",\n        ),\n        interval=\"1s\",\n        timeout=\"1s\",\n    ),\n    http2=True,\n    load_balancing_config=yandex.AlbBackendGroupHttpBackendLoadBalancingConfigArgs(\n        panic_threshold=50,\n    ),\n    name=\"test-http-backend\",\n    port=8080,\n    target_group_ids=[yandex_alb_target_group[\"test-target-group\"][\"id\"]],\n    tls=yandex.AlbBackendGroupHttpBackendTlsArgs(\n        sni=\"backend-domain.internal\",\n    ),\n    weight=1,\n)])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_backend_group = new Yandex.AlbBackendGroup(\"test-backend-group\", new()\n    {\n        HttpBackends = new[]\n        {\n            new Yandex.Inputs.AlbBackendGroupHttpBackendArgs\n            {\n                Healthcheck = new Yandex.Inputs.AlbBackendGroupHttpBackendHealthcheckArgs\n                {\n                    HttpHealthcheck = new Yandex.Inputs.AlbBackendGroupHttpBackendHealthcheckHttpHealthcheckArgs\n                    {\n                        Path = \"/\",\n                    },\n                    Interval = \"1s\",\n                    Timeout = \"1s\",\n                },\n                Http2 = true,\n                LoadBalancingConfig = new Yandex.Inputs.AlbBackendGroupHttpBackendLoadBalancingConfigArgs\n                {\n                    PanicThreshold = 50,\n                },\n                Name = \"test-http-backend\",\n                Port = 8080,\n                TargetGroupIds = new[]\n                {\n                    yandex_alb_target_group.Test_target_group.Id,\n                },\n                Tls = new Yandex.Inputs.AlbBackendGroupHttpBackendTlsArgs\n                {\n                    Sni = \"backend-domain.internal\",\n                },\n                Weight = 1,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewAlbBackendGroup(ctx, \"test-backend-group\", \u0026yandex.AlbBackendGroupArgs{\n\t\t\tHttpBackends: AlbBackendGroupHttpBackendArray{\n\t\t\t\t\u0026AlbBackendGroupHttpBackendArgs{\n\t\t\t\t\tHealthcheck: \u0026AlbBackendGroupHttpBackendHealthcheckArgs{\n\t\t\t\t\t\tHttpHealthcheck: \u0026AlbBackendGroupHttpBackendHealthcheckHttpHealthcheckArgs{\n\t\t\t\t\t\t\tPath: pulumi.String(\"/\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tInterval: pulumi.String(\"1s\"),\n\t\t\t\t\t\tTimeout:  pulumi.String(\"1s\"),\n\t\t\t\t\t},\n\t\t\t\t\tHttp2: pulumi.Bool(true),\n\t\t\t\t\tLoadBalancingConfig: \u0026AlbBackendGroupHttpBackendLoadBalancingConfigArgs{\n\t\t\t\t\t\tPanicThreshold: pulumi.Float64(50),\n\t\t\t\t\t},\n\t\t\t\t\tName: pulumi.String(\"test-http-backend\"),\n\t\t\t\t\tPort: pulumi.Float64(8080),\n\t\t\t\t\tTargetGroupIds: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.Any(yandex_alb_target_group.TestTargetGroup.Id),\n\t\t\t\t\t},\n\t\t\t\t\tTls: \u0026AlbBackendGroupHttpBackendTlsArgs{\n\t\t\t\t\t\tSni: pulumi.String(\"backend-domain.internal\"),\n\t\t\t\t\t},\n\t\t\t\t\tWeight: pulumi.Float64(1),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.AlbBackendGroup;\nimport com.pulumi.yandex.AlbBackendGroupArgs;\nimport com.pulumi.yandex.inputs.AlbBackendGroupHttpBackendArgs;\nimport com.pulumi.yandex.inputs.AlbBackendGroupHttpBackendHealthcheckArgs;\nimport com.pulumi.yandex.inputs.AlbBackendGroupHttpBackendHealthcheckHttpHealthcheckArgs;\nimport com.pulumi.yandex.inputs.AlbBackendGroupHttpBackendLoadBalancingConfigArgs;\nimport com.pulumi.yandex.inputs.AlbBackendGroupHttpBackendTlsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_backend_group = new AlbBackendGroup(\"test-backend-group\", AlbBackendGroupArgs.builder()        \n            .httpBackends(AlbBackendGroupHttpBackendArgs.builder()\n                .healthcheck(AlbBackendGroupHttpBackendHealthcheckArgs.builder()\n                    .httpHealthcheck(AlbBackendGroupHttpBackendHealthcheckHttpHealthcheckArgs.builder()\n                        .path(\"/\")\n                        .build())\n                    .interval(\"1s\")\n                    .timeout(\"1s\")\n                    .build())\n                .http2(\"true\")\n                .loadBalancingConfig(AlbBackendGroupHttpBackendLoadBalancingConfigArgs.builder()\n                    .panicThreshold(50)\n                    .build())\n                .name(\"test-http-backend\")\n                .port(8080)\n                .targetGroupIds(yandex_alb_target_group.test-target-group().id())\n                .tls(AlbBackendGroupHttpBackendTlsArgs.builder()\n                    .sni(\"backend-domain.internal\")\n                    .build())\n                .weight(1)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-backend-group:\n    type: yandex:AlbBackendGroup\n    properties:\n      httpBackends:\n        - healthcheck:\n            httpHealthcheck:\n              path: /\n            interval: 1s\n            timeout: 1s\n          http2: 'true'\n          loadBalancingConfig:\n            panicThreshold: 50\n          name: test-http-backend\n          port: 8080\n          targetGroupIds:\n            - ${yandex_alb_target_group\"test-target-group\"[%!s(MISSING)].id}\n          tls:\n            sni: backend-domain.internal\n          weight: 1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA backend group can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/albBackendGroup:AlbBackendGroup default backend_group_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The backend group creation timestamp.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the backend group.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                },
                "grpcBackends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbBackendGroupGrpcBackend:AlbBackendGroupGrpcBackend"
                    },
                    "description": "Grpc backend specification that will be used by the ALB Backend Group. Structure is documented below.\n"
                },
                "httpBackends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbBackendGroupHttpBackend:AlbBackendGroupHttpBackend"
                    },
                    "description": "Http backend specification that will be used by the ALB Backend Group. Structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this backend group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the backend.\n"
                },
                "sessionAffinity": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupSessionAffinity:AlbBackendGroupSessionAffinity"
                },
                "streamBackends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbBackendGroupStreamBackend:AlbBackendGroupStreamBackend"
                    },
                    "description": "Stream backend specification that will be used by the ALB Backend Group. Structure is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupTimeouts:AlbBackendGroupTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the backend group.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                },
                "grpcBackends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbBackendGroupGrpcBackend:AlbBackendGroupGrpcBackend"
                    },
                    "description": "Grpc backend specification that will be used by the ALB Backend Group. Structure is documented below.\n"
                },
                "httpBackends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbBackendGroupHttpBackend:AlbBackendGroupHttpBackend"
                    },
                    "description": "Http backend specification that will be used by the ALB Backend Group. Structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this backend group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the backend.\n"
                },
                "sessionAffinity": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupSessionAffinity:AlbBackendGroupSessionAffinity"
                },
                "streamBackends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbBackendGroupStreamBackend:AlbBackendGroupStreamBackend"
                    },
                    "description": "Stream backend specification that will be used by the ALB Backend Group. Structure is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/AlbBackendGroupTimeouts:AlbBackendGroupTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlbBackendGroup resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The backend group creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the backend group.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "grpcBackends": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/AlbBackendGroupGrpcBackend:AlbBackendGroupGrpcBackend"
                        },
                        "description": "Grpc backend specification that will be used by the ALB Backend Group. Structure is documented below.\n"
                    },
                    "httpBackends": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/AlbBackendGroupHttpBackend:AlbBackendGroupHttpBackend"
                        },
                        "description": "Http backend specification that will be used by the ALB Backend Group. Structure is documented below.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this backend group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the backend.\n"
                    },
                    "sessionAffinity": {
                        "$ref": "#/types/yandex:index/AlbBackendGroupSessionAffinity:AlbBackendGroupSessionAffinity"
                    },
                    "streamBackends": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/AlbBackendGroupStreamBackend:AlbBackendGroupStreamBackend"
                        },
                        "description": "Stream backend specification that will be used by the ALB Backend Group. Structure is documented below.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/AlbBackendGroupTimeouts:AlbBackendGroupTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/albHttpRouter:AlbHttpRouter": {
            "description": "Creates an HTTP Router in the specified folder.\nFor more information, see [the official documentation](https://cloud.yandex.com/en/docs/application-load-balancer/concepts/http-router).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst tf_router = new yandex.AlbHttpRouter(\"tf-router\", {\n    labels: {\n        \"empty-label\": \"\",\n        s: [{}],\n        \"tf-label\": \"tf-label-value\",\n    },\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.AlbHttpRouter;\nimport com.pulumi.yandex.AlbHttpRouterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tf_router = new AlbHttpRouter(\"tf-router\", AlbHttpRouterArgs.builder()        \n            .labels(Map.ofEntries(\n                Map.entry(\"empty-label\", \"\"),\n                Map.entry(\"s\", ),\n                Map.entry(\"tf-label\", \"tf-label-value\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tf-router:\n    type: yandex:AlbHttpRouter\n    properties:\n      labels:\n        empty-label:\n        s:\n          - {}\n        tf-label: tf-label-value\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn HTTP Router can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/albHttpRouter:AlbHttpRouter default http_router_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The HTTP Router creation timestamp.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of the HTTP Router. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this HTTP Router. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the HTTP Router. Provided by the client when the HTTP Router is created.\n"
                },
                "routeOptions": {
                    "$ref": "#/types/yandex:index/AlbHttpRouterRouteOptions:AlbHttpRouterRouteOptions"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/AlbHttpRouterTimeouts:AlbHttpRouterTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "An optional description of the HTTP Router. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this HTTP Router. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the HTTP Router. Provided by the client when the HTTP Router is created.\n"
                },
                "routeOptions": {
                    "$ref": "#/types/yandex:index/AlbHttpRouterRouteOptions:AlbHttpRouterRouteOptions"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/AlbHttpRouterTimeouts:AlbHttpRouterTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlbHttpRouter resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The HTTP Router creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of the HTTP Router. Provide this property when\nyou create the resource.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this HTTP Router. A list of key/value pairs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the HTTP Router. Provided by the client when the HTTP Router is created.\n"
                    },
                    "routeOptions": {
                        "$ref": "#/types/yandex:index/AlbHttpRouterRouteOptions:AlbHttpRouterRouteOptions"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/AlbHttpRouterTimeouts:AlbHttpRouterTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/albLoadBalancer:AlbLoadBalancer": {
            "description": "Creates an Application Load Balancer in the specified folder. For more information, see\n[the official documentation](https://cloud.yandex.com/en/docs/application-load-balancer/concepts/application-load-balancer)\n.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst test_balancer = new yandex.AlbLoadBalancer(\"test-balancer\", {\n    networkId: yandex_vpc_network[\"test-network\"].id,\n    allocationPolicy: {\n        locations: [{\n            zoneId: \"ru-central1-a\",\n            subnetId: yandex_vpc_subnet[\"test-subnet\"].id,\n        }],\n    },\n    listeners: [{\n        name: \"my-listener\",\n        endpoints: [{\n            addresses: [{\n                externalIpv4Address: {},\n            }],\n            ports: [8080],\n        }],\n        http: {\n            handler: {\n                httpRouterId: yandex_alb_http_router[\"test-router\"].id,\n            },\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ntest_balancer = yandex.AlbLoadBalancer(\"test-balancer\",\n    network_id=yandex_vpc_network[\"test-network\"][\"id\"],\n    allocation_policy=yandex.AlbLoadBalancerAllocationPolicyArgs(\n        locations=[yandex.AlbLoadBalancerAllocationPolicyLocationArgs(\n            zone_id=\"ru-central1-a\",\n            subnet_id=yandex_vpc_subnet[\"test-subnet\"][\"id\"],\n        )],\n    ),\n    listeners=[yandex.AlbLoadBalancerListenerArgs(\n        name=\"my-listener\",\n        endpoints=[yandex.AlbLoadBalancerListenerEndpointArgs(\n            addresses=[yandex.AlbLoadBalancerListenerEndpointAddressArgs(\n                external_ipv4_address=yandex.AlbLoadBalancerListenerEndpointAddressExternalIpv4AddressArgs(),\n            )],\n            ports=[8080],\n        )],\n        http=yandex.AlbLoadBalancerListenerHttpArgs(\n            handler=yandex.AlbLoadBalancerListenerHttpHandlerArgs(\n                http_router_id=yandex_alb_http_router[\"test-router\"][\"id\"],\n            ),\n        ),\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_balancer = new Yandex.AlbLoadBalancer(\"test-balancer\", new()\n    {\n        NetworkId = yandex_vpc_network.Test_network.Id,\n        AllocationPolicy = new Yandex.Inputs.AlbLoadBalancerAllocationPolicyArgs\n        {\n            Locations = new[]\n            {\n                new Yandex.Inputs.AlbLoadBalancerAllocationPolicyLocationArgs\n                {\n                    ZoneId = \"ru-central1-a\",\n                    SubnetId = yandex_vpc_subnet.Test_subnet.Id,\n                },\n            },\n        },\n        Listeners = new[]\n        {\n            new Yandex.Inputs.AlbLoadBalancerListenerArgs\n            {\n                Name = \"my-listener\",\n                Endpoints = new[]\n                {\n                    new Yandex.Inputs.AlbLoadBalancerListenerEndpointArgs\n                    {\n                        Addresses = new[]\n                        {\n                            new Yandex.Inputs.AlbLoadBalancerListenerEndpointAddressArgs\n                            {\n                                ExternalIpv4Address = null,\n                            },\n                        },\n                        Ports = new[]\n                        {\n                            8080,\n                        },\n                    },\n                },\n                Http = new Yandex.Inputs.AlbLoadBalancerListenerHttpArgs\n                {\n                    Handler = new Yandex.Inputs.AlbLoadBalancerListenerHttpHandlerArgs\n                    {\n                        HttpRouterId = yandex_alb_http_router.Test_router.Id,\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewAlbLoadBalancer(ctx, \"test-balancer\", \u0026yandex.AlbLoadBalancerArgs{\n\t\t\tNetworkId: pulumi.Any(yandex_vpc_network.TestNetwork.Id),\n\t\t\tAllocationPolicy: \u0026AlbLoadBalancerAllocationPolicyArgs{\n\t\t\t\tLocations: AlbLoadBalancerAllocationPolicyLocationArray{\n\t\t\t\t\t\u0026AlbLoadBalancerAllocationPolicyLocationArgs{\n\t\t\t\t\t\tZoneId:   pulumi.String(\"ru-central1-a\"),\n\t\t\t\t\t\tSubnetId: pulumi.Any(yandex_vpc_subnet.TestSubnet.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tListeners: AlbLoadBalancerListenerArray{\n\t\t\t\t\u0026AlbLoadBalancerListenerArgs{\n\t\t\t\t\tName: pulumi.String(\"my-listener\"),\n\t\t\t\t\tEndpoints: AlbLoadBalancerListenerEndpointArray{\n\t\t\t\t\t\t\u0026AlbLoadBalancerListenerEndpointArgs{\n\t\t\t\t\t\t\tAddresses: AlbLoadBalancerListenerEndpointAddressArray{\n\t\t\t\t\t\t\t\t\u0026AlbLoadBalancerListenerEndpointAddressArgs{\n\t\t\t\t\t\t\t\t\tExternalIpv4Address: nil,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tPorts: pulumi.Float64Array{\n\t\t\t\t\t\t\t\tpulumi.Float64(8080),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tHttp: \u0026AlbLoadBalancerListenerHttpArgs{\n\t\t\t\t\t\tHandler: \u0026AlbLoadBalancerListenerHttpHandlerArgs{\n\t\t\t\t\t\t\tHttpRouterId: pulumi.Any(yandex_alb_http_router.TestRouter.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.AlbLoadBalancer;\nimport com.pulumi.yandex.AlbLoadBalancerArgs;\nimport com.pulumi.yandex.inputs.AlbLoadBalancerAllocationPolicyArgs;\nimport com.pulumi.yandex.inputs.AlbLoadBalancerListenerArgs;\nimport com.pulumi.yandex.inputs.AlbLoadBalancerListenerHttpArgs;\nimport com.pulumi.yandex.inputs.AlbLoadBalancerListenerHttpHandlerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_balancer = new AlbLoadBalancer(\"test-balancer\", AlbLoadBalancerArgs.builder()        \n            .networkId(yandex_vpc_network.test-network().id())\n            .allocationPolicy(AlbLoadBalancerAllocationPolicyArgs.builder()\n                .locations(AlbLoadBalancerAllocationPolicyLocationArgs.builder()\n                    .zoneId(\"ru-central1-a\")\n                    .subnetId(yandex_vpc_subnet.test-subnet().id())\n                    .build())\n                .build())\n            .listeners(AlbLoadBalancerListenerArgs.builder()\n                .name(\"my-listener\")\n                .endpoints(AlbLoadBalancerListenerEndpointArgs.builder()\n                    .addresses(AlbLoadBalancerListenerEndpointAddressArgs.builder()\n                        .externalIpv4Address()\n                        .build())\n                    .ports(8080)\n                    .build())\n                .http(AlbLoadBalancerListenerHttpArgs.builder()\n                    .handler(AlbLoadBalancerListenerHttpHandlerArgs.builder()\n                        .httpRouterId(yandex_alb_http_router.test-router().id())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-balancer:\n    type: yandex:AlbLoadBalancer\n    properties:\n      networkId: ${yandex_vpc_network\"test-network\"[%!s(MISSING)].id}\n      allocationPolicy:\n        locations:\n          - zoneId: ru-central1-a\n            subnetId: ${yandex_vpc_subnet\"test-subnet\"[%!s(MISSING)].id}\n      listeners:\n        - name: my-listener\n          endpoints:\n            - addresses:\n                - externalIpv4Address: {}\n              ports:\n                - 8080\n          http:\n            handler:\n              httpRouterId: ${yandex_alb_http_router\"test-router\"[%!s(MISSING)].id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn Application Load Balancer can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/albLoadBalancer:AlbLoadBalancer default load_balancer_id\n```\n\n ",
            "properties": {
                "allocationPolicy": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerAllocationPolicy:AlbLoadBalancerAllocationPolicy",
                    "description": "Allocation zones for the Load Balancer instance. The structure is documented below.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The Load Balancer creation timestamp.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of the Load Balancer.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder to which the resource belongs. If omitted, the provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this Load Balancer. A list of key/value pairs.\n"
                },
                "listeners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbLoadBalancerListener:AlbLoadBalancerListener"
                    },
                    "description": "List of listeners for the Load Balancer. The structure is documented below.\n"
                },
                "logGroupId": {
                    "type": "string",
                    "description": "Cloud log group used by the Load Balancer to store access logs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of SNI match.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network that the Load Balancer is located at.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "ID of the region that the Load Balancer is located at.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of ID's of security groups attached to the Load Balancer.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the Load Balancer.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerTimeouts:AlbLoadBalancerTimeouts"
                }
            },
            "required": [
                "allocationPolicy",
                "createdAt",
                "folderId",
                "logGroupId",
                "name",
                "networkId",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "allocationPolicy": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerAllocationPolicy:AlbLoadBalancerAllocationPolicy",
                    "description": "Allocation zones for the Load Balancer instance. The structure is documented below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of the Load Balancer.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder to which the resource belongs. If omitted, the provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this Load Balancer. A list of key/value pairs.\n"
                },
                "listeners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbLoadBalancerListener:AlbLoadBalancerListener"
                    },
                    "description": "List of listeners for the Load Balancer. The structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of SNI match.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network that the Load Balancer is located at.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "ID of the region that the Load Balancer is located at.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of ID's of security groups attached to the Load Balancer.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/AlbLoadBalancerTimeouts:AlbLoadBalancerTimeouts"
                }
            },
            "requiredInputs": [
                "allocationPolicy",
                "networkId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlbLoadBalancer resources.\n",
                "properties": {
                    "allocationPolicy": {
                        "$ref": "#/types/yandex:index/AlbLoadBalancerAllocationPolicy:AlbLoadBalancerAllocationPolicy",
                        "description": "Allocation zones for the Load Balancer instance. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The Load Balancer creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of the Load Balancer.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder to which the resource belongs. If omitted, the provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this Load Balancer. A list of key/value pairs.\n"
                    },
                    "listeners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/AlbLoadBalancerListener:AlbLoadBalancerListener"
                        },
                        "description": "List of listeners for the Load Balancer. The structure is documented below.\n"
                    },
                    "logGroupId": {
                        "type": "string",
                        "description": "Cloud log group used by the Load Balancer to store access logs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of SNI match.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network that the Load Balancer is located at.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "ID of the region that the Load Balancer is located at.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of ID's of security groups attached to the Load Balancer.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Load Balancer.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/AlbLoadBalancerTimeouts:AlbLoadBalancerTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/albTargetGroup:AlbTargetGroup": {
            "description": "Creates a target group in the specified folder and adds the specified targets to it.\nFor more information, see [the official documentation](https://cloud.yandex.com/en/docs/application-load-balancer/concepts/target-group).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = new yandex.AlbTargetGroup(\"foo\", {\n    targets: [\n        {\n            ipAddress: yandex_compute_instance_my_instance_1.networkInterface.0.ipAddress,\n            subnetId: yandex_vpc_subnet_my_subnet.id,\n        },\n        {\n            ipAddress: yandex_compute_instance_my_instance_2.networkInterface.0.ipAddress,\n            subnetId: yandex_vpc_subnet_my_subnet.id,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.AlbTargetGroup(\"foo\", targets=[\n    yandex.AlbTargetGroupTargetArgs(\n        ip_address=yandex_compute_instance[\"my-instance-1\"][\"network_interface\"][0][\"ip_address\"],\n        subnet_id=yandex_vpc_subnet[\"my-subnet\"][\"id\"],\n    ),\n    yandex.AlbTargetGroupTargetArgs(\n        ip_address=yandex_compute_instance[\"my-instance-2\"][\"network_interface\"][0][\"ip_address\"],\n        subnet_id=yandex_vpc_subnet[\"my-subnet\"][\"id\"],\n    ),\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Yandex.AlbTargetGroup(\"foo\", new()\n    {\n        Targets = new[]\n        {\n            new Yandex.Inputs.AlbTargetGroupTargetArgs\n            {\n                IpAddress = yandex_compute_instance.My_instance_1.Network_interface[0].Ip_address,\n                SubnetId = yandex_vpc_subnet.My_subnet.Id,\n            },\n            new Yandex.Inputs.AlbTargetGroupTargetArgs\n            {\n                IpAddress = yandex_compute_instance.My_instance_2.Network_interface[0].Ip_address,\n                SubnetId = yandex_vpc_subnet.My_subnet.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewAlbTargetGroup(ctx, \"foo\", \u0026yandex.AlbTargetGroupArgs{\n\t\t\tTargets: AlbTargetGroupTargetArray{\n\t\t\t\t\u0026AlbTargetGroupTargetArgs{\n\t\t\t\t\tIpAddress: pulumi.Any(yandex_compute_instance.MyInstance1.Network_interface[0].Ip_address),\n\t\t\t\t\tSubnetId:  pulumi.Any(yandex_vpc_subnet.MySubnet.Id),\n\t\t\t\t},\n\t\t\t\t\u0026AlbTargetGroupTargetArgs{\n\t\t\t\t\tIpAddress: pulumi.Any(yandex_compute_instance.MyInstance2.Network_interface[0].Ip_address),\n\t\t\t\t\tSubnetId:  pulumi.Any(yandex_vpc_subnet.MySubnet.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.AlbTargetGroup;\nimport com.pulumi.yandex.AlbTargetGroupArgs;\nimport com.pulumi.yandex.inputs.AlbTargetGroupTargetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new AlbTargetGroup(\"foo\", AlbTargetGroupArgs.builder()        \n            .targets(            \n                AlbTargetGroupTargetArgs.builder()\n                    .ipAddress(yandex_compute_instance.my-instance-1().network_interface()[0].ip_address())\n                    .subnetId(yandex_vpc_subnet.my-subnet().id())\n                    .build(),\n                AlbTargetGroupTargetArgs.builder()\n                    .ipAddress(yandex_compute_instance.my-instance-2().network_interface()[0].ip_address())\n                    .subnetId(yandex_vpc_subnet.my-subnet().id())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: yandex:AlbTargetGroup\n    properties:\n      targets:\n        - ipAddress: ${yandex_compute_instance\"my-instance-1\"[%!s(MISSING)].network_interface[0].ip_address}\n          subnetId: ${yandex_vpc_subnet\"my-subnet\"[%!s(MISSING)].id}\n        - ipAddress: ${yandex_compute_instance\"my-instance-2\"[%!s(MISSING)].network_interface[0].ip_address}\n          subnetId: ${yandex_vpc_subnet\"my-subnet\"[%!s(MISSING)].id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA target group can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/albTargetGroup:AlbTargetGroup default target_group_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The target group creation timestamp.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of the target group. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this target group. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the target group. Provided by the client when the target group is created.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbTargetGroupTarget:AlbTargetGroupTarget"
                    },
                    "description": "A Target resource. The structure is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/AlbTargetGroupTimeouts:AlbTargetGroupTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "An optional description of the target group. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this target group. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the target group. Provided by the client when the target group is created.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbTargetGroupTarget:AlbTargetGroupTarget"
                    },
                    "description": "A Target resource. The structure is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/AlbTargetGroupTimeouts:AlbTargetGroupTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlbTargetGroup resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The target group creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of the target group. Provide this property when\nyou create the resource.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this target group. A list of key/value pairs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the target group. Provided by the client when the target group is created.\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/AlbTargetGroupTarget:AlbTargetGroupTarget"
                        },
                        "description": "A Target resource. The structure is documented below.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/AlbTargetGroupTimeouts:AlbTargetGroupTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/albVirtualHost:AlbVirtualHost": {
            "description": "Creates a virtual host that belongs to specified HTTP router and adds the specified routes to it. For more information,\nsee [the official documentation](https://cloud.yandex.com/en/docs/application-load-balancer/concepts/http-router).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst my_virtual_host = new yandex.AlbVirtualHost(\"my-virtual-host\", {\n    httpRouterId: yandex_alb_http_router[\"my-router\"].id,\n    routes: [{\n        name: \"my-route\",\n        httpRoute: {\n            httpRouteAction: {\n                backendGroupId: yandex_alb_backend_group[\"my-bg\"].id,\n                timeout: \"3s\",\n            },\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_virtual_host = yandex.AlbVirtualHost(\"my-virtual-host\",\n    http_router_id=yandex_alb_http_router[\"my-router\"][\"id\"],\n    routes=[yandex.AlbVirtualHostRouteArgs(\n        name=\"my-route\",\n        http_route=yandex.AlbVirtualHostRouteHttpRouteArgs(\n            http_route_action=yandex.AlbVirtualHostRouteHttpRouteHttpRouteActionArgs(\n                backend_group_id=yandex_alb_backend_group[\"my-bg\"][\"id\"],\n                timeout=\"3s\",\n            ),\n        ),\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_virtual_host = new Yandex.AlbVirtualHost(\"my-virtual-host\", new()\n    {\n        HttpRouterId = yandex_alb_http_router.My_router.Id,\n        Routes = new[]\n        {\n            new Yandex.Inputs.AlbVirtualHostRouteArgs\n            {\n                Name = \"my-route\",\n                HttpRoute = new Yandex.Inputs.AlbVirtualHostRouteHttpRouteArgs\n                {\n                    HttpRouteAction = new Yandex.Inputs.AlbVirtualHostRouteHttpRouteHttpRouteActionArgs\n                    {\n                        BackendGroupId = yandex_alb_backend_group.My_bg.Id,\n                        Timeout = \"3s\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewAlbVirtualHost(ctx, \"my-virtual-host\", \u0026yandex.AlbVirtualHostArgs{\n\t\t\tHttpRouterId: pulumi.Any(yandex_alb_http_router.MyRouter.Id),\n\t\t\tRoutes: AlbVirtualHostRouteArray{\n\t\t\t\t\u0026AlbVirtualHostRouteArgs{\n\t\t\t\t\tName: pulumi.String(\"my-route\"),\n\t\t\t\t\tHttpRoute: \u0026AlbVirtualHostRouteHttpRouteArgs{\n\t\t\t\t\t\tHttpRouteAction: \u0026AlbVirtualHostRouteHttpRouteHttpRouteActionArgs{\n\t\t\t\t\t\t\tBackendGroupId: pulumi.Any(yandex_alb_backend_group.MyBg.Id),\n\t\t\t\t\t\t\tTimeout:        pulumi.String(\"3s\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.AlbVirtualHost;\nimport com.pulumi.yandex.AlbVirtualHostArgs;\nimport com.pulumi.yandex.inputs.AlbVirtualHostRouteArgs;\nimport com.pulumi.yandex.inputs.AlbVirtualHostRouteHttpRouteArgs;\nimport com.pulumi.yandex.inputs.AlbVirtualHostRouteHttpRouteHttpRouteActionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_virtual_host = new AlbVirtualHost(\"my-virtual-host\", AlbVirtualHostArgs.builder()        \n            .httpRouterId(yandex_alb_http_router.my-router().id())\n            .routes(AlbVirtualHostRouteArgs.builder()\n                .name(\"my-route\")\n                .httpRoute(AlbVirtualHostRouteHttpRouteArgs.builder()\n                    .httpRouteAction(AlbVirtualHostRouteHttpRouteHttpRouteActionArgs.builder()\n                        .backendGroupId(yandex_alb_backend_group.my-bg().id())\n                        .timeout(\"3s\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  my-virtual-host:\n    type: yandex:AlbVirtualHost\n    properties:\n      httpRouterId: ${yandex_alb_http_router\"my-router\"[%!s(MISSING)].id}\n      routes:\n        - name: my-route\n          httpRoute:\n            httpRouteAction:\n              backendGroupId: ${yandex_alb_backend_group\"my-bg\"[%!s(MISSING)].id}\n              timeout: 3s\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA virtual host can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/albVirtualHost:AlbVirtualHost default virtual_host_id\n```\n\n ",
            "properties": {
                "authorities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of domains (host/authority header) that will be matched to this virtual host. Wildcard\nhosts are supported in the form of '*.foo.com' or '*-bar.foo.com'. If not specified, all domains will be matched.\n"
                },
                "httpRouterId": {
                    "type": "string"
                },
                "modifyRequestHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbVirtualHostModifyRequestHeader:AlbVirtualHostModifyRequestHeader"
                    },
                    "description": "Apply the following modifications to the request\nheaders. The structure is documented below.\n"
                },
                "modifyResponseHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbVirtualHostModifyResponseHeader:AlbVirtualHostModifyResponseHeader"
                    },
                    "description": "Apply the following modifications to the response\nheaders. The structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the route.\n"
                },
                "routeOptions": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteOptions:AlbVirtualHostRouteOptions"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbVirtualHostRoute:AlbVirtualHostRoute"
                    },
                    "description": "A Route resource. Routes are matched *in-order*. Be careful when adding them to the end. For instance, having\nhttp '/' match first makes all other routes unused. The structure is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostTimeouts:AlbVirtualHostTimeouts"
                }
            },
            "required": [
                "httpRouterId",
                "name",
                "timeouts"
            ],
            "inputProperties": {
                "authorities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of domains (host/authority header) that will be matched to this virtual host. Wildcard\nhosts are supported in the form of '*.foo.com' or '*-bar.foo.com'. If not specified, all domains will be matched.\n"
                },
                "httpRouterId": {
                    "type": "string"
                },
                "modifyRequestHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbVirtualHostModifyRequestHeader:AlbVirtualHostModifyRequestHeader"
                    },
                    "description": "Apply the following modifications to the request\nheaders. The structure is documented below.\n"
                },
                "modifyResponseHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbVirtualHostModifyResponseHeader:AlbVirtualHostModifyResponseHeader"
                    },
                    "description": "Apply the following modifications to the response\nheaders. The structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "name of the route.\n"
                },
                "routeOptions": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostRouteOptions:AlbVirtualHostRouteOptions"
                },
                "routes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/AlbVirtualHostRoute:AlbVirtualHostRoute"
                    },
                    "description": "A Route resource. Routes are matched *in-order*. Be careful when adding them to the end. For instance, having\nhttp '/' match first makes all other routes unused. The structure is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/AlbVirtualHostTimeouts:AlbVirtualHostTimeouts"
                }
            },
            "requiredInputs": [
                "httpRouterId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlbVirtualHost resources.\n",
                "properties": {
                    "authorities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of domains (host/authority header) that will be matched to this virtual host. Wildcard\nhosts are supported in the form of '*.foo.com' or '*-bar.foo.com'. If not specified, all domains will be matched.\n"
                    },
                    "httpRouterId": {
                        "type": "string"
                    },
                    "modifyRequestHeaders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/AlbVirtualHostModifyRequestHeader:AlbVirtualHostModifyRequestHeader"
                        },
                        "description": "Apply the following modifications to the request\nheaders. The structure is documented below.\n"
                    },
                    "modifyResponseHeaders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/AlbVirtualHostModifyResponseHeader:AlbVirtualHostModifyResponseHeader"
                        },
                        "description": "Apply the following modifications to the response\nheaders. The structure is documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the route.\n"
                    },
                    "routeOptions": {
                        "$ref": "#/types/yandex:index/AlbVirtualHostRouteOptions:AlbVirtualHostRouteOptions"
                    },
                    "routes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/AlbVirtualHostRoute:AlbVirtualHostRoute"
                        },
                        "description": "A Route resource. Routes are matched *in-order*. Be careful when adding them to the end. For instance, having\nhttp '/' match first makes all other routes unused. The structure is documented below.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/AlbVirtualHostTimeouts:AlbVirtualHostTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/apiGateway:ApiGateway": {
            "description": "Allows management of [Yandex Cloud API Gateway](https://cloud.yandex.com/docs/api-gateway/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst test_api_gateway = new yandex.ApiGateway(\"test-api-gateway\", {\n    description: \"any description\",\n    labels: {\n        label: \"label\",\n        \"empty-label\": \"\",\n    },\n    spec: `openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Test API\npaths:\n  /hello:\n    get:\n      summary: Say hello\n      operationId: hello\n      parameters:\n        - name: user\n          in: query\n          description: User name to appear in greetings\n          required: false\n          schema:\n            type: string\n            default: 'world'\n      responses:\n        '200':\n          description: Greeting\n          content:\n            'text/plain':\n              schema:\n                type: \"string\"\n      x-yc-apigateway-integration:\n        type: dummy\n        http_code: 200\n        http_headers:\n          'Content-Type': \"text/plain\"\n        content:\n          'text/plain': \"Hello again, {user}!\\n\"\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ntest_api_gateway = yandex.ApiGateway(\"test-api-gateway\",\n    description=\"any description\",\n    labels={\n        \"label\": \"label\",\n        \"empty-label\": \"\",\n    },\n    spec=\"\"\"openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Test API\npaths:\n  /hello:\n    get:\n      summary: Say hello\n      operationId: hello\n      parameters:\n        - name: user\n          in: query\n          description: User name to appear in greetings\n          required: false\n          schema:\n            type: string\n            default: 'world'\n      responses:\n        '200':\n          description: Greeting\n          content:\n            'text/plain':\n              schema:\n                type: \"string\"\n      x-yc-apigateway-integration:\n        type: dummy\n        http_code: 200\n        http_headers:\n          'Content-Type': \"text/plain\"\n        content:\n          'text/plain': \"Hello again, {user}!\\n\"\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_api_gateway = new Yandex.ApiGateway(\"test-api-gateway\", new()\n    {\n        Description = \"any description\",\n        Labels = \n        {\n            { \"label\", \"label\" },\n            { \"empty-label\", \"\" },\n        },\n        Spec = @\"openapi: \"\"3.0.0\"\"\ninfo:\n  version: 1.0.0\n  title: Test API\npaths:\n  /hello:\n    get:\n      summary: Say hello\n      operationId: hello\n      parameters:\n        - name: user\n          in: query\n          description: User name to appear in greetings\n          required: false\n          schema:\n            type: string\n            default: 'world'\n      responses:\n        '200':\n          description: Greeting\n          content:\n            'text/plain':\n              schema:\n                type: \"\"string\"\"\n      x-yc-apigateway-integration:\n        type: dummy\n        http_code: 200\n        http_headers:\n          'Content-Type': \"\"text/plain\"\"\n        content:\n          'text/plain': \"\"Hello again, {user}!\\n\"\"\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewApiGateway(ctx, \"test-api-gateway\", \u0026yandex.ApiGatewayArgs{\n\t\t\tDescription: pulumi.String(\"any description\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"label\":       pulumi.String(\"label\"),\n\t\t\t\t\"empty-label\": pulumi.String(\"\"),\n\t\t\t},\n\t\t\tSpec: pulumi.String(fmt.Sprintf(`openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Test API\npaths:\n  /hello:\n    get:\n      summary: Say hello\n      operationId: hello\n      parameters:\n        - name: user\n          in: query\n          description: User name to appear in greetings\n          required: false\n          schema:\n            type: string\n            default: 'world'\n      responses:\n        '200':\n          description: Greeting\n          content:\n            'text/plain':\n              schema:\n                type: \"string\"\n      x-yc-apigateway-integration:\n        type: dummy\n        http_code: 200\n        http_headers:\n          'Content-Type': \"text/plain\"\n        content:\n          'text/plain': \"Hello again, {user}!\\n\"\n`)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ApiGateway;\nimport com.pulumi.yandex.ApiGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_api_gateway = new ApiGateway(\"test-api-gateway\", ApiGatewayArgs.builder()        \n            .description(\"any description\")\n            .labels(Map.ofEntries(\n                Map.entry(\"label\", \"label\"),\n                Map.entry(\"empty-label\", \"\")\n            ))\n            .spec(\"\"\"\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Test API\npaths:\n  /hello:\n    get:\n      summary: Say hello\n      operationId: hello\n      parameters:\n        - name: user\n          in: query\n          description: User name to appear in greetings\n          required: false\n          schema:\n            type: string\n            default: 'world'\n      responses:\n        '200':\n          description: Greeting\n          content:\n            'text/plain':\n              schema:\n                type: \"string\"\n      x-yc-apigateway-integration:\n        type: dummy\n        http_code: 200\n        http_headers:\n          'Content-Type': \"text/plain\"\n        content:\n          'text/plain': \"Hello again, {user}!\\n\"\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-api-gateway:\n    type: yandex:ApiGateway\n    properties:\n      description: any description\n      labels:\n        label: label\n        empty-label:\n      spec: |\n        openapi: \"3.0.0\"\n        info:\n          version: 1.0.0\n          title: Test API\n        paths:\n          /hello:\n            get:\n              summary: Say hello\n              operationId: hello\n              parameters:\n                - name: user\n                  in: query\n                  description: User name to appear in greetings\n                  required: false\n                  schema:\n                    type: string\n                    default: 'world'\n              responses:\n                '200':\n                  description: Greeting\n                  content:\n                    'text/plain':\n                      schema:\n                        type: \"string\"\n              x-yc-apigateway-integration:\n                type: dummy\n                http_code: 200\n                http_headers:\n                  'Content-Type': \"text/plain\"\n                content:\n                  'text/plain': \"Hello again, {user}!\\n\"\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the Yandex Cloud API Gateway.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Yandex Cloud API Gateway.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Default domain for the Yandex API Gateway. Generated at creation time.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder ID for the Yandex Cloud API Gateway. If it is not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Cloud API Gateway.\n"
                },
                "logGroupId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "Yandex Cloud API Gateway name used to define API Gateway.\n"
                },
                "spec": {
                    "type": "string",
                    "description": "OpenAPI specification for Yandex API Gateway.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the Yandex API Gateway.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ApiGatewayTimeouts:ApiGatewayTimeouts"
                },
                "userDomains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of user domains attached to Yandex API Gateway.\n"
                }
            },
            "required": [
                "createdAt",
                "domain",
                "folderId",
                "logGroupId",
                "name",
                "spec",
                "status",
                "timeouts",
                "userDomains"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the Yandex Cloud API Gateway.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder ID for the Yandex Cloud API Gateway. If it is not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Cloud API Gateway.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Yandex Cloud API Gateway name used to define API Gateway.\n"
                },
                "spec": {
                    "type": "string",
                    "description": "OpenAPI specification for Yandex API Gateway.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ApiGatewayTimeouts:ApiGatewayTimeouts"
                }
            },
            "requiredInputs": [
                "spec",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiGateway resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the Yandex Cloud API Gateway.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Yandex Cloud API Gateway.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Default domain for the Yandex API Gateway. Generated at creation time.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID for the Yandex Cloud API Gateway. If it is not provided, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Yandex Cloud API Gateway.\n"
                    },
                    "logGroupId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Yandex Cloud API Gateway name used to define API Gateway.\n"
                    },
                    "spec": {
                        "type": "string",
                        "description": "OpenAPI specification for Yandex API Gateway.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Yandex API Gateway.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/ApiGatewayTimeouts:ApiGatewayTimeouts"
                    },
                    "userDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of user domains attached to Yandex API Gateway.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/cdnOriginGroup:CdnOriginGroup": {
            "description": "Allows management of [Yandex.Cloud CDN Origin Groups](https://cloud.yandex.ru/docs/cdn/concepts/origins).\n\n\u003e **_NOTE:_**  CDN provider must be activated prior usage of CDN resources, either via UI console or via yc cli command: ```yc cdn provider activate --folder-id \u003cfolder-id\u003e --type gcore```\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myGroup = new yandex.CdnOriginGroup(\"my_group\", {\n    origins: [\n        {\n            source: \"ya.ru\",\n        },\n        {\n            source: \"yandex.ru\",\n        },\n        {\n            source: \"goo.gl\",\n        },\n        {\n            backup: false,\n            source: \"amazon.com\",\n        },\n    ],\n    useNext: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_group = yandex.CdnOriginGroup(\"myGroup\",\n    origins=[\n        yandex.CdnOriginGroupOriginArgs(\n            source=\"ya.ru\",\n        ),\n        yandex.CdnOriginGroupOriginArgs(\n            source=\"yandex.ru\",\n        ),\n        yandex.CdnOriginGroupOriginArgs(\n            source=\"goo.gl\",\n        ),\n        yandex.CdnOriginGroupOriginArgs(\n            backup=False,\n            source=\"amazon.com\",\n        ),\n    ],\n    use_next=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myGroup = new Yandex.CdnOriginGroup(\"myGroup\", new()\n    {\n        Origins = new[]\n        {\n            new Yandex.Inputs.CdnOriginGroupOriginArgs\n            {\n                Source = \"ya.ru\",\n            },\n            new Yandex.Inputs.CdnOriginGroupOriginArgs\n            {\n                Source = \"yandex.ru\",\n            },\n            new Yandex.Inputs.CdnOriginGroupOriginArgs\n            {\n                Source = \"goo.gl\",\n            },\n            new Yandex.Inputs.CdnOriginGroupOriginArgs\n            {\n                Backup = false,\n                Source = \"amazon.com\",\n            },\n        },\n        UseNext = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewCdnOriginGroup(ctx, \"myGroup\", \u0026yandex.CdnOriginGroupArgs{\n\t\t\tOrigins: CdnOriginGroupOriginArray{\n\t\t\t\t\u0026CdnOriginGroupOriginArgs{\n\t\t\t\t\tSource: pulumi.String(\"ya.ru\"),\n\t\t\t\t},\n\t\t\t\t\u0026CdnOriginGroupOriginArgs{\n\t\t\t\t\tSource: pulumi.String(\"yandex.ru\"),\n\t\t\t\t},\n\t\t\t\t\u0026CdnOriginGroupOriginArgs{\n\t\t\t\t\tSource: pulumi.String(\"goo.gl\"),\n\t\t\t\t},\n\t\t\t\t\u0026CdnOriginGroupOriginArgs{\n\t\t\t\t\tBackup: pulumi.Bool(false),\n\t\t\t\t\tSource: pulumi.String(\"amazon.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUseNext: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.CdnOriginGroup;\nimport com.pulumi.yandex.CdnOriginGroupArgs;\nimport com.pulumi.yandex.inputs.CdnOriginGroupOriginArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myGroup = new CdnOriginGroup(\"myGroup\", CdnOriginGroupArgs.builder()        \n            .origins(            \n                CdnOriginGroupOriginArgs.builder()\n                    .source(\"ya.ru\")\n                    .build(),\n                CdnOriginGroupOriginArgs.builder()\n                    .source(\"yandex.ru\")\n                    .build(),\n                CdnOriginGroupOriginArgs.builder()\n                    .source(\"goo.gl\")\n                    .build(),\n                CdnOriginGroupOriginArgs.builder()\n                    .backup(false)\n                    .source(\"amazon.com\")\n                    .build())\n            .useNext(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myGroup:\n    type: yandex:CdnOriginGroup\n    properties:\n      origins:\n        - source: ya.ru\n        - source: yandex.ru\n        - source: goo.gl\n        - backup: false\n          source: amazon.com\n      useNext: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA origin group can be imported using any of these accepted formats\n\n```sh\n $ pulumi import yandex:index/cdnOriginGroup:CdnOriginGroup default origin_group_id\n```\n\n ",
            "properties": {
                "folderId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "CDN Origin Group name used to define device.\n"
                },
                "origins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/CdnOriginGroupOrigin:CdnOriginGroupOrigin"
                    }
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/CdnOriginGroupTimeouts:CdnOriginGroupTimeouts"
                },
                "useNext": {
                    "type": "boolean",
                    "description": "If the option is active (has true value), in case the origin responds with 4XX or 5XX codes, use the next origin from the list.\n"
                }
            },
            "required": [
                "folderId",
                "name",
                "origins",
                "timeouts"
            ],
            "inputProperties": {
                "folderId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "CDN Origin Group name used to define device.\n"
                },
                "origins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/CdnOriginGroupOrigin:CdnOriginGroupOrigin"
                    }
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/CdnOriginGroupTimeouts:CdnOriginGroupTimeouts"
                },
                "useNext": {
                    "type": "boolean",
                    "description": "If the option is active (has true value), in case the origin responds with 4XX or 5XX codes, use the next origin from the list.\n"
                }
            },
            "requiredInputs": [
                "origins",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CdnOriginGroup resources.\n",
                "properties": {
                    "folderId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "CDN Origin Group name used to define device.\n"
                    },
                    "origins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/CdnOriginGroupOrigin:CdnOriginGroupOrigin"
                        }
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/CdnOriginGroupTimeouts:CdnOriginGroupTimeouts"
                    },
                    "useNext": {
                        "type": "boolean",
                        "description": "If the option is active (has true value), in case the origin responds with 4XX or 5XX codes, use the next origin from the list.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/cdnResource:CdnResource": {
            "description": "Allows management of [Yandex.Cloud CDN Resource](https://cloud.yandex.ru/docs/cdn/concepts/resource).\n\n\u003e **_NOTE:_**  CDN provider must be activated prior usage of CDN resources, either via UI console or via yc cli command: ```yc cdn provider activate --folder-id \u003cfolder-id\u003e --type gcore```\n\n\n## Import\n\nA origin group can be imported using any of these accepted formats\n\n```sh\n $ pulumi import yandex:index/cdnResource:CdnResource default origin_group_id\n```\n\n ",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Flag to create Resource either in active or disabled state. True - the content from CDN is available to clients.\n"
                },
                "cname": {
                    "type": "string",
                    "description": "CDN endpoint CNAME, must be unique among resources.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the IoT Core Device\n"
                },
                "folderId": {
                    "type": "string"
                },
                "options": {
                    "$ref": "#/types/yandex:index/CdnResourceOptions:CdnResourceOptions",
                    "description": "CDN Resource settings and options to tune CDN edge behavior.\n"
                },
                "originGroupId": {
                    "type": "number"
                },
                "originGroupName": {
                    "type": "string"
                },
                "originProtocol": {
                    "type": "string"
                },
                "secondaryHostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of secondary hostname strings.\n"
                },
                "sslCertificate": {
                    "$ref": "#/types/yandex:index/CdnResourceSslCertificate:CdnResourceSslCertificate",
                    "description": "SSL certificate of CDN resource.\n---\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/CdnResourceTimeouts:CdnResourceTimeouts"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "required": [
                "cname",
                "createdAt",
                "folderId",
                "options",
                "timeouts",
                "updatedAt"
            ],
            "inputProperties": {
                "active": {
                    "type": "boolean",
                    "description": "Flag to create Resource either in active or disabled state. True - the content from CDN is available to clients.\n"
                },
                "cname": {
                    "type": "string",
                    "description": "CDN endpoint CNAME, must be unique among resources.\n"
                },
                "folderId": {
                    "type": "string"
                },
                "originGroupId": {
                    "type": "number"
                },
                "originGroupName": {
                    "type": "string"
                },
                "originProtocol": {
                    "type": "string"
                },
                "secondaryHostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "list of secondary hostname strings.\n"
                },
                "sslCertificate": {
                    "$ref": "#/types/yandex:index/CdnResourceSslCertificate:CdnResourceSslCertificate",
                    "description": "SSL certificate of CDN resource.\n---\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/CdnResourceTimeouts:CdnResourceTimeouts"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CdnResource resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Flag to create Resource either in active or disabled state. True - the content from CDN is available to clients.\n"
                    },
                    "cname": {
                        "type": "string",
                        "description": "CDN endpoint CNAME, must be unique among resources.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the IoT Core Device\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "options": {
                        "$ref": "#/types/yandex:index/CdnResourceOptions:CdnResourceOptions",
                        "description": "CDN Resource settings and options to tune CDN edge behavior.\n"
                    },
                    "originGroupId": {
                        "type": "number"
                    },
                    "originGroupName": {
                        "type": "string"
                    },
                    "originProtocol": {
                        "type": "string"
                    },
                    "secondaryHostnames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of secondary hostname strings.\n"
                    },
                    "sslCertificate": {
                        "$ref": "#/types/yandex:index/CdnResourceSslCertificate:CdnResourceSslCertificate",
                        "description": "SSL certificate of CDN resource.\n---\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/CdnResourceTimeouts:CdnResourceTimeouts"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/computeDisk:ComputeDisk": {
            "description": "Persistent disks are used for data storage and function similarly to physical hard and solid state drives.\n\nA disk can be attached or detached from the virtual machine and can be located locally. A disk can be moved between virtual machines within the same availability zone. Each disk can be attached to only one virtual machine at a time.\n\nFor more information about disks in Yandex.Cloud, see:\n\n* [Documentation](https://cloud.yandex.com/docs/compute/concepts/disk)\n* How-to Guides\n    * [Attach and detach a disk](https://cloud.yandex.com/docs/compute/concepts/disk#attach-detach)\n    * [Backup operation](https://cloud.yandex.com/docs/compute/concepts/disk#backup)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst defaultComputeDisk = new yandex.ComputeDisk(\"default\", {\n    imageId: \"ubuntu-16.04-v20180727\",\n    labels: {\n        environment: \"test\",\n    },\n    type: \"network-ssd\",\n    zone: \"ru-central1-a\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ndefault = yandex.ComputeDisk(\"default\",\n    image_id=\"ubuntu-16.04-v20180727\",\n    labels={\n        \"environment\": \"test\",\n    },\n    type=\"network-ssd\",\n    zone=\"ru-central1-a\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Yandex.ComputeDisk(\"default\", new()\n    {\n        ImageId = \"ubuntu-16.04-v20180727\",\n        Labels = \n        {\n            { \"environment\", \"test\" },\n        },\n        Type = \"network-ssd\",\n        Zone = \"ru-central1-a\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewComputeDisk(ctx, \"default\", \u0026yandex.ComputeDiskArgs{\n\t\t\tImageId: pulumi.String(\"ubuntu-16.04-v20180727\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"environment\": pulumi.String(\"test\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"network-ssd\"),\n\t\t\tZone: pulumi.String(\"ru-central1-a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ComputeDisk;\nimport com.pulumi.yandex.ComputeDiskArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new ComputeDisk(\"default\", ComputeDiskArgs.builder()        \n            .imageId(\"ubuntu-16.04-v20180727\")\n            .labels(Map.of(\"environment\", \"test\"))\n            .type(\"network-ssd\")\n            .zone(\"ru-central1-a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: yandex:ComputeDisk\n    properties:\n      imageId: ubuntu-16.04-v20180727\n      labels:\n        environment: test\n      type: network-ssd\n      zone: ru-central1-a\n```\n{{% /example %}}\n{{% example %}}\n### Non-Replicated Disk\n\n**Note**: Non-replicated disks are at the [Preview](https://cloud.yandex.com/docs/overview/concepts/launch-stages) \n          stage.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst _this = new yandex.ComputeDiskPlacementGroup(\"this\", {zone: \"ru-central1-b\"});\nconst nr = new yandex.ComputeDisk(\"nr\", {\n    size: 93,\n    type: \"network-ssd-nonreplicated\",\n    zone: \"ru-central1-b\",\n    diskPlacementPolicy: {\n        diskPlacementGroupId: _this.id,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nthis = yandex.ComputeDiskPlacementGroup(\"this\", zone=\"ru-central1-b\")\nnr = yandex.ComputeDisk(\"nr\",\n    size=93,\n    type=\"network-ssd-nonreplicated\",\n    zone=\"ru-central1-b\",\n    disk_placement_policy=yandex.ComputeDiskDiskPlacementPolicyArgs(\n        disk_placement_group_id=this.id,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Yandex.ComputeDiskPlacementGroup(\"this\", new()\n    {\n        Zone = \"ru-central1-b\",\n    });\n\n    var nr = new Yandex.ComputeDisk(\"nr\", new()\n    {\n        Size = 93,\n        Type = \"network-ssd-nonreplicated\",\n        Zone = \"ru-central1-b\",\n        DiskPlacementPolicy = new Yandex.Inputs.ComputeDiskDiskPlacementPolicyArgs\n        {\n            DiskPlacementGroupId = @this.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthis, err := yandex.NewComputeDiskPlacementGroup(ctx, \"this\", \u0026yandex.ComputeDiskPlacementGroupArgs{\n\t\t\tZone: pulumi.String(\"ru-central1-b\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewComputeDisk(ctx, \"nr\", \u0026yandex.ComputeDiskArgs{\n\t\t\tSize: pulumi.Float64(93),\n\t\t\tType: pulumi.String(\"network-ssd-nonreplicated\"),\n\t\t\tZone: pulumi.String(\"ru-central1-b\"),\n\t\t\tDiskPlacementPolicy: \u0026ComputeDiskDiskPlacementPolicyArgs{\n\t\t\t\tDiskPlacementGroupId: this.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ComputeDiskPlacementGroup;\nimport com.pulumi.yandex.ComputeDiskPlacementGroupArgs;\nimport com.pulumi.yandex.ComputeDisk;\nimport com.pulumi.yandex.ComputeDiskArgs;\nimport com.pulumi.yandex.inputs.ComputeDiskDiskPlacementPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new ComputeDiskPlacementGroup(\"this\", ComputeDiskPlacementGroupArgs.builder()        \n            .zone(\"ru-central1-b\")\n            .build());\n\n        var nr = new ComputeDisk(\"nr\", ComputeDiskArgs.builder()        \n            .size(93)\n            .type(\"network-ssd-nonreplicated\")\n            .zone(\"ru-central1-b\")\n            .diskPlacementPolicy(ComputeDiskDiskPlacementPolicyArgs.builder()\n                .diskPlacementGroupId(this_.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  nr:\n    type: yandex:ComputeDisk\n    properties:\n      size: 93\n      # NB size must be divisible by 93\n      type: network-ssd-nonreplicated\n      zone: ru-central1-b\n      diskPlacementPolicy:\n        diskPlacementGroupId: ${this.id}\n  this:\n    type: yandex:ComputeDiskPlacementGroup\n    properties:\n      zone: ru-central1-b\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA disk can be imported using any of these accepted formats\n\n```sh\n $ pulumi import yandex:index/computeDisk:ComputeDisk default disk_id\n```\n\n ",
            "properties": {
                "allowRecreate": {
                    "type": "boolean"
                },
                "blockSize": {
                    "type": "number",
                    "description": "Block size of the disk, specified in bytes.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the disk.\n"
                },
                "description": {
                    "type": "string",
                    "description": "-\n(Optional) Description of the disk. Provide this property when\nyou create a resource.\n"
                },
                "diskPlacementPolicy": {
                    "$ref": "#/types/yandex:index/ComputeDiskDiskPlacementPolicy:ComputeDiskDiskPlacementPolicy",
                    "description": "Disk placement policy configuration. The structure is documented below.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "(Optional) The ID of the folder that the disk belongs to.\nIf it is not provided, the default provider folder is used.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The source image to use for disk creation.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this disk. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the disk. Provide this property when\nyou create a resource.\n"
                },
                "productIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "number",
                    "description": "Size of the persistent disk, specified in GB. You can specify this\nfield when creating a persistent disk using the `image_id` or `snapshot_id`\nparameter, or specify it alone to create an empty persistent disk.\nIf you specify this field along with `image_id` or `snapshot_id`,\nthe size value must not be less than the size of the source image\nor the size of the snapshot.\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "The source snapshot to use for disk creation.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the disk.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ComputeDiskTimeouts:ComputeDiskTimeouts"
                },
                "type": {
                    "type": "string",
                    "description": "Type of disk to create. Provide this when creating a disk.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Availability zone where the disk will reside.\n"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "productIds",
                "status",
                "timeouts",
                "zone"
            ],
            "inputProperties": {
                "allowRecreate": {
                    "type": "boolean"
                },
                "blockSize": {
                    "type": "number",
                    "description": "Block size of the disk, specified in bytes.\n"
                },
                "description": {
                    "type": "string",
                    "description": "-\n(Optional) Description of the disk. Provide this property when\nyou create a resource.\n"
                },
                "diskPlacementPolicy": {
                    "$ref": "#/types/yandex:index/ComputeDiskDiskPlacementPolicy:ComputeDiskDiskPlacementPolicy",
                    "description": "Disk placement policy configuration. The structure is documented below.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "(Optional) The ID of the folder that the disk belongs to.\nIf it is not provided, the default provider folder is used.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "The source image to use for disk creation.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this disk. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the disk. Provide this property when\nyou create a resource.\n"
                },
                "size": {
                    "type": "number",
                    "description": "Size of the persistent disk, specified in GB. You can specify this\nfield when creating a persistent disk using the `image_id` or `snapshot_id`\nparameter, or specify it alone to create an empty persistent disk.\nIf you specify this field along with `image_id` or `snapshot_id`,\nthe size value must not be less than the size of the source image\nor the size of the snapshot.\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "The source snapshot to use for disk creation.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ComputeDiskTimeouts:ComputeDiskTimeouts"
                },
                "type": {
                    "type": "string",
                    "description": "Type of disk to create. Provide this when creating a disk.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Availability zone where the disk will reside.\n"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ComputeDisk resources.\n",
                "properties": {
                    "allowRecreate": {
                        "type": "boolean"
                    },
                    "blockSize": {
                        "type": "number",
                        "description": "Block size of the disk, specified in bytes.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the disk.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "-\n(Optional) Description of the disk. Provide this property when\nyou create a resource.\n"
                    },
                    "diskPlacementPolicy": {
                        "$ref": "#/types/yandex:index/ComputeDiskDiskPlacementPolicy:ComputeDiskDiskPlacementPolicy",
                        "description": "Disk placement policy configuration. The structure is documented below.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "(Optional) The ID of the folder that the disk belongs to.\nIf it is not provided, the default provider folder is used.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The source image to use for disk creation.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this disk. A list of key/value pairs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the disk. Provide this property when\nyou create a resource.\n"
                    },
                    "productIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "size": {
                        "type": "number",
                        "description": "Size of the persistent disk, specified in GB. You can specify this\nfield when creating a persistent disk using the `image_id` or `snapshot_id`\nparameter, or specify it alone to create an empty persistent disk.\nIf you specify this field along with `image_id` or `snapshot_id`,\nthe size value must not be less than the size of the source image\nor the size of the snapshot.\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "The source snapshot to use for disk creation.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the disk.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/ComputeDiskTimeouts:ComputeDiskTimeouts"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of disk to create. Provide this when creating a disk.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "Availability zone where the disk will reside.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/computeDiskPlacementGroup:ComputeDiskPlacementGroup": {
            "description": "A Disk Placement Group resource. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/compute/concepts/disk#nr-disks).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst group1 = new yandex.ComputeDiskPlacementGroup(\"group1\", {\n    description: \"my description\",\n    folderId: \"abc*********123\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ngroup1 = yandex.ComputeDiskPlacementGroup(\"group1\",\n    description=\"my description\",\n    folder_id=\"abc*********123\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var group1 = new Yandex.ComputeDiskPlacementGroup(\"group1\", new()\n    {\n        Description = \"my description\",\n        FolderId = \"abc*********123\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewComputeDiskPlacementGroup(ctx, \"group1\", \u0026yandex.ComputeDiskPlacementGroupArgs{\n\t\t\tDescription: pulumi.String(\"my description\"),\n\t\t\tFolderId:    pulumi.String(\"abc*********123\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ComputeDiskPlacementGroup;\nimport com.pulumi.yandex.ComputeDiskPlacementGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var group1 = new ComputeDiskPlacementGroup(\"group1\", ComputeDiskPlacementGroupArgs.builder()        \n            .description(\"my description\")\n            .folderId(\"abc*********123\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  group1:\n    type: yandex:ComputeDiskPlacementGroup\n    properties:\n      description: my description\n      folderId: abc*********123\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the Disk Placement Group.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Disk Placement Group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Disk Placement Group.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the Disk Placement Group.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ComputeDiskPlacementGroupTimeouts:ComputeDiskPlacementGroupTimeouts"
                },
                "zone": {
                    "type": "string",
                    "description": "ID of the zone where the Disk Placement Group resides.\n"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description of the Disk Placement Group.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Disk Placement Group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Disk Placement Group.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ComputeDiskPlacementGroupTimeouts:ComputeDiskPlacementGroupTimeouts"
                },
                "zone": {
                    "type": "string",
                    "description": "ID of the zone where the Disk Placement Group resides.\n"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ComputeDiskPlacementGroup resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the Disk Placement Group.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Disk Placement Group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Disk Placement Group.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Disk Placement Group.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/ComputeDiskPlacementGroupTimeouts:ComputeDiskPlacementGroupTimeouts"
                    },
                    "zone": {
                        "type": "string",
                        "description": "ID of the zone where the Disk Placement Group resides.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/computeImage:ComputeImage": {
            "description": "Creates a virtual machine image resource for the Yandex Compute Cloud service from an existing\ntarball. For more information, see [the official documentation](https://cloud.yandex.com/docs/compute/concepts/image).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo_image = new yandex.ComputeImage(\"foo-image\", {\n    sourceUrl: \"https://storage.yandexcloud.net/lucky-images/kube-it.img\",\n});\nconst vm = new yandex.ComputeInstance(\"vm\", {\n    bootDisk: {\n        initializeParams: {\n            imageId: foo_image.id,\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_image = yandex.ComputeImage(\"foo-image\", source_url=\"https://storage.yandexcloud.net/lucky-images/kube-it.img\")\nvm = yandex.ComputeInstance(\"vm\", boot_disk=yandex.ComputeInstanceBootDiskArgs(\n    initialize_params=yandex.ComputeInstanceBootDiskInitializeParamsArgs(\n        image_id=foo_image.id,\n    ),\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo_image = new Yandex.ComputeImage(\"foo-image\", new()\n    {\n        SourceUrl = \"https://storage.yandexcloud.net/lucky-images/kube-it.img\",\n    });\n\n    var vm = new Yandex.ComputeInstance(\"vm\", new()\n    {\n        BootDisk = new Yandex.Inputs.ComputeInstanceBootDiskArgs\n        {\n            InitializeParams = new Yandex.Inputs.ComputeInstanceBootDiskInitializeParamsArgs\n            {\n                ImageId = foo_image.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewComputeImage(ctx, \"foo-image\", \u0026yandex.ComputeImageArgs{\n\t\t\tSourceUrl: pulumi.String(\"https://storage.yandexcloud.net/lucky-images/kube-it.img\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewComputeInstance(ctx, \"vm\", \u0026yandex.ComputeInstanceArgs{\n\t\t\tBootDisk: \u0026ComputeInstanceBootDiskArgs{\n\t\t\t\tInitializeParams: \u0026ComputeInstanceBootDiskInitializeParamsArgs{\n\t\t\t\t\tImageId: foo_image.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ComputeImage;\nimport com.pulumi.yandex.ComputeImageArgs;\nimport com.pulumi.yandex.ComputeInstance;\nimport com.pulumi.yandex.ComputeInstanceArgs;\nimport com.pulumi.yandex.inputs.ComputeInstanceBootDiskArgs;\nimport com.pulumi.yandex.inputs.ComputeInstanceBootDiskInitializeParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo_image = new ComputeImage(\"foo-image\", ComputeImageArgs.builder()        \n            .sourceUrl(\"https://storage.yandexcloud.net/lucky-images/kube-it.img\")\n            .build());\n\n        var vm = new ComputeInstance(\"vm\", ComputeInstanceArgs.builder()        \n            .bootDisk(ComputeInstanceBootDiskArgs.builder()\n                .initializeParams(ComputeInstanceBootDiskInitializeParamsArgs.builder()\n                    .imageId(foo_image.id())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo-image:\n    type: yandex:ComputeImage\n    properties:\n      sourceUrl: https://storage.yandexcloud.net/lucky-images/kube-it.img\n  vm:\n    type: yandex:ComputeInstance\n    properties:\n      bootDisk:\n        initializeParams:\n          imageId: ${[\"foo-image\"].id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA VM image can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/computeImage:ComputeImage web-image image_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the image.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of the image. Provide this property when\nyou create a resource.\n"
                },
                "family": {
                    "type": "string",
                    "description": "The name of the image family to which this image belongs.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the image.\n"
                },
                "minDiskSize": {
                    "type": "number",
                    "description": "Minimum size in GB of the disk that will be created from this image.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the disk.\n"
                },
                "osType": {
                    "type": "string",
                    "description": "Operating system type that is contained in the image. Possible values: \"LINUX\", \"WINDOWS\".\n"
                },
                "pooled": {
                    "type": "boolean",
                    "description": "Optimize the image to create a disk.\n"
                },
                "productIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "License IDs that indicate which licenses are\nattached to this image.\n"
                },
                "size": {
                    "type": "number",
                    "description": "The size of the image, specified in GB.\n"
                },
                "sourceDisk": {
                    "type": "string",
                    "description": "The ID of a disk to use as the source of the\nimage. Changing this ID forces a new resource to be created.\n"
                },
                "sourceFamily": {
                    "type": "string",
                    "description": "The name of the family to use as the source of the new image.\nThe ID of the latest image is taken from the \"standard-images\" folder. Changing the family forces\na new resource to be created.\n"
                },
                "sourceImage": {
                    "type": "string",
                    "description": "The ID of an existing image to use as the source of the\nimage. Changing this ID forces a new resource to be created.\n"
                },
                "sourceSnapshot": {
                    "type": "string",
                    "description": "The ID of a snapshot to use as the source of the\nimage. Changing this ID forces a new resource to be created.\n"
                },
                "sourceUrl": {
                    "type": "string",
                    "description": "The URL to use as the source of the\nimage. Changing this URL forces a new resource to be created.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the image.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ComputeImageTimeouts:ComputeImageTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "minDiskSize",
                "name",
                "osType",
                "pooled",
                "productIds",
                "size",
                "sourceDisk",
                "sourceFamily",
                "sourceImage",
                "sourceSnapshot",
                "sourceUrl",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "An optional description of the image. Provide this property when\nyou create a resource.\n"
                },
                "family": {
                    "type": "string",
                    "description": "The name of the image family to which this image belongs.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the image.\n"
                },
                "minDiskSize": {
                    "type": "number",
                    "description": "Minimum size in GB of the disk that will be created from this image.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the disk.\n"
                },
                "osType": {
                    "type": "string",
                    "description": "Operating system type that is contained in the image. Possible values: \"LINUX\", \"WINDOWS\".\n"
                },
                "pooled": {
                    "type": "boolean",
                    "description": "Optimize the image to create a disk.\n"
                },
                "productIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "License IDs that indicate which licenses are\nattached to this image.\n"
                },
                "sourceDisk": {
                    "type": "string",
                    "description": "The ID of a disk to use as the source of the\nimage. Changing this ID forces a new resource to be created.\n"
                },
                "sourceFamily": {
                    "type": "string",
                    "description": "The name of the family to use as the source of the new image.\nThe ID of the latest image is taken from the \"standard-images\" folder. Changing the family forces\na new resource to be created.\n"
                },
                "sourceImage": {
                    "type": "string",
                    "description": "The ID of an existing image to use as the source of the\nimage. Changing this ID forces a new resource to be created.\n"
                },
                "sourceSnapshot": {
                    "type": "string",
                    "description": "The ID of a snapshot to use as the source of the\nimage. Changing this ID forces a new resource to be created.\n"
                },
                "sourceUrl": {
                    "type": "string",
                    "description": "The URL to use as the source of the\nimage. Changing this URL forces a new resource to be created.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ComputeImageTimeouts:ComputeImageTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ComputeImage resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the image.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of the image. Provide this property when\nyou create a resource.\n"
                    },
                    "family": {
                        "type": "string",
                        "description": "The name of the image family to which this image belongs.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the image.\n"
                    },
                    "minDiskSize": {
                        "type": "number",
                        "description": "Minimum size in GB of the disk that will be created from this image.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the disk.\n"
                    },
                    "osType": {
                        "type": "string",
                        "description": "Operating system type that is contained in the image. Possible values: \"LINUX\", \"WINDOWS\".\n"
                    },
                    "pooled": {
                        "type": "boolean",
                        "description": "Optimize the image to create a disk.\n"
                    },
                    "productIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "License IDs that indicate which licenses are\nattached to this image.\n"
                    },
                    "size": {
                        "type": "number",
                        "description": "The size of the image, specified in GB.\n"
                    },
                    "sourceDisk": {
                        "type": "string",
                        "description": "The ID of a disk to use as the source of the\nimage. Changing this ID forces a new resource to be created.\n"
                    },
                    "sourceFamily": {
                        "type": "string",
                        "description": "The name of the family to use as the source of the new image.\nThe ID of the latest image is taken from the \"standard-images\" folder. Changing the family forces\na new resource to be created.\n"
                    },
                    "sourceImage": {
                        "type": "string",
                        "description": "The ID of an existing image to use as the source of the\nimage. Changing this ID forces a new resource to be created.\n"
                    },
                    "sourceSnapshot": {
                        "type": "string",
                        "description": "The ID of a snapshot to use as the source of the\nimage. Changing this ID forces a new resource to be created.\n"
                    },
                    "sourceUrl": {
                        "type": "string",
                        "description": "The URL to use as the source of the\nimage. Changing this URL forces a new resource to be created.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the image.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/ComputeImageTimeouts:ComputeImageTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/computeInstance:ComputeInstance": {
            "description": "A VM instance resource. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/compute/concepts/vm).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"foo\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"foo\", {\n    networkId: fooVpcNetwork.id,\n    zone: \"ru-central1-a\",\n});\nconst defaultComputeInstance = new yandex.ComputeInstance(\"default\", {\n    bootDisk: {\n        initializeParams: {\n            imageId: \"image_id\",\n        },\n    },\n    metadata: {\n        foo: \"bar\",\n        \"ssh-keys\": `ubuntu:${fs.readFileSync(\"~/.ssh/id_rsa.pub\", \"utf-8\")}`,\n    },\n    networkInterfaces: [{\n        subnetId: fooVpcSubnet.id,\n    }],\n    platformId: \"standard-v1\",\n    resources: {\n        cores: 2,\n        memory: 4,\n    },\n    zone: \"ru-central1-a\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    network_id=foo_vpc_network.id,\n    zone=\"ru-central1-a\")\ndefault = yandex.ComputeInstance(\"default\",\n    boot_disk=yandex.ComputeInstanceBootDiskArgs(\n        initialize_params=yandex.ComputeInstanceBootDiskInitializeParamsArgs(\n            image_id=\"image_id\",\n        ),\n    ),\n    metadata={\n        \"foo\": \"bar\",\n        \"ssh-keys\": f\"ubuntu:{(lambda path: open(path).read())('~/.ssh/id_rsa.pub')}\",\n    },\n    network_interfaces=[yandex.ComputeInstanceNetworkInterfaceArgs(\n        subnet_id=foo_vpc_subnet.id,\n    )],\n    platform_id=\"standard-v1\",\n    resources=yandex.ComputeInstanceResourcesArgs(\n        cores=2,\n        memory=4,\n    ),\n    zone=\"ru-central1-a\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        NetworkId = fooVpcNetwork.Id,\n        Zone = \"ru-central1-a\",\n    });\n\n    var @default = new Yandex.ComputeInstance(\"default\", new()\n    {\n        BootDisk = new Yandex.Inputs.ComputeInstanceBootDiskArgs\n        {\n            InitializeParams = new Yandex.Inputs.ComputeInstanceBootDiskInitializeParamsArgs\n            {\n                ImageId = \"image_id\",\n            },\n        },\n        Metadata = \n        {\n            { \"foo\", \"bar\" },\n            { \"ssh-keys\", $\"ubuntu:{File.ReadAllText(\"~/.ssh/id_rsa.pub\")}\" },\n        },\n        NetworkInterfaces = new[]\n        {\n            new Yandex.Inputs.ComputeInstanceNetworkInterfaceArgs\n            {\n                SubnetId = fooVpcSubnet.Id,\n            },\n        },\n        PlatformId = \"standard-v1\",\n        Resources = new Yandex.Inputs.ComputeInstanceResourcesArgs\n        {\n            Cores = 2,\n            Memory = 4,\n        },\n        Zone = \"ru-central1-a\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tZone:      pulumi.String(\"ru-central1-a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewComputeInstance(ctx, \"default\", \u0026yandex.ComputeInstanceArgs{\n\t\t\tBootDisk: \u0026ComputeInstanceBootDiskArgs{\n\t\t\t\tInitializeParams: \u0026ComputeInstanceBootDiskInitializeParamsArgs{\n\t\t\t\t\tImageId: pulumi.String(\"image_id\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMetadata: pulumi.StringMap{\n\t\t\t\t\"foo\":      pulumi.String(\"bar\"),\n\t\t\t\t\"ssh-keys\": pulumi.String(fmt.Sprintf(\"ubuntu:%v\", readFileOrPanic(\"~/.ssh/id_rsa.pub\"))),\n\t\t\t},\n\t\t\tNetworkInterfaces: ComputeInstanceNetworkInterfaceArray{\n\t\t\t\t\u0026ComputeInstanceNetworkInterfaceArgs{\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPlatformId: pulumi.String(\"standard-v1\"),\n\t\t\tResources: \u0026ComputeInstanceResourcesArgs{\n\t\t\t\tCores:  pulumi.Float64(2),\n\t\t\t\tMemory: pulumi.Float64(4),\n\t\t\t},\n\t\t\tZone: pulumi.String(\"ru-central1-a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.ComputeInstance;\nimport com.pulumi.yandex.ComputeInstanceArgs;\nimport com.pulumi.yandex.inputs.ComputeInstanceBootDiskArgs;\nimport com.pulumi.yandex.inputs.ComputeInstanceBootDiskInitializeParamsArgs;\nimport com.pulumi.yandex.inputs.ComputeInstanceNetworkInterfaceArgs;\nimport com.pulumi.yandex.inputs.ComputeInstanceResourcesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .zone(\"ru-central1-a\")\n            .build());\n\n        var default_ = new ComputeInstance(\"default\", ComputeInstanceArgs.builder()        \n            .bootDisk(ComputeInstanceBootDiskArgs.builder()\n                .initializeParams(ComputeInstanceBootDiskInitializeParamsArgs.builder()\n                    .imageId(\"image_id\")\n                    .build())\n                .build())\n            .metadata(Map.ofEntries(\n                Map.entry(\"foo\", \"bar\"),\n                Map.entry(\"ssh-keys\", String.format(\"ubuntu:%s\", Files.readString(Paths.get(\"~/.ssh/id_rsa.pub\"))))\n            ))\n            .networkInterfaces(ComputeInstanceNetworkInterfaceArgs.builder()\n                .subnetId(fooVpcSubnet.id())\n                .build())\n            .platformId(\"standard-v1\")\n            .resources(ComputeInstanceResourcesArgs.builder()\n                .cores(2)\n                .memory(4)\n                .build())\n            .zone(\"ru-central1-a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: yandex:ComputeInstance\n    properties:\n      bootDisk:\n        initializeParams:\n          imageId: image_id\n      metadata:\n        foo: bar\n        ssh-keys:\n          fn::join:\n            -\n            - - 'ubuntu:'\n              - fn::readFile: ~/.ssh/id_rsa.pub\n      networkInterfaces:\n        - subnetId: ${fooVpcSubnet.id}\n      platformId: standard-v1\n      resources:\n        cores: 2\n        memory: 4\n      zone: ru-central1-a\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      zone: ru-central1-a\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nInstances can be imported using the `ID` of an instance, e.g.\n\n```sh\n $ pulumi import yandex:index/computeInstance:ComputeInstance default instance_id\n```\n\n ",
            "properties": {
                "allowRecreate": {
                    "type": "boolean"
                },
                "allowStoppingForUpdate": {
                    "type": "boolean"
                },
                "bootDisk": {
                    "$ref": "#/types/yandex:index/ComputeInstanceBootDisk:ComputeInstanceBootDisk",
                    "description": "The boot disk for the instance. The structure is documented below.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the instance.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the boot disk.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "DNS record FQDN (must have a dot at the end).\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Host name for the instance. This field is used to generate the instance `fqdn` value. \nThe host name must be unique within the network and region. If not specified, the host name will be equal\nto `id` of the instance and `fqdn` will be `\u003cid\u003e.auto.internal`.\nOtherwise FQDN will be `\u003chostname\u003e.\u003cregion_id\u003e.internal`.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the instance.\n"
                },
                "localDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceLocalDisk:ComputeInstanceLocalDisk"
                    },
                    "description": "List of local disks that are attached to the instance. Structure is documented below.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Metadata key/value pairs to make available from\nwithin the instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the boot disk.\n"
                },
                "networkAccelerationType": {
                    "type": "string",
                    "description": "Type of network acceleration. The default is `standard`. Values: `standard`, `software_accelerated`\n"
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceNetworkInterface:ComputeInstanceNetworkInterface"
                    },
                    "description": "Networks to attach to the instance. This can\nbe specified multiple times. The structure is documented below.\n"
                },
                "placementPolicy": {
                    "$ref": "#/types/yandex:index/ComputeInstancePlacementPolicy:ComputeInstancePlacementPolicy",
                    "description": "The placement policy configuration. The structure is documented below.\n"
                },
                "platformId": {
                    "type": "string",
                    "description": "The type of virtual machine to create. The default is 'standard-v1'.\n"
                },
                "resources": {
                    "$ref": "#/types/yandex:index/ComputeInstanceResources:ComputeInstanceResources",
                    "description": "Compute resources that are allocated for the instance. The structure is documented below.\n"
                },
                "schedulingPolicy": {
                    "$ref": "#/types/yandex:index/ComputeInstanceSchedulingPolicy:ComputeInstanceSchedulingPolicy",
                    "description": "Scheduling policy configuration. The structure is documented below.\n"
                },
                "secondaryDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceSecondaryDisk:ComputeInstanceSecondaryDisk"
                    },
                    "description": "A list of disks to attach to the instance. The structure is documented below.\n**Note**: The `allow_stopping_for_update` property must be set to true in order to update this structure.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "ID of the service account authorized for this instance.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of this instance.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ComputeInstanceTimeouts:ComputeInstanceTimeouts"
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the virtual machine will be created. If it is not provided,\nthe default provider folder is used.\n"
                }
            },
            "required": [
                "bootDisk",
                "createdAt",
                "folderId",
                "fqdn",
                "hostname",
                "name",
                "networkInterfaces",
                "resources",
                "serviceAccountId",
                "status",
                "timeouts",
                "zone"
            ],
            "inputProperties": {
                "allowRecreate": {
                    "type": "boolean"
                },
                "allowStoppingForUpdate": {
                    "type": "boolean"
                },
                "bootDisk": {
                    "$ref": "#/types/yandex:index/ComputeInstanceBootDisk:ComputeInstanceBootDisk",
                    "description": "The boot disk for the instance. The structure is documented below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the boot disk.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "hostname": {
                    "type": "string",
                    "description": "Host name for the instance. This field is used to generate the instance `fqdn` value. \nThe host name must be unique within the network and region. If not specified, the host name will be equal\nto `id` of the instance and `fqdn` will be `\u003cid\u003e.auto.internal`.\nOtherwise FQDN will be `\u003chostname\u003e.\u003cregion_id\u003e.internal`.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the instance.\n"
                },
                "localDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceLocalDisk:ComputeInstanceLocalDisk"
                    },
                    "description": "List of local disks that are attached to the instance. Structure is documented below.\n"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Metadata key/value pairs to make available from\nwithin the instance.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the boot disk.\n"
                },
                "networkAccelerationType": {
                    "type": "string",
                    "description": "Type of network acceleration. The default is `standard`. Values: `standard`, `software_accelerated`\n"
                },
                "networkInterfaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceNetworkInterface:ComputeInstanceNetworkInterface"
                    },
                    "description": "Networks to attach to the instance. This can\nbe specified multiple times. The structure is documented below.\n"
                },
                "placementPolicy": {
                    "$ref": "#/types/yandex:index/ComputeInstancePlacementPolicy:ComputeInstancePlacementPolicy",
                    "description": "The placement policy configuration. The structure is documented below.\n"
                },
                "platformId": {
                    "type": "string",
                    "description": "The type of virtual machine to create. The default is 'standard-v1'.\n"
                },
                "resources": {
                    "$ref": "#/types/yandex:index/ComputeInstanceResources:ComputeInstanceResources",
                    "description": "Compute resources that are allocated for the instance. The structure is documented below.\n"
                },
                "schedulingPolicy": {
                    "$ref": "#/types/yandex:index/ComputeInstanceSchedulingPolicy:ComputeInstanceSchedulingPolicy",
                    "description": "Scheduling policy configuration. The structure is documented below.\n"
                },
                "secondaryDisks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceSecondaryDisk:ComputeInstanceSecondaryDisk"
                    },
                    "description": "A list of disks to attach to the instance. The structure is documented below.\n**Note**: The `allow_stopping_for_update` property must be set to true in order to update this structure.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "ID of the service account authorized for this instance.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ComputeInstanceTimeouts:ComputeInstanceTimeouts"
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the virtual machine will be created. If it is not provided,\nthe default provider folder is used.\n"
                }
            },
            "requiredInputs": [
                "bootDisk",
                "networkInterfaces",
                "resources",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ComputeInstance resources.\n",
                "properties": {
                    "allowRecreate": {
                        "type": "boolean"
                    },
                    "allowStoppingForUpdate": {
                        "type": "boolean"
                    },
                    "bootDisk": {
                        "$ref": "#/types/yandex:index/ComputeInstanceBootDisk:ComputeInstanceBootDisk",
                        "description": "The boot disk for the instance. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the instance.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the boot disk.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "DNS record FQDN (must have a dot at the end).\n"
                    },
                    "hostname": {
                        "type": "string",
                        "description": "Host name for the instance. This field is used to generate the instance `fqdn` value. \nThe host name must be unique within the network and region. If not specified, the host name will be equal\nto `id` of the instance and `fqdn` will be `\u003cid\u003e.auto.internal`.\nOtherwise FQDN will be `\u003chostname\u003e.\u003cregion_id\u003e.internal`.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the instance.\n"
                    },
                    "localDisks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/ComputeInstanceLocalDisk:ComputeInstanceLocalDisk"
                        },
                        "description": "List of local disks that are attached to the instance. Structure is documented below.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Metadata key/value pairs to make available from\nwithin the instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the boot disk.\n"
                    },
                    "networkAccelerationType": {
                        "type": "string",
                        "description": "Type of network acceleration. The default is `standard`. Values: `standard`, `software_accelerated`\n"
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/ComputeInstanceNetworkInterface:ComputeInstanceNetworkInterface"
                        },
                        "description": "Networks to attach to the instance. This can\nbe specified multiple times. The structure is documented below.\n"
                    },
                    "placementPolicy": {
                        "$ref": "#/types/yandex:index/ComputeInstancePlacementPolicy:ComputeInstancePlacementPolicy",
                        "description": "The placement policy configuration. The structure is documented below.\n"
                    },
                    "platformId": {
                        "type": "string",
                        "description": "The type of virtual machine to create. The default is 'standard-v1'.\n"
                    },
                    "resources": {
                        "$ref": "#/types/yandex:index/ComputeInstanceResources:ComputeInstanceResources",
                        "description": "Compute resources that are allocated for the instance. The structure is documented below.\n"
                    },
                    "schedulingPolicy": {
                        "$ref": "#/types/yandex:index/ComputeInstanceSchedulingPolicy:ComputeInstanceSchedulingPolicy",
                        "description": "Scheduling policy configuration. The structure is documented below.\n"
                    },
                    "secondaryDisks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/ComputeInstanceSecondaryDisk:ComputeInstanceSecondaryDisk"
                        },
                        "description": "A list of disks to attach to the instance. The structure is documented below.\n**Note**: The `allow_stopping_for_update` property must be set to true in order to update this structure.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "ID of the service account authorized for this instance.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of this instance.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/ComputeInstanceTimeouts:ComputeInstanceTimeouts"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The availability zone where the virtual machine will be created. If it is not provided,\nthe default provider folder is used.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/computeInstanceGroup:ComputeInstanceGroup": {
            "description": "An Instance group resource. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/compute/concepts/instance-groups/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst group1 = new yandex.ComputeInstanceGroup(\"group1\", {\n    allocationPolicy: {\n        zones: [\"ru-central1-a\"],\n    },\n    deletionProtection: true,\n    deployPolicy: {\n        maxCreating: 2,\n        maxDeleting: 2,\n        maxExpansion: 2,\n        maxUnavailable: 2,\n    },\n    folderId: yandex_resourcemanager_folder_test_folder.id,\n    instanceTemplate: {\n        bootDisk: {\n            initializeParams: {\n                imageId: yandex_compute_image_ubuntu.id,\n                size: 4,\n            },\n            mode: \"READ_WRITE\",\n        },\n        labels: {\n            label1: \"label1-value\",\n            label2: \"label2-value\",\n        },\n        metadata: {\n            foo: \"bar\",\n            \"ssh-keys\": `ubuntu:${fs.readFileSync(\"~/.ssh/id_rsa.pub\", \"utf-8\")}`,\n        },\n        networkInterfaces: [{\n            networkId: yandex_vpc_network_my_inst_group_network.id,\n            subnetIds: [yandex_vpc_subnet_my_inst_group_subnet.id],\n        }],\n        networkSettings: [{\n            type: \"STANDARD\",\n        }],\n        platformId: \"standard-v1\",\n        resources: {\n            cores: 2,\n            memory: 2,\n        },\n    },\n    scalePolicy: {\n        fixedScale: {\n            size: 3,\n        },\n    },\n    serviceAccountId: yandex_iam_service_account_test_account.id,\n    variables: {\n        test_key1: \"test_value1\",\n        test_key2: \"test_value2\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ngroup1 = yandex.ComputeInstanceGroup(\"group1\",\n    allocation_policy=yandex.ComputeInstanceGroupAllocationPolicyArgs(\n        zones=[\"ru-central1-a\"],\n    ),\n    deletion_protection=True,\n    deploy_policy=yandex.ComputeInstanceGroupDeployPolicyArgs(\n        max_creating=2,\n        max_deleting=2,\n        max_expansion=2,\n        max_unavailable=2,\n    ),\n    folder_id=data[\"yandex_resourcemanager_folder\"][\"test_folder\"][\"id\"],\n    instance_template=yandex.ComputeInstanceGroupInstanceTemplateArgs(\n        boot_disk=yandex.ComputeInstanceGroupInstanceTemplateBootDiskArgs(\n            initialize_params=yandex.ComputeInstanceGroupInstanceTemplateBootDiskInitializeParamsArgs(\n                image_id=data[\"yandex_compute_image\"][\"ubuntu\"][\"id\"],\n                size=4,\n            ),\n            mode=\"READ_WRITE\",\n        ),\n        labels={\n            \"label1\": \"label1-value\",\n            \"label2\": \"label2-value\",\n        },\n        metadata={\n            \"foo\": \"bar\",\n            \"ssh-keys\": f\"ubuntu:{(lambda path: open(path).read())('~/.ssh/id_rsa.pub')}\",\n        },\n        network_interfaces=[yandex.ComputeInstanceGroupInstanceTemplateNetworkInterfaceArgs(\n            network_id=yandex_vpc_network[\"my-inst-group-network\"][\"id\"],\n            subnet_ids=[yandex_vpc_subnet[\"my-inst-group-subnet\"][\"id\"]],\n        )],\n        network_settings=[yandex.ComputeInstanceGroupInstanceTemplateNetworkSettingArgs(\n            type=\"STANDARD\",\n        )],\n        platform_id=\"standard-v1\",\n        resources=yandex.ComputeInstanceGroupInstanceTemplateResourcesArgs(\n            cores=2,\n            memory=2,\n        ),\n    ),\n    scale_policy=yandex.ComputeInstanceGroupScalePolicyArgs(\n        fixed_scale=yandex.ComputeInstanceGroupScalePolicyFixedScaleArgs(\n            size=3,\n        ),\n    ),\n    service_account_id=yandex_iam_service_account[\"test_account\"][\"id\"],\n    variables={\n        \"test_key1\": \"test_value1\",\n        \"test_key2\": \"test_value2\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var group1 = new Yandex.ComputeInstanceGroup(\"group1\", new()\n    {\n        AllocationPolicy = new Yandex.Inputs.ComputeInstanceGroupAllocationPolicyArgs\n        {\n            Zones = new[]\n            {\n                \"ru-central1-a\",\n            },\n        },\n        DeletionProtection = true,\n        DeployPolicy = new Yandex.Inputs.ComputeInstanceGroupDeployPolicyArgs\n        {\n            MaxCreating = 2,\n            MaxDeleting = 2,\n            MaxExpansion = 2,\n            MaxUnavailable = 2,\n        },\n        FolderId = data.Yandex_resourcemanager_folder.Test_folder.Id,\n        InstanceTemplate = new Yandex.Inputs.ComputeInstanceGroupInstanceTemplateArgs\n        {\n            BootDisk = new Yandex.Inputs.ComputeInstanceGroupInstanceTemplateBootDiskArgs\n            {\n                InitializeParams = new Yandex.Inputs.ComputeInstanceGroupInstanceTemplateBootDiskInitializeParamsArgs\n                {\n                    ImageId = data.Yandex_compute_image.Ubuntu.Id,\n                    Size = 4,\n                },\n                Mode = \"READ_WRITE\",\n            },\n            Labels = \n            {\n                { \"label1\", \"label1-value\" },\n                { \"label2\", \"label2-value\" },\n            },\n            Metadata = \n            {\n                { \"foo\", \"bar\" },\n                { \"ssh-keys\", $\"ubuntu:{File.ReadAllText(\"~/.ssh/id_rsa.pub\")}\" },\n            },\n            NetworkInterfaces = new[]\n            {\n                new Yandex.Inputs.ComputeInstanceGroupInstanceTemplateNetworkInterfaceArgs\n                {\n                    NetworkId = yandex_vpc_network.My_inst_group_network.Id,\n                    SubnetIds = new[]\n                    {\n                        yandex_vpc_subnet.My_inst_group_subnet.Id,\n                    },\n                },\n            },\n            NetworkSettings = new[]\n            {\n                new Yandex.Inputs.ComputeInstanceGroupInstanceTemplateNetworkSettingArgs\n                {\n                    Type = \"STANDARD\",\n                },\n            },\n            PlatformId = \"standard-v1\",\n            Resources = new Yandex.Inputs.ComputeInstanceGroupInstanceTemplateResourcesArgs\n            {\n                Cores = 2,\n                Memory = 2,\n            },\n        },\n        ScalePolicy = new Yandex.Inputs.ComputeInstanceGroupScalePolicyArgs\n        {\n            FixedScale = new Yandex.Inputs.ComputeInstanceGroupScalePolicyFixedScaleArgs\n            {\n                Size = 3,\n            },\n        },\n        ServiceAccountId = yandex_iam_service_account.Test_account.Id,\n        Variables = \n        {\n            { \"test_key1\", \"test_value1\" },\n            { \"test_key2\", \"test_value2\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewComputeInstanceGroup(ctx, \"group1\", \u0026yandex.ComputeInstanceGroupArgs{\n\t\t\tAllocationPolicy: \u0026ComputeInstanceGroupAllocationPolicyArgs{\n\t\t\t\tZones: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ru-central1-a\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDeletionProtection: pulumi.Bool(true),\n\t\t\tDeployPolicy: \u0026ComputeInstanceGroupDeployPolicyArgs{\n\t\t\t\tMaxCreating:    pulumi.Float64(2),\n\t\t\t\tMaxDeleting:    pulumi.Float64(2),\n\t\t\t\tMaxExpansion:   pulumi.Float64(2),\n\t\t\t\tMaxUnavailable: pulumi.Float64(2),\n\t\t\t},\n\t\t\tFolderId: pulumi.Any(data.Yandex_resourcemanager_folder.Test_folder.Id),\n\t\t\tInstanceTemplate: \u0026ComputeInstanceGroupInstanceTemplateArgs{\n\t\t\t\tBootDisk: \u0026ComputeInstanceGroupInstanceTemplateBootDiskArgs{\n\t\t\t\t\tInitializeParams: \u0026ComputeInstanceGroupInstanceTemplateBootDiskInitializeParamsArgs{\n\t\t\t\t\t\tImageId: pulumi.Any(data.Yandex_compute_image.Ubuntu.Id),\n\t\t\t\t\t\tSize:    pulumi.Float64(4),\n\t\t\t\t\t},\n\t\t\t\t\tMode: pulumi.String(\"READ_WRITE\"),\n\t\t\t\t},\n\t\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\t\"label1\": pulumi.String(\"label1-value\"),\n\t\t\t\t\t\"label2\": pulumi.String(\"label2-value\"),\n\t\t\t\t},\n\t\t\t\tMetadata: pulumi.StringMap{\n\t\t\t\t\t\"foo\":      pulumi.String(\"bar\"),\n\t\t\t\t\t\"ssh-keys\": pulumi.String(fmt.Sprintf(\"ubuntu:%v\", readFileOrPanic(\"~/.ssh/id_rsa.pub\"))),\n\t\t\t\t},\n\t\t\t\tNetworkInterfaces: ComputeInstanceGroupInstanceTemplateNetworkInterfaceArray{\n\t\t\t\t\t\u0026ComputeInstanceGroupInstanceTemplateNetworkInterfaceArgs{\n\t\t\t\t\t\tNetworkId: pulumi.Any(yandex_vpc_network.MyInstGroupNetwork.Id),\n\t\t\t\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.Any(yandex_vpc_subnet.MyInstGroupSubnet.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tNetworkSettings: ComputeInstanceGroupInstanceTemplateNetworkSettingArray{\n\t\t\t\t\t\u0026ComputeInstanceGroupInstanceTemplateNetworkSettingArgs{\n\t\t\t\t\t\tType: pulumi.String(\"STANDARD\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tPlatformId: pulumi.String(\"standard-v1\"),\n\t\t\t\tResources: \u0026ComputeInstanceGroupInstanceTemplateResourcesArgs{\n\t\t\t\t\tCores:  pulumi.Float64(2),\n\t\t\t\t\tMemory: pulumi.Float64(2),\n\t\t\t\t},\n\t\t\t},\n\t\t\tScalePolicy: \u0026ComputeInstanceGroupScalePolicyArgs{\n\t\t\t\tFixedScale: \u0026ComputeInstanceGroupScalePolicyFixedScaleArgs{\n\t\t\t\t\tSize: pulumi.Float64(3),\n\t\t\t\t},\n\t\t\t},\n\t\t\tServiceAccountId: pulumi.Any(yandex_iam_service_account.Test_account.Id),\n\t\t\tVariables: pulumi.StringMap{\n\t\t\t\t\"test_key1\": pulumi.String(\"test_value1\"),\n\t\t\t\t\"test_key2\": pulumi.String(\"test_value2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ComputeInstanceGroup;\nimport com.pulumi.yandex.ComputeInstanceGroupArgs;\nimport com.pulumi.yandex.inputs.ComputeInstanceGroupAllocationPolicyArgs;\nimport com.pulumi.yandex.inputs.ComputeInstanceGroupDeployPolicyArgs;\nimport com.pulumi.yandex.inputs.ComputeInstanceGroupInstanceTemplateArgs;\nimport com.pulumi.yandex.inputs.ComputeInstanceGroupInstanceTemplateBootDiskArgs;\nimport com.pulumi.yandex.inputs.ComputeInstanceGroupInstanceTemplateBootDiskInitializeParamsArgs;\nimport com.pulumi.yandex.inputs.ComputeInstanceGroupInstanceTemplateResourcesArgs;\nimport com.pulumi.yandex.inputs.ComputeInstanceGroupScalePolicyArgs;\nimport com.pulumi.yandex.inputs.ComputeInstanceGroupScalePolicyFixedScaleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var group1 = new ComputeInstanceGroup(\"group1\", ComputeInstanceGroupArgs.builder()        \n            .allocationPolicy(ComputeInstanceGroupAllocationPolicyArgs.builder()\n                .zones(\"ru-central1-a\")\n                .build())\n            .deletionProtection(true)\n            .deployPolicy(ComputeInstanceGroupDeployPolicyArgs.builder()\n                .maxCreating(2)\n                .maxDeleting(2)\n                .maxExpansion(2)\n                .maxUnavailable(2)\n                .build())\n            .folderId(data.yandex_resourcemanager_folder().test_folder().id())\n            .instanceTemplate(ComputeInstanceGroupInstanceTemplateArgs.builder()\n                .bootDisk(ComputeInstanceGroupInstanceTemplateBootDiskArgs.builder()\n                    .initializeParams(ComputeInstanceGroupInstanceTemplateBootDiskInitializeParamsArgs.builder()\n                        .imageId(data.yandex_compute_image().ubuntu().id())\n                        .size(4)\n                        .build())\n                    .mode(\"READ_WRITE\")\n                    .build())\n                .labels(Map.ofEntries(\n                    Map.entry(\"label1\", \"label1-value\"),\n                    Map.entry(\"label2\", \"label2-value\")\n                ))\n                .metadata(Map.ofEntries(\n                    Map.entry(\"foo\", \"bar\"),\n                    Map.entry(\"ssh-keys\", String.format(\"ubuntu:%s\", Files.readString(Paths.get(\"~/.ssh/id_rsa.pub\"))))\n                ))\n                .networkInterfaces(ComputeInstanceGroupInstanceTemplateNetworkInterfaceArgs.builder()\n                    .networkId(yandex_vpc_network.my-inst-group-network().id())\n                    .subnetIds(yandex_vpc_subnet.my-inst-group-subnet().id())\n                    .build())\n                .networkSettings(ComputeInstanceGroupInstanceTemplateNetworkSettingArgs.builder()\n                    .type(\"STANDARD\")\n                    .build())\n                .platformId(\"standard-v1\")\n                .resources(ComputeInstanceGroupInstanceTemplateResourcesArgs.builder()\n                    .cores(2)\n                    .memory(2)\n                    .build())\n                .build())\n            .scalePolicy(ComputeInstanceGroupScalePolicyArgs.builder()\n                .fixedScale(ComputeInstanceGroupScalePolicyFixedScaleArgs.builder()\n                    .size(3)\n                    .build())\n                .build())\n            .serviceAccountId(yandex_iam_service_account.test_account().id())\n            .variables(Map.ofEntries(\n                Map.entry(\"test_key1\", \"test_value1\"),\n                Map.entry(\"test_key2\", \"test_value2\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  group1:\n    type: yandex:ComputeInstanceGroup\n    properties:\n      allocationPolicy:\n        zones:\n          - ru-central1-a\n      deletionProtection: true\n      deployPolicy:\n        maxCreating: 2\n        maxDeleting: 2\n        maxExpansion: 2\n        maxUnavailable: 2\n      folderId: ${data.yandex_resourcemanager_folder.test_folder.id}\n      instanceTemplate:\n        bootDisk:\n          initializeParams:\n            imageId: ${data.yandex_compute_image.ubuntu.id}\n            size: 4\n          mode: READ_WRITE\n        labels:\n          label1: label1-value\n          label2: label2-value\n        metadata:\n          foo: bar\n          ssh-keys:\n            fn::join:\n              -\n              - - 'ubuntu:'\n                - fn::readFile: ~/.ssh/id_rsa.pub\n        networkInterfaces:\n          - networkId: ${yandex_vpc_network\"my-inst-group-network\"[%!s(MISSING)].id}\n            subnetIds:\n              - ${yandex_vpc_subnet\"my-inst-group-subnet\"[%!s(MISSING)].id}\n        networkSettings:\n          - type: STANDARD\n        platformId: standard-v1\n        resources:\n          cores: 2\n          memory: 2\n      scalePolicy:\n        fixedScale:\n          size: 3\n      serviceAccountId: ${yandex_iam_service_account.test_account.id}\n      variables:\n        test_key1: test_value1\n        test_key2: test_value2\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "allocationPolicy": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupAllocationPolicy:ComputeInstanceGroupAllocationPolicy",
                    "description": "The allocation policy of the instance group by zone and region. The structure is documented below.\n"
                },
                "applicationLoadBalancer": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupApplicationLoadBalancer:ComputeInstanceGroupApplicationLoadBalancer",
                    "description": "Application Load balancing (L7) specifications. The structure is documented below.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The instance group creation timestamp.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Flag that protects the instance group from accidental deletion.\n"
                },
                "deployPolicy": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupDeployPolicy:ComputeInstanceGroupDeployPolicy",
                    "description": "The deployment policy of the instance group. The structure is documented below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the boot disk.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder ID of custom metric in Yandex Monitoring that should be used for scaling.\n"
                },
                "healthChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupHealthCheck:ComputeInstanceGroupHealthCheck"
                    },
                    "description": "Health check specifications. The structure is documented below.\n"
                },
                "instanceTemplate": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplate:ComputeInstanceGroupInstanceTemplate",
                    "description": "The template for creating new instances. The structure is documented below.\n"
                },
                "instances": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupInstance:ComputeInstanceGroupInstance"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of labels of metric.\n"
                },
                "loadBalancer": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupLoadBalancer:ComputeInstanceGroupLoadBalancer",
                    "description": "Load balancing specifications. The structure is documented below.\n"
                },
                "maxCheckingHealthDuration": {
                    "type": "number",
                    "description": "Timeout for waiting for the VM to become healthy. If the timeout is exceeded, the VM will be turned off based on the deployment policy. Specified in seconds.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name template of the instance.  \nIn order to be unique it must contain at least one of instance unique placeholders:\n{instance.short_id}\n{instance.index}\ncombination of {instance.zone_id} and {instance.index_in_zone}\nExample: my-instance-{instance.index}\nIf not set, default is used: {instance_group.id}-{instance.short_id}\nIt may also contain another placeholders, see metadata doc for full list.\n"
                },
                "scalePolicy": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupScalePolicy:ComputeInstanceGroupScalePolicy",
                    "description": "The scaling policy of the instance group. The structure is documented below.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "The ID of the service account authorized for this instance.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the instance.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupTimeouts:ComputeInstanceGroupTimeouts"
                },
                "variables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value  variables pairs to assign to the instance group.\n"
                }
            },
            "required": [
                "allocationPolicy",
                "createdAt",
                "deployPolicy",
                "folderId",
                "instanceTemplate",
                "instances",
                "name",
                "scalePolicy",
                "serviceAccountId",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "allocationPolicy": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupAllocationPolicy:ComputeInstanceGroupAllocationPolicy",
                    "description": "The allocation policy of the instance group by zone and region. The structure is documented below.\n"
                },
                "applicationLoadBalancer": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupApplicationLoadBalancer:ComputeInstanceGroupApplicationLoadBalancer",
                    "description": "Application Load balancing (L7) specifications. The structure is documented below.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Flag that protects the instance group from accidental deletion.\n"
                },
                "deployPolicy": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupDeployPolicy:ComputeInstanceGroupDeployPolicy",
                    "description": "The deployment policy of the instance group. The structure is documented below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the boot disk.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder ID of custom metric in Yandex Monitoring that should be used for scaling.\n"
                },
                "healthChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupHealthCheck:ComputeInstanceGroupHealthCheck"
                    },
                    "description": "Health check specifications. The structure is documented below.\n"
                },
                "instanceTemplate": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplate:ComputeInstanceGroupInstanceTemplate",
                    "description": "The template for creating new instances. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of labels of metric.\n"
                },
                "loadBalancer": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupLoadBalancer:ComputeInstanceGroupLoadBalancer",
                    "description": "Load balancing specifications. The structure is documented below.\n"
                },
                "maxCheckingHealthDuration": {
                    "type": "number",
                    "description": "Timeout for waiting for the VM to become healthy. If the timeout is exceeded, the VM will be turned off based on the deployment policy. Specified in seconds.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name template of the instance.  \nIn order to be unique it must contain at least one of instance unique placeholders:\n{instance.short_id}\n{instance.index}\ncombination of {instance.zone_id} and {instance.index_in_zone}\nExample: my-instance-{instance.index}\nIf not set, default is used: {instance_group.id}-{instance.short_id}\nIt may also contain another placeholders, see metadata doc for full list.\n"
                },
                "scalePolicy": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupScalePolicy:ComputeInstanceGroupScalePolicy",
                    "description": "The scaling policy of the instance group. The structure is documented below.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "The ID of the service account authorized for this instance.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ComputeInstanceGroupTimeouts:ComputeInstanceGroupTimeouts"
                },
                "variables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value  variables pairs to assign to the instance group.\n"
                }
            },
            "requiredInputs": [
                "allocationPolicy",
                "deployPolicy",
                "instanceTemplate",
                "scalePolicy",
                "serviceAccountId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ComputeInstanceGroup resources.\n",
                "properties": {
                    "allocationPolicy": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupAllocationPolicy:ComputeInstanceGroupAllocationPolicy",
                        "description": "The allocation policy of the instance group by zone and region. The structure is documented below.\n"
                    },
                    "applicationLoadBalancer": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupApplicationLoadBalancer:ComputeInstanceGroupApplicationLoadBalancer",
                        "description": "Application Load balancing (L7) specifications. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The instance group creation timestamp.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Flag that protects the instance group from accidental deletion.\n"
                    },
                    "deployPolicy": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupDeployPolicy:ComputeInstanceGroupDeployPolicy",
                        "description": "The deployment policy of the instance group. The structure is documented below.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the boot disk.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID of custom metric in Yandex Monitoring that should be used for scaling.\n"
                    },
                    "healthChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/ComputeInstanceGroupHealthCheck:ComputeInstanceGroupHealthCheck"
                        },
                        "description": "Health check specifications. The structure is documented below.\n"
                    },
                    "instanceTemplate": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupInstanceTemplate:ComputeInstanceGroupInstanceTemplate",
                        "description": "The template for creating new instances. The structure is documented below.\n"
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/ComputeInstanceGroupInstance:ComputeInstanceGroupInstance"
                        }
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of labels of metric.\n"
                    },
                    "loadBalancer": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupLoadBalancer:ComputeInstanceGroupLoadBalancer",
                        "description": "Load balancing specifications. The structure is documented below.\n"
                    },
                    "maxCheckingHealthDuration": {
                        "type": "number",
                        "description": "Timeout for waiting for the VM to become healthy. If the timeout is exceeded, the VM will be turned off based on the deployment policy. Specified in seconds.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name template of the instance.  \nIn order to be unique it must contain at least one of instance unique placeholders:\n{instance.short_id}\n{instance.index}\ncombination of {instance.zone_id} and {instance.index_in_zone}\nExample: my-instance-{instance.index}\nIf not set, default is used: {instance_group.id}-{instance.short_id}\nIt may also contain another placeholders, see metadata doc for full list.\n"
                    },
                    "scalePolicy": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupScalePolicy:ComputeInstanceGroupScalePolicy",
                        "description": "The scaling policy of the instance group. The structure is documented below.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "The ID of the service account authorized for this instance.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the instance.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/ComputeInstanceGroupTimeouts:ComputeInstanceGroupTimeouts"
                    },
                    "variables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value  variables pairs to assign to the instance group.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/computePlacementGroup:ComputePlacementGroup": {
            "description": "A Placement group resource. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/compute/concepts/placement-groups).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst group1 = new yandex.ComputePlacementGroup(\"group1\", {\n    description: \"my description\",\n    folderId: \"abc*********123\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ngroup1 = yandex.ComputePlacementGroup(\"group1\",\n    description=\"my description\",\n    folder_id=\"abc*********123\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var group1 = new Yandex.ComputePlacementGroup(\"group1\", new()\n    {\n        Description = \"my description\",\n        FolderId = \"abc*********123\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewComputePlacementGroup(ctx, \"group1\", \u0026yandex.ComputePlacementGroupArgs{\n\t\t\tDescription: pulumi.String(\"my description\"),\n\t\t\tFolderId:    pulumi.String(\"abc*********123\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ComputePlacementGroup;\nimport com.pulumi.yandex.ComputePlacementGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var group1 = new ComputePlacementGroup(\"group1\", ComputePlacementGroupArgs.builder()        \n            .description(\"my description\")\n            .folderId(\"abc*********123\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  group1:\n    type: yandex:ComputePlacementGroup\n    properties:\n      description: my description\n      folderId: abc*********123\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the Placement Group.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Placement Group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Placement Group.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ComputePlacementGroupTimeouts:ComputePlacementGroupTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description of the Placement Group.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Placement Group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Placement Group.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ComputePlacementGroupTimeouts:ComputePlacementGroupTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ComputePlacementGroup resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the Placement Group.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Placement Group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Placement Group.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/ComputePlacementGroupTimeouts:ComputePlacementGroupTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/computeSnapshot:ComputeSnapshot": {
            "description": "Creates a new snapshot of a disk. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/compute/concepts/snapshot).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst defaultComputeSnapshot = new yandex.ComputeSnapshot(\"default\", {\n    labels: {\n        \"my-label\": \"my-label-value\",\n    },\n    sourceDiskId: \"test_disk_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ndefault = yandex.ComputeSnapshot(\"default\",\n    labels={\n        \"my-label\": \"my-label-value\",\n    },\n    source_disk_id=\"test_disk_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Yandex.ComputeSnapshot(\"default\", new()\n    {\n        Labels = \n        {\n            { \"my-label\", \"my-label-value\" },\n        },\n        SourceDiskId = \"test_disk_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewComputeSnapshot(ctx, \"default\", \u0026yandex.ComputeSnapshotArgs{\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"my-label\": pulumi.String(\"my-label-value\"),\n\t\t\t},\n\t\t\tSourceDiskId: pulumi.String(\"test_disk_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ComputeSnapshot;\nimport com.pulumi.yandex.ComputeSnapshotArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new ComputeSnapshot(\"default\", ComputeSnapshotArgs.builder()        \n            .labels(Map.of(\"my-label\", \"my-label-value\"))\n            .sourceDiskId(\"test_disk_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: yandex:ComputeSnapshot\n    properties:\n      labels:\n        my-label: my-label-value\n      sourceDiskId: test_disk_id\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA snapshot can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/computeSnapshot:ComputeSnapshot disk-snapshot shapshot_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the snapshot.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "diskSize": {
                    "type": "number",
                    "description": "Size of the disk when the snapshot was created, specified in GB.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the snapshot.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name for the resource.\n"
                },
                "sourceDiskId": {
                    "type": "string",
                    "description": "ID of the disk to create a snapshot from.\n"
                },
                "storageSize": {
                    "type": "number",
                    "description": "Size of the snapshot, specified in GB.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ComputeSnapshotTimeouts:ComputeSnapshotTimeouts"
                }
            },
            "required": [
                "createdAt",
                "diskSize",
                "folderId",
                "name",
                "sourceDiskId",
                "storageSize",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the snapshot.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name for the resource.\n"
                },
                "sourceDiskId": {
                    "type": "string",
                    "description": "ID of the disk to create a snapshot from.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ComputeSnapshotTimeouts:ComputeSnapshotTimeouts"
                }
            },
            "requiredInputs": [
                "sourceDiskId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ComputeSnapshot resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the snapshot.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the resource.\n"
                    },
                    "diskSize": {
                        "type": "number",
                        "description": "Size of the disk when the snapshot was created, specified in GB.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the snapshot.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name for the resource.\n"
                    },
                    "sourceDiskId": {
                        "type": "string",
                        "description": "ID of the disk to create a snapshot from.\n"
                    },
                    "storageSize": {
                        "type": "number",
                        "description": "Size of the snapshot, specified in GB.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/ComputeSnapshotTimeouts:ComputeSnapshotTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/containerRegistry:ContainerRegistry": {
            "description": "Creates a new container registry. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/container-registry/concepts/registry)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst defaultContainerRegistry = new yandex.ContainerRegistry(\"default\", {\n    folderId: \"test_folder_id\",\n    labels: {\n        \"my-label\": \"my-label-value\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ndefault = yandex.ContainerRegistry(\"default\",\n    folder_id=\"test_folder_id\",\n    labels={\n        \"my-label\": \"my-label-value\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Yandex.ContainerRegistry(\"default\", new()\n    {\n        FolderId = \"test_folder_id\",\n        Labels = \n        {\n            { \"my-label\", \"my-label-value\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewContainerRegistry(ctx, \"default\", \u0026yandex.ContainerRegistryArgs{\n\t\t\tFolderId: pulumi.String(\"test_folder_id\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"my-label\": pulumi.String(\"my-label-value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ContainerRegistry;\nimport com.pulumi.yandex.ContainerRegistryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new ContainerRegistry(\"default\", ContainerRegistryArgs.builder()        \n            .folderId(\"test_folder_id\")\n            .labels(Map.of(\"my-label\", \"my-label-value\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: yandex:ContainerRegistry\n    properties:\n      folderId: test_folder_id\n      labels:\n        my-label: my-label-value\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA registry can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/containerRegistry:ContainerRegistry default registry_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the registry.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the registry.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name of the registry.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the registry.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ContainerRegistryTimeouts:ContainerRegistryTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "folderId": {
                    "type": "string",
                    "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the registry.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name of the registry.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ContainerRegistryTimeouts:ContainerRegistryTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerRegistry resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the registry.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the registry.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name of the registry.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the registry.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/ContainerRegistryTimeouts:ContainerRegistryTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/containerRegistryIamBinding:ContainerRegistryIamBinding": {
            "description": "## yandex\\_container\\_registry\\_iam\\_binding\n\nAllows creation and management of a single binding within IAM policy for\nan existing Yandex Container Registry.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst your_registry = new yandex.ContainerRegistry(\"your-registry\", {folderId: \"your-folder-id\"});\nconst puller = new yandex.ContainerRegistryIamBinding(\"puller\", {\n    registryId: your_registry.id,\n    role: \"container-registry.images.puller\",\n    members: [\"system:allUsers\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nyour_registry = yandex.ContainerRegistry(\"your-registry\", folder_id=\"your-folder-id\")\npuller = yandex.ContainerRegistryIamBinding(\"puller\",\n    registry_id=your_registry.id,\n    role=\"container-registry.images.puller\",\n    members=[\"system:allUsers\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var your_registry = new Yandex.ContainerRegistry(\"your-registry\", new()\n    {\n        FolderId = \"your-folder-id\",\n    });\n\n    var puller = new Yandex.ContainerRegistryIamBinding(\"puller\", new()\n    {\n        RegistryId = your_registry.Id,\n        Role = \"container-registry.images.puller\",\n        Members = new[]\n        {\n            \"system:allUsers\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewContainerRegistry(ctx, \"your-registry\", \u0026yandex.ContainerRegistryArgs{\n\t\t\tFolderId: pulumi.String(\"your-folder-id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewContainerRegistryIamBinding(ctx, \"puller\", \u0026yandex.ContainerRegistryIamBindingArgs{\n\t\t\tRegistryId: your_registry.ID(),\n\t\t\tRole:       pulumi.String(\"container-registry.images.puller\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"system:allUsers\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ContainerRegistry;\nimport com.pulumi.yandex.ContainerRegistryArgs;\nimport com.pulumi.yandex.ContainerRegistryIamBinding;\nimport com.pulumi.yandex.ContainerRegistryIamBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var your_registry = new ContainerRegistry(\"your-registry\", ContainerRegistryArgs.builder()        \n            .folderId(\"your-folder-id\")\n            .build());\n\n        var puller = new ContainerRegistryIamBinding(\"puller\", ContainerRegistryIamBindingArgs.builder()        \n            .registryId(your_registry.id())\n            .role(\"container-registry.images.puller\")\n            .members(\"system:allUsers\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  your-registry:\n    type: yandex:ContainerRegistry\n    properties:\n      folderId: your-folder-id\n  puller:\n    type: yandex:ContainerRegistryIamBinding\n    properties:\n      registryId: ${[\"your-registry\"].id}\n      role: container-registry.images.puller\n      members:\n        - system:allUsers\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIAM binding imports use space-delimited identifiers; first the resource in question and then the role. These bindings can be imported using the `registry_id` and role, e.g.\n\n```sh\n $ pulumi import yandex:index/containerRegistryIamBinding:ContainerRegistryIamBinding puller \"registry_id container-registry.images.puller\"\n```\n\n ",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                },
                "registryId": {
                    "type": "string",
                    "description": "The [Yandex Container Registry](https://cloud.yandex.com/docs/container-registry/) ID to apply a binding to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/container-registry/security/).\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "required": [
                "members",
                "registryId",
                "role"
            ],
            "inputProperties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                },
                "registryId": {
                    "type": "string",
                    "description": "The [Yandex Container Registry](https://cloud.yandex.com/docs/container-registry/) ID to apply a binding to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/container-registry/security/).\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "members",
                "registryId",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerRegistryIamBinding resources.\n",
                "properties": {
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                    },
                    "registryId": {
                        "type": "string",
                        "description": "The [Yandex Container Registry](https://cloud.yandex.com/docs/container-registry/) ID to apply a binding to.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/container-registry/security/).\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/containerRepository:ContainerRepository": {
            "description": "Creates a new container repository. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/container-registry/concepts/repository)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst my_registry = new yandex.ContainerRegistry(\"my-registry\", {});\nconst my_repository = new yandex.ContainerRepository(\"my-repository\", {});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_registry = yandex.ContainerRegistry(\"my-registry\")\nmy_repository = yandex.ContainerRepository(\"my-repository\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_registry = new Yandex.ContainerRegistry(\"my-registry\");\n\n    var my_repository = new Yandex.ContainerRepository(\"my-repository\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewContainerRegistry(ctx, \"my-registry\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewContainerRepository(ctx, \"my-repository\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ContainerRegistry;\nimport com.pulumi.yandex.ContainerRepository;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_registry = new ContainerRegistry(\"my-registry\");\n\n        var my_repository = new ContainerRepository(\"my-repository\");\n\n    }\n}\n```\n```yaml\nresources:\n  my-registry:\n    type: yandex:ContainerRegistry\n  my-repository:\n    type: yandex:ContainerRepository\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA repository can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/containerRepository:ContainerRepository my-repository repository_id\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "A name of the repository. The name of the repository should start with id of a container registry and match the name of the images that will be pushed in the repository.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ContainerRepositoryTimeouts:ContainerRepositoryTimeouts"
                }
            },
            "required": [
                "name",
                "timeouts"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "A name of the repository. The name of the repository should start with id of a container registry and match the name of the images that will be pushed in the repository.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ContainerRepositoryTimeouts:ContainerRepositoryTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerRepository resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A name of the repository. The name of the repository should start with id of a container registry and match the name of the images that will be pushed in the repository.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/ContainerRepositoryTimeouts:ContainerRepositoryTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/containerRepositoryIamBinding:ContainerRepositoryIamBinding": {
            "description": "## yandex\\_container\\_repository\\_iam\\_binding\n\nAllows creation and management of a single binding within IAM policy for\nan existing Yandex Container Repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst your_registry = new yandex.ContainerRegistry(\"your-registry\", {folderId: \"your-folder-id\"});\nconst repo_1 = new yandex.ContainerRepository(\"repo-1\", {});\nconst puller = new yandex.ContainerRepositoryIamBinding(\"puller\", {\n    repositoryId: repo_1.id,\n    role: \"container-registry.images.puller\",\n    members: [\"system:allUsers\"],\n});\nconst repo-2 = yandex.getContainerRepository({\n    name: \"some_repository_name\",\n});\nconst pusher = new yandex.ContainerRepositoryIamBinding(\"pusher\", {\n    repositoryId: repo_2.then(repo_2 =\u003e repo_2.id),\n    role: \"container-registry.images.pusher\",\n    members: [\"serviceAccount:your-service-account-id\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nyour_registry = yandex.ContainerRegistry(\"your-registry\", folder_id=\"your-folder-id\")\nrepo_1 = yandex.ContainerRepository(\"repo-1\")\npuller = yandex.ContainerRepositoryIamBinding(\"puller\",\n    repository_id=repo_1.id,\n    role=\"container-registry.images.puller\",\n    members=[\"system:allUsers\"])\nrepo_2 = yandex.get_container_repository(name=\"some_repository_name\")\npusher = yandex.ContainerRepositoryIamBinding(\"pusher\",\n    repository_id=repo_2.id,\n    role=\"container-registry.images.pusher\",\n    members=[\"serviceAccount:your-service-account-id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var your_registry = new Yandex.ContainerRegistry(\"your-registry\", new()\n    {\n        FolderId = \"your-folder-id\",\n    });\n\n    var repo_1 = new Yandex.ContainerRepository(\"repo-1\");\n\n    var puller = new Yandex.ContainerRepositoryIamBinding(\"puller\", new()\n    {\n        RepositoryId = repo_1.Id,\n        Role = \"container-registry.images.puller\",\n        Members = new[]\n        {\n            \"system:allUsers\",\n        },\n    });\n\n    var repo_2 = Yandex.GetContainerRepository.Invoke(new()\n    {\n        Name = \"some_repository_name\",\n    });\n\n    var pusher = new Yandex.ContainerRepositoryIamBinding(\"pusher\", new()\n    {\n        RepositoryId = repo_2.Apply(getContainerRepositoryResult =\u003e getContainerRepositoryResult).Apply(repo_2 =\u003e repo_2.Apply(getContainerRepositoryResult =\u003e getContainerRepositoryResult.Id)),\n        Role = \"container-registry.images.pusher\",\n        Members = new[]\n        {\n            \"serviceAccount:your-service-account-id\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewContainerRegistry(ctx, \"your-registry\", \u0026yandex.ContainerRegistryArgs{\n\t\t\tFolderId: pulumi.String(\"your-folder-id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewContainerRepository(ctx, \"repo-1\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewContainerRepositoryIamBinding(ctx, \"puller\", \u0026yandex.ContainerRepositoryIamBindingArgs{\n\t\t\tRepositoryId: repo_1.ID(),\n\t\t\tRole:         pulumi.String(\"container-registry.images.puller\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"system:allUsers\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\trepo_2, err := yandex.LookupContainerRepository(ctx, \u0026GetContainerRepositoryArgs{\n\t\t\tName: pulumi.StringRef(\"some_repository_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewContainerRepositoryIamBinding(ctx, \"pusher\", \u0026yandex.ContainerRepositoryIamBindingArgs{\n\t\t\tRepositoryId: pulumi.String(repo_2.Id),\n\t\t\tRole:         pulumi.String(\"container-registry.images.pusher\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"serviceAccount:your-service-account-id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ContainerRegistry;\nimport com.pulumi.yandex.ContainerRegistryArgs;\nimport com.pulumi.yandex.ContainerRepository;\nimport com.pulumi.yandex.ContainerRepositoryIamBinding;\nimport com.pulumi.yandex.ContainerRepositoryIamBindingArgs;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetContainerRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var your_registry = new ContainerRegistry(\"your-registry\", ContainerRegistryArgs.builder()        \n            .folderId(\"your-folder-id\")\n            .build());\n\n        var repo_1 = new ContainerRepository(\"repo-1\");\n\n        var puller = new ContainerRepositoryIamBinding(\"puller\", ContainerRepositoryIamBindingArgs.builder()        \n            .repositoryId(repo_1.id())\n            .role(\"container-registry.images.puller\")\n            .members(\"system:allUsers\")\n            .build());\n\n        final var repo-2 = YandexFunctions.getContainerRepository(GetContainerRepositoryArgs.builder()\n            .name(\"some_repository_name\")\n            .build());\n\n        var pusher = new ContainerRepositoryIamBinding(\"pusher\", ContainerRepositoryIamBindingArgs.builder()        \n            .repositoryId(repo_2.id())\n            .role(\"container-registry.images.pusher\")\n            .members(\"serviceAccount:your-service-account-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  your-registry:\n    type: yandex:ContainerRegistry\n    properties:\n      folderId: your-folder-id\n  repo-1:\n    type: yandex:ContainerRepository\n  puller:\n    type: yandex:ContainerRepositoryIamBinding\n    properties:\n      repositoryId: ${[\"repo-1\"].id}\n      role: container-registry.images.puller\n      members:\n        - system:allUsers\n  pusher:\n    type: yandex:ContainerRepositoryIamBinding\n    properties:\n      repositoryId: ${[\"repo-2\"].id}\n      role: container-registry.images.pusher\n      members:\n        - serviceAccount:your-service-account-id\nvariables:\n  repo-2:\n    fn::invoke:\n      Function: yandex:getContainerRepository\n      Arguments:\n        name: some_repository_name\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIAM binding imports use space-delimited identifiers; first the resource in question and then the role. These bindings can be imported using the `repository_id` and role, e.g.\n\n```sh\n $ pulumi import yandex:index/containerRepositoryIamBinding:ContainerRepositoryIamBinding puller \"repository_id container-registry.images.puller\"\n```\n\n ",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The [Yandex Container Repository](https://cloud.yandex.com/docs/container-registry/concepts/repository) ID to apply a binding to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/container-registry/security/).\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "required": [
                "members",
                "repositoryId",
                "role"
            ],
            "inputProperties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The [Yandex Container Repository](https://cloud.yandex.com/docs/container-registry/concepts/repository) ID to apply a binding to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/container-registry/security/).\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "members",
                "repositoryId",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerRepositoryIamBinding resources.\n",
                "properties": {
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "The [Yandex Container Repository](https://cloud.yandex.com/docs/container-registry/concepts/repository) ID to apply a binding to.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/container-registry/security/).\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/containerRepositoryLifecyclePolicy:ContainerRepositoryLifecyclePolicy": {
            "description": "Creates a new container repository lifecycle policy. For more information, see\n[the official documentation](https://cloud.yandex.com/en-ru/docs/container-registry/concepts/lifecycle-policy)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myRegistry = new yandex.ContainerRegistry(\"myRegistry\", {});\nconst myRepository = new yandex.ContainerRepository(\"myRepository\", {});\nconst myLifecyclePolicy = new yandex.ContainerRepositoryLifecyclePolicy(\"myLifecyclePolicy\", {\n    status: \"active\",\n    repositoryId: myRepository.id,\n    rules: [{\n        description: \"my description\",\n        untagged: true,\n        tagRegexp: \".*\",\n        retainedTop: 1,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_registry = yandex.ContainerRegistry(\"myRegistry\")\nmy_repository = yandex.ContainerRepository(\"myRepository\")\nmy_lifecycle_policy = yandex.ContainerRepositoryLifecyclePolicy(\"myLifecyclePolicy\",\n    status=\"active\",\n    repository_id=my_repository.id,\n    rules=[yandex.ContainerRepositoryLifecyclePolicyRuleArgs(\n        description=\"my description\",\n        untagged=True,\n        tag_regexp=\".*\",\n        retained_top=1,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myRegistry = new Yandex.ContainerRegistry(\"myRegistry\");\n\n    var myRepository = new Yandex.ContainerRepository(\"myRepository\");\n\n    var myLifecyclePolicy = new Yandex.ContainerRepositoryLifecyclePolicy(\"myLifecyclePolicy\", new()\n    {\n        Status = \"active\",\n        RepositoryId = myRepository.Id,\n        Rules = new[]\n        {\n            new Yandex.Inputs.ContainerRepositoryLifecyclePolicyRuleArgs\n            {\n                Description = \"my description\",\n                Untagged = true,\n                TagRegexp = \".*\",\n                RetainedTop = 1,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewContainerRegistry(ctx, \"myRegistry\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyRepository, err := yandex.NewContainerRepository(ctx, \"myRepository\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewContainerRepositoryLifecyclePolicy(ctx, \"myLifecyclePolicy\", \u0026yandex.ContainerRepositoryLifecyclePolicyArgs{\n\t\t\tStatus:       pulumi.String(\"active\"),\n\t\t\tRepositoryId: myRepository.ID(),\n\t\t\tRules: ContainerRepositoryLifecyclePolicyRuleArray{\n\t\t\t\t\u0026ContainerRepositoryLifecyclePolicyRuleArgs{\n\t\t\t\t\tDescription: pulumi.String(\"my description\"),\n\t\t\t\t\tUntagged:    pulumi.Bool(true),\n\t\t\t\t\tTagRegexp:   pulumi.String(\".*\"),\n\t\t\t\t\tRetainedTop: pulumi.Float64(1),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ContainerRegistry;\nimport com.pulumi.yandex.ContainerRepository;\nimport com.pulumi.yandex.ContainerRepositoryLifecyclePolicy;\nimport com.pulumi.yandex.ContainerRepositoryLifecyclePolicyArgs;\nimport com.pulumi.yandex.inputs.ContainerRepositoryLifecyclePolicyRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myRegistry = new ContainerRegistry(\"myRegistry\");\n\n        var myRepository = new ContainerRepository(\"myRepository\");\n\n        var myLifecyclePolicy = new ContainerRepositoryLifecyclePolicy(\"myLifecyclePolicy\", ContainerRepositoryLifecyclePolicyArgs.builder()        \n            .status(\"active\")\n            .repositoryId(myRepository.id())\n            .rules(ContainerRepositoryLifecyclePolicyRuleArgs.builder()\n                .description(\"my description\")\n                .untagged(true)\n                .tagRegexp(\".*\")\n                .retainedTop(1)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myRegistry:\n    type: yandex:ContainerRegistry\n  myRepository:\n    type: yandex:ContainerRepository\n  myLifecyclePolicy:\n    type: yandex:ContainerRepositoryLifecyclePolicy\n    properties:\n      status: active\n      repositoryId: ${myRepository.id}\n      rules:\n        - description: my description\n          untagged: true\n          tagRegexp: .*\n          retainedTop: 1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA lifecycle policy can be imported using the `id` of the resource, e.g. bash\n\n```sh\n $ pulumi import yandex:index/containerRepositoryLifecyclePolicy:ContainerRepositoryLifecyclePolicy my_lifecycle_policy lifecycle_policy_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the instance.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the lifecycle policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Lifecycle policy name.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The ID of the repository that the resource belongs to.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ContainerRepositoryLifecyclePolicyRule:ContainerRepositoryLifecyclePolicyRule"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of lifecycle policy. Must be `active` or `disabled`.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ContainerRepositoryLifecyclePolicyTimeouts:ContainerRepositoryLifecyclePolicyTimeouts"
                }
            },
            "required": [
                "createdAt",
                "description",
                "name",
                "repositoryId",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the lifecycle policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Lifecycle policy name.\n"
                },
                "repositoryId": {
                    "type": "string",
                    "description": "The ID of the repository that the resource belongs to.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ContainerRepositoryLifecyclePolicyRule:ContainerRepositoryLifecyclePolicyRule"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The status of lifecycle policy. Must be `active` or `disabled`.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ContainerRepositoryLifecyclePolicyTimeouts:ContainerRepositoryLifecyclePolicyTimeouts"
                }
            },
            "requiredInputs": [
                "repositoryId",
                "status",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContainerRepositoryLifecyclePolicy resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the instance.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the lifecycle policy.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Lifecycle policy name.\n"
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "The ID of the repository that the resource belongs to.\n"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/ContainerRepositoryLifecyclePolicyRule:ContainerRepositoryLifecyclePolicyRule"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of lifecycle policy. Must be `active` or `disabled`.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/ContainerRepositoryLifecyclePolicyTimeouts:ContainerRepositoryLifecyclePolicyTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/dataprocCluster:DataprocCluster": {
            "description": "Manages a Data Proc cluster. For more information, see [the official documentation](https://cloud.yandex.com/docs/data-proc/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"fooVpcNetwork\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"fooVpcSubnet\", {\n    zone: \"ru-central1-b\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.1.0.0/24\"],\n});\nconst dataprocIamServiceAccount = new yandex.IamServiceAccount(\"dataprocIamServiceAccount\", {description: \"service account to manage Dataproc Cluster\"});\nconst fooResourcemanagerFolder = yandex.getResourcemanagerFolder({\n    folderId: \"some_folder_id\",\n});\nconst dataprocResourcemanagerFolderIamBinding = new yandex.ResourcemanagerFolderIamBinding(\"dataprocResourcemanagerFolderIamBinding\", {\n    folderId: fooResourcemanagerFolder.then(fooResourcemanagerFolder =\u003e fooResourcemanagerFolder.id),\n    role: \"mdb.dataproc.agent\",\n    members: [pulumi.interpolate`serviceAccount:${dataprocIamServiceAccount.id}`],\n});\n// required in order to create bucket\nconst bucket_creator = new yandex.ResourcemanagerFolderIamBinding(\"bucket-creator\", {\n    folderId: fooResourcemanagerFolder.then(fooResourcemanagerFolder =\u003e fooResourcemanagerFolder.id),\n    role: \"editor\",\n    members: [pulumi.interpolate`serviceAccount:${dataprocIamServiceAccount.id}`],\n});\nconst fooIamServiceAccountStaticAccessKey = new yandex.IamServiceAccountStaticAccessKey(\"fooIamServiceAccountStaticAccessKey\", {serviceAccountId: dataprocIamServiceAccount.id});\nconst fooStorageBucket = new yandex.StorageBucket(\"fooStorageBucket\", {\n    bucket: \"foo\",\n    accessKey: fooIamServiceAccountStaticAccessKey.accessKey,\n    secretKey: fooIamServiceAccountStaticAccessKey.secretKey,\n}, {\n    dependsOn: [bucket_creator],\n});\nconst fooDataprocCluster = new yandex.DataprocCluster(\"fooDataprocCluster\", {\n    bucket: fooStorageBucket.bucket,\n    description: \"Dataproc Cluster created by Terraform\",\n    labels: {\n        created_by: \"terraform\",\n    },\n    serviceAccountId: dataprocIamServiceAccount.id,\n    zoneId: \"ru-central1-b\",\n    clusterConfig: {\n        hadoop: {\n            services: [\n                \"HDFS\",\n                \"YARN\",\n                \"SPARK\",\n                \"TEZ\",\n                \"MAPREDUCE\",\n                \"HIVE\",\n            ],\n            properties: {\n                \"yarn:yarn.resourcemanager.am.max-attempts\": \"5\",\n            },\n            sshPublicKeys: [fs.readFileSync(\"~/.ssh/id_rsa.pub\")],\n        },\n        subclusterSpecs: [\n            {\n                name: \"main\",\n                role: \"MASTERNODE\",\n                resources: {\n                    resourcePresetId: \"s2.small\",\n                    diskTypeId: \"network-hdd\",\n                    diskSize: 20,\n                },\n                subnetId: fooVpcSubnet.id,\n                hostsCount: 1,\n            },\n            {\n                name: \"data\",\n                role: \"DATANODE\",\n                resources: {\n                    resourcePresetId: \"s2.small\",\n                    diskTypeId: \"network-hdd\",\n                    diskSize: 20,\n                },\n                subnetId: fooVpcSubnet.id,\n                hostsCount: 2,\n            },\n            {\n                name: \"compute\",\n                role: \"COMPUTENODE\",\n                resources: {\n                    resourcePresetId: \"s2.small\",\n                    diskTypeId: \"network-hdd\",\n                    diskSize: 20,\n                },\n                subnetId: fooVpcSubnet.id,\n                hostsCount: 2,\n            },\n            {\n                name: \"compute_autoscaling\",\n                role: \"COMPUTENODE\",\n                resources: {\n                    resourcePresetId: \"s2.small\",\n                    diskTypeId: \"network-hdd\",\n                    diskSize: 20,\n                },\n                subnetId: fooVpcSubnet.id,\n                hostsCount: 2,\n                autoscalingConfig: {\n                    maxHostsCount: 10,\n                    measurementDuration: 60,\n                    warmupDuration: 60,\n                    stabilizationDuration: 120,\n                    preemptible: false,\n                    decommissionTimeout: 60,\n                },\n            },\n        ],\n    },\n}, {\n    dependsOn: [dataprocResourcemanagerFolderIamBinding],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    zone=\"ru-central1-b\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.1.0.0/24\"])\ndataproc_iam_service_account = yandex.IamServiceAccount(\"dataprocIamServiceAccount\", description=\"service account to manage Dataproc Cluster\")\nfoo_resourcemanager_folder = yandex.get_resourcemanager_folder(folder_id=\"some_folder_id\")\ndataproc_resourcemanager_folder_iam_binding = yandex.ResourcemanagerFolderIamBinding(\"dataprocResourcemanagerFolderIamBinding\",\n    folder_id=foo_resourcemanager_folder.id,\n    role=\"mdb.dataproc.agent\",\n    members=[dataproc_iam_service_account.id.apply(lambda id: f\"serviceAccount:{id}\")])\n# required in order to create bucket\nbucket_creator = yandex.ResourcemanagerFolderIamBinding(\"bucket-creator\",\n    folder_id=foo_resourcemanager_folder.id,\n    role=\"editor\",\n    members=[dataproc_iam_service_account.id.apply(lambda id: f\"serviceAccount:{id}\")])\nfoo_iam_service_account_static_access_key = yandex.IamServiceAccountStaticAccessKey(\"fooIamServiceAccountStaticAccessKey\", service_account_id=dataproc_iam_service_account.id)\nfoo_storage_bucket = yandex.StorageBucket(\"fooStorageBucket\",\n    bucket=\"foo\",\n    access_key=foo_iam_service_account_static_access_key.access_key,\n    secret_key=foo_iam_service_account_static_access_key.secret_key,\n    opts=pulumi.ResourceOptions(depends_on=[bucket_creator]))\nfoo_dataproc_cluster = yandex.DataprocCluster(\"fooDataprocCluster\",\n    bucket=foo_storage_bucket.bucket,\n    description=\"Dataproc Cluster created by Terraform\",\n    labels={\n        \"created_by\": \"terraform\",\n    },\n    service_account_id=dataproc_iam_service_account.id,\n    zone_id=\"ru-central1-b\",\n    cluster_config=yandex.DataprocClusterClusterConfigArgs(\n        hadoop=yandex.DataprocClusterClusterConfigHadoopArgs(\n            services=[\n                \"HDFS\",\n                \"YARN\",\n                \"SPARK\",\n                \"TEZ\",\n                \"MAPREDUCE\",\n                \"HIVE\",\n            ],\n            properties={\n                \"yarn:yarn.resourcemanager.am.max-attempts\": \"5\",\n            },\n            ssh_public_keys=[(lambda path: open(path).read())(\"~/.ssh/id_rsa.pub\")],\n        ),\n        subcluster_specs=[\n            yandex.DataprocClusterClusterConfigSubclusterSpecArgs(\n                name=\"main\",\n                role=\"MASTERNODE\",\n                resources=yandex.DataprocClusterClusterConfigSubclusterSpecResourcesArgs(\n                    resource_preset_id=\"s2.small\",\n                    disk_type_id=\"network-hdd\",\n                    disk_size=20,\n                ),\n                subnet_id=foo_vpc_subnet.id,\n                hosts_count=1,\n            ),\n            yandex.DataprocClusterClusterConfigSubclusterSpecArgs(\n                name=\"data\",\n                role=\"DATANODE\",\n                resources=yandex.DataprocClusterClusterConfigSubclusterSpecResourcesArgs(\n                    resource_preset_id=\"s2.small\",\n                    disk_type_id=\"network-hdd\",\n                    disk_size=20,\n                ),\n                subnet_id=foo_vpc_subnet.id,\n                hosts_count=2,\n            ),\n            yandex.DataprocClusterClusterConfigSubclusterSpecArgs(\n                name=\"compute\",\n                role=\"COMPUTENODE\",\n                resources=yandex.DataprocClusterClusterConfigSubclusterSpecResourcesArgs(\n                    resource_preset_id=\"s2.small\",\n                    disk_type_id=\"network-hdd\",\n                    disk_size=20,\n                ),\n                subnet_id=foo_vpc_subnet.id,\n                hosts_count=2,\n            ),\n            yandex.DataprocClusterClusterConfigSubclusterSpecArgs(\n                name=\"compute_autoscaling\",\n                role=\"COMPUTENODE\",\n                resources=yandex.DataprocClusterClusterConfigSubclusterSpecResourcesArgs(\n                    resource_preset_id=\"s2.small\",\n                    disk_type_id=\"network-hdd\",\n                    disk_size=20,\n                ),\n                subnet_id=foo_vpc_subnet.id,\n                hosts_count=2,\n                autoscaling_config=yandex.DataprocClusterClusterConfigSubclusterSpecAutoscalingConfigArgs(\n                    max_hosts_count=10,\n                    measurement_duration=60,\n                    warmup_duration=60,\n                    stabilization_duration=120,\n                    preemptible=False,\n                    decommission_timeout=60,\n                ),\n            ),\n        ],\n    ),\n    opts=pulumi.ResourceOptions(depends_on=[dataproc_resourcemanager_folder_iam_binding]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        Zone = \"ru-central1-b\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.1.0.0/24\",\n        },\n    });\n\n    var dataprocIamServiceAccount = new Yandex.IamServiceAccount(\"dataprocIamServiceAccount\", new()\n    {\n        Description = \"service account to manage Dataproc Cluster\",\n    });\n\n    var fooResourcemanagerFolder = Yandex.GetResourcemanagerFolder.Invoke(new()\n    {\n        FolderId = \"some_folder_id\",\n    });\n\n    var dataprocResourcemanagerFolderIamBinding = new Yandex.ResourcemanagerFolderIamBinding(\"dataprocResourcemanagerFolderIamBinding\", new()\n    {\n        FolderId = fooResourcemanagerFolder.Apply(getResourcemanagerFolderResult =\u003e getResourcemanagerFolderResult.Id),\n        Role = \"mdb.dataproc.agent\",\n        Members = new[]\n        {\n            dataprocIamServiceAccount.Id.Apply(id =\u003e $\"serviceAccount:{id}\"),\n        },\n    });\n\n    // required in order to create bucket\n    var bucket_creator = new Yandex.ResourcemanagerFolderIamBinding(\"bucket-creator\", new()\n    {\n        FolderId = fooResourcemanagerFolder.Apply(getResourcemanagerFolderResult =\u003e getResourcemanagerFolderResult.Id),\n        Role = \"editor\",\n        Members = new[]\n        {\n            dataprocIamServiceAccount.Id.Apply(id =\u003e $\"serviceAccount:{id}\"),\n        },\n    });\n\n    var fooIamServiceAccountStaticAccessKey = new Yandex.IamServiceAccountStaticAccessKey(\"fooIamServiceAccountStaticAccessKey\", new()\n    {\n        ServiceAccountId = dataprocIamServiceAccount.Id,\n    });\n\n    var fooStorageBucket = new Yandex.StorageBucket(\"fooStorageBucket\", new()\n    {\n        Bucket = \"foo\",\n        AccessKey = fooIamServiceAccountStaticAccessKey.AccessKey,\n        SecretKey = fooIamServiceAccountStaticAccessKey.SecretKey,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            bucket_creator,\n        },\n    });\n\n    var fooDataprocCluster = new Yandex.DataprocCluster(\"fooDataprocCluster\", new()\n    {\n        Bucket = fooStorageBucket.Bucket,\n        Description = \"Dataproc Cluster created by Terraform\",\n        Labels = \n        {\n            { \"created_by\", \"terraform\" },\n        },\n        ServiceAccountId = dataprocIamServiceAccount.Id,\n        ZoneId = \"ru-central1-b\",\n        ClusterConfig = new Yandex.Inputs.DataprocClusterClusterConfigArgs\n        {\n            Hadoop = new Yandex.Inputs.DataprocClusterClusterConfigHadoopArgs\n            {\n                Services = new[]\n                {\n                    \"HDFS\",\n                    \"YARN\",\n                    \"SPARK\",\n                    \"TEZ\",\n                    \"MAPREDUCE\",\n                    \"HIVE\",\n                },\n                Properties = \n                {\n                    { \"yarn:yarn.resourcemanager.am.max-attempts\", \"5\" },\n                },\n                SshPublicKeys = new[]\n                {\n                    File.ReadAllText(\"~/.ssh/id_rsa.pub\"),\n                },\n            },\n            SubclusterSpecs = new[]\n            {\n                new Yandex.Inputs.DataprocClusterClusterConfigSubclusterSpecArgs\n                {\n                    Name = \"main\",\n                    Role = \"MASTERNODE\",\n                    Resources = new Yandex.Inputs.DataprocClusterClusterConfigSubclusterSpecResourcesArgs\n                    {\n                        ResourcePresetId = \"s2.small\",\n                        DiskTypeId = \"network-hdd\",\n                        DiskSize = 20,\n                    },\n                    SubnetId = fooVpcSubnet.Id,\n                    HostsCount = 1,\n                },\n                new Yandex.Inputs.DataprocClusterClusterConfigSubclusterSpecArgs\n                {\n                    Name = \"data\",\n                    Role = \"DATANODE\",\n                    Resources = new Yandex.Inputs.DataprocClusterClusterConfigSubclusterSpecResourcesArgs\n                    {\n                        ResourcePresetId = \"s2.small\",\n                        DiskTypeId = \"network-hdd\",\n                        DiskSize = 20,\n                    },\n                    SubnetId = fooVpcSubnet.Id,\n                    HostsCount = 2,\n                },\n                new Yandex.Inputs.DataprocClusterClusterConfigSubclusterSpecArgs\n                {\n                    Name = \"compute\",\n                    Role = \"COMPUTENODE\",\n                    Resources = new Yandex.Inputs.DataprocClusterClusterConfigSubclusterSpecResourcesArgs\n                    {\n                        ResourcePresetId = \"s2.small\",\n                        DiskTypeId = \"network-hdd\",\n                        DiskSize = 20,\n                    },\n                    SubnetId = fooVpcSubnet.Id,\n                    HostsCount = 2,\n                },\n                new Yandex.Inputs.DataprocClusterClusterConfigSubclusterSpecArgs\n                {\n                    Name = \"compute_autoscaling\",\n                    Role = \"COMPUTENODE\",\n                    Resources = new Yandex.Inputs.DataprocClusterClusterConfigSubclusterSpecResourcesArgs\n                    {\n                        ResourcePresetId = \"s2.small\",\n                        DiskTypeId = \"network-hdd\",\n                        DiskSize = 20,\n                    },\n                    SubnetId = fooVpcSubnet.Id,\n                    HostsCount = 2,\n                    AutoscalingConfig = new Yandex.Inputs.DataprocClusterClusterConfigSubclusterSpecAutoscalingConfigArgs\n                    {\n                        MaxHostsCount = 10,\n                        MeasurementDuration = 60,\n                        WarmupDuration = 60,\n                        StabilizationDuration = 120,\n                        Preemptible = false,\n                        DecommissionTimeout = 60,\n                    },\n                },\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            dataprocResourcemanagerFolderIamBinding,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-b\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.1.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdataprocIamServiceAccount, err := yandex.NewIamServiceAccount(ctx, \"dataprocIamServiceAccount\", \u0026yandex.IamServiceAccountArgs{\n\t\t\tDescription: pulumi.String(\"service account to manage Dataproc Cluster\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooResourcemanagerFolder, err := yandex.LookupResourcemanagerFolder(ctx, \u0026GetResourcemanagerFolderArgs{\n\t\t\tFolderId: pulumi.StringRef(\"some_folder_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdataprocResourcemanagerFolderIamBinding, err := yandex.NewResourcemanagerFolderIamBinding(ctx, \"dataprocResourcemanagerFolderIamBinding\", \u0026yandex.ResourcemanagerFolderIamBindingArgs{\n\t\t\tFolderId: pulumi.String(fooResourcemanagerFolder.Id),\n\t\t\tRole:     pulumi.String(\"mdb.dataproc.agent\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tdataprocIamServiceAccount.ID().ApplyT(func(id string) (string, error) {\n\t\t\t\t\treturn fmt.Sprintf(\"serviceAccount:%v\", id), nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewResourcemanagerFolderIamBinding(ctx, \"bucket-creator\", \u0026yandex.ResourcemanagerFolderIamBindingArgs{\n\t\t\tFolderId: pulumi.String(fooResourcemanagerFolder.Id),\n\t\t\tRole:     pulumi.String(\"editor\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tdataprocIamServiceAccount.ID().ApplyT(func(id string) (string, error) {\n\t\t\t\t\treturn fmt.Sprintf(\"serviceAccount:%v\", id), nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooIamServiceAccountStaticAccessKey, err := yandex.NewIamServiceAccountStaticAccessKey(ctx, \"fooIamServiceAccountStaticAccessKey\", \u0026yandex.IamServiceAccountStaticAccessKeyArgs{\n\t\t\tServiceAccountId: dataprocIamServiceAccount.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooStorageBucket, err := yandex.NewStorageBucket(ctx, \"fooStorageBucket\", \u0026yandex.StorageBucketArgs{\n\t\t\tBucket:    pulumi.String(\"foo\"),\n\t\t\tAccessKey: fooIamServiceAccountStaticAccessKey.AccessKey,\n\t\t\tSecretKey: fooIamServiceAccountStaticAccessKey.SecretKey,\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tbucket_creator,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewDataprocCluster(ctx, \"fooDataprocCluster\", \u0026yandex.DataprocClusterArgs{\n\t\t\tBucket:      fooStorageBucket.Bucket,\n\t\t\tDescription: pulumi.String(\"Dataproc Cluster created by Terraform\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"created_by\": pulumi.String(\"terraform\"),\n\t\t\t},\n\t\t\tServiceAccountId: dataprocIamServiceAccount.ID(),\n\t\t\tZoneId:           pulumi.String(\"ru-central1-b\"),\n\t\t\tClusterConfig: \u0026DataprocClusterClusterConfigArgs{\n\t\t\t\tHadoop: \u0026DataprocClusterClusterConfigHadoopArgs{\n\t\t\t\t\tServices: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"HDFS\"),\n\t\t\t\t\t\tpulumi.String(\"YARN\"),\n\t\t\t\t\t\tpulumi.String(\"SPARK\"),\n\t\t\t\t\t\tpulumi.String(\"TEZ\"),\n\t\t\t\t\t\tpulumi.String(\"MAPREDUCE\"),\n\t\t\t\t\t\tpulumi.String(\"HIVE\"),\n\t\t\t\t\t},\n\t\t\t\t\tProperties: pulumi.StringMap{\n\t\t\t\t\t\t\"yarn:yarn.resourcemanager.am.max-attempts\": pulumi.String(\"5\"),\n\t\t\t\t\t},\n\t\t\t\t\tSshPublicKeys: pulumi.StringArray{\n\t\t\t\t\t\treadFileOrPanic(\"~/.ssh/id_rsa.pub\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSubclusterSpecs: DataprocClusterClusterConfigSubclusterSpecArray{\n\t\t\t\t\t\u0026DataprocClusterClusterConfigSubclusterSpecArgs{\n\t\t\t\t\t\tName: pulumi.String(\"main\"),\n\t\t\t\t\t\tRole: pulumi.String(\"MASTERNODE\"),\n\t\t\t\t\t\tResources: \u0026DataprocClusterClusterConfigSubclusterSpecResourcesArgs{\n\t\t\t\t\t\t\tResourcePresetId: pulumi.String(\"s2.small\"),\n\t\t\t\t\t\t\tDiskTypeId:       pulumi.String(\"network-hdd\"),\n\t\t\t\t\t\t\tDiskSize:         pulumi.Float64(20),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSubnetId:   fooVpcSubnet.ID(),\n\t\t\t\t\t\tHostsCount: pulumi.Float64(1),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026DataprocClusterClusterConfigSubclusterSpecArgs{\n\t\t\t\t\t\tName: pulumi.String(\"data\"),\n\t\t\t\t\t\tRole: pulumi.String(\"DATANODE\"),\n\t\t\t\t\t\tResources: \u0026DataprocClusterClusterConfigSubclusterSpecResourcesArgs{\n\t\t\t\t\t\t\tResourcePresetId: pulumi.String(\"s2.small\"),\n\t\t\t\t\t\t\tDiskTypeId:       pulumi.String(\"network-hdd\"),\n\t\t\t\t\t\t\tDiskSize:         pulumi.Float64(20),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSubnetId:   fooVpcSubnet.ID(),\n\t\t\t\t\t\tHostsCount: pulumi.Float64(2),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026DataprocClusterClusterConfigSubclusterSpecArgs{\n\t\t\t\t\t\tName: pulumi.String(\"compute\"),\n\t\t\t\t\t\tRole: pulumi.String(\"COMPUTENODE\"),\n\t\t\t\t\t\tResources: \u0026DataprocClusterClusterConfigSubclusterSpecResourcesArgs{\n\t\t\t\t\t\t\tResourcePresetId: pulumi.String(\"s2.small\"),\n\t\t\t\t\t\t\tDiskTypeId:       pulumi.String(\"network-hdd\"),\n\t\t\t\t\t\t\tDiskSize:         pulumi.Float64(20),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSubnetId:   fooVpcSubnet.ID(),\n\t\t\t\t\t\tHostsCount: pulumi.Float64(2),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026DataprocClusterClusterConfigSubclusterSpecArgs{\n\t\t\t\t\t\tName: pulumi.String(\"compute_autoscaling\"),\n\t\t\t\t\t\tRole: pulumi.String(\"COMPUTENODE\"),\n\t\t\t\t\t\tResources: \u0026DataprocClusterClusterConfigSubclusterSpecResourcesArgs{\n\t\t\t\t\t\t\tResourcePresetId: pulumi.String(\"s2.small\"),\n\t\t\t\t\t\t\tDiskTypeId:       pulumi.String(\"network-hdd\"),\n\t\t\t\t\t\t\tDiskSize:         pulumi.Float64(20),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSubnetId:   fooVpcSubnet.ID(),\n\t\t\t\t\t\tHostsCount: pulumi.Float64(2),\n\t\t\t\t\t\tAutoscalingConfig: \u0026DataprocClusterClusterConfigSubclusterSpecAutoscalingConfigArgs{\n\t\t\t\t\t\t\tMaxHostsCount:         pulumi.Float64(10),\n\t\t\t\t\t\t\tMeasurementDuration:   pulumi.Float64(60),\n\t\t\t\t\t\t\tWarmupDuration:        pulumi.Float64(60),\n\t\t\t\t\t\t\tStabilizationDuration: pulumi.Float64(120),\n\t\t\t\t\t\t\tPreemptible:           pulumi.Bool(false),\n\t\t\t\t\t\t\tDecommissionTimeout:   pulumi.Float64(60),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tdataprocResourcemanagerFolderIamBinding,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.IamServiceAccount;\nimport com.pulumi.yandex.IamServiceAccountArgs;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetResourcemanagerFolderArgs;\nimport com.pulumi.yandex.ResourcemanagerFolderIamBinding;\nimport com.pulumi.yandex.ResourcemanagerFolderIamBindingArgs;\nimport com.pulumi.yandex.IamServiceAccountStaticAccessKey;\nimport com.pulumi.yandex.IamServiceAccountStaticAccessKeyArgs;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport com.pulumi.yandex.DataprocCluster;\nimport com.pulumi.yandex.DataprocClusterArgs;\nimport com.pulumi.yandex.inputs.DataprocClusterClusterConfigArgs;\nimport com.pulumi.yandex.inputs.DataprocClusterClusterConfigHadoopArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-b\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.1.0.0/24\")\n            .build());\n\n        var dataprocIamServiceAccount = new IamServiceAccount(\"dataprocIamServiceAccount\", IamServiceAccountArgs.builder()        \n            .description(\"service account to manage Dataproc Cluster\")\n            .build());\n\n        final var fooResourcemanagerFolder = YandexFunctions.getResourcemanagerFolder(GetResourcemanagerFolderArgs.builder()\n            .folderId(\"some_folder_id\")\n            .build());\n\n        var dataprocResourcemanagerFolderIamBinding = new ResourcemanagerFolderIamBinding(\"dataprocResourcemanagerFolderIamBinding\", ResourcemanagerFolderIamBindingArgs.builder()        \n            .folderId(fooResourcemanagerFolder.applyValue(getResourcemanagerFolderResult -\u003e getResourcemanagerFolderResult.id()))\n            .role(\"mdb.dataproc.agent\")\n            .members(dataprocIamServiceAccount.id().applyValue(id -\u003e String.format(\"serviceAccount:%s\", id)))\n            .build());\n\n        var bucket_creator = new ResourcemanagerFolderIamBinding(\"bucket-creator\", ResourcemanagerFolderIamBindingArgs.builder()        \n            .folderId(fooResourcemanagerFolder.applyValue(getResourcemanagerFolderResult -\u003e getResourcemanagerFolderResult.id()))\n            .role(\"editor\")\n            .members(dataprocIamServiceAccount.id().applyValue(id -\u003e String.format(\"serviceAccount:%s\", id)))\n            .build());\n\n        var fooIamServiceAccountStaticAccessKey = new IamServiceAccountStaticAccessKey(\"fooIamServiceAccountStaticAccessKey\", IamServiceAccountStaticAccessKeyArgs.builder()        \n            .serviceAccountId(dataprocIamServiceAccount.id())\n            .build());\n\n        var fooStorageBucket = new StorageBucket(\"fooStorageBucket\", StorageBucketArgs.builder()        \n            .bucket(\"foo\")\n            .accessKey(fooIamServiceAccountStaticAccessKey.accessKey())\n            .secretKey(fooIamServiceAccountStaticAccessKey.secretKey())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(bucket_creator)\n                .build());\n\n        var fooDataprocCluster = new DataprocCluster(\"fooDataprocCluster\", DataprocClusterArgs.builder()        \n            .bucket(fooStorageBucket.bucket())\n            .description(\"Dataproc Cluster created by Terraform\")\n            .labels(Map.of(\"created_by\", \"terraform\"))\n            .serviceAccountId(dataprocIamServiceAccount.id())\n            .zoneId(\"ru-central1-b\")\n            .clusterConfig(DataprocClusterClusterConfigArgs.builder()\n                .hadoop(DataprocClusterClusterConfigHadoopArgs.builder()\n                    .services(                    \n                        \"HDFS\",\n                        \"YARN\",\n                        \"SPARK\",\n                        \"TEZ\",\n                        \"MAPREDUCE\",\n                        \"HIVE\")\n                    .properties(Map.of(\"yarn:yarn.resourcemanager.am.max-attempts\", 5))\n                    .sshPublicKeys(Files.readString(Paths.get(\"~/.ssh/id_rsa.pub\")))\n                    .build())\n                .subclusterSpecs(                \n                    DataprocClusterClusterConfigSubclusterSpecArgs.builder()\n                        .name(\"main\")\n                        .role(\"MASTERNODE\")\n                        .resources(DataprocClusterClusterConfigSubclusterSpecResourcesArgs.builder()\n                            .resourcePresetId(\"s2.small\")\n                            .diskTypeId(\"network-hdd\")\n                            .diskSize(20)\n                            .build())\n                        .subnetId(fooVpcSubnet.id())\n                        .hostsCount(1)\n                        .build(),\n                    DataprocClusterClusterConfigSubclusterSpecArgs.builder()\n                        .name(\"data\")\n                        .role(\"DATANODE\")\n                        .resources(DataprocClusterClusterConfigSubclusterSpecResourcesArgs.builder()\n                            .resourcePresetId(\"s2.small\")\n                            .diskTypeId(\"network-hdd\")\n                            .diskSize(20)\n                            .build())\n                        .subnetId(fooVpcSubnet.id())\n                        .hostsCount(2)\n                        .build(),\n                    DataprocClusterClusterConfigSubclusterSpecArgs.builder()\n                        .name(\"compute\")\n                        .role(\"COMPUTENODE\")\n                        .resources(DataprocClusterClusterConfigSubclusterSpecResourcesArgs.builder()\n                            .resourcePresetId(\"s2.small\")\n                            .diskTypeId(\"network-hdd\")\n                            .diskSize(20)\n                            .build())\n                        .subnetId(fooVpcSubnet.id())\n                        .hostsCount(2)\n                        .build(),\n                    DataprocClusterClusterConfigSubclusterSpecArgs.builder()\n                        .name(\"compute_autoscaling\")\n                        .role(\"COMPUTENODE\")\n                        .resources(DataprocClusterClusterConfigSubclusterSpecResourcesArgs.builder()\n                            .resourcePresetId(\"s2.small\")\n                            .diskTypeId(\"network-hdd\")\n                            .diskSize(20)\n                            .build())\n                        .subnetId(fooVpcSubnet.id())\n                        .hostsCount(2)\n                        .autoscalingConfig(DataprocClusterClusterConfigSubclusterSpecAutoscalingConfigArgs.builder()\n                            .maxHostsCount(10)\n                            .measurementDuration(60)\n                            .warmupDuration(60)\n                            .stabilizationDuration(120)\n                            .preemptible(false)\n                            .decommissionTimeout(60)\n                            .build())\n                        .build())\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(dataprocResourcemanagerFolderIamBinding)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooDataprocCluster:\n    type: yandex:DataprocCluster\n    properties:\n      bucket: ${fooStorageBucket.bucket}\n      description: Dataproc Cluster created by Terraform\n      labels:\n        created_by: terraform\n      serviceAccountId: ${dataprocIamServiceAccount.id}\n      zoneId: ru-central1-b\n      clusterConfig:\n        hadoop:\n          services:\n            - HDFS\n            - YARN\n            - SPARK\n            - TEZ\n            - MAPREDUCE\n            - HIVE\n          properties:\n            yarn:yarn.resourcemanager.am.max-attempts: 5\n          sshPublicKeys:\n            - fn::readFile: ~/.ssh/id_rsa.pub\n        subclusterSpecs:\n          - name: main\n            role: MASTERNODE\n            resources:\n              resourcePresetId: s2.small\n              diskTypeId: network-hdd\n              diskSize: 20\n            subnetId: ${fooVpcSubnet.id}\n            hostsCount: 1\n          - name: data\n            role: DATANODE\n            resources:\n              resourcePresetId: s2.small\n              diskTypeId: network-hdd\n              diskSize: 20\n            subnetId: ${fooVpcSubnet.id}\n            hostsCount: 2\n          - name: compute\n            role: COMPUTENODE\n            resources:\n              resourcePresetId: s2.small\n              diskTypeId: network-hdd\n              diskSize: 20\n            subnetId: ${fooVpcSubnet.id}\n            hostsCount: 2\n          - name: compute_autoscaling\n            role: COMPUTENODE\n            resources:\n              resourcePresetId: s2.small\n              diskTypeId: network-hdd\n              diskSize: 20\n            subnetId: ${fooVpcSubnet.id}\n            hostsCount: 2\n            autoscalingConfig:\n              maxHostsCount: 10\n              measurementDuration: 60\n              warmupDuration: 60\n              stabilizationDuration: 120\n              preemptible: false\n              decommissionTimeout: 60\n    options:\n      dependson:\n        - ${dataprocResourcemanagerFolderIamBinding}\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-b\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.1.0.0/24\n  dataprocIamServiceAccount:\n    type: yandex:IamServiceAccount\n    properties:\n      description: service account to manage Dataproc Cluster\n  dataprocResourcemanagerFolderIamBinding:\n    type: yandex:ResourcemanagerFolderIamBinding\n    properties:\n      folderId: ${fooResourcemanagerFolder.id}\n      role: mdb.dataproc.agent\n      members:\n        - serviceAccount:${dataprocIamServiceAccount.id}\n  # required in order to create bucket\n  bucket-creator:\n    type: yandex:ResourcemanagerFolderIamBinding\n    properties:\n      folderId: ${fooResourcemanagerFolder.id}\n      role: editor\n      members:\n        - serviceAccount:${dataprocIamServiceAccount.id}\n  fooIamServiceAccountStaticAccessKey:\n    type: yandex:IamServiceAccountStaticAccessKey\n    properties:\n      serviceAccountId: ${dataprocIamServiceAccount.id}\n  fooStorageBucket:\n    type: yandex:StorageBucket\n    properties:\n      bucket: foo\n      accessKey: ${fooIamServiceAccountStaticAccessKey.accessKey}\n      secretKey: ${fooIamServiceAccountStaticAccessKey.secretKey}\n    options:\n      dependson:\n        - ${[\"bucket-creator\"]}\nvariables:\n  fooResourcemanagerFolder:\n    fn::invoke:\n      Function: yandex:getResourcemanagerFolder\n      Arguments:\n        folderId: some_folder_id\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA cluster can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/dataprocCluster:DataprocCluster foo cluster_id\n```\n\n ",
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "Name of the Object Storage bucket to use for Data Proc jobs. Data Proc Agent saves output of job driver's process to specified bucket. In order for this to work service account (specified by the `service_account_id` argument) should be given permission to create objects within this bucket.\n"
                },
                "clusterConfig": {
                    "$ref": "#/types/yandex:index/DataprocClusterClusterConfig:DataprocClusterClusterConfig",
                    "description": "Configuration and resources for hosts that should be created with the cluster. The structure is documented below.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "(Computed) The Data Proc cluster creation timestamp.\n* `cluster_config.0.subcluster_spec.X.id` - (Computed) ID of the subcluster.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Data Proc cluster.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder to create a cluster in. If it is not provided, the default provider folder is used.\n"
                },
                "hostGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of host group IDs to place VMs of the cluster on.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Data Proc cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Data Proc subcluster.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of security group IDs that the cluster belongs to.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "Service account to be used by the Data Proc agent to access resources of Yandex.Cloud. Selected service account should have `mdb.dataproc.agent` role on the folder where the Data Proc cluster will be located.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/DataprocClusterTimeouts:DataprocClusterTimeouts"
                },
                "uiProxy": {
                    "type": "boolean",
                    "description": "Whether to enable UI Proxy feature.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "ID of the availability zone to create cluster in. If it is not provided, the default provider zone is used.\n"
                }
            },
            "required": [
                "clusterConfig",
                "createdAt",
                "deletionProtection",
                "folderId",
                "name",
                "serviceAccountId",
                "timeouts",
                "zoneId"
            ],
            "inputProperties": {
                "bucket": {
                    "type": "string",
                    "description": "Name of the Object Storage bucket to use for Data Proc jobs. Data Proc Agent saves output of job driver's process to specified bucket. In order for this to work service account (specified by the `service_account_id` argument) should be given permission to create objects within this bucket.\n"
                },
                "clusterConfig": {
                    "$ref": "#/types/yandex:index/DataprocClusterClusterConfig:DataprocClusterClusterConfig",
                    "description": "Configuration and resources for hosts that should be created with the cluster. The structure is documented below.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Data Proc cluster.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder to create a cluster in. If it is not provided, the default provider folder is used.\n"
                },
                "hostGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of host group IDs to place VMs of the cluster on.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Data Proc cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Data Proc subcluster.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of security group IDs that the cluster belongs to.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "Service account to be used by the Data Proc agent to access resources of Yandex.Cloud. Selected service account should have `mdb.dataproc.agent` role on the folder where the Data Proc cluster will be located.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/DataprocClusterTimeouts:DataprocClusterTimeouts"
                },
                "uiProxy": {
                    "type": "boolean",
                    "description": "Whether to enable UI Proxy feature.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "ID of the availability zone to create cluster in. If it is not provided, the default provider zone is used.\n"
                }
            },
            "requiredInputs": [
                "clusterConfig",
                "serviceAccountId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DataprocCluster resources.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "Name of the Object Storage bucket to use for Data Proc jobs. Data Proc Agent saves output of job driver's process to specified bucket. In order for this to work service account (specified by the `service_account_id` argument) should be given permission to create objects within this bucket.\n"
                    },
                    "clusterConfig": {
                        "$ref": "#/types/yandex:index/DataprocClusterClusterConfig:DataprocClusterClusterConfig",
                        "description": "Configuration and resources for hosts that should be created with the cluster. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "(Computed) The Data Proc cluster creation timestamp.\n* `cluster_config.0.subcluster_spec.X.id` - (Computed) ID of the subcluster.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Data Proc cluster.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder to create a cluster in. If it is not provided, the default provider folder is used.\n"
                    },
                    "hostGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of host group IDs to place VMs of the cluster on.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Data Proc cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Data Proc subcluster.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of security group IDs that the cluster belongs to.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "Service account to be used by the Data Proc agent to access resources of Yandex.Cloud. Selected service account should have `mdb.dataproc.agent` role on the folder where the Data Proc cluster will be located.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/DataprocClusterTimeouts:DataprocClusterTimeouts"
                    },
                    "uiProxy": {
                        "type": "boolean",
                        "description": "Whether to enable UI Proxy feature.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "ID of the availability zone to create cluster in. If it is not provided, the default provider zone is used.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/datatransferEndpoint:DatatransferEndpoint": {
            "description": "Manages a Data Transfer endpoint. For more information, see [the official documentation](https://cloud.yandex.com/docs/data-transfer/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst pgSource = new yandex.DatatransferEndpoint(\"pg_source\", {\n    settings: {\n        postgresSource: {\n            connection: {\n                onPremise: {\n                    hosts: [\"example.org\"],\n                    port: 5432,\n                },\n            },\n            database: \"db1\",\n            password: {\n                raw: \"123\",\n            },\n            slotGigabyteLagLimit: 100,\n            user: \"user1\",\n        },\n    },\n});\nconst pgTarget = new yandex.DatatransferEndpoint(\"pg_target\", {\n    folderId: \"some_folder_id\",\n    settings: {\n        postgresTarget: {\n            connection: {\n                mdbClusterId: \"some_cluster_id\",\n            },\n            database: \"db2\",\n            password: {\n                raw: \"321\",\n            },\n            user: \"user2\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\npg_source = yandex.DatatransferEndpoint(\"pgSource\", settings=yandex.DatatransferEndpointSettingsArgs(\n    postgres_source=yandex.DatatransferEndpointSettingsPostgresSourceArgs(\n        connection=yandex.DatatransferEndpointSettingsPostgresSourceConnectionArgs(\n            on_premise=yandex.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs(\n                hosts=[\"example.org\"],\n                port=5432,\n            ),\n        ),\n        database=\"db1\",\n        password=yandex.DatatransferEndpointSettingsPostgresSourcePasswordArgs(\n            raw=\"123\",\n        ),\n        slot_gigabyte_lag_limit=100,\n        user=\"user1\",\n    ),\n))\npg_target = yandex.DatatransferEndpoint(\"pgTarget\",\n    folder_id=\"some_folder_id\",\n    settings=yandex.DatatransferEndpointSettingsArgs(\n        postgres_target=yandex.DatatransferEndpointSettingsPostgresTargetArgs(\n            connection=yandex.DatatransferEndpointSettingsPostgresTargetConnectionArgs(\n                mdb_cluster_id=\"some_cluster_id\",\n            ),\n            database=\"db2\",\n            password=yandex.DatatransferEndpointSettingsPostgresTargetPasswordArgs(\n                raw=\"321\",\n            ),\n            user=\"user2\",\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pgSource = new Yandex.DatatransferEndpoint(\"pgSource\", new()\n    {\n        Settings = new Yandex.Inputs.DatatransferEndpointSettingsArgs\n        {\n            PostgresSource = new Yandex.Inputs.DatatransferEndpointSettingsPostgresSourceArgs\n            {\n                Connection = new Yandex.Inputs.DatatransferEndpointSettingsPostgresSourceConnectionArgs\n                {\n                    OnPremise = new Yandex.Inputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs\n                    {\n                        Hosts = new[]\n                        {\n                            \"example.org\",\n                        },\n                        Port = 5432,\n                    },\n                },\n                Database = \"db1\",\n                Password = new Yandex.Inputs.DatatransferEndpointSettingsPostgresSourcePasswordArgs\n                {\n                    Raw = \"123\",\n                },\n                SlotGigabyteLagLimit = 100,\n                User = \"user1\",\n            },\n        },\n    });\n\n    var pgTarget = new Yandex.DatatransferEndpoint(\"pgTarget\", new()\n    {\n        FolderId = \"some_folder_id\",\n        Settings = new Yandex.Inputs.DatatransferEndpointSettingsArgs\n        {\n            PostgresTarget = new Yandex.Inputs.DatatransferEndpointSettingsPostgresTargetArgs\n            {\n                Connection = new Yandex.Inputs.DatatransferEndpointSettingsPostgresTargetConnectionArgs\n                {\n                    MdbClusterId = \"some_cluster_id\",\n                },\n                Database = \"db2\",\n                Password = new Yandex.Inputs.DatatransferEndpointSettingsPostgresTargetPasswordArgs\n                {\n                    Raw = \"321\",\n                },\n                User = \"user2\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewDatatransferEndpoint(ctx, \"pgSource\", \u0026yandex.DatatransferEndpointArgs{\n\t\t\tSettings: \u0026DatatransferEndpointSettingsArgs{\n\t\t\t\tPostgresSource: \u0026DatatransferEndpointSettingsPostgresSourceArgs{\n\t\t\t\t\tConnection: \u0026DatatransferEndpointSettingsPostgresSourceConnectionArgs{\n\t\t\t\t\t\tOnPremise: \u0026DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs{\n\t\t\t\t\t\t\tHosts: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"example.org\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tPort: pulumi.Float64(5432),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tDatabase: pulumi.String(\"db1\"),\n\t\t\t\t\tPassword: \u0026DatatransferEndpointSettingsPostgresSourcePasswordArgs{\n\t\t\t\t\t\tRaw: pulumi.String(\"123\"),\n\t\t\t\t\t},\n\t\t\t\t\tSlotGigabyteLagLimit: pulumi.Float64(100),\n\t\t\t\t\tUser:                 pulumi.String(\"user1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewDatatransferEndpoint(ctx, \"pgTarget\", \u0026yandex.DatatransferEndpointArgs{\n\t\t\tFolderId: pulumi.String(\"some_folder_id\"),\n\t\t\tSettings: \u0026DatatransferEndpointSettingsArgs{\n\t\t\t\tPostgresTarget: \u0026DatatransferEndpointSettingsPostgresTargetArgs{\n\t\t\t\t\tConnection: \u0026DatatransferEndpointSettingsPostgresTargetConnectionArgs{\n\t\t\t\t\t\tMdbClusterId: pulumi.String(\"some_cluster_id\"),\n\t\t\t\t\t},\n\t\t\t\t\tDatabase: pulumi.String(\"db2\"),\n\t\t\t\t\tPassword: \u0026DatatransferEndpointSettingsPostgresTargetPasswordArgs{\n\t\t\t\t\t\tRaw: pulumi.String(\"321\"),\n\t\t\t\t\t},\n\t\t\t\t\tUser: pulumi.String(\"user2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.DatatransferEndpoint;\nimport com.pulumi.yandex.DatatransferEndpointArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsPostgresSourceArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsPostgresSourceConnectionArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsPostgresSourcePasswordArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsPostgresTargetArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsPostgresTargetConnectionArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsPostgresTargetPasswordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pgSource = new DatatransferEndpoint(\"pgSource\", DatatransferEndpointArgs.builder()        \n            .settings(DatatransferEndpointSettingsArgs.builder()\n                .postgresSource(DatatransferEndpointSettingsPostgresSourceArgs.builder()\n                    .connection(DatatransferEndpointSettingsPostgresSourceConnectionArgs.builder()\n                        .onPremise(DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs.builder()\n                            .hosts(\"example.org\")\n                            .port(5432)\n                            .build())\n                        .build())\n                    .database(\"db1\")\n                    .password(DatatransferEndpointSettingsPostgresSourcePasswordArgs.builder()\n                        .raw(\"123\")\n                        .build())\n                    .slotGigabyteLagLimit(100)\n                    .user(\"user1\")\n                    .build())\n                .build())\n            .build());\n\n        var pgTarget = new DatatransferEndpoint(\"pgTarget\", DatatransferEndpointArgs.builder()        \n            .folderId(\"some_folder_id\")\n            .settings(DatatransferEndpointSettingsArgs.builder()\n                .postgresTarget(DatatransferEndpointSettingsPostgresTargetArgs.builder()\n                    .connection(DatatransferEndpointSettingsPostgresTargetConnectionArgs.builder()\n                        .mdbClusterId(\"some_cluster_id\")\n                        .build())\n                    .database(\"db2\")\n                    .password(DatatransferEndpointSettingsPostgresTargetPasswordArgs.builder()\n                        .raw(\"321\")\n                        .build())\n                    .user(\"user2\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pgSource:\n    type: yandex:DatatransferEndpoint\n    properties:\n      settings:\n        postgresSource:\n          connection:\n            onPremise:\n              hosts:\n                - example.org\n              port: 5432\n          database: db1\n          password:\n            raw: '123'\n          slotGigabyteLagLimit: 100\n          user: user1\n  pgTarget:\n    type: yandex:DatatransferEndpoint\n    properties:\n      folderId: some_folder_id\n      settings:\n        postgresTarget:\n          connection:\n            mdbClusterId: some_cluster_id\n          database: db2\n          password:\n            raw: '321'\n          user: user2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nAn endpoint can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/datatransferEndpoint:DatatransferEndpoint foo endpoint_id\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Arbitrary description text for the endpoint.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder to create the endpoint in. If it is not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Data Transfer endpoint.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the endpoint.\n"
                },
                "settings": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettings:DatatransferEndpointSettings",
                    "description": "Settings for the endpoint. The structure is documented below.\n"
                }
            },
            "required": [
                "description",
                "folderId",
                "labels",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Arbitrary description text for the endpoint.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder to create the endpoint in. If it is not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Data Transfer endpoint.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the endpoint.\n"
                },
                "settings": {
                    "$ref": "#/types/yandex:index/DatatransferEndpointSettings:DatatransferEndpointSettings",
                    "description": "Settings for the endpoint. The structure is documented below.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatatransferEndpoint resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Arbitrary description text for the endpoint.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder to create the endpoint in. If it is not provided, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Data Transfer endpoint.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the endpoint.\n"
                    },
                    "settings": {
                        "$ref": "#/types/yandex:index/DatatransferEndpointSettings:DatatransferEndpointSettings",
                        "description": "Settings for the endpoint. The structure is documented below.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/datatransferTransfer:DatatransferTransfer": {
            "description": "Manages a Data Transfer transfer. For more information, see [the official documentation](https://cloud.yandex.com/docs/data-transfer/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst pgSource = new yandex.DatatransferEndpoint(\"pgSource\", {settings: {\n    postgresSource: {\n        connection: {\n            onPremise: {\n                hosts: [\"example.org\"],\n                port: 5432,\n            },\n        },\n        slotGigabyteLagLimit: 100,\n        database: \"db1\",\n        user: \"user1\",\n        password: {\n            raw: \"123\",\n        },\n    },\n}});\nconst pgTarget = new yandex.DatatransferEndpoint(\"pgTarget\", {\n    folderId: \"some_folder_id\",\n    settings: {\n        postgresTarget: {\n            connection: {\n                mdbClusterId: \"some_cluster_id\",\n            },\n            database: \"db2\",\n            user: \"user2\",\n            password: {\n                raw: \"321\",\n            },\n        },\n    },\n});\nconst pgpgTransfer = new yandex.DatatransferTransfer(\"pgpgTransfer\", {\n    folderId: \"some_folder_id\",\n    sourceId: pgSource.id,\n    targetId: pgTarget.id,\n    type: \"SNAPSHOT_AND_INCREMENT\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\npg_source = yandex.DatatransferEndpoint(\"pgSource\", settings=yandex.DatatransferEndpointSettingsArgs(\n    postgres_source=yandex.DatatransferEndpointSettingsPostgresSourceArgs(\n        connection=yandex.DatatransferEndpointSettingsPostgresSourceConnectionArgs(\n            on_premise=yandex.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs(\n                hosts=[\"example.org\"],\n                port=5432,\n            ),\n        ),\n        slot_gigabyte_lag_limit=100,\n        database=\"db1\",\n        user=\"user1\",\n        password=yandex.DatatransferEndpointSettingsPostgresSourcePasswordArgs(\n            raw=\"123\",\n        ),\n    ),\n))\npg_target = yandex.DatatransferEndpoint(\"pgTarget\",\n    folder_id=\"some_folder_id\",\n    settings=yandex.DatatransferEndpointSettingsArgs(\n        postgres_target=yandex.DatatransferEndpointSettingsPostgresTargetArgs(\n            connection=yandex.DatatransferEndpointSettingsPostgresTargetConnectionArgs(\n                mdb_cluster_id=\"some_cluster_id\",\n            ),\n            database=\"db2\",\n            user=\"user2\",\n            password=yandex.DatatransferEndpointSettingsPostgresTargetPasswordArgs(\n                raw=\"321\",\n            ),\n        ),\n    ))\npgpg_transfer = yandex.DatatransferTransfer(\"pgpgTransfer\",\n    folder_id=\"some_folder_id\",\n    source_id=pg_source.id,\n    target_id=pg_target.id,\n    type=\"SNAPSHOT_AND_INCREMENT\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var pgSource = new Yandex.DatatransferEndpoint(\"pgSource\", new()\n    {\n        Settings = new Yandex.Inputs.DatatransferEndpointSettingsArgs\n        {\n            PostgresSource = new Yandex.Inputs.DatatransferEndpointSettingsPostgresSourceArgs\n            {\n                Connection = new Yandex.Inputs.DatatransferEndpointSettingsPostgresSourceConnectionArgs\n                {\n                    OnPremise = new Yandex.Inputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs\n                    {\n                        Hosts = new[]\n                        {\n                            \"example.org\",\n                        },\n                        Port = 5432,\n                    },\n                },\n                SlotGigabyteLagLimit = 100,\n                Database = \"db1\",\n                User = \"user1\",\n                Password = new Yandex.Inputs.DatatransferEndpointSettingsPostgresSourcePasswordArgs\n                {\n                    Raw = \"123\",\n                },\n            },\n        },\n    });\n\n    var pgTarget = new Yandex.DatatransferEndpoint(\"pgTarget\", new()\n    {\n        FolderId = \"some_folder_id\",\n        Settings = new Yandex.Inputs.DatatransferEndpointSettingsArgs\n        {\n            PostgresTarget = new Yandex.Inputs.DatatransferEndpointSettingsPostgresTargetArgs\n            {\n                Connection = new Yandex.Inputs.DatatransferEndpointSettingsPostgresTargetConnectionArgs\n                {\n                    MdbClusterId = \"some_cluster_id\",\n                },\n                Database = \"db2\",\n                User = \"user2\",\n                Password = new Yandex.Inputs.DatatransferEndpointSettingsPostgresTargetPasswordArgs\n                {\n                    Raw = \"321\",\n                },\n            },\n        },\n    });\n\n    var pgpgTransfer = new Yandex.DatatransferTransfer(\"pgpgTransfer\", new()\n    {\n        FolderId = \"some_folder_id\",\n        SourceId = pgSource.Id,\n        TargetId = pgTarget.Id,\n        Type = \"SNAPSHOT_AND_INCREMENT\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpgSource, err := yandex.NewDatatransferEndpoint(ctx, \"pgSource\", \u0026yandex.DatatransferEndpointArgs{\n\t\t\tSettings: \u0026DatatransferEndpointSettingsArgs{\n\t\t\t\tPostgresSource: \u0026DatatransferEndpointSettingsPostgresSourceArgs{\n\t\t\t\t\tConnection: \u0026DatatransferEndpointSettingsPostgresSourceConnectionArgs{\n\t\t\t\t\t\tOnPremise: \u0026DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs{\n\t\t\t\t\t\t\tHosts: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"example.org\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tPort: pulumi.Float64(5432),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tSlotGigabyteLagLimit: pulumi.Float64(100),\n\t\t\t\t\tDatabase:             pulumi.String(\"db1\"),\n\t\t\t\t\tUser:                 pulumi.String(\"user1\"),\n\t\t\t\t\tPassword: \u0026DatatransferEndpointSettingsPostgresSourcePasswordArgs{\n\t\t\t\t\t\tRaw: pulumi.String(\"123\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpgTarget, err := yandex.NewDatatransferEndpoint(ctx, \"pgTarget\", \u0026yandex.DatatransferEndpointArgs{\n\t\t\tFolderId: pulumi.String(\"some_folder_id\"),\n\t\t\tSettings: \u0026DatatransferEndpointSettingsArgs{\n\t\t\t\tPostgresTarget: \u0026DatatransferEndpointSettingsPostgresTargetArgs{\n\t\t\t\t\tConnection: \u0026DatatransferEndpointSettingsPostgresTargetConnectionArgs{\n\t\t\t\t\t\tMdbClusterId: pulumi.String(\"some_cluster_id\"),\n\t\t\t\t\t},\n\t\t\t\t\tDatabase: pulumi.String(\"db2\"),\n\t\t\t\t\tUser:     pulumi.String(\"user2\"),\n\t\t\t\t\tPassword: \u0026DatatransferEndpointSettingsPostgresTargetPasswordArgs{\n\t\t\t\t\t\tRaw: pulumi.String(\"321\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewDatatransferTransfer(ctx, \"pgpgTransfer\", \u0026yandex.DatatransferTransferArgs{\n\t\t\tFolderId: pulumi.String(\"some_folder_id\"),\n\t\t\tSourceId: pgSource.ID(),\n\t\t\tTargetId: pgTarget.ID(),\n\t\t\tType:     pulumi.String(\"SNAPSHOT_AND_INCREMENT\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.DatatransferEndpoint;\nimport com.pulumi.yandex.DatatransferEndpointArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsPostgresSourceArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsPostgresSourceConnectionArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsPostgresSourcePasswordArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsPostgresTargetArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsPostgresTargetConnectionArgs;\nimport com.pulumi.yandex.inputs.DatatransferEndpointSettingsPostgresTargetPasswordArgs;\nimport com.pulumi.yandex.DatatransferTransfer;\nimport com.pulumi.yandex.DatatransferTransferArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pgSource = new DatatransferEndpoint(\"pgSource\", DatatransferEndpointArgs.builder()        \n            .settings(DatatransferEndpointSettingsArgs.builder()\n                .postgresSource(DatatransferEndpointSettingsPostgresSourceArgs.builder()\n                    .connection(DatatransferEndpointSettingsPostgresSourceConnectionArgs.builder()\n                        .onPremise(DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs.builder()\n                            .hosts(\"example.org\")\n                            .port(5432)\n                            .build())\n                        .build())\n                    .slotGigabyteLagLimit(100)\n                    .database(\"db1\")\n                    .user(\"user1\")\n                    .password(DatatransferEndpointSettingsPostgresSourcePasswordArgs.builder()\n                        .raw(\"123\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        var pgTarget = new DatatransferEndpoint(\"pgTarget\", DatatransferEndpointArgs.builder()        \n            .folderId(\"some_folder_id\")\n            .settings(DatatransferEndpointSettingsArgs.builder()\n                .postgresTarget(DatatransferEndpointSettingsPostgresTargetArgs.builder()\n                    .connection(DatatransferEndpointSettingsPostgresTargetConnectionArgs.builder()\n                        .mdbClusterId(\"some_cluster_id\")\n                        .build())\n                    .database(\"db2\")\n                    .user(\"user2\")\n                    .password(DatatransferEndpointSettingsPostgresTargetPasswordArgs.builder()\n                        .raw(\"321\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        var pgpgTransfer = new DatatransferTransfer(\"pgpgTransfer\", DatatransferTransferArgs.builder()        \n            .folderId(\"some_folder_id\")\n            .sourceId(pgSource.id())\n            .targetId(pgTarget.id())\n            .type(\"SNAPSHOT_AND_INCREMENT\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pgSource:\n    type: yandex:DatatransferEndpoint\n    properties:\n      settings:\n        postgresSource:\n          connection:\n            onPremise:\n              hosts:\n                - example.org\n              port: 5432\n          slotGigabyteLagLimit: 100\n          database: db1\n          user: user1\n          password:\n            raw: '123'\n  pgTarget:\n    type: yandex:DatatransferEndpoint\n    properties:\n      folderId: some_folder_id\n      settings:\n        postgresTarget:\n          connection:\n            mdbClusterId: some_cluster_id\n          database: db2\n          user: user2\n          password:\n            raw: '321'\n  pgpgTransfer:\n    type: yandex:DatatransferTransfer\n    properties:\n      folderId: some_folder_id\n      sourceId: ${pgSource.id}\n      targetId: ${pgTarget.id}\n      type: SNAPSHOT_AND_INCREMENT\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA transfer can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/datatransferTransfer:DatatransferTransfer foo transfer_id\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Arbitrary description text for the transfer.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Data Transfer transfer.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the transfer.\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "ID of the source endpoint for the transfer.\n"
                },
                "targetId": {
                    "type": "string",
                    "description": "ID of the target endpoint for the transfer.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the transfer. One of \"SNAPSHOT_ONLY\", \"INCREMENT_ONLY\", \"SNAPSHOT_AND_INCREMENT\".\n"
                },
                "warning": {
                    "type": "string",
                    "description": "(Computed) Error description if transfer has any errors.\n"
                }
            },
            "required": [
                "folderId",
                "name",
                "warning"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Arbitrary description text for the transfer.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Data Transfer transfer.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the transfer.\n"
                },
                "sourceId": {
                    "type": "string",
                    "description": "ID of the source endpoint for the transfer.\n"
                },
                "targetId": {
                    "type": "string",
                    "description": "ID of the target endpoint for the transfer.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the transfer. One of \"SNAPSHOT_ONLY\", \"INCREMENT_ONLY\", \"SNAPSHOT_AND_INCREMENT\".\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatatransferTransfer resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Arbitrary description text for the transfer.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Data Transfer transfer.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the transfer.\n"
                    },
                    "sourceId": {
                        "type": "string",
                        "description": "ID of the source endpoint for the transfer.\n"
                    },
                    "targetId": {
                        "type": "string",
                        "description": "ID of the target endpoint for the transfer.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the transfer. One of \"SNAPSHOT_ONLY\", \"INCREMENT_ONLY\", \"SNAPSHOT_AND_INCREMENT\".\n"
                    },
                    "warning": {
                        "type": "string",
                        "description": "(Computed) Error description if transfer has any errors.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/dnsRecordSet:DnsRecordSet": {
            "description": "Manages a DNS Recordset.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = new yandex.VpcNetwork(\"foo\", {});\nconst zone1 = new yandex.DnsZone(\"zone1\", {\n    description: \"desc\",\n    labels: {\n        label1: \"label-1-value\",\n    },\n    zone: \"example.com.\",\n    \"public\": false,\n    privateNetworks: [foo.id],\n});\nconst rs1 = new yandex.DnsRecordSet(\"rs1\", {\n    zoneId: zone1.id,\n    type: \"A\",\n    ttl: 200,\n    datas: [\"10.1.0.1\"],\n});\nconst rs2 = new yandex.DnsRecordSet(\"rs2\", {\n    zoneId: zone1.id,\n    type: \"A\",\n    ttl: 200,\n    datas: [\"10.1.0.2\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.VpcNetwork(\"foo\")\nzone1 = yandex.DnsZone(\"zone1\",\n    description=\"desc\",\n    labels={\n        \"label1\": \"label-1-value\",\n    },\n    zone=\"example.com.\",\n    public=False,\n    private_networks=[foo.id])\nrs1 = yandex.DnsRecordSet(\"rs1\",\n    zone_id=zone1.id,\n    type=\"A\",\n    ttl=200,\n    datas=[\"10.1.0.1\"])\nrs2 = yandex.DnsRecordSet(\"rs2\",\n    zone_id=zone1.id,\n    type=\"A\",\n    ttl=200,\n    datas=[\"10.1.0.2\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Yandex.VpcNetwork(\"foo\");\n\n    var zone1 = new Yandex.DnsZone(\"zone1\", new()\n    {\n        Description = \"desc\",\n        Labels = \n        {\n            { \"label1\", \"label-1-value\" },\n        },\n        Zone = \"example.com.\",\n        Public = false,\n        PrivateNetworks = new[]\n        {\n            foo.Id,\n        },\n    });\n\n    var rs1 = new Yandex.DnsRecordSet(\"rs1\", new()\n    {\n        ZoneId = zone1.Id,\n        Type = \"A\",\n        Ttl = 200,\n        Datas = new[]\n        {\n            \"10.1.0.1\",\n        },\n    });\n\n    var rs2 = new Yandex.DnsRecordSet(\"rs2\", new()\n    {\n        ZoneId = zone1.Id,\n        Type = \"A\",\n        Ttl = 200,\n        Datas = new[]\n        {\n            \"10.1.0.2\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.NewVpcNetwork(ctx, \"foo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tzone1, err := yandex.NewDnsZone(ctx, \"zone1\", \u0026yandex.DnsZoneArgs{\n\t\t\tDescription: pulumi.String(\"desc\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"label1\": pulumi.String(\"label-1-value\"),\n\t\t\t},\n\t\t\tZone:   pulumi.String(\"example.com.\"),\n\t\t\tPublic: pulumi.Bool(false),\n\t\t\tPrivateNetworks: pulumi.StringArray{\n\t\t\t\tfoo.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewDnsRecordSet(ctx, \"rs1\", \u0026yandex.DnsRecordSetArgs{\n\t\t\tZoneId: zone1.ID(),\n\t\t\tType:   pulumi.String(\"A\"),\n\t\t\tTtl:    pulumi.Float64(200),\n\t\t\tDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.1.0.1\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewDnsRecordSet(ctx, \"rs2\", \u0026yandex.DnsRecordSetArgs{\n\t\t\tZoneId: zone1.ID(),\n\t\t\tType:   pulumi.String(\"A\"),\n\t\t\tTtl:    pulumi.Float64(200),\n\t\t\tDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.1.0.2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.DnsZone;\nimport com.pulumi.yandex.DnsZoneArgs;\nimport com.pulumi.yandex.DnsRecordSet;\nimport com.pulumi.yandex.DnsRecordSetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new VpcNetwork(\"foo\");\n\n        var zone1 = new DnsZone(\"zone1\", DnsZoneArgs.builder()        \n            .description(\"desc\")\n            .labels(Map.of(\"label1\", \"label-1-value\"))\n            .zone(\"example.com.\")\n            .public_(false)\n            .privateNetworks(foo.id())\n            .build());\n\n        var rs1 = new DnsRecordSet(\"rs1\", DnsRecordSetArgs.builder()        \n            .zoneId(zone1.id())\n            .type(\"A\")\n            .ttl(200)\n            .datas(\"10.1.0.1\")\n            .build());\n\n        var rs2 = new DnsRecordSet(\"rs2\", DnsRecordSetArgs.builder()        \n            .zoneId(zone1.id())\n            .type(\"A\")\n            .ttl(200)\n            .datas(\"10.1.0.2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: yandex:VpcNetwork\n  zone1:\n    type: yandex:DnsZone\n    properties:\n      description: desc\n      labels:\n        label1: label-1-value\n      zone: example.com.\n      public: false\n      privateNetworks:\n        - ${foo.id}\n  rs1:\n    type: yandex:DnsRecordSet\n    properties:\n      zoneId: ${zone1.id}\n      type: A\n      ttl: 200\n      datas:\n        - 10.1.0.1\n  rs2:\n    type: yandex:DnsRecordSet\n    properties:\n      zoneId: ${zone1.id}\n      type: A\n      ttl: 200\n      datas:\n        - 10.1.0.2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDNS recordset can be imported using this format\n\n```sh\n $ pulumi import yandex:index/dnsRecordSet:DnsRecordSet rs1 {{zone_id}}/{{name}}/{{type}}\n```\n\n ",
            "properties": {
                "datas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The string data for the records in this record set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The DNS name this record set will apply to.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/DnsRecordSetTimeouts:DnsRecordSetTimeouts"
                },
                "ttl": {
                    "type": "number",
                    "description": "The time-to-live of this record set (seconds).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The DNS record set type.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the zone in which this record set will reside.\n"
                }
            },
            "required": [
                "datas",
                "name",
                "timeouts",
                "ttl",
                "type",
                "zoneId"
            ],
            "inputProperties": {
                "datas": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The string data for the records in this record set.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The DNS name this record set will apply to.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/DnsRecordSetTimeouts:DnsRecordSetTimeouts"
                },
                "ttl": {
                    "type": "number",
                    "description": "The time-to-live of this record set (seconds).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The DNS record set type.\n"
                },
                "zoneId": {
                    "type": "string",
                    "description": "The id of the zone in which this record set will reside.\n"
                }
            },
            "requiredInputs": [
                "datas",
                "timeouts",
                "ttl",
                "type",
                "zoneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsRecordSet resources.\n",
                "properties": {
                    "datas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The string data for the records in this record set.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The DNS name this record set will apply to.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/DnsRecordSetTimeouts:DnsRecordSetTimeouts"
                    },
                    "ttl": {
                        "type": "number",
                        "description": "The time-to-live of this record set (seconds).\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The DNS record set type.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "The id of the zone in which this record set will reside.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/dnsZone:DnsZone": {
            "description": "Manages a DNS Zone.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = new yandex.VpcNetwork(\"foo\", {});\nconst zone1 = new yandex.DnsZone(\"zone1\", {\n    description: \"desc\",\n    labels: {\n        label1: \"label-1-value\",\n    },\n    zone: \"example.com.\",\n    \"public\": false,\n    privateNetworks: [foo.id],\n});\nconst rs1 = new yandex.DnsRecordSet(\"rs1\", {\n    zoneId: zone1.id,\n    type: \"A\",\n    ttl: 200,\n    datas: [\"10.1.0.1\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.VpcNetwork(\"foo\")\nzone1 = yandex.DnsZone(\"zone1\",\n    description=\"desc\",\n    labels={\n        \"label1\": \"label-1-value\",\n    },\n    zone=\"example.com.\",\n    public=False,\n    private_networks=[foo.id])\nrs1 = yandex.DnsRecordSet(\"rs1\",\n    zone_id=zone1.id,\n    type=\"A\",\n    ttl=200,\n    datas=[\"10.1.0.1\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Yandex.VpcNetwork(\"foo\");\n\n    var zone1 = new Yandex.DnsZone(\"zone1\", new()\n    {\n        Description = \"desc\",\n        Labels = \n        {\n            { \"label1\", \"label-1-value\" },\n        },\n        Zone = \"example.com.\",\n        Public = false,\n        PrivateNetworks = new[]\n        {\n            foo.Id,\n        },\n    });\n\n    var rs1 = new Yandex.DnsRecordSet(\"rs1\", new()\n    {\n        ZoneId = zone1.Id,\n        Type = \"A\",\n        Ttl = 200,\n        Datas = new[]\n        {\n            \"10.1.0.1\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.NewVpcNetwork(ctx, \"foo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tzone1, err := yandex.NewDnsZone(ctx, \"zone1\", \u0026yandex.DnsZoneArgs{\n\t\t\tDescription: pulumi.String(\"desc\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"label1\": pulumi.String(\"label-1-value\"),\n\t\t\t},\n\t\t\tZone:   pulumi.String(\"example.com.\"),\n\t\t\tPublic: pulumi.Bool(false),\n\t\t\tPrivateNetworks: pulumi.StringArray{\n\t\t\t\tfoo.ID(),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewDnsRecordSet(ctx, \"rs1\", \u0026yandex.DnsRecordSetArgs{\n\t\t\tZoneId: zone1.ID(),\n\t\t\tType:   pulumi.String(\"A\"),\n\t\t\tTtl:    pulumi.Float64(200),\n\t\t\tDatas: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.1.0.1\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.DnsZone;\nimport com.pulumi.yandex.DnsZoneArgs;\nimport com.pulumi.yandex.DnsRecordSet;\nimport com.pulumi.yandex.DnsRecordSetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new VpcNetwork(\"foo\");\n\n        var zone1 = new DnsZone(\"zone1\", DnsZoneArgs.builder()        \n            .description(\"desc\")\n            .labels(Map.of(\"label1\", \"label-1-value\"))\n            .zone(\"example.com.\")\n            .public_(false)\n            .privateNetworks(foo.id())\n            .build());\n\n        var rs1 = new DnsRecordSet(\"rs1\", DnsRecordSetArgs.builder()        \n            .zoneId(zone1.id())\n            .type(\"A\")\n            .ttl(200)\n            .datas(\"10.1.0.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: yandex:VpcNetwork\n  zone1:\n    type: yandex:DnsZone\n    properties:\n      description: desc\n      labels:\n        label1: label-1-value\n      zone: example.com.\n      public: false\n      privateNetworks:\n        - ${foo.id}\n  rs1:\n    type: yandex:DnsRecordSet\n    properties:\n      zoneId: ${zone1.id}\n      type: A\n      ttl: 200\n      datas:\n        - 10.1.0.1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "(Computed) The DNS zone creation timestamp.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the DNS zone.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder to create a zone in. If it is not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the DNS zone.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User assigned name of a specific resource. Must be unique within the folder.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/DnsZoneTimeouts:DnsZoneTimeouts"
                },
                "zone": {
                    "type": "string",
                    "description": "The DNS name of this zone, e.g. \"example.com.\". Must ends with dot.\n"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "privateNetworks",
                "public",
                "timeouts",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the DNS zone.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder to create a zone in. If it is not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the DNS zone.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User assigned name of a specific resource. Must be unique within the folder.\n"
                },
                "privateNetworks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/DnsZoneTimeouts:DnsZoneTimeouts"
                },
                "zone": {
                    "type": "string",
                    "description": "The DNS name of this zone, e.g. \"example.com.\". Must ends with dot.\n"
                }
            },
            "requiredInputs": [
                "timeouts",
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsZone resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "(Computed) The DNS zone creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the DNS zone.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder to create a zone in. If it is not provided, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the DNS zone.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "User assigned name of a specific resource. Must be unique within the folder.\n"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/DnsZoneTimeouts:DnsZoneTimeouts"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The DNS name of this zone, e.g. \"example.com.\". Must ends with dot.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/function:Function": {
            "description": "Allows management of [Yandex Cloud Function](https://cloud.yandex.com/docs/functions/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst test_function = new yandex.Function(\"test-function\", {\n    content: {\n        zipFilename: \"function.zip\",\n    },\n    description: \"any description\",\n    entrypoint: \"main\",\n    executionTimeout: \"10\",\n    memory: 128,\n    runtime: \"python37\",\n    serviceAccountId: \"are1service2account3id\",\n    tags: [\"my_tag\"],\n    userHash: \"any_user_defined_string\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ntest_function = yandex.Function(\"test-function\",\n    content=yandex.FunctionContentArgs(\n        zip_filename=\"function.zip\",\n    ),\n    description=\"any description\",\n    entrypoint=\"main\",\n    execution_timeout=\"10\",\n    memory=128,\n    runtime=\"python37\",\n    service_account_id=\"are1service2account3id\",\n    tags=[\"my_tag\"],\n    user_hash=\"any_user_defined_string\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_function = new Yandex.Function(\"test-function\", new()\n    {\n        Content = new Yandex.Inputs.FunctionContentArgs\n        {\n            ZipFilename = \"function.zip\",\n        },\n        Description = \"any description\",\n        Entrypoint = \"main\",\n        ExecutionTimeout = \"10\",\n        Memory = 128,\n        Runtime = \"python37\",\n        ServiceAccountId = \"are1service2account3id\",\n        Tags = new[]\n        {\n            \"my_tag\",\n        },\n        UserHash = \"any_user_defined_string\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewFunction(ctx, \"test-function\", \u0026yandex.FunctionArgs{\n\t\t\tContent: \u0026FunctionContentArgs{\n\t\t\t\tZipFilename: pulumi.String(\"function.zip\"),\n\t\t\t},\n\t\t\tDescription:      pulumi.String(\"any description\"),\n\t\t\tEntrypoint:       pulumi.String(\"main\"),\n\t\t\tExecutionTimeout: pulumi.String(\"10\"),\n\t\t\tMemory:           pulumi.Float64(128),\n\t\t\tRuntime:          pulumi.String(\"python37\"),\n\t\t\tServiceAccountId: pulumi.String(\"are1service2account3id\"),\n\t\t\tTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"my_tag\"),\n\t\t\t},\n\t\t\tUserHash: pulumi.String(\"any_user_defined_string\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.Function;\nimport com.pulumi.yandex.FunctionArgs;\nimport com.pulumi.yandex.inputs.FunctionContentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_function = new Function(\"test-function\", FunctionArgs.builder()        \n            .content(FunctionContentArgs.builder()\n                .zipFilename(\"function.zip\")\n                .build())\n            .description(\"any description\")\n            .entrypoint(\"main\")\n            .executionTimeout(\"10\")\n            .memory(\"128\")\n            .runtime(\"python37\")\n            .serviceAccountId(\"are1service2account3id\")\n            .tags(\"my_tag\")\n            .userHash(\"any_user_defined_string\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-function:\n    type: yandex:Function\n    properties:\n      content:\n        zipFilename: function.zip\n      description: any description\n      entrypoint: main\n      executionTimeout: '10'\n      memory: '128'\n      runtime: python37\n      serviceAccountId: are1service2account3id\n      tags:\n        - my_tag\n      userHash: any_user_defined_string\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "content": {
                    "$ref": "#/types/yandex:index/FunctionContent:FunctionContent",
                    "description": "Version deployment content for Yandex Cloud Function code. Can be only one `package` or `content` section.\n* `content.0.zip_filename` - Filename to zip archive for the version.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the Yandex Cloud Function.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Yandex Cloud Function\n"
                },
                "entrypoint": {
                    "type": "string",
                    "description": "Entrypoint for Yandex Cloud Function\n"
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value environment variables for Yandex Cloud Function\n"
                },
                "executionTimeout": {
                    "type": "string",
                    "description": "Execution timeout in seconds for Yandex Cloud Function\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder ID for the Yandex Cloud Function\n"
                },
                "imageSize": {
                    "type": "number",
                    "description": "Image size for Yandex Cloud Function.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Cloud Function\n"
                },
                "loggroupId": {
                    "type": "string",
                    "description": "Loggroup ID size for Yandex Cloud Function.\n"
                },
                "memory": {
                    "type": "number",
                    "description": "Memory in megabytes (**aligned to 128MB**) for Yandex Cloud Function\n"
                },
                "name": {
                    "type": "string",
                    "description": "Yandex Cloud Function name used to define trigger\n"
                },
                "package": {
                    "$ref": "#/types/yandex:index/FunctionPackage:FunctionPackage",
                    "description": "Version deployment package for Yandex Cloud Function code. Can be only one `package` or `content` section.\n* `package.0.sha_256` - SHA256 hash of the version deployment package.\n* `package.0.bucket_name` - Name of the bucket that stores the code for the version.\n* `package.0.object_name` - Name of the object in the bucket that stores the code for the version.\n"
                },
                "runtime": {
                    "type": "string",
                    "description": "Runtime for Yandex Cloud Function\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/FunctionSecret:FunctionSecret"
                    },
                    "description": "Secrets for Yandex Cloud Function.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "Service account ID for Yandex Cloud Function\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for Yandex Cloud Function. Tag \"$latest\" isn't returned.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/FunctionTimeouts:FunctionTimeouts"
                },
                "userHash": {
                    "type": "string",
                    "description": "User-defined string for current function version. User must change this string any times when function changed. Function will be updated when hash is changed.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version for Yandex Cloud Function.\n"
                }
            },
            "required": [
                "createdAt",
                "entrypoint",
                "folderId",
                "imageSize",
                "loggroupId",
                "memory",
                "name",
                "runtime",
                "tags",
                "timeouts",
                "userHash",
                "version"
            ],
            "inputProperties": {
                "content": {
                    "$ref": "#/types/yandex:index/FunctionContent:FunctionContent",
                    "description": "Version deployment content for Yandex Cloud Function code. Can be only one `package` or `content` section.\n* `content.0.zip_filename` - Filename to zip archive for the version.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Yandex Cloud Function\n"
                },
                "entrypoint": {
                    "type": "string",
                    "description": "Entrypoint for Yandex Cloud Function\n"
                },
                "environment": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value environment variables for Yandex Cloud Function\n"
                },
                "executionTimeout": {
                    "type": "string",
                    "description": "Execution timeout in seconds for Yandex Cloud Function\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder ID for the Yandex Cloud Function\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Cloud Function\n"
                },
                "memory": {
                    "type": "number",
                    "description": "Memory in megabytes (**aligned to 128MB**) for Yandex Cloud Function\n"
                },
                "name": {
                    "type": "string",
                    "description": "Yandex Cloud Function name used to define trigger\n"
                },
                "package": {
                    "$ref": "#/types/yandex:index/FunctionPackage:FunctionPackage",
                    "description": "Version deployment package for Yandex Cloud Function code. Can be only one `package` or `content` section.\n* `package.0.sha_256` - SHA256 hash of the version deployment package.\n* `package.0.bucket_name` - Name of the bucket that stores the code for the version.\n* `package.0.object_name` - Name of the object in the bucket that stores the code for the version.\n"
                },
                "runtime": {
                    "type": "string",
                    "description": "Runtime for Yandex Cloud Function\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/FunctionSecret:FunctionSecret"
                    },
                    "description": "Secrets for Yandex Cloud Function.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "Service account ID for Yandex Cloud Function\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags for Yandex Cloud Function. Tag \"$latest\" isn't returned.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/FunctionTimeouts:FunctionTimeouts"
                },
                "userHash": {
                    "type": "string",
                    "description": "User-defined string for current function version. User must change this string any times when function changed. Function will be updated when hash is changed.\n"
                }
            },
            "requiredInputs": [
                "entrypoint",
                "memory",
                "runtime",
                "timeouts",
                "userHash"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Function resources.\n",
                "properties": {
                    "content": {
                        "$ref": "#/types/yandex:index/FunctionContent:FunctionContent",
                        "description": "Version deployment content for Yandex Cloud Function code. Can be only one `package` or `content` section.\n* `content.0.zip_filename` - Filename to zip archive for the version.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the Yandex Cloud Function.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Yandex Cloud Function\n"
                    },
                    "entrypoint": {
                        "type": "string",
                        "description": "Entrypoint for Yandex Cloud Function\n"
                    },
                    "environment": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value environment variables for Yandex Cloud Function\n"
                    },
                    "executionTimeout": {
                        "type": "string",
                        "description": "Execution timeout in seconds for Yandex Cloud Function\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID for the Yandex Cloud Function\n"
                    },
                    "imageSize": {
                        "type": "number",
                        "description": "Image size for Yandex Cloud Function.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Yandex Cloud Function\n"
                    },
                    "loggroupId": {
                        "type": "string",
                        "description": "Loggroup ID size for Yandex Cloud Function.\n"
                    },
                    "memory": {
                        "type": "number",
                        "description": "Memory in megabytes (**aligned to 128MB**) for Yandex Cloud Function\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Yandex Cloud Function name used to define trigger\n"
                    },
                    "package": {
                        "$ref": "#/types/yandex:index/FunctionPackage:FunctionPackage",
                        "description": "Version deployment package for Yandex Cloud Function code. Can be only one `package` or `content` section.\n* `package.0.sha_256` - SHA256 hash of the version deployment package.\n* `package.0.bucket_name` - Name of the bucket that stores the code for the version.\n* `package.0.object_name` - Name of the object in the bucket that stores the code for the version.\n"
                    },
                    "runtime": {
                        "type": "string",
                        "description": "Runtime for Yandex Cloud Function\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/FunctionSecret:FunctionSecret"
                        },
                        "description": "Secrets for Yandex Cloud Function.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "Service account ID for Yandex Cloud Function\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags for Yandex Cloud Function. Tag \"$latest\" isn't returned.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/FunctionTimeouts:FunctionTimeouts"
                    },
                    "userHash": {
                        "type": "string",
                        "description": "User-defined string for current function version. User must change this string any times when function changed. Function will be updated when hash is changed.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version for Yandex Cloud Function.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/functionIamBinding:FunctionIamBinding": {
            "description": "## yandex\\_function\\_iam\\_binding\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst function_iam = new yandex.FunctionIamBinding(\"function-iam\", {\n    functionId: \"your-function-id\",\n    members: [\"system:allUsers\"],\n    role: \"serverless.functions.invoker\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfunction_iam = yandex.FunctionIamBinding(\"function-iam\",\n    function_id=\"your-function-id\",\n    members=[\"system:allUsers\"],\n    role=\"serverless.functions.invoker\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var function_iam = new Yandex.FunctionIamBinding(\"function-iam\", new()\n    {\n        FunctionId = \"your-function-id\",\n        Members = new[]\n        {\n            \"system:allUsers\",\n        },\n        Role = \"serverless.functions.invoker\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewFunctionIamBinding(ctx, \"function-iam\", \u0026yandex.FunctionIamBindingArgs{\n\t\t\tFunctionId: pulumi.String(\"your-function-id\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"system:allUsers\"),\n\t\t\t},\n\t\t\tRole: pulumi.String(\"serverless.functions.invoker\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.FunctionIamBinding;\nimport com.pulumi.yandex.FunctionIamBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var function_iam = new FunctionIamBinding(\"function-iam\", FunctionIamBindingArgs.builder()        \n            .functionId(\"your-function-id\")\n            .members(\"system:allUsers\")\n            .role(\"serverless.functions.invoker\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  function-iam:\n    type: yandex:FunctionIamBinding\n    properties:\n      functionId: your-function-id\n      members:\n        - system:allUsers\n      role: serverless.functions.invoker\n```\n",
            "properties": {
                "functionId": {
                    "type": "string",
                    "description": "The [Yandex Cloud Function](https://cloud.yandex.com/docs/functions/) ID to apply a binding to.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/functions/security/)\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "required": [
                "functionId",
                "members",
                "role"
            ],
            "inputProperties": {
                "functionId": {
                    "type": "string",
                    "description": "The [Yandex Cloud Function](https://cloud.yandex.com/docs/functions/) ID to apply a binding to.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/functions/security/)\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "functionId",
                "members",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionIamBinding resources.\n",
                "properties": {
                    "functionId": {
                        "type": "string",
                        "description": "The [Yandex Cloud Function](https://cloud.yandex.com/docs/functions/) ID to apply a binding to.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/functions/security/)\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/functionScalingPolicy:FunctionScalingPolicy": {
            "description": "Allows management of [Yandex Cloud Function Scaling Policies](https://cloud.yandex.com/docs/functions/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myScalingPolicy = new yandex.FunctionScalingPolicy(\"my_scaling_policy\", {\n    functionId: \"are1samplefunction11\",\n    policies: [\n        {\n            tag: \"$latest\",\n            zoneInstancesLimit: 3,\n            zoneRequestsLimit: 100,\n        },\n        {\n            tag: \"my_tag\",\n            zoneInstancesLimit: 4,\n            zoneRequestsLimit: 150,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_scaling_policy = yandex.FunctionScalingPolicy(\"myScalingPolicy\",\n    function_id=\"are1samplefunction11\",\n    policies=[\n        yandex.FunctionScalingPolicyPolicyArgs(\n            tag=\"$latest\",\n            zone_instances_limit=3,\n            zone_requests_limit=100,\n        ),\n        yandex.FunctionScalingPolicyPolicyArgs(\n            tag=\"my_tag\",\n            zone_instances_limit=4,\n            zone_requests_limit=150,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myScalingPolicy = new Yandex.FunctionScalingPolicy(\"myScalingPolicy\", new()\n    {\n        FunctionId = \"are1samplefunction11\",\n        Policies = new[]\n        {\n            new Yandex.Inputs.FunctionScalingPolicyPolicyArgs\n            {\n                Tag = \"$latest\",\n                ZoneInstancesLimit = 3,\n                ZoneRequestsLimit = 100,\n            },\n            new Yandex.Inputs.FunctionScalingPolicyPolicyArgs\n            {\n                Tag = \"my_tag\",\n                ZoneInstancesLimit = 4,\n                ZoneRequestsLimit = 150,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewFunctionScalingPolicy(ctx, \"myScalingPolicy\", \u0026yandex.FunctionScalingPolicyArgs{\n\t\t\tFunctionId: pulumi.String(\"are1samplefunction11\"),\n\t\t\tPolicies: FunctionScalingPolicyPolicyArray{\n\t\t\t\t\u0026FunctionScalingPolicyPolicyArgs{\n\t\t\t\t\tTag:                pulumi.String(fmt.Sprintf(\"$latest\")),\n\t\t\t\t\tZoneInstancesLimit: pulumi.Float64(3),\n\t\t\t\t\tZoneRequestsLimit:  pulumi.Float64(100),\n\t\t\t\t},\n\t\t\t\t\u0026FunctionScalingPolicyPolicyArgs{\n\t\t\t\t\tTag:                pulumi.String(\"my_tag\"),\n\t\t\t\t\tZoneInstancesLimit: pulumi.Float64(4),\n\t\t\t\t\tZoneRequestsLimit:  pulumi.Float64(150),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.FunctionScalingPolicy;\nimport com.pulumi.yandex.FunctionScalingPolicyArgs;\nimport com.pulumi.yandex.inputs.FunctionScalingPolicyPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myScalingPolicy = new FunctionScalingPolicy(\"myScalingPolicy\", FunctionScalingPolicyArgs.builder()        \n            .functionId(\"are1samplefunction11\")\n            .policies(            \n                FunctionScalingPolicyPolicyArgs.builder()\n                    .tag(\"$latest\")\n                    .zoneInstancesLimit(3)\n                    .zoneRequestsLimit(100)\n                    .build(),\n                FunctionScalingPolicyPolicyArgs.builder()\n                    .tag(\"my_tag\")\n                    .zoneInstancesLimit(4)\n                    .zoneRequestsLimit(150)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myScalingPolicy:\n    type: yandex:FunctionScalingPolicy\n    properties:\n      functionId: are1samplefunction11\n      policies:\n        - tag: $latest\n          zoneInstancesLimit: 3\n          zoneRequestsLimit: 100\n        - tag: my_tag\n          zoneInstancesLimit: 4\n          zoneRequestsLimit: 150\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "functionId": {
                    "type": "string",
                    "description": "Yandex Cloud Function id used to define function\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/FunctionScalingPolicyPolicy:FunctionScalingPolicyPolicy"
                    },
                    "description": "list definition for Yandex Cloud Function scaling policies\n* `policy.#` - number of Yandex Cloud Function scaling policies\n* `policy.{num}.tag` - Yandex.Cloud Function version tag for Yandex Cloud Function scaling policy\n* `policy.{num}.zone_instances_limit` - max number of instances in one zone for Yandex.Cloud Function with tag\n* `policy.{num}.zone_requests_limit` - max number of requests in one zone for Yandex.Cloud Function with tag\n"
                }
            },
            "required": [
                "functionId"
            ],
            "inputProperties": {
                "functionId": {
                    "type": "string",
                    "description": "Yandex Cloud Function id used to define function\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/FunctionScalingPolicyPolicy:FunctionScalingPolicyPolicy"
                    },
                    "description": "list definition for Yandex Cloud Function scaling policies\n* `policy.#` - number of Yandex Cloud Function scaling policies\n* `policy.{num}.tag` - Yandex.Cloud Function version tag for Yandex Cloud Function scaling policy\n* `policy.{num}.zone_instances_limit` - max number of instances in one zone for Yandex.Cloud Function with tag\n* `policy.{num}.zone_requests_limit` - max number of requests in one zone for Yandex.Cloud Function with tag\n"
                }
            },
            "requiredInputs": [
                "functionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionScalingPolicy resources.\n",
                "properties": {
                    "functionId": {
                        "type": "string",
                        "description": "Yandex Cloud Function id used to define function\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/FunctionScalingPolicyPolicy:FunctionScalingPolicyPolicy"
                        },
                        "description": "list definition for Yandex Cloud Function scaling policies\n* `policy.#` - number of Yandex Cloud Function scaling policies\n* `policy.{num}.tag` - Yandex.Cloud Function version tag for Yandex Cloud Function scaling policy\n* `policy.{num}.zone_instances_limit` - max number of instances in one zone for Yandex.Cloud Function with tag\n* `policy.{num}.zone_requests_limit` - max number of requests in one zone for Yandex.Cloud Function with tag\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/functionTrigger:FunctionTrigger": {
            "description": "Allows management of [Yandex Cloud Functions Trigger](https://cloud.yandex.com/docs/functions/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myTrigger = new yandex.FunctionTrigger(\"my_trigger\", {\n    description: \"any description\",\n    function: {\n        id: \"tf-test\",\n    },\n    timer: {\n        cronExpression: \"* * * * ? *\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_trigger = yandex.FunctionTrigger(\"myTrigger\",\n    description=\"any description\",\n    function=yandex.FunctionTriggerFunctionArgs(\n        id=\"tf-test\",\n    ),\n    timer=yandex.FunctionTriggerTimerArgs(\n        cron_expression=\"* * * * ? *\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myTrigger = new Yandex.FunctionTrigger(\"myTrigger\", new()\n    {\n        Description = \"any description\",\n        Function = new Yandex.Inputs.FunctionTriggerFunctionArgs\n        {\n            Id = \"tf-test\",\n        },\n        Timer = new Yandex.Inputs.FunctionTriggerTimerArgs\n        {\n            CronExpression = \"* * * * ? *\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewFunctionTrigger(ctx, \"myTrigger\", \u0026yandex.FunctionTriggerArgs{\n\t\t\tDescription: pulumi.String(\"any description\"),\n\t\t\tFunction: \u0026FunctionTriggerFunctionArgs{\n\t\t\t\tId: pulumi.String(\"tf-test\"),\n\t\t\t},\n\t\t\tTimer: \u0026FunctionTriggerTimerArgs{\n\t\t\t\tCronExpression: pulumi.String(\"* * * * ? *\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.FunctionTrigger;\nimport com.pulumi.yandex.FunctionTriggerArgs;\nimport com.pulumi.yandex.inputs.FunctionTriggerFunctionArgs;\nimport com.pulumi.yandex.inputs.FunctionTriggerTimerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myTrigger = new FunctionTrigger(\"myTrigger\", FunctionTriggerArgs.builder()        \n            .description(\"any description\")\n            .function(FunctionTriggerFunctionArgs.builder()\n                .id(\"tf-test\")\n                .build())\n            .timer(FunctionTriggerTimerArgs.builder()\n                .cronExpression(\"* * * * ? *\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myTrigger:\n    type: yandex:FunctionTrigger\n    properties:\n      description: any description\n      function:\n        id: tf-test\n      timer:\n        cronExpression: '* * * * ? *'\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the Yandex Cloud Functions Trigger\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Yandex Cloud Functions Trigger\n"
                },
                "dlq": {
                    "$ref": "#/types/yandex:index/FunctionTriggerDlq:FunctionTriggerDlq",
                    "description": "Dead Letter Queue settings definition for Yandex Cloud Functions Trigger\n* `dlq.0.queue_id` - ID of Dead Letter Queue for Trigger (Queue ARN)\n* `dlq.0.service_account_id` - Service Account ID for Dead Letter Queue for Yandex Cloud Functions Trigger\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder ID for the Yandex Cloud Functions Trigger\n"
                },
                "function": {
                    "$ref": "#/types/yandex:index/FunctionTriggerFunction:FunctionTriggerFunction",
                    "description": "[Yandex.Cloud Function](https://cloud.yandex.com/docs/functions/concepts/function) settings definition for Yandex Cloud Functions Trigger\n* `function.0.id` - Yandex.Cloud Function ID for Yandex Cloud Functions Trigger\n* `function.0.service_account_id` - Service account ID for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n* `function.0.tag` - Tag for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n* `function.0.retry_attempts` - Retry attempts for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n* `function.0.retry_interval` - Retry interval in seconds for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n"
                },
                "iot": {
                    "$ref": "#/types/yandex:index/FunctionTriggerIot:FunctionTriggerIot",
                    "description": "[IoT](https://cloud.yandex.com/docs/functions/concepts/trigger/iot-core-trigger) settings definition for Yandex Cloud Functions Trigger, if present. Only one section `iot` or `message_queue` or `object_storage` or `timer` can be defined.\n* `iot.0.registry_id` - IoT Registry ID for Yandex Cloud Functions Trigger\n* `iot.0.device_id` - IoT Device ID for Yandex Cloud Functions Trigger\n* `iot.0.topic` - IoT Topic for Yandex Cloud Functions Trigger\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Cloud Functions Trigger\n"
                },
                "logGroup": {
                    "$ref": "#/types/yandex:index/FunctionTriggerLogGroup:FunctionTriggerLogGroup"
                },
                "logging": {
                    "$ref": "#/types/yandex:index/FunctionTriggerLogging:FunctionTriggerLogging",
                    "description": "[Logging](https://cloud.yandex.com/docs/functions/concepts/trigger/logging) settings definition for Yandex Cloud Functions Trigger, if present\n* `logging.0.group_id` - Logging group ID for Yandex Cloud Functions Trigger\n* `logging.0.resource_ids` - Resource ID filter setting for Yandex Cloud Functions Trigger\n* `logging.0.resource_types` - Resource type filter setting for Yandex Cloud Functions Trigger\n* `logging.0.levels` - Logging level filter setting for Yandex Cloud Functions Trigger\n* `logging.0.batch_cutoff` - Batch Duration in seconds for Yandex Cloud Functions Trigger\n* `logging.0.batch_size` - Batch Size for Yandex Cloud Functions Trigger\n"
                },
                "messageQueue": {
                    "$ref": "#/types/yandex:index/FunctionTriggerMessageQueue:FunctionTriggerMessageQueue",
                    "description": "[Message Queue](https://cloud.yandex.com/docs/functions/concepts/trigger/ymq-trigger) settings definition for Yandex Cloud Functions Trigger, if present\n* `message_queue.0.queue_id` - Message Queue ID for Yandex Cloud Functions Trigger\n* `message_queue.0.service_account_id` - Message Queue Service Account ID for Yandex Cloud Functions Trigger\n* `message_queue.0.batch_cutoff` - Batch Duration in seconds for Yandex Cloud Functions Trigger\n* `message_queue.0.batch_size` - Batch Size for Yandex Cloud Functions Trigger\n* `message_queue.0.visibility_timeout` - Visibility timeout for Yandex Cloud Functions Trigger\n"
                },
                "name": {
                    "type": "string",
                    "description": "Yandex Cloud Functions Trigger name used to define trigger\n"
                },
                "objectStorage": {
                    "$ref": "#/types/yandex:index/FunctionTriggerObjectStorage:FunctionTriggerObjectStorage",
                    "description": "[Object Storage](https://cloud.yandex.com/docs/functions/concepts/trigger/os-trigger) settings definition for Yandex Cloud Functions Trigger, if present\n* `object_storage.0.bucket_id` - Object Storage Bucket ID for Yandex Cloud Functions Trigger\n* `object_storage.0.prefix` - Prefix for Object Storage for Yandex Cloud Functions Trigger\n* `object_storage.0.suffix` - Suffix for Object Storage for Yandex Cloud Functions Trigger\n* `object_storage.0.create` - Boolean flag for setting create event for Yandex Cloud Functions Trigger\n* `object_storage.0.update` - Boolean flag for setting update event for Yandex Cloud Functions Trigger\n* `object_storage.0.delete` - Boolean flag for setting delete event for Yandex Cloud Functions Trigger\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/FunctionTriggerTimeouts:FunctionTriggerTimeouts"
                },
                "timer": {
                    "$ref": "#/types/yandex:index/FunctionTriggerTimer:FunctionTriggerTimer",
                    "description": "[Timer](https://cloud.yandex.com/docs/functions/concepts/trigger/timer) settings definition for Yandex Cloud Functions Trigger, if present\n* `timer.0.cron_expression` - Cron expression for timer for Yandex Cloud Functions Trigger\n"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "function",
                "name",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the Yandex Cloud Functions Trigger\n"
                },
                "dlq": {
                    "$ref": "#/types/yandex:index/FunctionTriggerDlq:FunctionTriggerDlq",
                    "description": "Dead Letter Queue settings definition for Yandex Cloud Functions Trigger\n* `dlq.0.queue_id` - ID of Dead Letter Queue for Trigger (Queue ARN)\n* `dlq.0.service_account_id` - Service Account ID for Dead Letter Queue for Yandex Cloud Functions Trigger\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder ID for the Yandex Cloud Functions Trigger\n"
                },
                "function": {
                    "$ref": "#/types/yandex:index/FunctionTriggerFunction:FunctionTriggerFunction",
                    "description": "[Yandex.Cloud Function](https://cloud.yandex.com/docs/functions/concepts/function) settings definition for Yandex Cloud Functions Trigger\n* `function.0.id` - Yandex.Cloud Function ID for Yandex Cloud Functions Trigger\n* `function.0.service_account_id` - Service account ID for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n* `function.0.tag` - Tag for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n* `function.0.retry_attempts` - Retry attempts for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n* `function.0.retry_interval` - Retry interval in seconds for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n"
                },
                "iot": {
                    "$ref": "#/types/yandex:index/FunctionTriggerIot:FunctionTriggerIot",
                    "description": "[IoT](https://cloud.yandex.com/docs/functions/concepts/trigger/iot-core-trigger) settings definition for Yandex Cloud Functions Trigger, if present. Only one section `iot` or `message_queue` or `object_storage` or `timer` can be defined.\n* `iot.0.registry_id` - IoT Registry ID for Yandex Cloud Functions Trigger\n* `iot.0.device_id` - IoT Device ID for Yandex Cloud Functions Trigger\n* `iot.0.topic` - IoT Topic for Yandex Cloud Functions Trigger\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Cloud Functions Trigger\n"
                },
                "logGroup": {
                    "$ref": "#/types/yandex:index/FunctionTriggerLogGroup:FunctionTriggerLogGroup"
                },
                "logging": {
                    "$ref": "#/types/yandex:index/FunctionTriggerLogging:FunctionTriggerLogging",
                    "description": "[Logging](https://cloud.yandex.com/docs/functions/concepts/trigger/logging) settings definition for Yandex Cloud Functions Trigger, if present\n* `logging.0.group_id` - Logging group ID for Yandex Cloud Functions Trigger\n* `logging.0.resource_ids` - Resource ID filter setting for Yandex Cloud Functions Trigger\n* `logging.0.resource_types` - Resource type filter setting for Yandex Cloud Functions Trigger\n* `logging.0.levels` - Logging level filter setting for Yandex Cloud Functions Trigger\n* `logging.0.batch_cutoff` - Batch Duration in seconds for Yandex Cloud Functions Trigger\n* `logging.0.batch_size` - Batch Size for Yandex Cloud Functions Trigger\n"
                },
                "messageQueue": {
                    "$ref": "#/types/yandex:index/FunctionTriggerMessageQueue:FunctionTriggerMessageQueue",
                    "description": "[Message Queue](https://cloud.yandex.com/docs/functions/concepts/trigger/ymq-trigger) settings definition for Yandex Cloud Functions Trigger, if present\n* `message_queue.0.queue_id` - Message Queue ID for Yandex Cloud Functions Trigger\n* `message_queue.0.service_account_id` - Message Queue Service Account ID for Yandex Cloud Functions Trigger\n* `message_queue.0.batch_cutoff` - Batch Duration in seconds for Yandex Cloud Functions Trigger\n* `message_queue.0.batch_size` - Batch Size for Yandex Cloud Functions Trigger\n* `message_queue.0.visibility_timeout` - Visibility timeout for Yandex Cloud Functions Trigger\n"
                },
                "name": {
                    "type": "string",
                    "description": "Yandex Cloud Functions Trigger name used to define trigger\n"
                },
                "objectStorage": {
                    "$ref": "#/types/yandex:index/FunctionTriggerObjectStorage:FunctionTriggerObjectStorage",
                    "description": "[Object Storage](https://cloud.yandex.com/docs/functions/concepts/trigger/os-trigger) settings definition for Yandex Cloud Functions Trigger, if present\n* `object_storage.0.bucket_id` - Object Storage Bucket ID for Yandex Cloud Functions Trigger\n* `object_storage.0.prefix` - Prefix for Object Storage for Yandex Cloud Functions Trigger\n* `object_storage.0.suffix` - Suffix for Object Storage for Yandex Cloud Functions Trigger\n* `object_storage.0.create` - Boolean flag for setting create event for Yandex Cloud Functions Trigger\n* `object_storage.0.update` - Boolean flag for setting update event for Yandex Cloud Functions Trigger\n* `object_storage.0.delete` - Boolean flag for setting delete event for Yandex Cloud Functions Trigger\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/FunctionTriggerTimeouts:FunctionTriggerTimeouts"
                },
                "timer": {
                    "$ref": "#/types/yandex:index/FunctionTriggerTimer:FunctionTriggerTimer",
                    "description": "[Timer](https://cloud.yandex.com/docs/functions/concepts/trigger/timer) settings definition for Yandex Cloud Functions Trigger, if present\n* `timer.0.cron_expression` - Cron expression for timer for Yandex Cloud Functions Trigger\n"
                }
            },
            "requiredInputs": [
                "function",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FunctionTrigger resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the Yandex Cloud Functions Trigger\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Yandex Cloud Functions Trigger\n"
                    },
                    "dlq": {
                        "$ref": "#/types/yandex:index/FunctionTriggerDlq:FunctionTriggerDlq",
                        "description": "Dead Letter Queue settings definition for Yandex Cloud Functions Trigger\n* `dlq.0.queue_id` - ID of Dead Letter Queue for Trigger (Queue ARN)\n* `dlq.0.service_account_id` - Service Account ID for Dead Letter Queue for Yandex Cloud Functions Trigger\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID for the Yandex Cloud Functions Trigger\n"
                    },
                    "function": {
                        "$ref": "#/types/yandex:index/FunctionTriggerFunction:FunctionTriggerFunction",
                        "description": "[Yandex.Cloud Function](https://cloud.yandex.com/docs/functions/concepts/function) settings definition for Yandex Cloud Functions Trigger\n* `function.0.id` - Yandex.Cloud Function ID for Yandex Cloud Functions Trigger\n* `function.0.service_account_id` - Service account ID for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n* `function.0.tag` - Tag for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n* `function.0.retry_attempts` - Retry attempts for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n* `function.0.retry_interval` - Retry interval in seconds for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n"
                    },
                    "iot": {
                        "$ref": "#/types/yandex:index/FunctionTriggerIot:FunctionTriggerIot",
                        "description": "[IoT](https://cloud.yandex.com/docs/functions/concepts/trigger/iot-core-trigger) settings definition for Yandex Cloud Functions Trigger, if present. Only one section `iot` or `message_queue` or `object_storage` or `timer` can be defined.\n* `iot.0.registry_id` - IoT Registry ID for Yandex Cloud Functions Trigger\n* `iot.0.device_id` - IoT Device ID for Yandex Cloud Functions Trigger\n* `iot.0.topic` - IoT Topic for Yandex Cloud Functions Trigger\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Yandex Cloud Functions Trigger\n"
                    },
                    "logGroup": {
                        "$ref": "#/types/yandex:index/FunctionTriggerLogGroup:FunctionTriggerLogGroup"
                    },
                    "logging": {
                        "$ref": "#/types/yandex:index/FunctionTriggerLogging:FunctionTriggerLogging",
                        "description": "[Logging](https://cloud.yandex.com/docs/functions/concepts/trigger/logging) settings definition for Yandex Cloud Functions Trigger, if present\n* `logging.0.group_id` - Logging group ID for Yandex Cloud Functions Trigger\n* `logging.0.resource_ids` - Resource ID filter setting for Yandex Cloud Functions Trigger\n* `logging.0.resource_types` - Resource type filter setting for Yandex Cloud Functions Trigger\n* `logging.0.levels` - Logging level filter setting for Yandex Cloud Functions Trigger\n* `logging.0.batch_cutoff` - Batch Duration in seconds for Yandex Cloud Functions Trigger\n* `logging.0.batch_size` - Batch Size for Yandex Cloud Functions Trigger\n"
                    },
                    "messageQueue": {
                        "$ref": "#/types/yandex:index/FunctionTriggerMessageQueue:FunctionTriggerMessageQueue",
                        "description": "[Message Queue](https://cloud.yandex.com/docs/functions/concepts/trigger/ymq-trigger) settings definition for Yandex Cloud Functions Trigger, if present\n* `message_queue.0.queue_id` - Message Queue ID for Yandex Cloud Functions Trigger\n* `message_queue.0.service_account_id` - Message Queue Service Account ID for Yandex Cloud Functions Trigger\n* `message_queue.0.batch_cutoff` - Batch Duration in seconds for Yandex Cloud Functions Trigger\n* `message_queue.0.batch_size` - Batch Size for Yandex Cloud Functions Trigger\n* `message_queue.0.visibility_timeout` - Visibility timeout for Yandex Cloud Functions Trigger\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Yandex Cloud Functions Trigger name used to define trigger\n"
                    },
                    "objectStorage": {
                        "$ref": "#/types/yandex:index/FunctionTriggerObjectStorage:FunctionTriggerObjectStorage",
                        "description": "[Object Storage](https://cloud.yandex.com/docs/functions/concepts/trigger/os-trigger) settings definition for Yandex Cloud Functions Trigger, if present\n* `object_storage.0.bucket_id` - Object Storage Bucket ID for Yandex Cloud Functions Trigger\n* `object_storage.0.prefix` - Prefix for Object Storage for Yandex Cloud Functions Trigger\n* `object_storage.0.suffix` - Suffix for Object Storage for Yandex Cloud Functions Trigger\n* `object_storage.0.create` - Boolean flag for setting create event for Yandex Cloud Functions Trigger\n* `object_storage.0.update` - Boolean flag for setting update event for Yandex Cloud Functions Trigger\n* `object_storage.0.delete` - Boolean flag for setting delete event for Yandex Cloud Functions Trigger\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/FunctionTriggerTimeouts:FunctionTriggerTimeouts"
                    },
                    "timer": {
                        "$ref": "#/types/yandex:index/FunctionTriggerTimer:FunctionTriggerTimer",
                        "description": "[Timer](https://cloud.yandex.com/docs/functions/concepts/trigger/timer) settings definition for Yandex Cloud Functions Trigger, if present\n* `timer.0.cron_expression` - Cron expression for timer for Yandex Cloud Functions Trigger\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/iamServiceAccount:IamServiceAccount": {
            "description": "Allows management of a Yandex.Cloud IAM [service account](https://cloud.yandex.com/docs/iam/concepts/users/service-accounts).\nTo assign roles and permissions, use the yandex_iam_service_account_iam_binding, \nyandex.IamServiceAccountIamMember and \nyandex.IamServiceAccountIamPolicy resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThis snippet creates a service account.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst sa = new yandex.IamServiceAccount(\"sa\", {\n    description: \"service account to manage VMs\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nsa = yandex.IamServiceAccount(\"sa\", description=\"service account to manage VMs\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sa = new Yandex.IamServiceAccount(\"sa\", new()\n    {\n        Description = \"service account to manage VMs\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewIamServiceAccount(ctx, \"sa\", \u0026yandex.IamServiceAccountArgs{\n\t\t\tDescription: pulumi.String(\"service account to manage VMs\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.IamServiceAccount;\nimport com.pulumi.yandex.IamServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sa = new IamServiceAccount(\"sa\", IamServiceAccountArgs.builder()        \n            .description(\"service account to manage VMs\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sa:\n    type: yandex:IamServiceAccount\n    properties:\n      description: service account to manage VMs\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA service account can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/iamServiceAccount:IamServiceAccount sa account_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the service account.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the service account will be created in.\nDefaults to the provider folder configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service account.\nCan be updated without creating a new resource.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/IamServiceAccountTimeouts:IamServiceAccountTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the service account.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the service account will be created in.\nDefaults to the provider folder configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service account.\nCan be updated without creating a new resource.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/IamServiceAccountTimeouts:IamServiceAccountTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamServiceAccount resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the service account.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the service account will be created in.\nDefaults to the provider folder configuration.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service account.\nCan be updated without creating a new resource.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/IamServiceAccountTimeouts:IamServiceAccountTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/iamServiceAccountApiKey:IamServiceAccountApiKey": {
            "description": "Allows management of a [Yandex.Cloud IAM service account API key](https://cloud.yandex.com/docs/iam/concepts/authorization/api-key).\nThe API key is a private key used for simplified authorization in the Yandex.Cloud API. API keys are only used for [service accounts](https://cloud.yandex.com/docs/iam/concepts/users/service-accounts).\n\nAPI keys do not expire. This means that this authentication method is simpler, but less secure. Use it if you can't automatically request an [IAM token](https://cloud.yandex.com/docs/iam/concepts/authorization/iam-token).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThis snippet creates an API key.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst sa_api_key = new yandex.IamServiceAccountApiKey(\"sa-api-key\", {\n    description: \"api key for authorization\",\n    pgpKey: \"keybase:keybaseusername\",\n    serviceAccountId: \"some_sa_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nsa_api_key = yandex.IamServiceAccountApiKey(\"sa-api-key\",\n    description=\"api key for authorization\",\n    pgp_key=\"keybase:keybaseusername\",\n    service_account_id=\"some_sa_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sa_api_key = new Yandex.IamServiceAccountApiKey(\"sa-api-key\", new()\n    {\n        Description = \"api key for authorization\",\n        PgpKey = \"keybase:keybaseusername\",\n        ServiceAccountId = \"some_sa_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewIamServiceAccountApiKey(ctx, \"sa-api-key\", \u0026yandex.IamServiceAccountApiKeyArgs{\n\t\t\tDescription:      pulumi.String(\"api key for authorization\"),\n\t\t\tPgpKey:           pulumi.String(\"keybase:keybaseusername\"),\n\t\t\tServiceAccountId: pulumi.String(\"some_sa_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.IamServiceAccountApiKey;\nimport com.pulumi.yandex.IamServiceAccountApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sa_api_key = new IamServiceAccountApiKey(\"sa-api-key\", IamServiceAccountApiKeyArgs.builder()        \n            .description(\"api key for authorization\")\n            .pgpKey(\"keybase:keybaseusername\")\n            .serviceAccountId(\"some_sa_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sa-api-key:\n    type: yandex:IamServiceAccountApiKey\n    properties:\n      description: api key for authorization\n      pgpKey: keybase:keybaseusername\n      serviceAccountId: some_sa_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the static access key.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the key.\n"
                },
                "encryptedSecretKey": {
                    "type": "string",
                    "description": "The encrypted secret key, base64 encoded. This is only populated when `pgp_key` is supplied.\n"
                },
                "keyFingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the PGP key used to encrypt the secret key. This is only populated when `pgp_key` is supplied.\n"
                },
                "pgpKey": {
                    "type": "string",
                    "description": "An optional PGP key to encrypt the resulting secret key material. May either be a base64-encoded public key or a keybase username in the form `keybase:keybaseusername`.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key. This is only populated when no `pgp_key` is provided.\n",
                    "secret": true
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "ID of the service account to an API key for.\n"
                }
            },
            "required": [
                "createdAt",
                "encryptedSecretKey",
                "keyFingerprint",
                "secretKey",
                "serviceAccountId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the key.\n"
                },
                "pgpKey": {
                    "type": "string",
                    "description": "An optional PGP key to encrypt the resulting secret key material. May either be a base64-encoded public key or a keybase username in the form `keybase:keybaseusername`.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "ID of the service account to an API key for.\n"
                }
            },
            "requiredInputs": [
                "serviceAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamServiceAccountApiKey resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the static access key.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the key.\n"
                    },
                    "encryptedSecretKey": {
                        "type": "string",
                        "description": "The encrypted secret key, base64 encoded. This is only populated when `pgp_key` is supplied.\n"
                    },
                    "keyFingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the PGP key used to encrypt the secret key. This is only populated when `pgp_key` is supplied.\n"
                    },
                    "pgpKey": {
                        "type": "string",
                        "description": "An optional PGP key to encrypt the resulting secret key material. May either be a base64-encoded public key or a keybase username in the form `keybase:keybaseusername`.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret key. This is only populated when no `pgp_key` is provided.\n",
                        "secret": true
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "ID of the service account to an API key for.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/iamServiceAccountIamBinding:IamServiceAccountIamBinding": {
            "description": "When managing IAM roles, you can treat a service account either as a resource or as an identity. \nThis resource is used to add IAM policy bindings to a service account resource to configure permissions \nthat define who can edit the service account.\n\nThere are three different resources that help you manage your IAM policy for a service account. \nEach of these resources is used for a different use case:\n\n* yandex_iam_service_account_iam_policy: Authoritative. Sets the IAM policy for the service account and replaces any existing policy already attached.\n* yandex_iam_service_account_iam_binding: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service account are preserved.\n* yandex_iam_service_account_iam_member: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role of the service account are preserved.\n\n\u003e **Note:** `yandex.IamServiceAccountIamPolicy` **cannot** be used in conjunction with `yandex.IamServiceAccountIamBinding` and `yandex.IamServiceAccountIamMember` or they will conflict over what your policy should be.\n\n\u003e **Note:** `yandex.IamServiceAccountIamBinding` resources **can be** used in conjunction with `yandex.IamServiceAccountIamMember` resources **only if** they do not grant privileges to the same role.\n\n## yandex\\_service\\_account\\_iam\\_binding\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst admin_account_iam = new yandex.IamServiceAccountIamBinding(\"admin-account-iam\", {\n    members: [\"userAccount:foo_user_id\"],\n    role: \"admin\",\n    serviceAccountId: \"your-service-account-id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nadmin_account_iam = yandex.IamServiceAccountIamBinding(\"admin-account-iam\",\n    members=[\"userAccount:foo_user_id\"],\n    role=\"admin\",\n    service_account_id=\"your-service-account-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var admin_account_iam = new Yandex.IamServiceAccountIamBinding(\"admin-account-iam\", new()\n    {\n        Members = new[]\n        {\n            \"userAccount:foo_user_id\",\n        },\n        Role = \"admin\",\n        ServiceAccountId = \"your-service-account-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewIamServiceAccountIamBinding(ctx, \"admin-account-iam\", \u0026yandex.IamServiceAccountIamBindingArgs{\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"userAccount:foo_user_id\"),\n\t\t\t},\n\t\t\tRole:             pulumi.String(\"admin\"),\n\t\t\tServiceAccountId: pulumi.String(\"your-service-account-id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.IamServiceAccountIamBinding;\nimport com.pulumi.yandex.IamServiceAccountIamBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var admin_account_iam = new IamServiceAccountIamBinding(\"admin-account-iam\", IamServiceAccountIamBindingArgs.builder()        \n            .members(\"userAccount:foo_user_id\")\n            .role(\"admin\")\n            .serviceAccountId(\"your-service-account-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  admin-account-iam:\n    type: yandex:IamServiceAccountIamBinding\n    properties:\n      members:\n        - userAccount:foo_user_id\n      role: admin\n      serviceAccountId: your-service-account-id\n```\n\n\n## Import\n\nService account IAM binding resources can be imported using the service account ID and role.\n\n```sh\n $ pulumi import yandex:index/iamServiceAccountIamBinding:IamServiceAccountIamBinding admin-account-iam \"service_account_id roles/editor\"\n```\n\n ",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied. Only one\n`yandex.IamServiceAccountIamBinding` can be used per role.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "The service account ID to apply a binding to.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "required": [
                "members",
                "role",
                "serviceAccountId"
            ],
            "inputProperties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied. Only one\n`yandex.IamServiceAccountIamBinding` can be used per role.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "The service account ID to apply a binding to.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "members",
                "role",
                "serviceAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamServiceAccountIamBinding resources.\n",
                "properties": {
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be applied. Only one\n`yandex.IamServiceAccountIamBinding` can be used per role.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "The service account ID to apply a binding to.\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/iamServiceAccountIamMember:IamServiceAccountIamMember": {
            "description": "When managing IAM roles, you can treat a service account either as a resource or as an identity. \nThis resource is used to add IAM policy bindings to a service account resource to configure permissions \nthat define who can edit the service account.\n\nThere are three different resources that help you manage your IAM policy for a service account. \nEach of these resources is used for a different use case:\n\n* yandex_iam_service_account_iam_policy: Authoritative. Sets the IAM policy for the service account and replaces any existing policy already attached.\n* yandex_iam_service_account_iam_binding: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service account are preserved.\n* yandex_iam_service_account_iam_member: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role of the service account are preserved.\n\n\u003e **Note:** `yandex.IamServiceAccountIamPolicy` **cannot** be used in conjunction with `yandex.IamServiceAccountIamBinding` and `yandex.IamServiceAccountIamMember` or they will conflict over what your policy should be.\n\n\u003e **Note:** `yandex.IamServiceAccountIamBinding` resources **can be** used in conjunction with `yandex.IamServiceAccountIamMember` resources **only if** they do not grant privileges to the same role.\n\n## yandex\\_service\\_account\\_iam\\_member\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst admin_account_iam = new yandex.IamServiceAccountIamMember(\"admin-account-iam\", {\n    member: \"userAccount:bar_user_id\",\n    role: \"admin\",\n    serviceAccountId: \"your-service-account-id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nadmin_account_iam = yandex.IamServiceAccountIamMember(\"admin-account-iam\",\n    member=\"userAccount:bar_user_id\",\n    role=\"admin\",\n    service_account_id=\"your-service-account-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var admin_account_iam = new Yandex.IamServiceAccountIamMember(\"admin-account-iam\", new()\n    {\n        Member = \"userAccount:bar_user_id\",\n        Role = \"admin\",\n        ServiceAccountId = \"your-service-account-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewIamServiceAccountIamMember(ctx, \"admin-account-iam\", \u0026yandex.IamServiceAccountIamMemberArgs{\n\t\t\tMember:           pulumi.String(\"userAccount:bar_user_id\"),\n\t\t\tRole:             pulumi.String(\"admin\"),\n\t\t\tServiceAccountId: pulumi.String(\"your-service-account-id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.IamServiceAccountIamMember;\nimport com.pulumi.yandex.IamServiceAccountIamMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var admin_account_iam = new IamServiceAccountIamMember(\"admin-account-iam\", IamServiceAccountIamMemberArgs.builder()        \n            .member(\"userAccount:bar_user_id\")\n            .role(\"admin\")\n            .serviceAccountId(\"your-service-account-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  admin-account-iam:\n    type: yandex:IamServiceAccountIamMember\n    properties:\n      member: userAccount:bar_user_id\n      role: admin\n      serviceAccountId: your-service-account-id\n```\n\n\n## Import\n\nService account IAM member resources can be imported using the service account ID, role and member.\n\n```sh\n $ pulumi import yandex:index/iamServiceAccountIamMember:IamServiceAccountIamMember admin-account-iam \"service_account_id roles/editor foo@example.com\"\n```\n\n ",
            "properties": {
                "member": {
                    "type": "string",
                    "description": "Identity that will be granted the privilege in `role`.\nEntry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied. Only one\n`yandex.IamServiceAccountIamBinding` can be used per role.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "The service account ID to apply a policy to.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "required": [
                "member",
                "role",
                "serviceAccountId"
            ],
            "inputProperties": {
                "member": {
                    "type": "string",
                    "description": "Identity that will be granted the privilege in `role`.\nEntry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied. Only one\n`yandex.IamServiceAccountIamBinding` can be used per role.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "The service account ID to apply a policy to.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "member",
                "role",
                "serviceAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamServiceAccountIamMember resources.\n",
                "properties": {
                    "member": {
                        "type": "string",
                        "description": "Identity that will be granted the privilege in `role`.\nEntry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be applied. Only one\n`yandex.IamServiceAccountIamBinding` can be used per role.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "The service account ID to apply a policy to.\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/iamServiceAccountIamPolicy:IamServiceAccountIamPolicy": {
            "description": "When managing IAM roles, you can treat a service account either as a resource or as an identity. \nThis resource is used to add IAM policy bindings to a service account resource to configure permissions \nthat define who can edit the service account.\n\nThere are three different resources that help you manage your IAM policy for a service account. \nEach of these resources is used for a different use case:\n\n* yandex_iam_service_account_iam_policy: Authoritative. Sets the IAM policy for the service account and replaces any existing policy already attached.\n* yandex_iam_service_account_iam_binding: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service account are preserved.\n* yandex_iam_service_account_iam_member: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role of the service account are preserved.\n\n\u003e **Note:** `yandex.IamServiceAccountIamPolicy` **cannot** be used in conjunction with `yandex.IamServiceAccountIamBinding` and `yandex.IamServiceAccountIamMember` or they will conflict over what your policy should be.\n\n\u003e **Note:** `yandex.IamServiceAccountIamBinding` resources **can be** used in conjunction with `yandex.IamServiceAccountIamMember` resources **only if** they do not grant privileges to the same role.\n\n## yandex\\_service\\_account\\_iam\\_policy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst admin = pulumi.output(yandex.getIamPolicy({\n    bindings: [{\n        members: [\"userAccount:foobar_user_id\"],\n        role: \"admin\",\n    }],\n}));\nconst admin_account_iam = new yandex.IamServiceAccountIamPolicy(\"admin-account-iam\", {\n    policyData: admin.policyData,\n    serviceAccountId: \"your-service-account-id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nadmin = yandex.get_iam_policy(bindings=[yandex.GetIamPolicyBindingArgs(\n    members=[\"userAccount:foobar_user_id\"],\n    role=\"admin\",\n)])\nadmin_account_iam = yandex.IamServiceAccountIamPolicy(\"admin-account-iam\",\n    policy_data=admin.policy_data,\n    service_account_id=\"your-service-account-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var admin = Yandex.GetIamPolicy.Invoke(new()\n    {\n        Bindings = new[]\n        {\n            new Yandex.Inputs.GetIamPolicyBindingInputArgs\n            {\n                Members = new[]\n                {\n                    \"userAccount:foobar_user_id\",\n                },\n                Role = \"admin\",\n            },\n        },\n    });\n\n    var admin_account_iam = new Yandex.IamServiceAccountIamPolicy(\"admin-account-iam\", new()\n    {\n        PolicyData = admin.Apply(getIamPolicyResult =\u003e getIamPolicyResult.PolicyData),\n        ServiceAccountId = \"your-service-account-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tadmin, err := yandex.GetIamPolicy(ctx, \u0026GetIamPolicyArgs{\n\t\t\tBindings: []GetIamPolicyBinding{\n\t\t\t\tGetIamPolicyBinding{\n\t\t\t\t\tMembers: []string{\n\t\t\t\t\t\t\"userAccount:foobar_user_id\",\n\t\t\t\t\t},\n\t\t\t\t\tRole: \"admin\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewIamServiceAccountIamPolicy(ctx, \"admin-account-iam\", \u0026yandex.IamServiceAccountIamPolicyArgs{\n\t\t\tPolicyData:       pulumi.String(admin.PolicyData),\n\t\t\tServiceAccountId: pulumi.String(\"your-service-account-id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetIamPolicyArgs;\nimport com.pulumi.yandex.IamServiceAccountIamPolicy;\nimport com.pulumi.yandex.IamServiceAccountIamPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var admin = YandexFunctions.getIamPolicy(GetIamPolicyArgs.builder()\n            .bindings(GetIamPolicyBindingArgs.builder()\n                .members(\"userAccount:foobar_user_id\")\n                .role(\"admin\")\n                .build())\n            .build());\n\n        var admin_account_iam = new IamServiceAccountIamPolicy(\"admin-account-iam\", IamServiceAccountIamPolicyArgs.builder()        \n            .policyData(admin.applyValue(getIamPolicyResult -\u003e getIamPolicyResult.policyData()))\n            .serviceAccountId(\"your-service-account-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  admin-account-iam:\n    type: yandex:IamServiceAccountIamPolicy\n    properties:\n      policyData: ${admin.policyData}\n      serviceAccountId: your-service-account-id\nvariables:\n  admin:\n    fn::invoke:\n      Function: yandex:getIamPolicy\n      Arguments:\n        bindings:\n          - members:\n              - userAccount:foobar_user_id\n            role: admin\n```\n\n\n## Import\n\nService account IAM policy resources can be imported using the service account ID.\n\n```sh\n $ pulumi import yandex:index/iamServiceAccountIamPolicy:IamServiceAccountIamPolicy admin-account-iam service_account_id\n```\n\n ",
            "properties": {
                "policyData": {
                    "type": "string",
                    "description": "The policy data generated by\na `yandex.getIamPolicy` data source.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "The service account ID to apply a policy to.\n"
                }
            },
            "required": [
                "policyData",
                "serviceAccountId"
            ],
            "inputProperties": {
                "policyData": {
                    "type": "string",
                    "description": "The policy data generated by\na `yandex.getIamPolicy` data source.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "The service account ID to apply a policy to.\n"
                }
            },
            "requiredInputs": [
                "policyData",
                "serviceAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamServiceAccountIamPolicy resources.\n",
                "properties": {
                    "policyData": {
                        "type": "string",
                        "description": "The policy data generated by\na `yandex.getIamPolicy` data source.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "The service account ID to apply a policy to.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/iamServiceAccountKey:IamServiceAccountKey": {
            "description": "Allows management of [Yandex.Cloud IAM service account authorized keys](https://cloud.yandex.com/docs/iam/concepts/authorization/key).\nGenerated pair of keys is used to create a [JSON Web Token](https://tools.ietf.org/html/rfc7519) which is necessary for requesting an [IAM Token](https://cloud.yandex.com/docs/iam/concepts/authorization/iam-token) for a [service account](https://cloud.yandex.com/docs/iam/concepts/users/service-accounts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThis snippet creates an authorized keys pair.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst sa_auth_key = new yandex.IamServiceAccountKey(\"sa-auth-key\", {\n    description: \"key for service account\",\n    keyAlgorithm: \"RSA_4096\",\n    pgpKey: \"keybase:keybaseusername\",\n    serviceAccountId: \"some_sa_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nsa_auth_key = yandex.IamServiceAccountKey(\"sa-auth-key\",\n    description=\"key for service account\",\n    key_algorithm=\"RSA_4096\",\n    pgp_key=\"keybase:keybaseusername\",\n    service_account_id=\"some_sa_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sa_auth_key = new Yandex.IamServiceAccountKey(\"sa-auth-key\", new()\n    {\n        Description = \"key for service account\",\n        KeyAlgorithm = \"RSA_4096\",\n        PgpKey = \"keybase:keybaseusername\",\n        ServiceAccountId = \"some_sa_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewIamServiceAccountKey(ctx, \"sa-auth-key\", \u0026yandex.IamServiceAccountKeyArgs{\n\t\t\tDescription:      pulumi.String(\"key for service account\"),\n\t\t\tKeyAlgorithm:     pulumi.String(\"RSA_4096\"),\n\t\t\tPgpKey:           pulumi.String(\"keybase:keybaseusername\"),\n\t\t\tServiceAccountId: pulumi.String(\"some_sa_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.IamServiceAccountKey;\nimport com.pulumi.yandex.IamServiceAccountKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sa_auth_key = new IamServiceAccountKey(\"sa-auth-key\", IamServiceAccountKeyArgs.builder()        \n            .description(\"key for service account\")\n            .keyAlgorithm(\"RSA_4096\")\n            .pgpKey(\"keybase:keybaseusername\")\n            .serviceAccountId(\"some_sa_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sa-auth-key:\n    type: yandex:IamServiceAccountKey\n    properties:\n      description: key for service account\n      keyAlgorithm: RSA_4096\n      pgpKey: keybase:keybaseusername\n      serviceAccountId: some_sa_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the static access key.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the key pair.\n"
                },
                "encryptedPrivateKey": {
                    "type": "string",
                    "description": "The encrypted private key, base64 encoded. This is only populated when `pgp_key` is supplied.\n"
                },
                "format": {
                    "type": "string",
                    "description": "The output format of the keys. `PEM_FILE` is the default format.\n"
                },
                "keyAlgorithm": {
                    "type": "string",
                    "description": "The algorithm used to generate the key. `RSA_2048` is the default algorithm.\nValid values are listed in the [API reference](https://cloud.yandex.com/docs/iam/api-ref/Key).\n"
                },
                "keyFingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the PGP key used to encrypt the private key. This is only populated when `pgp_key` is supplied.\n"
                },
                "pgpKey": {
                    "type": "string",
                    "description": "An optional PGP key to encrypt the resulting private key material. May either be a base64-encoded public key or a keybase username in the form `keybase:keybaseusername`.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "The private key. This is only populated when no `pgp_key` is provided.\n",
                    "secret": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "The public key.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "ID of the service account to create a pair for.\n"
                }
            },
            "required": [
                "createdAt",
                "encryptedPrivateKey",
                "keyFingerprint",
                "privateKey",
                "publicKey",
                "serviceAccountId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the key pair.\n"
                },
                "format": {
                    "type": "string",
                    "description": "The output format of the keys. `PEM_FILE` is the default format.\n"
                },
                "keyAlgorithm": {
                    "type": "string",
                    "description": "The algorithm used to generate the key. `RSA_2048` is the default algorithm.\nValid values are listed in the [API reference](https://cloud.yandex.com/docs/iam/api-ref/Key).\n"
                },
                "pgpKey": {
                    "type": "string",
                    "description": "An optional PGP key to encrypt the resulting private key material. May either be a base64-encoded public key or a keybase username in the form `keybase:keybaseusername`.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "ID of the service account to create a pair for.\n"
                }
            },
            "requiredInputs": [
                "serviceAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamServiceAccountKey resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the static access key.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the key pair.\n"
                    },
                    "encryptedPrivateKey": {
                        "type": "string",
                        "description": "The encrypted private key, base64 encoded. This is only populated when `pgp_key` is supplied.\n"
                    },
                    "format": {
                        "type": "string",
                        "description": "The output format of the keys. `PEM_FILE` is the default format.\n"
                    },
                    "keyAlgorithm": {
                        "type": "string",
                        "description": "The algorithm used to generate the key. `RSA_2048` is the default algorithm.\nValid values are listed in the [API reference](https://cloud.yandex.com/docs/iam/api-ref/Key).\n"
                    },
                    "keyFingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the PGP key used to encrypt the private key. This is only populated when `pgp_key` is supplied.\n"
                    },
                    "pgpKey": {
                        "type": "string",
                        "description": "An optional PGP key to encrypt the resulting private key material. May either be a base64-encoded public key or a keybase username in the form `keybase:keybaseusername`.\n"
                    },
                    "privateKey": {
                        "type": "string",
                        "description": "The private key. This is only populated when no `pgp_key` is provided.\n",
                        "secret": true
                    },
                    "publicKey": {
                        "type": "string",
                        "description": "The public key.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "ID of the service account to create a pair for.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/iamServiceAccountStaticAccessKey:IamServiceAccountStaticAccessKey": {
            "description": "Allows management of [Yandex.Cloud IAM service account static access keys](https://cloud.yandex.com/docs/iam/operations/sa/create-access-key).\nGenerated pair of keys is used to access [Yandex Object Storage](https://cloud.yandex.com/docs/storage) on behalf of service account.\n\nBefore using keys do not forget to [assign a proper role](https://cloud.yandex.com/docs/iam/operations/sa/assign-role-for-sa) to the service account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nThis snippet creates a service account static access key.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst sa_static_key = new yandex.IamServiceAccountStaticAccessKey(\"sa-static-key\", {\n    description: \"static access key for object storage\",\n    pgpKey: \"keybase:keybaseusername\",\n    serviceAccountId: \"some_sa_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nsa_static_key = yandex.IamServiceAccountStaticAccessKey(\"sa-static-key\",\n    description=\"static access key for object storage\",\n    pgp_key=\"keybase:keybaseusername\",\n    service_account_id=\"some_sa_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sa_static_key = new Yandex.IamServiceAccountStaticAccessKey(\"sa-static-key\", new()\n    {\n        Description = \"static access key for object storage\",\n        PgpKey = \"keybase:keybaseusername\",\n        ServiceAccountId = \"some_sa_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewIamServiceAccountStaticAccessKey(ctx, \"sa-static-key\", \u0026yandex.IamServiceAccountStaticAccessKeyArgs{\n\t\t\tDescription:      pulumi.String(\"static access key for object storage\"),\n\t\t\tPgpKey:           pulumi.String(\"keybase:keybaseusername\"),\n\t\t\tServiceAccountId: pulumi.String(\"some_sa_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.IamServiceAccountStaticAccessKey;\nimport com.pulumi.yandex.IamServiceAccountStaticAccessKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sa_static_key = new IamServiceAccountStaticAccessKey(\"sa-static-key\", IamServiceAccountStaticAccessKeyArgs.builder()        \n            .description(\"static access key for object storage\")\n            .pgpKey(\"keybase:keybaseusername\")\n            .serviceAccountId(\"some_sa_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sa-static-key:\n    type: yandex:IamServiceAccountStaticAccessKey\n    properties:\n      description: static access key for object storage\n      pgpKey: keybase:keybaseusername\n      serviceAccountId: some_sa_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "ID of the static access key.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the static access key.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the service account static key.\n"
                },
                "encryptedSecretKey": {
                    "type": "string",
                    "description": "The encrypted secret, base64 encoded. This is only populated when `pgp_key` is supplied.\n"
                },
                "keyFingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the PGP key used to encrypt the secret key. This is only populated when `pgp_key` is supplied.\n"
                },
                "pgpKey": {
                    "type": "string",
                    "description": "An optional PGP key to encrypt the resulting secret key material. May either be a base64-encoded public key or a keybase username in the form `keybase:keybaseusername`.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Private part of generated static access key. This is only populated when no `pgp_key` is provided.\n",
                    "secret": true
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "ID of the service account which is used to get a static key.\n"
                }
            },
            "required": [
                "accessKey",
                "createdAt",
                "encryptedSecretKey",
                "keyFingerprint",
                "secretKey",
                "serviceAccountId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the service account static key.\n"
                },
                "pgpKey": {
                    "type": "string",
                    "description": "An optional PGP key to encrypt the resulting secret key material. May either be a base64-encoded public key or a keybase username in the form `keybase:keybaseusername`.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "ID of the service account which is used to get a static key.\n"
                }
            },
            "requiredInputs": [
                "serviceAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IamServiceAccountStaticAccessKey resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "ID of the static access key.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the static access key.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the service account static key.\n"
                    },
                    "encryptedSecretKey": {
                        "type": "string",
                        "description": "The encrypted secret, base64 encoded. This is only populated when `pgp_key` is supplied.\n"
                    },
                    "keyFingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the PGP key used to encrypt the secret key. This is only populated when `pgp_key` is supplied.\n"
                    },
                    "pgpKey": {
                        "type": "string",
                        "description": "An optional PGP key to encrypt the resulting secret key material. May either be a base64-encoded public key or a keybase username in the form `keybase:keybaseusername`.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "Private part of generated static access key. This is only populated when no `pgp_key` is provided.\n",
                        "secret": true
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "ID of the service account which is used to get a static key.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/iotCoreBroker:IotCoreBroker": {
            "description": "Allows management of [Yandex.Cloud IoT Broker](https://cloud.yandex.com/docs/iot-core/quickstart).\n\nThe service is at the Preview stage.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myBroker = new yandex.IotCoreBroker(\"my_broker\", {\n    certificates: [\n        \"public part of certificate1\",\n        \"public part of certificate2\",\n    ],\n    description: \"any description\",\n    labels: {\n        \"my-label\": \"my-label-value\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_broker = yandex.IotCoreBroker(\"myBroker\",\n    certificates=[\n        \"public part of certificate1\",\n        \"public part of certificate2\",\n    ],\n    description=\"any description\",\n    labels={\n        \"my-label\": \"my-label-value\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myBroker = new Yandex.IotCoreBroker(\"myBroker\", new()\n    {\n        Certificates = new[]\n        {\n            \"public part of certificate1\",\n            \"public part of certificate2\",\n        },\n        Description = \"any description\",\n        Labels = \n        {\n            { \"my-label\", \"my-label-value\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewIotCoreBroker(ctx, \"myBroker\", \u0026yandex.IotCoreBrokerArgs{\n\t\t\tCertificates: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"public part of certificate1\"),\n\t\t\t\tpulumi.String(\"public part of certificate2\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"any description\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"my-label\": pulumi.String(\"my-label-value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.IotCoreBroker;\nimport com.pulumi.yandex.IotCoreBrokerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myBroker = new IotCoreBroker(\"myBroker\", IotCoreBrokerArgs.builder()        \n            .certificates(            \n                \"public part of certificate1\",\n                \"public part of certificate2\")\n            .description(\"any description\")\n            .labels(Map.of(\"my-label\", \"my-label-value\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myBroker:\n    type: yandex:IotCoreBroker\n    properties:\n      certificates:\n        - public part of certificate1\n        - public part of certificate2\n      description: any description\n      labels:\n        my-label: my-label-value\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of certificate's fingerprints for the IoT Core Broker\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the IoT Core Broker\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the IoT Core Broker\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder ID for the IoT Core Broker\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the IoT Core Broker.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IoT Core Broker name used to define broker\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/IotCoreBrokerTimeouts:IotCoreBrokerTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "timeouts"
            ],
            "inputProperties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of certificate's fingerprints for the IoT Core Broker\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the IoT Core Broker\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder ID for the IoT Core Broker\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the IoT Core Broker.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IoT Core Broker name used to define broker\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/IotCoreBrokerTimeouts:IotCoreBrokerTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotCoreBroker resources.\n",
                "properties": {
                    "certificates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of certificate's fingerprints for the IoT Core Broker\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the IoT Core Broker\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the IoT Core Broker\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID for the IoT Core Broker\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the IoT Core Broker.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IoT Core Broker name used to define broker\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/IotCoreBrokerTimeouts:IotCoreBrokerTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/iotCoreDevice:IotCoreDevice": {
            "description": "Allows management of [Yandex.Cloud IoT Device](https://cloud.yandex.com/docs/iot-core/quickstart).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myDevice = new yandex.IotCoreDevice(\"my_device\", {\n    aliases: {\n        \"some_alias1/subtopic\": \"$devices/{id}/events/somesubtopic\",\n        \"some_alias2/subtopic\": \"$devices/{id}/events/aaa/bbb\",\n    },\n    certificates: [\n        \"public part of certificate1\",\n        \"public part of certificate2\",\n    ],\n    description: \"any description\",\n    passwords: [\n        \"my-password1\",\n        \"my-password2\",\n    ],\n    registryId: \"are1sampleregistryid11\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_device = yandex.IotCoreDevice(\"myDevice\",\n    aliases={\n        \"some_alias1/subtopic\": \"$devices/{id}/events/somesubtopic\",\n        \"some_alias2/subtopic\": \"$devices/{id}/events/aaa/bbb\",\n    },\n    certificates=[\n        \"public part of certificate1\",\n        \"public part of certificate2\",\n    ],\n    description=\"any description\",\n    passwords=[\n        \"my-password1\",\n        \"my-password2\",\n    ],\n    registry_id=\"are1sampleregistryid11\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDevice = new Yandex.IotCoreDevice(\"myDevice\", new()\n    {\n        Aliases = \n        {\n            { \"some_alias1/subtopic\", \"$devices/{id}/events/somesubtopic\" },\n            { \"some_alias2/subtopic\", \"$devices/{id}/events/aaa/bbb\" },\n        },\n        Certificates = new[]\n        {\n            \"public part of certificate1\",\n            \"public part of certificate2\",\n        },\n        Description = \"any description\",\n        Passwords = new[]\n        {\n            \"my-password1\",\n            \"my-password2\",\n        },\n        RegistryId = \"are1sampleregistryid11\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewIotCoreDevice(ctx, \"myDevice\", \u0026yandex.IotCoreDeviceArgs{\n\t\t\tAliases: pulumi.StringMap{\n\t\t\t\t\"some_alias1/subtopic\": pulumi.String(fmt.Sprintf(\"$devices/{id}/events/somesubtopic\")),\n\t\t\t\t\"some_alias2/subtopic\": pulumi.String(fmt.Sprintf(\"$devices/{id}/events/aaa/bbb\")),\n\t\t\t},\n\t\t\tCertificates: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"public part of certificate1\"),\n\t\t\t\tpulumi.String(\"public part of certificate2\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"any description\"),\n\t\t\tPasswords: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"my-password1\"),\n\t\t\t\tpulumi.String(\"my-password2\"),\n\t\t\t},\n\t\t\tRegistryId: pulumi.String(\"are1sampleregistryid11\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.IotCoreDevice;\nimport com.pulumi.yandex.IotCoreDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myDevice = new IotCoreDevice(\"myDevice\", IotCoreDeviceArgs.builder()        \n            .aliases(Map.ofEntries(\n                Map.entry(\"some_alias1/subtopic\", \"$devices/{id}/events/somesubtopic\"),\n                Map.entry(\"some_alias2/subtopic\", \"$devices/{id}/events/aaa/bbb\")\n            ))\n            .certificates(            \n                \"public part of certificate1\",\n                \"public part of certificate2\")\n            .description(\"any description\")\n            .passwords(            \n                \"my-password1\",\n                \"my-password2\")\n            .registryId(\"are1sampleregistryid11\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myDevice:\n    type: yandex:IotCoreDevice\n    properties:\n      aliases:\n        some_alias1/subtopic: $devices/{id}/events/somesubtopic\n        some_alias2/subtopic: $devices/{id}/events/aaa/bbb\n      certificates:\n        - public part of certificate1\n        - public part of certificate2\n      description: any description\n      passwords:\n        - my-password1\n        - my-password2\n      registryId: are1sampleregistryid11\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "aliases": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value aliases pairs to assign to the IoT Core Device\n"
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of certificate's fingerprints for the IoT Core Device\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the IoT Core Device\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the IoT Core Device\n"
                },
                "name": {
                    "type": "string",
                    "description": "IoT Core Device name used to define device\n"
                },
                "passwords": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of passwords's id for the IoT Core Device\n",
                    "secret": true
                },
                "registryId": {
                    "type": "string",
                    "description": "IoT Core Registry ID for the IoT Core Device\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/IotCoreDeviceTimeouts:IotCoreDeviceTimeouts"
                }
            },
            "required": [
                "createdAt",
                "name",
                "registryId",
                "timeouts"
            ],
            "inputProperties": {
                "aliases": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value aliases pairs to assign to the IoT Core Device\n"
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of certificate's fingerprints for the IoT Core Device\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the IoT Core Device\n"
                },
                "name": {
                    "type": "string",
                    "description": "IoT Core Device name used to define device\n"
                },
                "passwords": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of passwords's id for the IoT Core Device\n",
                    "secret": true
                },
                "registryId": {
                    "type": "string",
                    "description": "IoT Core Registry ID for the IoT Core Device\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/IotCoreDeviceTimeouts:IotCoreDeviceTimeouts"
                }
            },
            "requiredInputs": [
                "registryId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotCoreDevice resources.\n",
                "properties": {
                    "aliases": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value aliases pairs to assign to the IoT Core Device\n"
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of certificate's fingerprints for the IoT Core Device\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the IoT Core Device\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the IoT Core Device\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IoT Core Device name used to define device\n"
                    },
                    "passwords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of passwords's id for the IoT Core Device\n",
                        "secret": true
                    },
                    "registryId": {
                        "type": "string",
                        "description": "IoT Core Registry ID for the IoT Core Device\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/IotCoreDeviceTimeouts:IotCoreDeviceTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/iotCoreRegistry:IotCoreRegistry": {
            "description": "Allows management of [Yandex.Cloud IoT Registry](https://cloud.yandex.com/docs/iot-core/quickstart).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myRegistry = new yandex.IotCoreRegistry(\"my_registry\", {\n    certificates: [\n        \"public part of certificate1\",\n        \"public part of certificate2\",\n    ],\n    description: \"any description\",\n    labels: {\n        \"my-label\": \"my-label-value\",\n    },\n    passwords: [\n        \"my-password1\",\n        \"my-password2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_registry = yandex.IotCoreRegistry(\"myRegistry\",\n    certificates=[\n        \"public part of certificate1\",\n        \"public part of certificate2\",\n    ],\n    description=\"any description\",\n    labels={\n        \"my-label\": \"my-label-value\",\n    },\n    passwords=[\n        \"my-password1\",\n        \"my-password2\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myRegistry = new Yandex.IotCoreRegistry(\"myRegistry\", new()\n    {\n        Certificates = new[]\n        {\n            \"public part of certificate1\",\n            \"public part of certificate2\",\n        },\n        Description = \"any description\",\n        Labels = \n        {\n            { \"my-label\", \"my-label-value\" },\n        },\n        Passwords = new[]\n        {\n            \"my-password1\",\n            \"my-password2\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewIotCoreRegistry(ctx, \"myRegistry\", \u0026yandex.IotCoreRegistryArgs{\n\t\t\tCertificates: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"public part of certificate1\"),\n\t\t\t\tpulumi.String(\"public part of certificate2\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"any description\"),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"my-label\": pulumi.String(\"my-label-value\"),\n\t\t\t},\n\t\t\tPasswords: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"my-password1\"),\n\t\t\t\tpulumi.String(\"my-password2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.IotCoreRegistry;\nimport com.pulumi.yandex.IotCoreRegistryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myRegistry = new IotCoreRegistry(\"myRegistry\", IotCoreRegistryArgs.builder()        \n            .certificates(            \n                \"public part of certificate1\",\n                \"public part of certificate2\")\n            .description(\"any description\")\n            .labels(Map.of(\"my-label\", \"my-label-value\"))\n            .passwords(            \n                \"my-password1\",\n                \"my-password2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myRegistry:\n    type: yandex:IotCoreRegistry\n    properties:\n      certificates:\n        - public part of certificate1\n        - public part of certificate2\n      description: any description\n      labels:\n        my-label: my-label-value\n      passwords:\n        - my-password1\n        - my-password2\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of certificate's fingerprints for the IoT Core Registry\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the IoT Core Registry\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the IoT Core Registry\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder ID for the IoT Core Registry\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the IoT Core Registry.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IoT Core Device name used to define registry\n"
                },
                "passwords": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of passwords's id for the IoT Core Registry\n",
                    "secret": true
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/IotCoreRegistryTimeouts:IotCoreRegistryTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "timeouts"
            ],
            "inputProperties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of certificate's fingerprints for the IoT Core Registry\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the IoT Core Registry\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder ID for the IoT Core Registry\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the IoT Core Registry.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IoT Core Device name used to define registry\n"
                },
                "passwords": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of passwords's id for the IoT Core Registry\n",
                    "secret": true
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/IotCoreRegistryTimeouts:IotCoreRegistryTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IotCoreRegistry resources.\n",
                "properties": {
                    "certificates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of certificate's fingerprints for the IoT Core Registry\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the IoT Core Registry\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the IoT Core Registry\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID for the IoT Core Registry\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the IoT Core Registry.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IoT Core Device name used to define registry\n"
                    },
                    "passwords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of passwords's id for the IoT Core Registry\n",
                        "secret": true
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/IotCoreRegistryTimeouts:IotCoreRegistryTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/kmsSecretCiphertext:KmsSecretCiphertext": {
            "description": "Encrypts given plaintext with the specified Yandex KMS key and provides access to the ciphertext.\n\n\u003e **Note:** Using this resource will allow you to conceal secret data within your\nresource definitions, but it does not take care of protecting that data in the\nlogging output, plan output, or state output.  Please take care to secure your secret\ndata outside of resource definitions.\n\nFor more information, see [the official documentation](https://cloud.yandex.com/docs/kms/concepts/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst example = new yandex.KmsSymmetricKey(\"example\", {\n    description: \"description for key\",\n});\nconst password = new yandex.KmsSecretCiphertext(\"password\", {\n    aadContext: \"additional authenticated data\",\n    keyId: example.id,\n    plaintext: \"strong password\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nexample = yandex.KmsSymmetricKey(\"example\", description=\"description for key\")\npassword = yandex.KmsSecretCiphertext(\"password\",\n    aad_context=\"additional authenticated data\",\n    key_id=example.id,\n    plaintext=\"strong password\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Yandex.KmsSymmetricKey(\"example\", new()\n    {\n        Description = \"description for key\",\n    });\n\n    var password = new Yandex.KmsSecretCiphertext(\"password\", new()\n    {\n        AadContext = \"additional authenticated data\",\n        KeyId = example.Id,\n        Plaintext = \"strong password\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := yandex.NewKmsSymmetricKey(ctx, \"example\", \u0026yandex.KmsSymmetricKeyArgs{\n\t\t\tDescription: pulumi.String(\"description for key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewKmsSecretCiphertext(ctx, \"password\", \u0026yandex.KmsSecretCiphertextArgs{\n\t\t\tAadContext: pulumi.String(\"additional authenticated data\"),\n\t\t\tKeyId:      example.ID(),\n\t\t\tPlaintext:  pulumi.String(\"strong password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.KmsSymmetricKey;\nimport com.pulumi.yandex.KmsSymmetricKeyArgs;\nimport com.pulumi.yandex.KmsSecretCiphertext;\nimport com.pulumi.yandex.KmsSecretCiphertextArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new KmsSymmetricKey(\"example\", KmsSymmetricKeyArgs.builder()        \n            .description(\"description for key\")\n            .build());\n\n        var password = new KmsSecretCiphertext(\"password\", KmsSecretCiphertextArgs.builder()        \n            .aadContext(\"additional authenticated data\")\n            .keyId(example.id())\n            .plaintext(\"strong password\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: yandex:KmsSymmetricKey\n    properties:\n      description: description for key\n  password:\n    type: yandex:KmsSecretCiphertext\n    properties:\n      aadContext: additional authenticated data\n      keyId: ${example.id}\n      plaintext: strong password\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "aadContext": {
                    "type": "string",
                    "description": "Additional authenticated data (AAD context), optional. If specified, this data will be required for decryption with the `SymmetricDecryptRequest`\n"
                },
                "ciphertext": {
                    "type": "string",
                    "description": "Resulting ciphertext, encoded with \"standard\" base64 alphabet as defined in RFC 4648 section 4\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "ID of the symmetric KMS key to use for encryption.\n"
                },
                "plaintext": {
                    "type": "string",
                    "description": "Plaintext to be encrypted.\n",
                    "secret": true
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/KmsSecretCiphertextTimeouts:KmsSecretCiphertextTimeouts"
                }
            },
            "required": [
                "ciphertext",
                "keyId",
                "plaintext",
                "timeouts"
            ],
            "inputProperties": {
                "aadContext": {
                    "type": "string",
                    "description": "Additional authenticated data (AAD context), optional. If specified, this data will be required for decryption with the `SymmetricDecryptRequest`\n"
                },
                "keyId": {
                    "type": "string",
                    "description": "ID of the symmetric KMS key to use for encryption.\n"
                },
                "plaintext": {
                    "type": "string",
                    "description": "Plaintext to be encrypted.\n",
                    "secret": true
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/KmsSecretCiphertextTimeouts:KmsSecretCiphertextTimeouts"
                }
            },
            "requiredInputs": [
                "keyId",
                "plaintext",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KmsSecretCiphertext resources.\n",
                "properties": {
                    "aadContext": {
                        "type": "string",
                        "description": "Additional authenticated data (AAD context), optional. If specified, this data will be required for decryption with the `SymmetricDecryptRequest`\n"
                    },
                    "ciphertext": {
                        "type": "string",
                        "description": "Resulting ciphertext, encoded with \"standard\" base64 alphabet as defined in RFC 4648 section 4\n"
                    },
                    "keyId": {
                        "type": "string",
                        "description": "ID of the symmetric KMS key to use for encryption.\n"
                    },
                    "plaintext": {
                        "type": "string",
                        "description": "Plaintext to be encrypted.\n",
                        "secret": true
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/KmsSecretCiphertextTimeouts:KmsSecretCiphertextTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/kmsSymmetricKey:KmsSymmetricKey": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst key_a = new yandex.KmsSymmetricKey(\"key-a\", {\n    defaultAlgorithm: \"AES_128\",\n    description: \"description for key\",\n    rotationPeriod: \"8760h\", // equal to 1 year\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nkey_a = yandex.KmsSymmetricKey(\"key-a\",\n    default_algorithm=\"AES_128\",\n    description=\"description for key\",\n    rotation_period=\"8760h\")\n# equal to 1 year\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var key_a = new Yandex.KmsSymmetricKey(\"key-a\", new()\n    {\n        DefaultAlgorithm = \"AES_128\",\n        Description = \"description for key\",\n        RotationPeriod = \"8760h\",\n    });\n\n    // equal to 1 year\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewKmsSymmetricKey(ctx, \"key-a\", \u0026yandex.KmsSymmetricKeyArgs{\n\t\t\tDefaultAlgorithm: pulumi.String(\"AES_128\"),\n\t\t\tDescription:      pulumi.String(\"description for key\"),\n\t\t\tRotationPeriod:   pulumi.String(\"8760h\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.KmsSymmetricKey;\nimport com.pulumi.yandex.KmsSymmetricKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var key_a = new KmsSymmetricKey(\"key-a\", KmsSymmetricKeyArgs.builder()        \n            .defaultAlgorithm(\"AES_128\")\n            .description(\"description for key\")\n            .rotationPeriod(\"8760h\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  key-a:\n    type: yandex:KmsSymmetricKey\n    properties:\n      defaultAlgorithm: AES_128\n      description: description for key\n      rotationPeriod: 8760h\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA KMS symmetric key can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/kmsSymmetricKey:KmsSymmetricKey top-secret kms_key_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the key.\n"
                },
                "defaultAlgorithm": {
                    "type": "string",
                    "description": "Encryption algorithm to be used with a new key version, \ngenerated with the next rotation. The default value is `AES_128`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of the key.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the key.\n"
                },
                "rotatedAt": {
                    "type": "string",
                    "description": "Last rotation timestamp of the key.\n"
                },
                "rotationPeriod": {
                    "type": "string",
                    "description": "Interval between automatic rotations. To disable automatic rotation, omit this parameter.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the key.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/KmsSymmetricKeyTimeouts:KmsSymmetricKeyTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "rotatedAt",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "defaultAlgorithm": {
                    "type": "string",
                    "description": "Encryption algorithm to be used with a new key version, \ngenerated with the next rotation. The default value is `AES_128`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of the key.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the key.\n"
                },
                "rotationPeriod": {
                    "type": "string",
                    "description": "Interval between automatic rotations. To disable automatic rotation, omit this parameter.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/KmsSymmetricKeyTimeouts:KmsSymmetricKeyTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KmsSymmetricKey resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "defaultAlgorithm": {
                        "type": "string",
                        "description": "Encryption algorithm to be used with a new key version, \ngenerated with the next rotation. The default value is `AES_128`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of the key.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the key.\n"
                    },
                    "rotatedAt": {
                        "type": "string",
                        "description": "Last rotation timestamp of the key.\n"
                    },
                    "rotationPeriod": {
                        "type": "string",
                        "description": "Interval between automatic rotations. To disable automatic rotation, omit this parameter.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the key.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/KmsSymmetricKeyTimeouts:KmsSymmetricKeyTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/kmsSymmetricKeyIamBinding:KmsSymmetricKeyIamBinding": {
            "description": "## yandex\\_kms\\_symmetric\\_key\\_iam\\_binding\n\nAllows creation and management of a single binding within IAM policy for\nan existing Yandex KMS Symmetric Key.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst your_key = new yandex.KmsSymmetricKey(\"your-key\", {folderId: \"your-folder-id\"});\nconst viewer = new yandex.KmsSymmetricKeyIamBinding(\"viewer\", {\n    symmetricKeyId: your_key.id,\n    role: \"viewer\",\n    members: [\"userAccount:foo_user_id\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nyour_key = yandex.KmsSymmetricKey(\"your-key\", folder_id=\"your-folder-id\")\nviewer = yandex.KmsSymmetricKeyIamBinding(\"viewer\",\n    symmetric_key_id=your_key.id,\n    role=\"viewer\",\n    members=[\"userAccount:foo_user_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var your_key = new Yandex.KmsSymmetricKey(\"your-key\", new()\n    {\n        FolderId = \"your-folder-id\",\n    });\n\n    var viewer = new Yandex.KmsSymmetricKeyIamBinding(\"viewer\", new()\n    {\n        SymmetricKeyId = your_key.Id,\n        Role = \"viewer\",\n        Members = new[]\n        {\n            \"userAccount:foo_user_id\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewKmsSymmetricKey(ctx, \"your-key\", \u0026yandex.KmsSymmetricKeyArgs{\n\t\t\tFolderId: pulumi.String(\"your-folder-id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewKmsSymmetricKeyIamBinding(ctx, \"viewer\", \u0026yandex.KmsSymmetricKeyIamBindingArgs{\n\t\t\tSymmetricKeyId: your_key.ID(),\n\t\t\tRole:           pulumi.String(\"viewer\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"userAccount:foo_user_id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.KmsSymmetricKey;\nimport com.pulumi.yandex.KmsSymmetricKeyArgs;\nimport com.pulumi.yandex.KmsSymmetricKeyIamBinding;\nimport com.pulumi.yandex.KmsSymmetricKeyIamBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var your_key = new KmsSymmetricKey(\"your-key\", KmsSymmetricKeyArgs.builder()        \n            .folderId(\"your-folder-id\")\n            .build());\n\n        var viewer = new KmsSymmetricKeyIamBinding(\"viewer\", KmsSymmetricKeyIamBindingArgs.builder()        \n            .symmetricKeyId(your_key.id())\n            .role(\"viewer\")\n            .members(\"userAccount:foo_user_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  your-key:\n    type: yandex:KmsSymmetricKey\n    properties:\n      folderId: your-folder-id\n  viewer:\n    type: yandex:KmsSymmetricKeyIamBinding\n    properties:\n      symmetricKeyId: ${[\"your-key\"].id}\n      role: viewer\n      members:\n        - userAccount:foo_user_id\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIAM binding imports use space-delimited identifiers; first the resource in question and then the role. These bindings can be imported using the `symmetric_key_id` and role, e.g.\n\n```sh\n $ pulumi import yandex:index/kmsSymmetricKeyIamBinding:KmsSymmetricKeyIamBinding viewer \"symmetric_key_id viewer\"\n```\n\n ",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/kms/security/).\n"
                },
                "sleepAfter": {
                    "type": "number"
                },
                "symmetricKeyId": {
                    "type": "string",
                    "description": "The [Yandex Key Management Service](https://cloud.yandex.com/docs/kms/) Symmetric Key ID to apply a binding to.\n"
                }
            },
            "required": [
                "members",
                "role",
                "symmetricKeyId"
            ],
            "inputProperties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/kms/security/).\n"
                },
                "sleepAfter": {
                    "type": "number"
                },
                "symmetricKeyId": {
                    "type": "string",
                    "description": "The [Yandex Key Management Service](https://cloud.yandex.com/docs/kms/) Symmetric Key ID to apply a binding to.\n"
                }
            },
            "requiredInputs": [
                "members",
                "role",
                "symmetricKeyId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KmsSymmetricKeyIamBinding resources.\n",
                "properties": {
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/kms/security/).\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    },
                    "symmetricKeyId": {
                        "type": "string",
                        "description": "The [Yandex Key Management Service](https://cloud.yandex.com/docs/kms/) Symmetric Key ID to apply a binding to.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/kubernetesCluster:KubernetesCluster": {
            "description": "Creates a Yandex Kubernetes Cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst zonalClusterResourceName = new yandex.KubernetesCluster(\"zonal_cluster_resource_name\", {\n    description: \"description\",\n    kmsProvider: {\n        keyId: yandex_kms_symmetric_key_kms_key_resource_name.id,\n    },\n    labels: {\n        my_key: \"my_value\",\n        my_other_key: \"my_other_value\",\n    },\n    master: {\n        maintenancePolicy: {\n            autoUpgrade: true,\n            maintenanceWindows: [{\n                duration: \"3h\",\n                startTime: \"15:00\",\n            }],\n        },\n        publicIp: true,\n        securityGroupIds: [yandex_vpc_security_group_security_group_name.id],\n        version: \"1.17\",\n        zonal: {\n            subnetId: yandex_vpc_subnet_subnet_resource_name.id,\n            zone: yandex_vpc_subnet_subnet_resource_name.zone,\n        },\n    },\n    networkId: yandex_vpc_network_network_resource_name.id,\n    networkPolicyProvider: \"CALICO\",\n    nodeServiceAccountId: yandex_iam_service_account_node_service_account_resource_name.id,\n    releaseChannel: \"RAPID\",\n    serviceAccountId: yandex_iam_service_account_service_account_resource_name.id,\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.KubernetesCluster;\nimport com.pulumi.yandex.KubernetesClusterArgs;\nimport com.pulumi.yandex.inputs.KubernetesClusterKmsProviderArgs;\nimport com.pulumi.yandex.inputs.KubernetesClusterMasterArgs;\nimport com.pulumi.yandex.inputs.KubernetesClusterMasterMaintenancePolicyArgs;\nimport com.pulumi.yandex.inputs.KubernetesClusterMasterZonalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var zonalClusterResourceName = new KubernetesCluster(\"zonalClusterResourceName\", KubernetesClusterArgs.builder()        \n            .description(\"description\")\n            .kmsProvider(KubernetesClusterKmsProviderArgs.builder()\n                .keyId(yandex_kms_symmetric_key.kms_key_resource_name().id())\n                .build())\n            .labels(Map.ofEntries(\n                Map.entry(\"my_key\", \"my_value\"),\n                Map.entry(\"my_other_key\", \"my_other_value\")\n            ))\n            .master(KubernetesClusterMasterArgs.builder()\n                .maintenancePolicy(KubernetesClusterMasterMaintenancePolicyArgs.builder()\n                    .autoUpgrade(true)\n                    .maintenanceWindow(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .publicIp(true)\n                .securityGroupIds(yandex_vpc_security_group.security_group_name().id())\n                .version(\"1.17\")\n                .zonal(KubernetesClusterMasterZonalArgs.builder()\n                    .subnetId(yandex_vpc_subnet.subnet_resource_name().id())\n                    .zone(yandex_vpc_subnet.subnet_resource_name().zone())\n                    .build())\n                .build())\n            .networkId(yandex_vpc_network.network_resource_name().id())\n            .networkPolicyProvider(\"CALICO\")\n            .nodeServiceAccountId(yandex_iam_service_account.node_service_account_resource_name().id())\n            .releaseChannel(\"RAPID\")\n            .serviceAccountId(yandex_iam_service_account.service_account_resource_name().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  zonalClusterResourceName:\n    type: yandex:KubernetesCluster\n    properties:\n      description: description\n      kmsProvider:\n        keyId: ${yandex_kms_symmetric_key.kms_key_resource_name.id}\n      labels:\n        my_key: my_value\n        my_other_key: my_other_value\n      master:\n        maintenancePolicy:\n          autoUpgrade: true\n          maintenanceWindow:\n            - duration: 3h\n              startTime: 15:00\n        publicIp: true\n        securityGroupIds:\n          - ${yandex_vpc_security_group.security_group_name.id}\n        version: '1.17'\n        zonal:\n          subnetId: ${yandex_vpc_subnet.subnet_resource_name.id}\n          zone: ${yandex_vpc_subnet.subnet_resource_name.zone}\n      networkId: ${yandex_vpc_network.network_resource_name.id}\n      networkPolicyProvider: CALICO\n      nodeServiceAccountId: ${yandex_iam_service_account.node_service_account_resource_name.id}\n      releaseChannel: RAPID\n      serviceAccountId: ${yandex_iam_service_account.service_account_resource_name.id}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst regionalClusterResourceName = new yandex.KubernetesCluster(\"regional_cluster_resource_name\", {\n    description: \"description\",\n    labels: {\n        my_key: \"my_value\",\n        my_other_key: \"my_other_value\",\n    },\n    master: {\n        maintenancePolicy: {\n            autoUpgrade: true,\n            maintenanceWindows: [\n                {\n                    day: \"monday\",\n                    duration: \"3h\",\n                    startTime: \"15:00\",\n                },\n                {\n                    day: \"friday\",\n                    duration: \"4h30m\",\n                    startTime: \"10:00\",\n                },\n            ],\n        },\n        publicIp: true,\n        regional: {\n            locations: [\n                {\n                    subnetId: yandex_vpc_subnet_subnet_a_resource_name.id,\n                    zone: yandex_vpc_subnet_subnet_a_resource_name.zone,\n                },\n                {\n                    subnetId: yandex_vpc_subnet_subnet_b_resource_name.id,\n                    zone: yandex_vpc_subnet_subnet_b_resource_name.zone,\n                },\n                {\n                    subnetId: yandex_vpc_subnet_subnet_c_resource_name.id,\n                    zone: yandex_vpc_subnet_subnet_c_resource_name.zone,\n                },\n            ],\n            region: \"ru-central1\",\n        },\n        version: \"1.14\",\n    },\n    networkId: yandex_vpc_network_network_resource_name.id,\n    nodeServiceAccountId: yandex_iam_service_account_node_service_account_resource_name.id,\n    releaseChannel: \"STABLE\",\n    serviceAccountId: yandex_iam_service_account_service_account_resource_name.id,\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.KubernetesCluster;\nimport com.pulumi.yandex.KubernetesClusterArgs;\nimport com.pulumi.yandex.inputs.KubernetesClusterMasterArgs;\nimport com.pulumi.yandex.inputs.KubernetesClusterMasterMaintenancePolicyArgs;\nimport com.pulumi.yandex.inputs.KubernetesClusterMasterRegionalArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var regionalClusterResourceName = new KubernetesCluster(\"regionalClusterResourceName\", KubernetesClusterArgs.builder()        \n            .description(\"description\")\n            .labels(Map.ofEntries(\n                Map.entry(\"my_key\", \"my_value\"),\n                Map.entry(\"my_other_key\", \"my_other_value\")\n            ))\n            .master(KubernetesClusterMasterArgs.builder()\n                .maintenancePolicy(KubernetesClusterMasterMaintenancePolicyArgs.builder()\n                    .autoUpgrade(true)\n                    .maintenanceWindow(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n                .publicIp(true)\n                .regional(KubernetesClusterMasterRegionalArgs.builder()\n                    .location(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .region(\"ru-central1\")\n                    .build())\n                .version(\"1.14\")\n                .build())\n            .networkId(yandex_vpc_network.network_resource_name().id())\n            .nodeServiceAccountId(yandex_iam_service_account.node_service_account_resource_name().id())\n            .releaseChannel(\"STABLE\")\n            .serviceAccountId(yandex_iam_service_account.service_account_resource_name().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  regionalClusterResourceName:\n    type: yandex:KubernetesCluster\n    properties:\n      description: description\n      labels:\n        my_key: my_value\n        my_other_key: my_other_value\n      master:\n        maintenancePolicy:\n          autoUpgrade: true\n          maintenanceWindow:\n            - day: monday\n              duration: 3h\n              startTime: 15:00\n            - day: friday\n              duration: 4h30m\n              startTime: 10:00\n        publicIp: true\n        regional:\n          location:\n            - subnetId: ${yandex_vpc_subnet.subnet_a_resource_name.id}\n              zone: ${yandex_vpc_subnet.subnet_a_resource_name.zone}\n            - subnetId: ${yandex_vpc_subnet.subnet_b_resource_name.id}\n              zone: ${yandex_vpc_subnet.subnet_b_resource_name.zone}\n            - subnetId: ${yandex_vpc_subnet.subnet_c_resource_name.id}\n              zone: ${yandex_vpc_subnet.subnet_c_resource_name.zone}\n          region: ru-central1\n        version: '1.14'\n      networkId: ${yandex_vpc_network.network_resource_name.id}\n      nodeServiceAccountId: ${yandex_iam_service_account.node_service_account_resource_name.id}\n      releaseChannel: STABLE\n      serviceAccountId: ${yandex_iam_service_account.service_account_resource_name.id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA Managed Kubernetes cluster can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/kubernetesCluster:KubernetesCluster default cluster_id\n```\n\n ",
            "properties": {
                "clusterIpv4Range": {
                    "type": "string",
                    "description": "CIDR block. IP range for allocating pod addresses.\nIt should not overlap with any subnet in the network the Kubernetes cluster located in. Static routes will be\nset up for this CIDR blocks in node subnets.\n"
                },
                "clusterIpv6Range": {
                    "type": "string",
                    "description": "Identical to cluster_ipv4_range but for IPv6 protocol.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "(Computed) The Kubernetes cluster creation timestamp.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the Kubernetes cluster.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the Kubernetes cluster belongs to.\nIf it is not provided, the default provider folder is used.\n"
                },
                "health": {
                    "type": "string",
                    "description": "(Computed) Health of the Kubernetes cluster.\n"
                },
                "kmsProvider": {
                    "$ref": "#/types/yandex:index/KubernetesClusterKmsProvider:KubernetesClusterKmsProvider",
                    "description": "cluster KMS provider parameters.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Kubernetes cluster.\n"
                },
                "logGroupId": {
                    "type": "string",
                    "description": "Log group where cluster stores cluster system logs, like audit, events, or controlplane logs.\n"
                },
                "master": {
                    "$ref": "#/types/yandex:index/KubernetesClusterMaster:KubernetesClusterMaster",
                    "description": "Kubernetes master configuration options. The structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of a specific Kubernetes cluster.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The ID of the cluster network.\n"
                },
                "networkImplementation": {
                    "$ref": "#/types/yandex:index/KubernetesClusterNetworkImplementation:KubernetesClusterNetworkImplementation",
                    "description": "(Optional) Network Implementation options. The structure is documented below.\n"
                },
                "networkPolicyProvider": {
                    "type": "string",
                    "description": "Network policy provider for the cluster. Possible values: `CALICO`.\n"
                },
                "nodeIpv4CidrMaskSize": {
                    "type": "number",
                    "description": "Size of the masks that are assigned to each node in the cluster. Effectively limits maximum number of pods for each node.\n"
                },
                "nodeServiceAccountId": {
                    "type": "string",
                    "description": "Service account to be used by the worker nodes of the Kubernetes cluster\nto access Container Registry or to push node logs and metrics.\n"
                },
                "releaseChannel": {
                    "type": "string",
                    "description": "Cluster release channel.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "Service account to be used for provisioning Compute Cloud and VPC resources\nfor Kubernetes cluster. Selected service account should have `edit` role on the folder where the Kubernetes\ncluster will be located and on the folder where selected network resides.\n"
                },
                "serviceIpv4Range": {
                    "type": "string",
                    "description": "CIDR block. IP range Kubernetes service Kubernetes cluster\nIP addresses will be allocated from. It should not overlap with any subnet in the network\nthe Kubernetes cluster located in.\n"
                },
                "serviceIpv6Range": {
                    "type": "string",
                    "description": "Identical to service_ipv4_range but for IPv6 protocol.\n"
                },
                "status": {
                    "type": "string",
                    "description": "(Computed)Status of the Kubernetes cluster.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/KubernetesClusterTimeouts:KubernetesClusterTimeouts"
                }
            },
            "required": [
                "clusterIpv4Range",
                "clusterIpv6Range",
                "createdAt",
                "description",
                "folderId",
                "health",
                "labels",
                "logGroupId",
                "master",
                "name",
                "networkId",
                "networkImplementation",
                "nodeServiceAccountId",
                "releaseChannel",
                "serviceAccountId",
                "serviceIpv4Range",
                "serviceIpv6Range",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "clusterIpv4Range": {
                    "type": "string",
                    "description": "CIDR block. IP range for allocating pod addresses.\nIt should not overlap with any subnet in the network the Kubernetes cluster located in. Static routes will be\nset up for this CIDR blocks in node subnets.\n"
                },
                "clusterIpv6Range": {
                    "type": "string",
                    "description": "Identical to cluster_ipv4_range but for IPv6 protocol.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the Kubernetes cluster.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the Kubernetes cluster belongs to.\nIf it is not provided, the default provider folder is used.\n"
                },
                "kmsProvider": {
                    "$ref": "#/types/yandex:index/KubernetesClusterKmsProvider:KubernetesClusterKmsProvider",
                    "description": "cluster KMS provider parameters.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Kubernetes cluster.\n"
                },
                "master": {
                    "$ref": "#/types/yandex:index/KubernetesClusterMaster:KubernetesClusterMaster",
                    "description": "Kubernetes master configuration options. The structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of a specific Kubernetes cluster.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The ID of the cluster network.\n"
                },
                "networkPolicyProvider": {
                    "type": "string",
                    "description": "Network policy provider for the cluster. Possible values: `CALICO`.\n"
                },
                "nodeIpv4CidrMaskSize": {
                    "type": "number",
                    "description": "Size of the masks that are assigned to each node in the cluster. Effectively limits maximum number of pods for each node.\n"
                },
                "nodeServiceAccountId": {
                    "type": "string",
                    "description": "Service account to be used by the worker nodes of the Kubernetes cluster\nto access Container Registry or to push node logs and metrics.\n"
                },
                "releaseChannel": {
                    "type": "string",
                    "description": "Cluster release channel.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "Service account to be used for provisioning Compute Cloud and VPC resources\nfor Kubernetes cluster. Selected service account should have `edit` role on the folder where the Kubernetes\ncluster will be located and on the folder where selected network resides.\n"
                },
                "serviceIpv4Range": {
                    "type": "string",
                    "description": "CIDR block. IP range Kubernetes service Kubernetes cluster\nIP addresses will be allocated from. It should not overlap with any subnet in the network\nthe Kubernetes cluster located in.\n"
                },
                "serviceIpv6Range": {
                    "type": "string",
                    "description": "Identical to service_ipv4_range but for IPv6 protocol.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/KubernetesClusterTimeouts:KubernetesClusterTimeouts"
                }
            },
            "requiredInputs": [
                "master",
                "networkId",
                "nodeServiceAccountId",
                "serviceAccountId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesCluster resources.\n",
                "properties": {
                    "clusterIpv4Range": {
                        "type": "string",
                        "description": "CIDR block. IP range for allocating pod addresses.\nIt should not overlap with any subnet in the network the Kubernetes cluster located in. Static routes will be\nset up for this CIDR blocks in node subnets.\n"
                    },
                    "clusterIpv6Range": {
                        "type": "string",
                        "description": "Identical to cluster_ipv4_range but for IPv6 protocol.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "(Computed) The Kubernetes cluster creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the Kubernetes cluster.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the Kubernetes cluster belongs to.\nIf it is not provided, the default provider folder is used.\n"
                    },
                    "health": {
                        "type": "string",
                        "description": "(Computed) Health of the Kubernetes cluster.\n"
                    },
                    "kmsProvider": {
                        "$ref": "#/types/yandex:index/KubernetesClusterKmsProvider:KubernetesClusterKmsProvider",
                        "description": "cluster KMS provider parameters.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Kubernetes cluster.\n"
                    },
                    "logGroupId": {
                        "type": "string",
                        "description": "Log group where cluster stores cluster system logs, like audit, events, or controlplane logs.\n"
                    },
                    "master": {
                        "$ref": "#/types/yandex:index/KubernetesClusterMaster:KubernetesClusterMaster",
                        "description": "Kubernetes master configuration options. The structure is documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a specific Kubernetes cluster.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The ID of the cluster network.\n"
                    },
                    "networkImplementation": {
                        "$ref": "#/types/yandex:index/KubernetesClusterNetworkImplementation:KubernetesClusterNetworkImplementation",
                        "description": "(Optional) Network Implementation options. The structure is documented below.\n"
                    },
                    "networkPolicyProvider": {
                        "type": "string",
                        "description": "Network policy provider for the cluster. Possible values: `CALICO`.\n"
                    },
                    "nodeIpv4CidrMaskSize": {
                        "type": "number",
                        "description": "Size of the masks that are assigned to each node in the cluster. Effectively limits maximum number of pods for each node.\n"
                    },
                    "nodeServiceAccountId": {
                        "type": "string",
                        "description": "Service account to be used by the worker nodes of the Kubernetes cluster\nto access Container Registry or to push node logs and metrics.\n"
                    },
                    "releaseChannel": {
                        "type": "string",
                        "description": "Cluster release channel.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "Service account to be used for provisioning Compute Cloud and VPC resources\nfor Kubernetes cluster. Selected service account should have `edit` role on the folder where the Kubernetes\ncluster will be located and on the folder where selected network resides.\n"
                    },
                    "serviceIpv4Range": {
                        "type": "string",
                        "description": "CIDR block. IP range Kubernetes service Kubernetes cluster\nIP addresses will be allocated from. It should not overlap with any subnet in the network\nthe Kubernetes cluster located in.\n"
                    },
                    "serviceIpv6Range": {
                        "type": "string",
                        "description": "Identical to service_ipv4_range but for IPv6 protocol.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(Computed)Status of the Kubernetes cluster.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/KubernetesClusterTimeouts:KubernetesClusterTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/kubernetesNodeGroup:KubernetesNodeGroup": {
            "description": "Creates a Yandex Kubernetes Node Group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myNodeGroup = new yandex.KubernetesNodeGroup(\"my_node_group\", {\n    allocationPolicy: {\n        locations: [{\n            zone: \"ru-central1-a\",\n        }],\n    },\n    clusterId: yandex_kubernetes_cluster_my_cluster.id,\n    description: \"description\",\n    instanceTemplate: {\n        bootDisk: {\n            size: 64,\n            type: \"network-hdd\",\n        },\n        containerRuntime: {\n            type: \"containerd\",\n        },\n        networkInterfaces: [{\n            nat: true,\n            subnetIds: [yandex_vpc_subnet_my_subnet.id],\n        }],\n        platformId: \"standard-v2\",\n        resources: {\n            cores: 2,\n            memory: 2,\n        },\n        schedulingPolicy: {\n            preemptible: false,\n        },\n    },\n    labels: {\n        key: \"value\",\n    },\n    maintenancePolicy: {\n        autoRepair: true,\n        autoUpgrade: true,\n        maintenanceWindows: [\n            {\n                day: \"monday\",\n                duration: \"3h\",\n                startTime: \"15:00\",\n            },\n            {\n                day: \"friday\",\n                duration: \"4h30m\",\n                startTime: \"10:00\",\n            },\n        ],\n    },\n    scalePolicy: {\n        fixedScale: {\n            size: 1,\n        },\n    },\n    version: \"1.17\",\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.KubernetesNodeGroup;\nimport com.pulumi.yandex.KubernetesNodeGroupArgs;\nimport com.pulumi.yandex.inputs.KubernetesNodeGroupInstanceTemplateArgs;\nimport com.pulumi.yandex.inputs.KubernetesNodeGroupInstanceTemplateBootDiskArgs;\nimport com.pulumi.yandex.inputs.KubernetesNodeGroupInstanceTemplateContainerRuntimeArgs;\nimport com.pulumi.yandex.inputs.KubernetesNodeGroupInstanceTemplateResourcesArgs;\nimport com.pulumi.yandex.inputs.KubernetesNodeGroupInstanceTemplateSchedulingPolicyArgs;\nimport com.pulumi.yandex.inputs.KubernetesNodeGroupMaintenancePolicyArgs;\nimport com.pulumi.yandex.inputs.KubernetesNodeGroupScalePolicyArgs;\nimport com.pulumi.yandex.inputs.KubernetesNodeGroupScalePolicyFixedScaleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myNodeGroup = new KubernetesNodeGroup(\"myNodeGroup\", KubernetesNodeGroupArgs.builder()        \n            .allocationPolicy(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .clusterId(yandex_kubernetes_cluster.my_cluster().id())\n            .description(\"description\")\n            .instanceTemplate(KubernetesNodeGroupInstanceTemplateArgs.builder()\n                .bootDisk(KubernetesNodeGroupInstanceTemplateBootDiskArgs.builder()\n                    .size(64)\n                    .type(\"network-hdd\")\n                    .build())\n                .containerRuntime(KubernetesNodeGroupInstanceTemplateContainerRuntimeArgs.builder()\n                    .type(\"containerd\")\n                    .build())\n                .networkInterfaces(KubernetesNodeGroupInstanceTemplateNetworkInterfaceArgs.builder()\n                    .nat(true)\n                    .subnetIds(yandex_vpc_subnet.my_subnet().id())\n                    .build())\n                .platformId(\"standard-v2\")\n                .resources(KubernetesNodeGroupInstanceTemplateResourcesArgs.builder()\n                    .cores(2)\n                    .memory(2)\n                    .build())\n                .schedulingPolicy(KubernetesNodeGroupInstanceTemplateSchedulingPolicyArgs.builder()\n                    .preemptible(false)\n                    .build())\n                .build())\n            .labels(Map.of(\"key\", \"value\"))\n            .maintenancePolicy(KubernetesNodeGroupMaintenancePolicyArgs.builder()\n                .autoRepair(true)\n                .autoUpgrade(true)\n                .maintenanceWindows(                \n                    KubernetesNodeGroupMaintenancePolicyMaintenanceWindowArgs.builder()\n                        .day(\"monday\")\n                        .duration(\"3h\")\n                        .startTime(\"15:00\")\n                        .build(),\n                    KubernetesNodeGroupMaintenancePolicyMaintenanceWindowArgs.builder()\n                        .day(\"friday\")\n                        .duration(\"4h30m\")\n                        .startTime(\"10:00\")\n                        .build())\n                .build())\n            .scalePolicy(KubernetesNodeGroupScalePolicyArgs.builder()\n                .fixedScale(KubernetesNodeGroupScalePolicyFixedScaleArgs.builder()\n                    .size(1)\n                    .build())\n                .build())\n            .version(\"1.17\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myNodeGroup:\n    type: yandex:KubernetesNodeGroup\n    properties:\n      allocationPolicy:\n        locations:\n          - zone: ru-central1-a\n      clusterId: ${yandex_kubernetes_cluster.my_cluster.id}\n      description: description\n      instanceTemplate:\n        bootDisk:\n          size: 64\n          type: network-hdd\n        containerRuntime:\n          type: containerd\n        networkInterfaces:\n          - nat: true\n            subnetIds:\n              - ${yandex_vpc_subnet.my_subnet.id}\n        platformId: standard-v2\n        resources:\n          cores: 2\n          memory: 2\n        schedulingPolicy:\n          preemptible: false\n      labels:\n        key: value\n      maintenancePolicy:\n        autoRepair: true\n        autoUpgrade: true\n        maintenanceWindows:\n          - day: monday\n            duration: 3h\n            startTime: 15:00\n          - day: friday\n            duration: 4h30m\n            startTime: 10:00\n      scalePolicy:\n        fixedScale:\n          size: 1\n      version: '1.17'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA Yandex Kubernetes Node Group can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/kubernetesNodeGroup:KubernetesNodeGroup default node_group_id\n```\n\n ",
            "properties": {
                "allocationPolicy": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupAllocationPolicy:KubernetesNodeGroupAllocationPolicy",
                    "description": "This argument specify subnets (zones), that will be used by node group compute instances. The structure is documented below.\n"
                },
                "allowedUnsafeSysctls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of allowed unsafe sysctl parameters for this node group. For more details see [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/).\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the Kubernetes cluster that this node group belongs to.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "(Computed) The Kubernetes node group creation timestamp.\n"
                },
                "deployPolicy": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupDeployPolicy:KubernetesNodeGroupDeployPolicy",
                    "description": "Deploy policy of the node group. The structure is documented below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the Kubernetes node group.\n"
                },
                "instanceGroupId": {
                    "type": "string",
                    "description": "ID of instance group that is used to manage this Kubernetes node group.\n"
                },
                "instanceTemplate": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupInstanceTemplate:KubernetesNodeGroupInstanceTemplate",
                    "description": "Template used to create compute instances in this Kubernetes node group. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels that will be assigned to compute nodes (instances), created by the Node Group.\n---\n"
                },
                "maintenancePolicy": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupMaintenancePolicy:KubernetesNodeGroupMaintenancePolicy",
                    "description": "(Computed) Maintenance policy for this Kubernetes node group.\nIf policy is omitted, automatic revision upgrades are enabled and could happen at any time.\nRevision upgrades are performed only within the same minor version, e.g. 1.13.\nMinor version upgrades (e.g. 1.13-\u003e1.14) should be performed manually. The structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name template of the instance.\nIn order to be unique it must contain at least one of instance unique placeholders:\n{instance.short_id}\n{instance.index}\ncombination of {instance.zone_id} and {instance.index_in_zone}\nExample: my-instance-{instance.index}\nIf not set, default is used: {instance_group.id}-{instance.short_id}\nIt may also contain another placeholders, see [Compute Instance group metadata doc](https://cloud.yandex.com/en-ru/docs/compute/api-ref/grpc/instance_group_service) for full list.\n"
                },
                "nodeLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.\n"
                },
                "nodeTaints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.\n"
                },
                "scalePolicy": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupScalePolicy:KubernetesNodeGroupScalePolicy",
                    "description": "Scale policy of the node group. The structure is documented below.\n"
                },
                "status": {
                    "type": "string",
                    "description": "(Computed) Status of the Kubernetes node group.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupTimeouts:KubernetesNodeGroupTimeouts"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kubernetes that will be used for Kubernetes node group.\n"
                },
                "versionInfos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/KubernetesNodeGroupVersionInfo:KubernetesNodeGroupVersionInfo"
                    },
                    "description": "Information about Kubernetes node group version. The structure is documented below.\n"
                }
            },
            "required": [
                "allocationPolicy",
                "clusterId",
                "createdAt",
                "description",
                "instanceGroupId",
                "instanceTemplate",
                "labels",
                "name",
                "scalePolicy",
                "status",
                "timeouts",
                "version",
                "versionInfos"
            ],
            "inputProperties": {
                "allowedUnsafeSysctls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of allowed unsafe sysctl parameters for this node group. For more details see [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/).\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the Kubernetes cluster that this node group belongs to.\n"
                },
                "deployPolicy": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupDeployPolicy:KubernetesNodeGroupDeployPolicy",
                    "description": "Deploy policy of the node group. The structure is documented below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the Kubernetes node group.\n"
                },
                "instanceTemplate": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupInstanceTemplate:KubernetesNodeGroupInstanceTemplate",
                    "description": "Template used to create compute instances in this Kubernetes node group. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels that will be assigned to compute nodes (instances), created by the Node Group.\n---\n"
                },
                "maintenancePolicy": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupMaintenancePolicy:KubernetesNodeGroupMaintenancePolicy",
                    "description": "(Computed) Maintenance policy for this Kubernetes node group.\nIf policy is omitted, automatic revision upgrades are enabled and could happen at any time.\nRevision upgrades are performed only within the same minor version, e.g. 1.13.\nMinor version upgrades (e.g. 1.13-\u003e1.14) should be performed manually. The structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name template of the instance.\nIn order to be unique it must contain at least one of instance unique placeholders:\n{instance.short_id}\n{instance.index}\ncombination of {instance.zone_id} and {instance.index_in_zone}\nExample: my-instance-{instance.index}\nIf not set, default is used: {instance_group.id}-{instance.short_id}\nIt may also contain another placeholders, see [Compute Instance group metadata doc](https://cloud.yandex.com/en-ru/docs/compute/api-ref/grpc/instance_group_service) for full list.\n"
                },
                "nodeLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.\n"
                },
                "nodeTaints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.\n"
                },
                "scalePolicy": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupScalePolicy:KubernetesNodeGroupScalePolicy",
                    "description": "Scale policy of the node group. The structure is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/KubernetesNodeGroupTimeouts:KubernetesNodeGroupTimeouts"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kubernetes that will be used for Kubernetes node group.\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "instanceTemplate",
                "scalePolicy",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering KubernetesNodeGroup resources.\n",
                "properties": {
                    "allocationPolicy": {
                        "$ref": "#/types/yandex:index/KubernetesNodeGroupAllocationPolicy:KubernetesNodeGroupAllocationPolicy",
                        "description": "This argument specify subnets (zones), that will be used by node group compute instances. The structure is documented below.\n"
                    },
                    "allowedUnsafeSysctls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of allowed unsafe sysctl parameters for this node group. For more details see [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/).\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the Kubernetes cluster that this node group belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "(Computed) The Kubernetes node group creation timestamp.\n"
                    },
                    "deployPolicy": {
                        "$ref": "#/types/yandex:index/KubernetesNodeGroupDeployPolicy:KubernetesNodeGroupDeployPolicy",
                        "description": "Deploy policy of the node group. The structure is documented below.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the Kubernetes node group.\n"
                    },
                    "instanceGroupId": {
                        "type": "string",
                        "description": "ID of instance group that is used to manage this Kubernetes node group.\n"
                    },
                    "instanceTemplate": {
                        "$ref": "#/types/yandex:index/KubernetesNodeGroupInstanceTemplate:KubernetesNodeGroupInstanceTemplate",
                        "description": "Template used to create compute instances in this Kubernetes node group. The structure is documented below.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels that will be assigned to compute nodes (instances), created by the Node Group.\n---\n"
                    },
                    "maintenancePolicy": {
                        "$ref": "#/types/yandex:index/KubernetesNodeGroupMaintenancePolicy:KubernetesNodeGroupMaintenancePolicy",
                        "description": "(Computed) Maintenance policy for this Kubernetes node group.\nIf policy is omitted, automatic revision upgrades are enabled and could happen at any time.\nRevision upgrades are performed only within the same minor version, e.g. 1.13.\nMinor version upgrades (e.g. 1.13-\u003e1.14) should be performed manually. The structure is documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name template of the instance.\nIn order to be unique it must contain at least one of instance unique placeholders:\n{instance.short_id}\n{instance.index}\ncombination of {instance.zone_id} and {instance.index_in_zone}\nExample: my-instance-{instance.index}\nIf not set, default is used: {instance_group.id}-{instance.short_id}\nIt may also contain another placeholders, see [Compute Instance group metadata doc](https://cloud.yandex.com/en-ru/docs/compute/api-ref/grpc/instance_group_service) for full list.\n"
                    },
                    "nodeLabels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.\n"
                    },
                    "nodeTaints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.\n"
                    },
                    "scalePolicy": {
                        "$ref": "#/types/yandex:index/KubernetesNodeGroupScalePolicy:KubernetesNodeGroupScalePolicy",
                        "description": "Scale policy of the node group. The structure is documented below.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "(Computed) Status of the Kubernetes node group.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/KubernetesNodeGroupTimeouts:KubernetesNodeGroupTimeouts"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of Kubernetes that will be used for Kubernetes node group.\n"
                    },
                    "versionInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/KubernetesNodeGroupVersionInfo:KubernetesNodeGroupVersionInfo"
                        },
                        "description": "Information about Kubernetes node group version. The structure is documented below.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/lbNetworkLoadBalancer:LbNetworkLoadBalancer": {
            "description": "Creates a network load balancer in the specified folder using the data specified in the config.\nFor more information, see [the official documentation](https://cloud.yandex.com/docs/load-balancer/concepts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = new yandex.LbNetworkLoadBalancer(\"foo\", {\n    attachedTargetGroups: [{\n        healthchecks: [{\n            httpOptions: {\n                path: \"/ping\",\n                port: 8080,\n            },\n            name: \"http\",\n        }],\n        targetGroupId: yandex_lb_target_group_my_target_group.id,\n    }],\n    listeners: [{\n        externalAddressSpec: {\n            ipVersion: \"ipv4\",\n        },\n        name: \"my-listener\",\n        port: 8080,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.LbNetworkLoadBalancer(\"foo\",\n    attached_target_groups=[yandex.LbNetworkLoadBalancerAttachedTargetGroupArgs(\n        healthchecks=[yandex.LbNetworkLoadBalancerAttachedTargetGroupHealthcheckArgs(\n            http_options=yandex.LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsArgs(\n                path=\"/ping\",\n                port=8080,\n            ),\n            name=\"http\",\n        )],\n        target_group_id=yandex_lb_target_group[\"my-target-group\"][\"id\"],\n    )],\n    listeners=[yandex.LbNetworkLoadBalancerListenerArgs(\n        external_address_spec=yandex.LbNetworkLoadBalancerListenerExternalAddressSpecArgs(\n            ip_version=\"ipv4\",\n        ),\n        name=\"my-listener\",\n        port=8080,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Yandex.LbNetworkLoadBalancer(\"foo\", new()\n    {\n        AttachedTargetGroups = new[]\n        {\n            new Yandex.Inputs.LbNetworkLoadBalancerAttachedTargetGroupArgs\n            {\n                Healthchecks = new[]\n                {\n                    new Yandex.Inputs.LbNetworkLoadBalancerAttachedTargetGroupHealthcheckArgs\n                    {\n                        HttpOptions = new Yandex.Inputs.LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsArgs\n                        {\n                            Path = \"/ping\",\n                            Port = 8080,\n                        },\n                        Name = \"http\",\n                    },\n                },\n                TargetGroupId = yandex_lb_target_group.My_target_group.Id,\n            },\n        },\n        Listeners = new[]\n        {\n            new Yandex.Inputs.LbNetworkLoadBalancerListenerArgs\n            {\n                ExternalAddressSpec = new Yandex.Inputs.LbNetworkLoadBalancerListenerExternalAddressSpecArgs\n                {\n                    IpVersion = \"ipv4\",\n                },\n                Name = \"my-listener\",\n                Port = 8080,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewLbNetworkLoadBalancer(ctx, \"foo\", \u0026yandex.LbNetworkLoadBalancerArgs{\n\t\t\tAttachedTargetGroups: LbNetworkLoadBalancerAttachedTargetGroupArray{\n\t\t\t\t\u0026LbNetworkLoadBalancerAttachedTargetGroupArgs{\n\t\t\t\t\tHealthchecks: LbNetworkLoadBalancerAttachedTargetGroupHealthcheckArray{\n\t\t\t\t\t\t\u0026LbNetworkLoadBalancerAttachedTargetGroupHealthcheckArgs{\n\t\t\t\t\t\t\tHttpOptions: \u0026LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsArgs{\n\t\t\t\t\t\t\t\tPath: pulumi.String(\"/ping\"),\n\t\t\t\t\t\t\t\tPort: pulumi.Float64(8080),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tName: pulumi.String(\"http\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tTargetGroupId: pulumi.Any(yandex_lb_target_group.MyTargetGroup.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tListeners: LbNetworkLoadBalancerListenerArray{\n\t\t\t\t\u0026LbNetworkLoadBalancerListenerArgs{\n\t\t\t\t\tExternalAddressSpec: \u0026LbNetworkLoadBalancerListenerExternalAddressSpecArgs{\n\t\t\t\t\t\tIpVersion: pulumi.String(\"ipv4\"),\n\t\t\t\t\t},\n\t\t\t\t\tName: pulumi.String(\"my-listener\"),\n\t\t\t\t\tPort: pulumi.Float64(8080),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.LbNetworkLoadBalancer;\nimport com.pulumi.yandex.LbNetworkLoadBalancerArgs;\nimport com.pulumi.yandex.inputs.LbNetworkLoadBalancerAttachedTargetGroupArgs;\nimport com.pulumi.yandex.inputs.LbNetworkLoadBalancerListenerArgs;\nimport com.pulumi.yandex.inputs.LbNetworkLoadBalancerListenerExternalAddressSpecArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new LbNetworkLoadBalancer(\"foo\", LbNetworkLoadBalancerArgs.builder()        \n            .attachedTargetGroups(LbNetworkLoadBalancerAttachedTargetGroupArgs.builder()\n                .healthchecks(LbNetworkLoadBalancerAttachedTargetGroupHealthcheckArgs.builder()\n                    .httpOptions(LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsArgs.builder()\n                        .path(\"/ping\")\n                        .port(8080)\n                        .build())\n                    .name(\"http\")\n                    .build())\n                .targetGroupId(yandex_lb_target_group.my-target-group().id())\n                .build())\n            .listeners(LbNetworkLoadBalancerListenerArgs.builder()\n                .externalAddressSpec(LbNetworkLoadBalancerListenerExternalAddressSpecArgs.builder()\n                    .ipVersion(\"ipv4\")\n                    .build())\n                .name(\"my-listener\")\n                .port(8080)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: yandex:LbNetworkLoadBalancer\n    properties:\n      attachedTargetGroups:\n        - healthchecks:\n            - httpOptions:\n                path: /ping\n                port: 8080\n              name: http\n          targetGroupId: ${yandex_lb_target_group\"my-target-group\"[%!s(MISSING)].id}\n      listeners:\n        - externalAddressSpec:\n            ipVersion: ipv4\n          name: my-listener\n          port: 8080\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA network load balancer can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/lbNetworkLoadBalancer:LbNetworkLoadBalancer default network_load_balancer_id\n```\n\n ",
            "properties": {
                "attachedTargetGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/LbNetworkLoadBalancerAttachedTargetGroup:LbNetworkLoadBalancerAttachedTargetGroup"
                    },
                    "description": "An AttachedTargetGroup resource. The structure is documented below.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The network load balancer creation timestamp.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of the network load balancer. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this network load balancer. A list of key/value pairs.\n"
                },
                "listeners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/LbNetworkLoadBalancerListener:LbNetworkLoadBalancerListener"
                    },
                    "description": "Listener specification that will be used by a network load balancer. The structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the listener. The name must be unique for each listener on a single load balancer.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "ID of the availability zone where the network load balancer resides.\nThe default is 'ru-central1'.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/LbNetworkLoadBalancerTimeouts:LbNetworkLoadBalancerTimeouts"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the network load balancer. Must be one of 'external' or 'internal'. The default is 'external'.\n"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "timeouts"
            ],
            "inputProperties": {
                "attachedTargetGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/LbNetworkLoadBalancerAttachedTargetGroup:LbNetworkLoadBalancerAttachedTargetGroup"
                    },
                    "description": "An AttachedTargetGroup resource. The structure is documented below.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of the network load balancer. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this network load balancer. A list of key/value pairs.\n"
                },
                "listeners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/LbNetworkLoadBalancerListener:LbNetworkLoadBalancerListener"
                    },
                    "description": "Listener specification that will be used by a network load balancer. The structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the listener. The name must be unique for each listener on a single load balancer.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "ID of the availability zone where the network load balancer resides.\nThe default is 'ru-central1'.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/LbNetworkLoadBalancerTimeouts:LbNetworkLoadBalancerTimeouts"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the network load balancer. Must be one of 'external' or 'internal'. The default is 'external'.\n"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbNetworkLoadBalancer resources.\n",
                "properties": {
                    "attachedTargetGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/LbNetworkLoadBalancerAttachedTargetGroup:LbNetworkLoadBalancerAttachedTargetGroup"
                        },
                        "description": "An AttachedTargetGroup resource. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The network load balancer creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of the network load balancer. Provide this property when\nyou create the resource.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this network load balancer. A list of key/value pairs.\n"
                    },
                    "listeners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/LbNetworkLoadBalancerListener:LbNetworkLoadBalancerListener"
                        },
                        "description": "Listener specification that will be used by a network load balancer. The structure is documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the listener. The name must be unique for each listener on a single load balancer.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "ID of the availability zone where the network load balancer resides.\nThe default is 'ru-central1'.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/LbNetworkLoadBalancerTimeouts:LbNetworkLoadBalancerTimeouts"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the network load balancer. Must be one of 'external' or 'internal'. The default is 'external'.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/lbTargetGroup:LbTargetGroup": {
            "description": "Creates a target group in the specified folder and adds the specified targets to it. \nFor more information, see [the official documentation](https://cloud.yandex.com/docs/load-balancer/concepts/target-resources).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = new yandex.LbTargetGroup(\"foo\", {\n    regionId: \"ru-central1\",\n    targets: [\n        {\n            address: yandex_compute_instance_my_instance_1.networkInterface.0.ipAddress,\n            subnetId: yandex_vpc_subnet_my_subnet.id,\n        },\n        {\n            address: yandex_compute_instance_my_instance_2.networkInterface.0.ipAddress,\n            subnetId: yandex_vpc_subnet_my_subnet.id,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.LbTargetGroup(\"foo\",\n    region_id=\"ru-central1\",\n    targets=[\n        yandex.LbTargetGroupTargetArgs(\n            address=yandex_compute_instance[\"my-instance-1\"][\"network_interface\"][0][\"ip_address\"],\n            subnet_id=yandex_vpc_subnet[\"my-subnet\"][\"id\"],\n        ),\n        yandex.LbTargetGroupTargetArgs(\n            address=yandex_compute_instance[\"my-instance-2\"][\"network_interface\"][0][\"ip_address\"],\n            subnet_id=yandex_vpc_subnet[\"my-subnet\"][\"id\"],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Yandex.LbTargetGroup(\"foo\", new()\n    {\n        RegionId = \"ru-central1\",\n        Targets = new[]\n        {\n            new Yandex.Inputs.LbTargetGroupTargetArgs\n            {\n                Address = yandex_compute_instance.My_instance_1.Network_interface[0].Ip_address,\n                SubnetId = yandex_vpc_subnet.My_subnet.Id,\n            },\n            new Yandex.Inputs.LbTargetGroupTargetArgs\n            {\n                Address = yandex_compute_instance.My_instance_2.Network_interface[0].Ip_address,\n                SubnetId = yandex_vpc_subnet.My_subnet.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewLbTargetGroup(ctx, \"foo\", \u0026yandex.LbTargetGroupArgs{\n\t\t\tRegionId: pulumi.String(\"ru-central1\"),\n\t\t\tTargets: LbTargetGroupTargetArray{\n\t\t\t\t\u0026LbTargetGroupTargetArgs{\n\t\t\t\t\tAddress:  pulumi.Any(yandex_compute_instance.MyInstance1.Network_interface[0].Ip_address),\n\t\t\t\t\tSubnetId: pulumi.Any(yandex_vpc_subnet.MySubnet.Id),\n\t\t\t\t},\n\t\t\t\t\u0026LbTargetGroupTargetArgs{\n\t\t\t\t\tAddress:  pulumi.Any(yandex_compute_instance.MyInstance2.Network_interface[0].Ip_address),\n\t\t\t\t\tSubnetId: pulumi.Any(yandex_vpc_subnet.MySubnet.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.LbTargetGroup;\nimport com.pulumi.yandex.LbTargetGroupArgs;\nimport com.pulumi.yandex.inputs.LbTargetGroupTargetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new LbTargetGroup(\"foo\", LbTargetGroupArgs.builder()        \n            .regionId(\"ru-central1\")\n            .targets(            \n                LbTargetGroupTargetArgs.builder()\n                    .address(yandex_compute_instance.my-instance-1().network_interface()[0].ip_address())\n                    .subnetId(yandex_vpc_subnet.my-subnet().id())\n                    .build(),\n                LbTargetGroupTargetArgs.builder()\n                    .address(yandex_compute_instance.my-instance-2().network_interface()[0].ip_address())\n                    .subnetId(yandex_vpc_subnet.my-subnet().id())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: yandex:LbTargetGroup\n    properties:\n      regionId: ru-central1\n      targets:\n        - address: ${yandex_compute_instance\"my-instance-1\"[%!s(MISSING)].network_interface[0].ip_address}\n          subnetId: ${yandex_vpc_subnet\"my-subnet\"[%!s(MISSING)].id}\n        - address: ${yandex_compute_instance\"my-instance-2\"[%!s(MISSING)].network_interface[0].ip_address}\n          subnetId: ${yandex_vpc_subnet\"my-subnet\"[%!s(MISSING)].id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA target group can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/lbTargetGroup:LbTargetGroup default target_group_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The target group creation timestamp.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of the target group. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this target group. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the target group. Provided by the client when the target group is created.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "ID of the availability zone where the target group resides. \nThe default is 'ru-central1'.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/LbTargetGroupTarget:LbTargetGroupTarget"
                    },
                    "description": "A Target resource. The structure is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/LbTargetGroupTimeouts:LbTargetGroupTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "An optional description of the target group. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this target group. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the target group. Provided by the client when the target group is created.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "ID of the availability zone where the target group resides. \nThe default is 'ru-central1'.\n"
                },
                "targets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/LbTargetGroupTarget:LbTargetGroupTarget"
                    },
                    "description": "A Target resource. The structure is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/LbTargetGroupTimeouts:LbTargetGroupTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LbTargetGroup resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The target group creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of the target group. Provide this property when\nyou create the resource.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this target group. A list of key/value pairs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the target group. Provided by the client when the target group is created.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "ID of the availability zone where the target group resides. \nThe default is 'ru-central1'.\n"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/LbTargetGroupTarget:LbTargetGroupTarget"
                        },
                        "description": "A Target resource. The structure is documented below.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/LbTargetGroupTimeouts:LbTargetGroupTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/lockboxSecret:LockboxSecret": {
            "description": "Yandex Cloud Lockbox secret resource. For more information, see\n[the official documentation](https://cloud.yandex.com/en/docs/lockbox/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nUse `yandex.LockboxSecretVersion` to add entries to the secret.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst mySecret = new yandex.LockboxSecret(\"my_secret\", {});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_secret = yandex.LockboxSecret(\"mySecret\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySecret = new Yandex.LockboxSecret(\"mySecret\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewLockboxSecret(ctx, \"mySecret\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.LockboxSecret;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySecret = new LockboxSecret(\"mySecret\");\n\n    }\n}\n```\n```yaml\nresources:\n  mySecret:\n    type: yandex:LockboxSecret\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The Yandex Cloud Lockbox secret creation timestamp.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Whether the Yandex Cloud Lockbox secret is protected from deletion.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Yandex Cloud Lockbox secret.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the Yandex Cloud Lockbox secret belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "The KMS key used to encrypt the Yandex Cloud Lockbox secret.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Cloud Lockbox secret.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the Yandex Cloud Lockbox secret.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The Yandex Cloud Lockbox secret status.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/LockboxSecretTimeouts:LockboxSecretTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "name",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Whether the Yandex Cloud Lockbox secret is protected from deletion.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Yandex Cloud Lockbox secret.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the Yandex Cloud Lockbox secret belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                },
                "kmsKeyId": {
                    "type": "string",
                    "description": "The KMS key used to encrypt the Yandex Cloud Lockbox secret.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Cloud Lockbox secret.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the Yandex Cloud Lockbox secret.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/LockboxSecretTimeouts:LockboxSecretTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LockboxSecret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The Yandex Cloud Lockbox secret creation timestamp.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Whether the Yandex Cloud Lockbox secret is protected from deletion.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the Yandex Cloud Lockbox secret.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the Yandex Cloud Lockbox secret belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                    },
                    "kmsKeyId": {
                        "type": "string",
                        "description": "The KMS key used to encrypt the Yandex Cloud Lockbox secret.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Yandex Cloud Lockbox secret.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for the Yandex Cloud Lockbox secret.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The Yandex Cloud Lockbox secret status.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/LockboxSecretTimeouts:LockboxSecretTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/lockboxSecretVersion:LockboxSecretVersion": {
            "description": "Yandex Cloud Lockbox secret vesrion resource. For more information, see\n[the official documentation](https://cloud.yandex.com/en/docs/lockbox/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst mySecret = new yandex.LockboxSecret(\"mySecret\", {});\nconst myVersion = new yandex.LockboxSecretVersion(\"myVersion\", {\n    secretId: mySecret.id,\n    entries: [\n        {\n            key: \"key1\",\n            textValue: \"value1\",\n        },\n        {\n            key: \"k2\",\n            command: {\n                path: \"my_secret_generator.sh\",\n            },\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_secret = yandex.LockboxSecret(\"mySecret\")\nmy_version = yandex.LockboxSecretVersion(\"myVersion\",\n    secret_id=my_secret.id,\n    entries=[\n        yandex.LockboxSecretVersionEntryArgs(\n            key=\"key1\",\n            text_value=\"value1\",\n        ),\n        yandex.LockboxSecretVersionEntryArgs(\n            key=\"k2\",\n            command=yandex.LockboxSecretVersionEntryCommandArgs(\n                path=\"my_secret_generator.sh\",\n            ),\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySecret = new Yandex.LockboxSecret(\"mySecret\");\n\n    var myVersion = new Yandex.LockboxSecretVersion(\"myVersion\", new()\n    {\n        SecretId = mySecret.Id,\n        Entries = new[]\n        {\n            new Yandex.Inputs.LockboxSecretVersionEntryArgs\n            {\n                Key = \"key1\",\n                TextValue = \"value1\",\n            },\n            new Yandex.Inputs.LockboxSecretVersionEntryArgs\n            {\n                Key = \"k2\",\n                Command = new Yandex.Inputs.LockboxSecretVersionEntryCommandArgs\n                {\n                    Path = \"my_secret_generator.sh\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmySecret, err := yandex.NewLockboxSecret(ctx, \"mySecret\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewLockboxSecretVersion(ctx, \"myVersion\", \u0026yandex.LockboxSecretVersionArgs{\n\t\t\tSecretId: mySecret.ID(),\n\t\t\tEntries: LockboxSecretVersionEntryArray{\n\t\t\t\t\u0026LockboxSecretVersionEntryArgs{\n\t\t\t\t\tKey:       pulumi.String(\"key1\"),\n\t\t\t\t\tTextValue: pulumi.String(\"value1\"),\n\t\t\t\t},\n\t\t\t\t\u0026LockboxSecretVersionEntryArgs{\n\t\t\t\t\tKey: pulumi.String(\"k2\"),\n\t\t\t\t\tCommand: \u0026LockboxSecretVersionEntryCommandArgs{\n\t\t\t\t\t\tPath: pulumi.String(\"my_secret_generator.sh\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.LockboxSecret;\nimport com.pulumi.yandex.LockboxSecretVersion;\nimport com.pulumi.yandex.LockboxSecretVersionArgs;\nimport com.pulumi.yandex.inputs.LockboxSecretVersionEntryArgs;\nimport com.pulumi.yandex.inputs.LockboxSecretVersionEntryCommandArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var mySecret = new LockboxSecret(\"mySecret\");\n\n        var myVersion = new LockboxSecretVersion(\"myVersion\", LockboxSecretVersionArgs.builder()        \n            .secretId(mySecret.id())\n            .entries(            \n                LockboxSecretVersionEntryArgs.builder()\n                    .key(\"key1\")\n                    .textValue(\"value1\")\n                    .build(),\n                LockboxSecretVersionEntryArgs.builder()\n                    .key(\"k2\")\n                    .command(LockboxSecretVersionEntryCommandArgs.builder()\n                        .path(\"my_secret_generator.sh\")\n                        .build())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySecret:\n    type: yandex:LockboxSecret\n  myVersion:\n    type: yandex:LockboxSecretVersion\n    properties:\n      secretId: ${mySecret.id}\n      entries:\n        - key: key1\n          textValue: value1\n        - key: k2\n          command:\n            path: my_secret_generator.sh\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The Yandex Cloud Lockbox secret version description.\n"
                },
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/LockboxSecretVersionEntry:LockboxSecretVersionEntry"
                    },
                    "description": "List of entries in the Yandex Cloud Lockbox secret version.\n"
                },
                "secretId": {
                    "type": "string",
                    "description": "The Yandex Cloud Lockbox secret ID where to add the version.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/LockboxSecretVersionTimeouts:LockboxSecretVersionTimeouts"
                }
            },
            "required": [
                "entries",
                "secretId",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The Yandex Cloud Lockbox secret version description.\n"
                },
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/LockboxSecretVersionEntry:LockboxSecretVersionEntry"
                    },
                    "description": "List of entries in the Yandex Cloud Lockbox secret version.\n"
                },
                "secretId": {
                    "type": "string",
                    "description": "The Yandex Cloud Lockbox secret ID where to add the version.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/LockboxSecretVersionTimeouts:LockboxSecretVersionTimeouts"
                }
            },
            "requiredInputs": [
                "entries",
                "secretId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LockboxSecretVersion resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The Yandex Cloud Lockbox secret version description.\n"
                    },
                    "entries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/LockboxSecretVersionEntry:LockboxSecretVersionEntry"
                        },
                        "description": "List of entries in the Yandex Cloud Lockbox secret version.\n"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "The Yandex Cloud Lockbox secret ID where to add the version.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/LockboxSecretVersionTimeouts:LockboxSecretVersionTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/loggingGroup:LoggingGroup": {
            "description": "Yandex Cloud Logging group resource. For more information, see\n[the official documentation](https://cloud.yandex.com/en/docs/logging/concepts/log-group).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst group1 = new yandex.LoggingGroup(\"group1\", {\n    folderId: yandex_resourcemanager_folder_test_folder.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ngroup1 = yandex.LoggingGroup(\"group1\", folder_id=data[\"yandex_resourcemanager_folder\"][\"test_folder\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var group1 = new Yandex.LoggingGroup(\"group1\", new()\n    {\n        FolderId = data.Yandex_resourcemanager_folder.Test_folder.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewLoggingGroup(ctx, \"group1\", \u0026yandex.LoggingGroupArgs{\n\t\t\tFolderId: pulumi.Any(data.Yandex_resourcemanager_folder.Test_folder.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.LoggingGroup;\nimport com.pulumi.yandex.LoggingGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var group1 = new LoggingGroup(\"group1\", LoggingGroupArgs.builder()        \n            .folderId(data.yandex_resourcemanager_folder().test_folder().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  group1:\n    type: yandex:LoggingGroup\n    properties:\n      folderId: ${data.yandex_resourcemanager_folder.test_folder.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "cloudId": {
                    "type": "string",
                    "description": "ID of the cloud that the Yandex Cloud Logging group belong to.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The Yandex Cloud Logging group creation timestamp.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Yandex Cloud Logging group.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the Yandex Cloud Logging group belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Cloud Logging group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the Yandex Cloud Logging group.\n"
                },
                "retentionPeriod": {
                    "type": "string",
                    "description": "Log entries retention period for the Yandex Cloud Logging group.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The Yandex Cloud Logging group status.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/LoggingGroupTimeouts:LoggingGroupTimeouts"
                }
            },
            "required": [
                "cloudId",
                "createdAt",
                "folderId",
                "name",
                "retentionPeriod",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description for the Yandex Cloud Logging group.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the Yandex Cloud Logging group belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Cloud Logging group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the Yandex Cloud Logging group.\n"
                },
                "retentionPeriod": {
                    "type": "string",
                    "description": "Log entries retention period for the Yandex Cloud Logging group.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/LoggingGroupTimeouts:LoggingGroupTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LoggingGroup resources.\n",
                "properties": {
                    "cloudId": {
                        "type": "string",
                        "description": "ID of the cloud that the Yandex Cloud Logging group belong to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The Yandex Cloud Logging group creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the Yandex Cloud Logging group.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the Yandex Cloud Logging group belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Yandex Cloud Logging group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for the Yandex Cloud Logging group.\n"
                    },
                    "retentionPeriod": {
                        "type": "string",
                        "description": "Log entries retention period for the Yandex Cloud Logging group.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The Yandex Cloud Logging group status.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/LoggingGroupTimeouts:LoggingGroupTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbClickhouseCluster:MdbClickhouseCluster": {
            "description": "Manages a ClickHouse cluster within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nExample of creating a Single Node ClickHouse.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"foo\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"foo\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.5.0.0/24\"],\n    zone: \"ru-central1-a\",\n});\nconst fooMdbClickhouseCluster = new yandex.MdbClickhouseCluster(\"foo\", {\n    clickhouse: {\n        config: {\n            backgroundPoolSize: 16,\n            backgroundSchedulePoolSize: 16,\n            compressions: [\n                {\n                    method: \"LZ4\",\n                    minPartSize: 1024,\n                    minPartSizeRatio: 0.5,\n                },\n                {\n                    method: \"ZSTD\",\n                    minPartSize: 2048,\n                    minPartSizeRatio: 0.7,\n                },\n            ],\n            geobaseUri: \"\",\n            graphiteRollups: [\n                {\n                    name: \"rollup1\",\n                    patterns: [{\n                        function: \"func1\",\n                        regexp: \"abc\",\n                        retentions: [{\n                            age: 1000,\n                            precision: 3,\n                        }],\n                    }],\n                },\n                {\n                    name: \"rollup2\",\n                    patterns: [{\n                        function: \"func2\",\n                        retentions: [{\n                            age: 2000,\n                            precision: 5,\n                        }],\n                    }],\n                },\n            ],\n            kafka: {\n                saslMechanism: \"SASL_MECHANISM_GSSAPI\",\n                saslPassword: \"pass1\",\n                saslUsername: \"user1\",\n                securityProtocol: \"SECURITY_PROTOCOL_PLAINTEXT\",\n            },\n            kafkaTopics: [\n                {\n                    name: \"topic1\",\n                    settings: {\n                        saslMechanism: \"SASL_MECHANISM_SCRAM_SHA_256\",\n                        saslPassword: \"pass2\",\n                        saslUsername: \"user2\",\n                        securityProtocol: \"SECURITY_PROTOCOL_SSL\",\n                    },\n                },\n                {\n                    name: \"topic2\",\n                    settings: {\n                        saslMechanism: \"SASL_MECHANISM_PLAIN\",\n                        securityProtocol: \"SECURITY_PROTOCOL_SASL_PLAINTEXT\",\n                    },\n                },\n            ],\n            keepAliveTimeout: 3000,\n            logLevel: \"TRACE\",\n            markCacheSize: 5368709120,\n            maxConcurrentQueries: 50,\n            maxConnections: 100,\n            maxPartitionSizeToDrop: 53687091200,\n            maxTableSizeToDrop: 53687091200,\n            mergeTree: {\n                maxBytesToMergeAtMinSpaceInPool: 1048576,\n                maxReplicatedMergesInQueue: 16,\n                numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge: 8,\n                partsToDelayInsert: 150,\n                partsToThrowInsert: 300,\n                replicatedDeduplicationWindow: 100,\n                replicatedDeduplicationWindowSeconds: 604800,\n            },\n            metricLogEnabled: true,\n            metricLogRetentionSize: 536870912,\n            metricLogRetentionTime: 2592000,\n            partLogRetentionSize: 536870912,\n            partLogRetentionTime: 2592000,\n            queryLogRetentionSize: 1073741824,\n            queryLogRetentionTime: 2592000,\n            queryThreadLogEnabled: true,\n            queryThreadLogRetentionSize: 536870912,\n            queryThreadLogRetentionTime: 2592000,\n            rabbitmq: {\n                password: \"rabbit_pass\",\n                username: \"rabbit_user\",\n            },\n            textLogEnabled: true,\n            textLogLevel: \"TRACE\",\n            textLogRetentionSize: 536870912,\n            textLogRetentionTime: 2592000,\n            timezone: \"UTC\",\n            traceLogEnabled: true,\n            traceLogRetentionSize: 536870912,\n            traceLogRetentionTime: 2592000,\n            uncompressedCacheSize: 8589934592,\n        },\n        resources: {\n            diskSize: 32,\n            diskTypeId: \"network-ssd\",\n            resourcePresetId: \"s2.micro\",\n        },\n    },\n    cloudStorage: {\n        enabled: false,\n    },\n    databases: [{\n        name: \"db_name\",\n    }],\n    environment: \"PRESTABLE\",\n    formatSchemas: [{\n        name: \"test_schema\",\n        type: \"FORMAT_SCHEMA_TYPE_CAPNPROTO\",\n        uri: \"https://storage.yandexcloud.net/ch-data/schema.proto\",\n    }],\n    hosts: [{\n        subnetId: fooVpcSubnet.id,\n        type: \"CLICKHOUSE\",\n        zone: \"ru-central1-a\",\n    }],\n    maintenanceWindow: {\n        type: \"ANYTIME\",\n    },\n    mlModels: [{\n        name: \"test_model\",\n        type: \"ML_MODEL_TYPE_CATBOOST\",\n        uri: \"https://storage.yandexcloud.net/ch-data/train.csv\",\n    }],\n    networkId: fooVpcNetwork.id,\n    serviceAccountId: \"your_service_account_id\",\n    users: [{\n        name: \"user\",\n        password: \"your_password\",\n        permissions: [{\n            databaseName: \"db_name\",\n        }],\n        quotas: [\n            {\n                errors: 1000,\n                intervalDuration: 3600000,\n                queries: 10000,\n            },\n            {\n                errors: 5000,\n                intervalDuration: 79800000,\n                queries: 50000,\n            },\n        ],\n        settings: {\n            maxMemoryUsageForUser: 1000000000,\n            outputFormatJsonQuote64bitIntegers: true,\n            readOverflowMode: \"throw\",\n        },\n    }],\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbClickhouseCluster;\nimport com.pulumi.yandex.MdbClickhouseClusterArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterClickhouseArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterClickhouseConfigArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterClickhouseConfigKafkaArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterClickhouseConfigMergeTreeArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterClickhouseConfigRabbitmqArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterClickhouseResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterCloudStorageArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterDatabaseArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterFormatSchemaArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterHostArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterMaintenanceWindowArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterMlModelArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterUserArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterUserSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.5.0.0/24\")\n            .zone(\"ru-central1-a\")\n            .build());\n\n        var fooMdbClickhouseCluster = new MdbClickhouseCluster(\"fooMdbClickhouseCluster\", MdbClickhouseClusterArgs.builder()        \n            .clickhouse(MdbClickhouseClusterClickhouseArgs.builder()\n                .config(MdbClickhouseClusterClickhouseConfigArgs.builder()\n                    .backgroundPoolSize(16)\n                    .backgroundSchedulePoolSize(16)\n                    .compression(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .geobaseUri(\"\")\n                    .graphiteRollup(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .kafka(MdbClickhouseClusterClickhouseConfigKafkaArgs.builder()\n                        .saslMechanism(\"SASL_MECHANISM_GSSAPI\")\n                        .saslPassword(\"pass1\")\n                        .saslUsername(\"user1\")\n                        .securityProtocol(\"SECURITY_PROTOCOL_PLAINTEXT\")\n                        .build())\n                    .kafkaTopic(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .keepAliveTimeout(3000)\n                    .logLevel(\"TRACE\")\n                    .markCacheSize(5368709120)\n                    .maxConcurrentQueries(50)\n                    .maxConnections(100)\n                    .maxPartitionSizeToDrop(53687091200)\n                    .maxTableSizeToDrop(53687091200)\n                    .mergeTree(MdbClickhouseClusterClickhouseConfigMergeTreeArgs.builder()\n                        .maxBytesToMergeAtMinSpaceInPool(1048576)\n                        .maxReplicatedMergesInQueue(16)\n                        .numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge(8)\n                        .partsToDelayInsert(150)\n                        .partsToThrowInsert(300)\n                        .replicatedDeduplicationWindow(100)\n                        .replicatedDeduplicationWindowSeconds(604800)\n                        .build())\n                    .metricLogEnabled(true)\n                    .metricLogRetentionSize(536870912)\n                    .metricLogRetentionTime(2592000)\n                    .partLogRetentionSize(536870912)\n                    .partLogRetentionTime(2592000)\n                    .queryLogRetentionSize(1073741824)\n                    .queryLogRetentionTime(2592000)\n                    .queryThreadLogEnabled(true)\n                    .queryThreadLogRetentionSize(536870912)\n                    .queryThreadLogRetentionTime(2592000)\n                    .rabbitmq(MdbClickhouseClusterClickhouseConfigRabbitmqArgs.builder()\n                        .password(\"rabbit_pass\")\n                        .username(\"rabbit_user\")\n                        .build())\n                    .textLogEnabled(true)\n                    .textLogLevel(\"TRACE\")\n                    .textLogRetentionSize(536870912)\n                    .textLogRetentionTime(2592000)\n                    .timezone(\"UTC\")\n                    .traceLogEnabled(true)\n                    .traceLogRetentionSize(536870912)\n                    .traceLogRetentionTime(2592000)\n                    .uncompressedCacheSize(8589934592)\n                    .build())\n                .resources(MdbClickhouseClusterClickhouseResourcesArgs.builder()\n                    .diskSize(32)\n                    .diskTypeId(\"network-ssd\")\n                    .resourcePresetId(\"s2.micro\")\n                    .build())\n                .build())\n            .cloudStorage(MdbClickhouseClusterCloudStorageArgs.builder()\n                .enabled(false)\n                .build())\n            .databases(MdbClickhouseClusterDatabaseArgs.builder()\n                .name(\"db_name\")\n                .build())\n            .environment(\"PRESTABLE\")\n            .formatSchemas(MdbClickhouseClusterFormatSchemaArgs.builder()\n                .name(\"test_schema\")\n                .type(\"FORMAT_SCHEMA_TYPE_CAPNPROTO\")\n                .uri(\"https://storage.yandexcloud.net/ch-data/schema.proto\")\n                .build())\n            .hosts(MdbClickhouseClusterHostArgs.builder()\n                .subnetId(fooVpcSubnet.id())\n                .type(\"CLICKHOUSE\")\n                .zone(\"ru-central1-a\")\n                .build())\n            .maintenanceWindow(MdbClickhouseClusterMaintenanceWindowArgs.builder()\n                .type(\"ANYTIME\")\n                .build())\n            .mlModels(MdbClickhouseClusterMlModelArgs.builder()\n                .name(\"test_model\")\n                .type(\"ML_MODEL_TYPE_CATBOOST\")\n                .uri(\"https://storage.yandexcloud.net/ch-data/train.csv\")\n                .build())\n            .networkId(fooVpcNetwork.id())\n            .serviceAccountId(\"your_service_account_id\")\n            .users(MdbClickhouseClusterUserArgs.builder()\n                .name(\"user\")\n                .password(\"your_password\")\n                .permissions(MdbClickhouseClusterUserPermissionArgs.builder()\n                    .databaseName(\"db_name\")\n                    .build())\n                .quotas(                \n                    MdbClickhouseClusterUserQuotaArgs.builder()\n                        .errors(1000)\n                        .intervalDuration(3600000)\n                        .queries(10000)\n                        .build(),\n                    MdbClickhouseClusterUserQuotaArgs.builder()\n                        .errors(5000)\n                        .intervalDuration(79800000)\n                        .queries(50000)\n                        .build())\n                .settings(MdbClickhouseClusterUserSettingsArgs.builder()\n                    .maxMemoryUsageForUser(1000000000)\n                    .outputFormatJsonQuote64bitIntegers(true)\n                    .readOverflowMode(\"throw\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbClickhouseCluster:\n    type: yandex:MdbClickhouseCluster\n    properties:\n      clickhouse:\n        config:\n          backgroundPoolSize: 16\n          backgroundSchedulePoolSize: 16\n          compression:\n            - method: LZ4\n              minPartSize: 1024\n              minPartSizeRatio: 0.5\n            - method: ZSTD\n              minPartSize: 2048\n              minPartSizeRatio: 0.7\n          geobaseUri:\n          graphiteRollup:\n            - name: rollup1\n              pattern:\n                - function: func1\n                  regexp: abc\n                  retention:\n                    - age: 1000\n                      precision: 3\n            - name: rollup2\n              pattern:\n                - function: func2\n                  retention:\n                    - age: 2000\n                      precision: 5\n          kafka:\n            saslMechanism: SASL_MECHANISM_GSSAPI\n            saslPassword: pass1\n            saslUsername: user1\n            securityProtocol: SECURITY_PROTOCOL_PLAINTEXT\n          kafkaTopic:\n            - name: topic1\n              settings:\n                saslMechanism: SASL_MECHANISM_SCRAM_SHA_256\n                saslPassword: pass2\n                saslUsername: user2\n                securityProtocol: SECURITY_PROTOCOL_SSL\n            - name: topic2\n              settings:\n                saslMechanism: SASL_MECHANISM_PLAIN\n                securityProtocol: SECURITY_PROTOCOL_SASL_PLAINTEXT\n          keepAliveTimeout: 3000\n          logLevel: TRACE\n          markCacheSize: 5.36870912e+09\n          maxConcurrentQueries: 50\n          maxConnections: 100\n          maxPartitionSizeToDrop: 5.36870912e+10\n          maxTableSizeToDrop: 5.36870912e+10\n          mergeTree:\n            maxBytesToMergeAtMinSpaceInPool: 1.048576e+06\n            maxReplicatedMergesInQueue: 16\n            numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge: 8\n            partsToDelayInsert: 150\n            partsToThrowInsert: 300\n            replicatedDeduplicationWindow: 100\n            replicatedDeduplicationWindowSeconds: 604800\n          metricLogEnabled: true\n          metricLogRetentionSize: 5.36870912e+08\n          metricLogRetentionTime: 2.592e+06\n          partLogRetentionSize: 5.36870912e+08\n          partLogRetentionTime: 2.592e+06\n          queryLogRetentionSize: 1.073741824e+09\n          queryLogRetentionTime: 2.592e+06\n          queryThreadLogEnabled: true\n          queryThreadLogRetentionSize: 5.36870912e+08\n          queryThreadLogRetentionTime: 2.592e+06\n          rabbitmq:\n            password: rabbit_pass\n            username: rabbit_user\n          textLogEnabled: true\n          textLogLevel: TRACE\n          textLogRetentionSize: 5.36870912e+08\n          textLogRetentionTime: 2.592e+06\n          timezone: UTC\n          traceLogEnabled: true\n          traceLogRetentionSize: 5.36870912e+08\n          traceLogRetentionTime: 2.592e+06\n          uncompressedCacheSize: 8.589934592e+09\n        resources:\n          diskSize: 32\n          diskTypeId: network-ssd\n          resourcePresetId: s2.micro\n      cloudStorage:\n        enabled: false\n      databases:\n        - name: db_name\n      environment: PRESTABLE\n      formatSchemas:\n        - name: test_schema\n          type: FORMAT_SCHEMA_TYPE_CAPNPROTO\n          uri: https://storage.yandexcloud.net/ch-data/schema.proto\n      hosts:\n        - subnetId: ${fooVpcSubnet.id}\n          type: CLICKHOUSE\n          zone: ru-central1-a\n      maintenanceWindow:\n        type: ANYTIME\n      mlModels:\n        - name: test_model\n          type: ML_MODEL_TYPE_CATBOOST\n          uri: https://storage.yandexcloud.net/ch-data/train.csv\n      networkId: ${fooVpcNetwork.id}\n      serviceAccountId: your_service_account_id\n      users:\n        - name: user\n          password: your_password\n          permissions:\n            - databaseName: db_name\n          quotas:\n            - errors: 1000\n              intervalDuration: 3.6e+06\n              queries: 10000\n            - errors: 5000\n              intervalDuration: 7.98e+07\n              queries: 50000\n          settings:\n            maxMemoryUsageForUser: 1e+09\n            outputFormatJsonQuote64bitIntegers: true\n            readOverflowMode: throw\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.5.0.0/24\n      zone: ru-central1-a\n```\n\nExample of creating a HA ClickHouse Cluster.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"foo\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"foo\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.1.0.0/24\"],\n    zone: \"ru-central1-a\",\n});\nconst bar = new yandex.VpcSubnet(\"bar\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.2.0.0/24\"],\n    zone: \"ru-central1-b\",\n});\nconst baz = new yandex.VpcSubnet(\"baz\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.3.0.0/24\"],\n    zone: \"ru-central1-c\",\n});\nconst fooMdbClickhouseCluster = new yandex.MdbClickhouseCluster(\"foo\", {\n    clickhouse: {\n        resources: {\n            diskSize: 16,\n            diskTypeId: \"network-ssd\",\n            resourcePresetId: \"s2.micro\",\n        },\n    },\n    cloudStorage: {\n        enabled: false,\n    },\n    databases: [{\n        name: \"db_name\",\n    }],\n    environment: \"PRESTABLE\",\n    hosts: [\n        {\n            subnetId: fooVpcSubnet.id,\n            type: \"CLICKHOUSE\",\n            zone: \"ru-central1-a\",\n        },\n        {\n            subnetId: bar.id,\n            type: \"CLICKHOUSE\",\n            zone: \"ru-central1-b\",\n        },\n        {\n            subnetId: fooVpcSubnet.id,\n            type: \"ZOOKEEPER\",\n            zone: \"ru-central1-a\",\n        },\n        {\n            subnetId: bar.id,\n            type: \"ZOOKEEPER\",\n            zone: \"ru-central1-b\",\n        },\n        {\n            subnetId: baz.id,\n            type: \"ZOOKEEPER\",\n            zone: \"ru-central1-c\",\n        },\n    ],\n    networkId: fooVpcNetwork.id,\n    users: [{\n        name: \"user\",\n        password: \"password\",\n        permissions: [{\n            databaseName: \"db_name\",\n        }],\n        quotas: [\n            {\n                errors: 1000,\n                intervalDuration: 3600000,\n                queries: 10000,\n            },\n            {\n                errors: 5000,\n                intervalDuration: 79800000,\n                queries: 50000,\n            },\n        ],\n        settings: {\n            maxMemoryUsageForUser: 1000000000,\n            outputFormatJsonQuote64bitIntegers: true,\n            readOverflowMode: \"throw\",\n        },\n    }],\n    zookeeper: {\n        resources: {\n            diskSize: 10,\n            diskTypeId: \"network-ssd\",\n            resourcePresetId: \"s2.micro\",\n        },\n    },\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbClickhouseCluster;\nimport com.pulumi.yandex.MdbClickhouseClusterArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterClickhouseArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterClickhouseResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterCloudStorageArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterDatabaseArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterHostArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterUserArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterUserSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.1.0.0/24\")\n            .zone(\"ru-central1-a\")\n            .build());\n\n        var bar = new VpcSubnet(\"bar\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.2.0.0/24\")\n            .zone(\"ru-central1-b\")\n            .build());\n\n        var baz = new VpcSubnet(\"baz\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.3.0.0/24\")\n            .zone(\"ru-central1-c\")\n            .build());\n\n        var fooMdbClickhouseCluster = new MdbClickhouseCluster(\"fooMdbClickhouseCluster\", MdbClickhouseClusterArgs.builder()        \n            .clickhouse(MdbClickhouseClusterClickhouseArgs.builder()\n                .resources(MdbClickhouseClusterClickhouseResourcesArgs.builder()\n                    .diskSize(16)\n                    .diskTypeId(\"network-ssd\")\n                    .resourcePresetId(\"s2.micro\")\n                    .build())\n                .build())\n            .cloudStorage(MdbClickhouseClusterCloudStorageArgs.builder()\n                .enabled(false)\n                .build())\n            .databases(MdbClickhouseClusterDatabaseArgs.builder()\n                .name(\"db_name\")\n                .build())\n            .environment(\"PRESTABLE\")\n            .hosts(            \n                MdbClickhouseClusterHostArgs.builder()\n                    .subnetId(fooVpcSubnet.id())\n                    .type(\"CLICKHOUSE\")\n                    .zone(\"ru-central1-a\")\n                    .build(),\n                MdbClickhouseClusterHostArgs.builder()\n                    .subnetId(bar.id())\n                    .type(\"CLICKHOUSE\")\n                    .zone(\"ru-central1-b\")\n                    .build(),\n                MdbClickhouseClusterHostArgs.builder()\n                    .subnetId(fooVpcSubnet.id())\n                    .type(\"ZOOKEEPER\")\n                    .zone(\"ru-central1-a\")\n                    .build(),\n                MdbClickhouseClusterHostArgs.builder()\n                    .subnetId(bar.id())\n                    .type(\"ZOOKEEPER\")\n                    .zone(\"ru-central1-b\")\n                    .build(),\n                MdbClickhouseClusterHostArgs.builder()\n                    .subnetId(baz.id())\n                    .type(\"ZOOKEEPER\")\n                    .zone(\"ru-central1-c\")\n                    .build())\n            .networkId(fooVpcNetwork.id())\n            .users(MdbClickhouseClusterUserArgs.builder()\n                .name(\"user\")\n                .password(\"password\")\n                .permissions(MdbClickhouseClusterUserPermissionArgs.builder()\n                    .databaseName(\"db_name\")\n                    .build())\n                .quotas(                \n                    MdbClickhouseClusterUserQuotaArgs.builder()\n                        .errors(1000)\n                        .intervalDuration(3600000)\n                        .queries(10000)\n                        .build(),\n                    MdbClickhouseClusterUserQuotaArgs.builder()\n                        .errors(5000)\n                        .intervalDuration(79800000)\n                        .queries(50000)\n                        .build())\n                .settings(MdbClickhouseClusterUserSettingsArgs.builder()\n                    .maxMemoryUsageForUser(1000000000)\n                    .outputFormatJsonQuote64bitIntegers(true)\n                    .readOverflowMode(\"throw\")\n                    .build())\n                .build())\n            .zookeeper(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbClickhouseCluster:\n    type: yandex:MdbClickhouseCluster\n    properties:\n      clickhouse:\n        resources:\n          diskSize: 16\n          diskTypeId: network-ssd\n          resourcePresetId: s2.micro\n      cloudStorage:\n        enabled: false\n      databases:\n        - name: db_name\n      environment: PRESTABLE\n      hosts:\n        - subnetId: ${fooVpcSubnet.id}\n          type: CLICKHOUSE\n          zone: ru-central1-a\n        - subnetId: ${bar.id}\n          type: CLICKHOUSE\n          zone: ru-central1-b\n        - subnetId: ${fooVpcSubnet.id}\n          type: ZOOKEEPER\n          zone: ru-central1-a\n        - subnetId: ${bar.id}\n          type: ZOOKEEPER\n          zone: ru-central1-b\n        - subnetId: ${baz.id}\n          type: ZOOKEEPER\n          zone: ru-central1-c\n      networkId: ${fooVpcNetwork.id}\n      users:\n        - name: user\n          password: password\n          permissions:\n            - databaseName: db_name\n          quotas:\n            - errors: 1000\n              intervalDuration: 3.6e+06\n              queries: 10000\n            - errors: 5000\n              intervalDuration: 7.98e+07\n              queries: 50000\n          settings:\n            maxMemoryUsageForUser: 1e+09\n            outputFormatJsonQuote64bitIntegers: true\n            readOverflowMode: throw\n      zookeeper:\n        resources:\n          diskSize: 10\n          diskTypeId: network-ssd\n          resourcePresetId: s2.micro\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.1.0.0/24\n      zone: ru-central1-a\n  bar:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.2.0.0/24\n      zone: ru-central1-b\n  baz:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.3.0.0/24\n      zone: ru-central1-c\n```\n\nExample of creating a sharded ClickHouse Cluster.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"foo\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"foo\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.1.0.0/24\"],\n    zone: \"ru-central1-a\",\n});\nconst bar = new yandex.VpcSubnet(\"bar\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.2.0.0/24\"],\n    zone: \"ru-central1-b\",\n});\nconst baz = new yandex.VpcSubnet(\"baz\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.3.0.0/24\"],\n    zone: \"ru-central1-c\",\n});\nconst fooMdbClickhouseCluster = new yandex.MdbClickhouseCluster(\"foo\", {\n    clickhouse: {\n        resources: {\n            diskSize: 16,\n            diskTypeId: \"network-ssd\",\n            resourcePresetId: \"s2.micro\",\n        },\n    },\n    cloudStorage: {\n        enabled: false,\n    },\n    databases: [{\n        name: \"db_name\",\n    }],\n    environment: \"PRODUCTION\",\n    hosts: [\n        {\n            shardName: \"shard1\",\n            subnetId: fooVpcSubnet.id,\n            type: \"CLICKHOUSE\",\n            zone: \"ru-central1-a\",\n        },\n        {\n            shardName: \"shard1\",\n            subnetId: bar.id,\n            type: \"CLICKHOUSE\",\n            zone: \"ru-central1-b\",\n        },\n        {\n            shardName: \"shard2\",\n            subnetId: bar.id,\n            type: \"CLICKHOUSE\",\n            zone: \"ru-central1-b\",\n        },\n        {\n            shardName: \"shard2\",\n            subnetId: baz.id,\n            type: \"CLICKHOUSE\",\n            zone: \"ru-central1-c\",\n        },\n    ],\n    networkId: fooVpcNetwork.id,\n    shardGroups: [{\n        description: \"Cluster configuration that contain only shard1\",\n        name: \"single_shard_group\",\n        shardNames: [\"shard1\"],\n    }],\n    users: [{\n        name: \"user\",\n        password: \"password\",\n        permissions: [{\n            databaseName: \"db_name\",\n        }],\n        quotas: [\n            {\n                errors: 1000,\n                intervalDuration: 3600000,\n                queries: 10000,\n            },\n            {\n                errors: 5000,\n                intervalDuration: 79800000,\n                queries: 50000,\n            },\n        ],\n        settings: {\n            maxMemoryUsageForUser: 1000000000,\n            outputFormatJsonQuote64bitIntegers: true,\n            readOverflowMode: \"throw\",\n        },\n    }],\n    zookeeper: {\n        resources: {\n            diskSize: 10,\n            diskTypeId: \"network-ssd\",\n            resourcePresetId: \"s2.micro\",\n        },\n    },\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbClickhouseCluster;\nimport com.pulumi.yandex.MdbClickhouseClusterArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterClickhouseArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterClickhouseResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterCloudStorageArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterDatabaseArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterHostArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterShardGroupArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterUserArgs;\nimport com.pulumi.yandex.inputs.MdbClickhouseClusterUserSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.1.0.0/24\")\n            .zone(\"ru-central1-a\")\n            .build());\n\n        var bar = new VpcSubnet(\"bar\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.2.0.0/24\")\n            .zone(\"ru-central1-b\")\n            .build());\n\n        var baz = new VpcSubnet(\"baz\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.3.0.0/24\")\n            .zone(\"ru-central1-c\")\n            .build());\n\n        var fooMdbClickhouseCluster = new MdbClickhouseCluster(\"fooMdbClickhouseCluster\", MdbClickhouseClusterArgs.builder()        \n            .clickhouse(MdbClickhouseClusterClickhouseArgs.builder()\n                .resources(MdbClickhouseClusterClickhouseResourcesArgs.builder()\n                    .diskSize(16)\n                    .diskTypeId(\"network-ssd\")\n                    .resourcePresetId(\"s2.micro\")\n                    .build())\n                .build())\n            .cloudStorage(MdbClickhouseClusterCloudStorageArgs.builder()\n                .enabled(false)\n                .build())\n            .databases(MdbClickhouseClusterDatabaseArgs.builder()\n                .name(\"db_name\")\n                .build())\n            .environment(\"PRODUCTION\")\n            .hosts(            \n                MdbClickhouseClusterHostArgs.builder()\n                    .shardName(\"shard1\")\n                    .subnetId(fooVpcSubnet.id())\n                    .type(\"CLICKHOUSE\")\n                    .zone(\"ru-central1-a\")\n                    .build(),\n                MdbClickhouseClusterHostArgs.builder()\n                    .shardName(\"shard1\")\n                    .subnetId(bar.id())\n                    .type(\"CLICKHOUSE\")\n                    .zone(\"ru-central1-b\")\n                    .build(),\n                MdbClickhouseClusterHostArgs.builder()\n                    .shardName(\"shard2\")\n                    .subnetId(bar.id())\n                    .type(\"CLICKHOUSE\")\n                    .zone(\"ru-central1-b\")\n                    .build(),\n                MdbClickhouseClusterHostArgs.builder()\n                    .shardName(\"shard2\")\n                    .subnetId(baz.id())\n                    .type(\"CLICKHOUSE\")\n                    .zone(\"ru-central1-c\")\n                    .build())\n            .networkId(fooVpcNetwork.id())\n            .shardGroups(MdbClickhouseClusterShardGroupArgs.builder()\n                .description(\"Cluster configuration that contain only shard1\")\n                .name(\"single_shard_group\")\n                .shardNames(\"shard1\")\n                .build())\n            .users(MdbClickhouseClusterUserArgs.builder()\n                .name(\"user\")\n                .password(\"password\")\n                .permissions(MdbClickhouseClusterUserPermissionArgs.builder()\n                    .databaseName(\"db_name\")\n                    .build())\n                .quotas(                \n                    MdbClickhouseClusterUserQuotaArgs.builder()\n                        .errors(1000)\n                        .intervalDuration(3600000)\n                        .queries(10000)\n                        .build(),\n                    MdbClickhouseClusterUserQuotaArgs.builder()\n                        .errors(5000)\n                        .intervalDuration(79800000)\n                        .queries(50000)\n                        .build())\n                .settings(MdbClickhouseClusterUserSettingsArgs.builder()\n                    .maxMemoryUsageForUser(1000000000)\n                    .outputFormatJsonQuote64bitIntegers(true)\n                    .readOverflowMode(\"throw\")\n                    .build())\n                .build())\n            .zookeeper(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbClickhouseCluster:\n    type: yandex:MdbClickhouseCluster\n    properties:\n      clickhouse:\n        resources:\n          diskSize: 16\n          diskTypeId: network-ssd\n          resourcePresetId: s2.micro\n      cloudStorage:\n        enabled: false\n      databases:\n        - name: db_name\n      environment: PRODUCTION\n      hosts:\n        - shardName: shard1\n          subnetId: ${fooVpcSubnet.id}\n          type: CLICKHOUSE\n          zone: ru-central1-a\n        - shardName: shard1\n          subnetId: ${bar.id}\n          type: CLICKHOUSE\n          zone: ru-central1-b\n        - shardName: shard2\n          subnetId: ${bar.id}\n          type: CLICKHOUSE\n          zone: ru-central1-b\n        - shardName: shard2\n          subnetId: ${baz.id}\n          type: CLICKHOUSE\n          zone: ru-central1-c\n      networkId: ${fooVpcNetwork.id}\n      shardGroups:\n        - description: Cluster configuration that contain only shard1\n          name: single_shard_group\n          shardNames:\n            - shard1\n      users:\n        - name: user\n          password: password\n          permissions:\n            - databaseName: db_name\n          quotas:\n            - errors: 1000\n              intervalDuration: 3.6e+06\n              queries: 10000\n            - errors: 5000\n              intervalDuration: 7.98e+07\n              queries: 50000\n          settings:\n            maxMemoryUsageForUser: 1e+09\n            outputFormatJsonQuote64bitIntegers: true\n            readOverflowMode: throw\n      zookeeper:\n        resources:\n          diskSize: 10\n          diskTypeId: network-ssd\n          resourcePresetId: s2.micro\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.1.0.0/24\n      zone: ru-central1-a\n  bar:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.2.0.0/24\n      zone: ru-central1-b\n  baz:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.3.0.0/24\n      zone: ru-central1-c\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA cluster can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/mdbClickhouseCluster:MdbClickhouseCluster foo cluster_id\n```\n\n ",
            "properties": {
                "access": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterAccess:MdbClickhouseClusterAccess",
                    "description": "Access policy to the ClickHouse cluster. The structure is documented below.\n"
                },
                "adminPassword": {
                    "type": "string",
                    "description": "A password used to authorize as user `admin` when `sql_user_management` enabled.\n",
                    "secret": true
                },
                "backupWindowStart": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterBackupWindowStart:MdbClickhouseClusterBackupWindowStart",
                    "description": "Time to start the daily backup, in the UTC timezone. The structure is documented below.\n"
                },
                "clickhouse": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterClickhouse:MdbClickhouseClusterClickhouse",
                    "description": "Configuration of the ClickHouse subcluster. The structure is documented below.\n"
                },
                "cloudStorage": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterCloudStorage:MdbClickhouseClusterCloudStorage"
                },
                "copySchemaOnNewHosts": {
                    "type": "boolean",
                    "description": "Whether to copy schema on new ClickHouse hosts.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of cluster creation.\n"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterDatabase:MdbClickhouseClusterDatabase"
                    },
                    "description": "A database of the ClickHouse cluster. The structure is documented below.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the shard group.\n"
                },
                "embeddedKeeper": {
                    "type": "boolean",
                    "description": "Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "formatSchemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterFormatSchema:MdbClickhouseClusterFormatSchema"
                    },
                    "description": "A set of protobuf or capnproto format schemas. The structure is documented below.\n"
                },
                "health": {
                    "type": "string",
                    "description": "Aggregated health of the cluster. Can be `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`.\nFor more information see `health` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/api-ref/Cluster/).\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterHost:MdbClickhouseClusterHost"
                    },
                    "description": "A host of the ClickHouse cluster. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the ClickHouse cluster.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterMaintenanceWindow:MdbClickhouseClusterMaintenanceWindow"
                },
                "mlModels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterMlModel:MdbClickhouseClusterMlModel"
                    },
                    "description": "A group of machine learning models. The structure is documented below\n"
                },
                "name": {
                    "type": "string",
                    "description": "Graphite rollup configuration name.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the ClickHouse cluster belongs.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "ID of the service account used for access to Yandex Object Storage.\n"
                },
                "shardGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterShardGroup:MdbClickhouseClusterShardGroup"
                    },
                    "description": "A group of clickhouse shards. The structure is documented below.\n"
                },
                "sqlDatabaseManagement": {
                    "type": "boolean",
                    "description": "Grants `admin` user database management permission.\n"
                },
                "sqlUserManagement": {
                    "type": "boolean",
                    "description": "Enables `admin` user with user management permission.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the cluster. Can be `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.\nFor more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/api-ref/Cluster/).\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterTimeouts:MdbClickhouseClusterTimeouts"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterUser:MdbClickhouseClusterUser"
                    },
                    "description": "A user of the ClickHouse cluster. The structure is documented below.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the ClickHouse server software.\n"
                },
                "zookeeper": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterZookeeper:MdbClickhouseClusterZookeeper",
                    "description": "Configuration of the ZooKeeper subcluster. The structure is documented below.\n"
                }
            },
            "required": [
                "clickhouse",
                "createdAt",
                "deletionProtection",
                "embeddedKeeper",
                "environment",
                "folderId",
                "health",
                "hosts",
                "labels",
                "name",
                "networkId",
                "securityGroupIds",
                "serviceAccountId",
                "sqlDatabaseManagement",
                "sqlUserManagement",
                "status",
                "timeouts",
                "version",
                "zookeeper"
            ],
            "inputProperties": {
                "access": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterAccess:MdbClickhouseClusterAccess",
                    "description": "Access policy to the ClickHouse cluster. The structure is documented below.\n"
                },
                "adminPassword": {
                    "type": "string",
                    "description": "A password used to authorize as user `admin` when `sql_user_management` enabled.\n",
                    "secret": true
                },
                "backupWindowStart": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterBackupWindowStart:MdbClickhouseClusterBackupWindowStart",
                    "description": "Time to start the daily backup, in the UTC timezone. The structure is documented below.\n"
                },
                "clickhouse": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterClickhouse:MdbClickhouseClusterClickhouse",
                    "description": "Configuration of the ClickHouse subcluster. The structure is documented below.\n"
                },
                "cloudStorage": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterCloudStorage:MdbClickhouseClusterCloudStorage"
                },
                "copySchemaOnNewHosts": {
                    "type": "boolean",
                    "description": "Whether to copy schema on new ClickHouse hosts.\n"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterDatabase:MdbClickhouseClusterDatabase"
                    },
                    "description": "A database of the ClickHouse cluster. The structure is documented below.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the shard group.\n"
                },
                "embeddedKeeper": {
                    "type": "boolean",
                    "description": "Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "formatSchemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterFormatSchema:MdbClickhouseClusterFormatSchema"
                    },
                    "description": "A set of protobuf or capnproto format schemas. The structure is documented below.\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterHost:MdbClickhouseClusterHost"
                    },
                    "description": "A host of the ClickHouse cluster. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the ClickHouse cluster.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterMaintenanceWindow:MdbClickhouseClusterMaintenanceWindow"
                },
                "mlModels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterMlModel:MdbClickhouseClusterMlModel"
                    },
                    "description": "A group of machine learning models. The structure is documented below\n"
                },
                "name": {
                    "type": "string",
                    "description": "Graphite rollup configuration name.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the ClickHouse cluster belongs.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "ID of the service account used for access to Yandex Object Storage.\n"
                },
                "shardGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterShardGroup:MdbClickhouseClusterShardGroup"
                    },
                    "description": "A group of clickhouse shards. The structure is documented below.\n"
                },
                "sqlDatabaseManagement": {
                    "type": "boolean",
                    "description": "Grants `admin` user database management permission.\n"
                },
                "sqlUserManagement": {
                    "type": "boolean",
                    "description": "Enables `admin` user with user management permission.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbClickhouseClusterTimeouts:MdbClickhouseClusterTimeouts"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterUser:MdbClickhouseClusterUser"
                    },
                    "description": "A user of the ClickHouse cluster. The structure is documented below.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the ClickHouse server software.\n"
                }
            },
            "requiredInputs": [
                "clickhouse",
                "environment",
                "hosts",
                "networkId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbClickhouseCluster resources.\n",
                "properties": {
                    "access": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterAccess:MdbClickhouseClusterAccess",
                        "description": "Access policy to the ClickHouse cluster. The structure is documented below.\n"
                    },
                    "adminPassword": {
                        "type": "string",
                        "description": "A password used to authorize as user `admin` when `sql_user_management` enabled.\n",
                        "secret": true
                    },
                    "backupWindowStart": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterBackupWindowStart:MdbClickhouseClusterBackupWindowStart",
                        "description": "Time to start the daily backup, in the UTC timezone. The structure is documented below.\n"
                    },
                    "clickhouse": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterClickhouse:MdbClickhouseClusterClickhouse",
                        "description": "Configuration of the ClickHouse subcluster. The structure is documented below.\n"
                    },
                    "cloudStorage": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterCloudStorage:MdbClickhouseClusterCloudStorage"
                    },
                    "copySchemaOnNewHosts": {
                        "type": "boolean",
                        "description": "Whether to copy schema on new ClickHouse hosts.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp of cluster creation.\n"
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbClickhouseClusterDatabase:MdbClickhouseClusterDatabase"
                        },
                        "description": "A database of the ClickHouse cluster. The structure is documented below.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the shard group.\n"
                    },
                    "embeddedKeeper": {
                        "type": "boolean",
                        "description": "Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the ClickHouse cluster. Can be either `PRESTABLE` or `PRODUCTION`.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                    },
                    "formatSchemas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbClickhouseClusterFormatSchema:MdbClickhouseClusterFormatSchema"
                        },
                        "description": "A set of protobuf or capnproto format schemas. The structure is documented below.\n"
                    },
                    "health": {
                        "type": "string",
                        "description": "Aggregated health of the cluster. Can be `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`.\nFor more information see `health` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/api-ref/Cluster/).\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbClickhouseClusterHost:MdbClickhouseClusterHost"
                        },
                        "description": "A host of the ClickHouse cluster. The structure is documented below.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the ClickHouse cluster.\n"
                    },
                    "maintenanceWindow": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterMaintenanceWindow:MdbClickhouseClusterMaintenanceWindow"
                    },
                    "mlModels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbClickhouseClusterMlModel:MdbClickhouseClusterMlModel"
                        },
                        "description": "A group of machine learning models. The structure is documented below\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Graphite rollup configuration name.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the ClickHouse cluster belongs.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "ID of the service account used for access to Yandex Object Storage.\n"
                    },
                    "shardGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbClickhouseClusterShardGroup:MdbClickhouseClusterShardGroup"
                        },
                        "description": "A group of clickhouse shards. The structure is documented below.\n"
                    },
                    "sqlDatabaseManagement": {
                        "type": "boolean",
                        "description": "Grants `admin` user database management permission.\n"
                    },
                    "sqlUserManagement": {
                        "type": "boolean",
                        "description": "Enables `admin` user with user management permission.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster. Can be `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.\nFor more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/api-ref/Cluster/).\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterTimeouts:MdbClickhouseClusterTimeouts"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbClickhouseClusterUser:MdbClickhouseClusterUser"
                        },
                        "description": "A user of the ClickHouse cluster. The structure is documented below.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the ClickHouse server software.\n"
                    },
                    "zookeeper": {
                        "$ref": "#/types/yandex:index/MdbClickhouseClusterZookeeper:MdbClickhouseClusterZookeeper",
                        "description": "Configuration of the ZooKeeper subcluster. The structure is documented below.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbElasticSearchCluster:MdbElasticSearchCluster": {
            "description": "Manages a Elasticsearch cluster within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-elasticsearch/concepts).\n\n\n## Import\n\nA cluster can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/mdbElasticSearchCluster:MdbElasticSearchCluster foo cluster_id\n```\n\n ",
            "properties": {
                "config": {
                    "$ref": "#/types/yandex:index/MdbElasticSearchClusterConfig:MdbElasticSearchClusterConfig",
                    "description": "Configuration of the Elasticsearch cluster. The structure is documented below.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the key.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Elasticsearch cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the Elasticsearch cluster. Can be either `PRESTABLE` or `PRODUCTION`.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.\n"
                },
                "health": {
                    "type": "string",
                    "description": "Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`.\nFor more information see `health` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-elasticsearch/api-ref/Cluster/).\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbElasticSearchClusterHost:MdbElasticSearchClusterHost"
                    },
                    "description": "A host of the Elasticsearch cluster. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Elasticsearch cluster.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbElasticSearchClusterMaintenanceWindow:MdbElasticSearchClusterMaintenanceWindow"
                },
                "name": {
                    "type": "string",
                    "description": "User defined host name.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the Elasticsearch cluster belongs.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "ID of the service account authorized for this cluster.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.\nFor more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-elasticsearch/api-ref/Cluster/).\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbElasticSearchClusterTimeouts:MdbElasticSearchClusterTimeouts"
                }
            },
            "required": [
                "config",
                "createdAt",
                "deletionProtection",
                "environment",
                "folderId",
                "health",
                "name",
                "networkId",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/yandex:index/MdbElasticSearchClusterConfig:MdbElasticSearchClusterConfig",
                    "description": "Configuration of the Elasticsearch cluster. The structure is documented below.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Elasticsearch cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the Elasticsearch cluster. Can be either `PRESTABLE` or `PRODUCTION`.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbElasticSearchClusterHost:MdbElasticSearchClusterHost"
                    },
                    "description": "A host of the Elasticsearch cluster. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Elasticsearch cluster.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbElasticSearchClusterMaintenanceWindow:MdbElasticSearchClusterMaintenanceWindow"
                },
                "name": {
                    "type": "string",
                    "description": "User defined host name.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the Elasticsearch cluster belongs.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "ID of the service account authorized for this cluster.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbElasticSearchClusterTimeouts:MdbElasticSearchClusterTimeouts"
                }
            },
            "requiredInputs": [
                "config",
                "environment",
                "networkId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbElasticSearchCluster resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/yandex:index/MdbElasticSearchClusterConfig:MdbElasticSearchClusterConfig",
                        "description": "Configuration of the Elasticsearch cluster. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Elasticsearch cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the Elasticsearch cluster. Can be either `PRESTABLE` or `PRODUCTION`.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.\n"
                    },
                    "health": {
                        "type": "string",
                        "description": "Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`.\nFor more information see `health` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-elasticsearch/api-ref/Cluster/).\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbElasticSearchClusterHost:MdbElasticSearchClusterHost"
                        },
                        "description": "A host of the Elasticsearch cluster. The structure is documented below.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Elasticsearch cluster.\n"
                    },
                    "maintenanceWindow": {
                        "$ref": "#/types/yandex:index/MdbElasticSearchClusterMaintenanceWindow:MdbElasticSearchClusterMaintenanceWindow"
                    },
                    "name": {
                        "type": "string",
                        "description": "User defined host name.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the Elasticsearch cluster belongs.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "ID of the service account authorized for this cluster.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.\nFor more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-elasticsearch/api-ref/Cluster/).\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/MdbElasticSearchClusterTimeouts:MdbElasticSearchClusterTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbGreenplumCluster:MdbGreenplumCluster": {
            "description": "Manages a Greenplum cluster within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.ru/docs/managed-greenplum/).\n\nPlease read [Pricing for Managed Service for Greenplum](https://cloud.yandex.ru/docs/managed-greenplum/) before using Greenplum cluster.\n\nYandex Managed Service for Greenplum® is now in preview\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nExample of creating a Single Node Greenplum.\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.VpcSecurityGroup;\nimport com.pulumi.yandex.VpcSecurityGroupArgs;\nimport com.pulumi.yandex.inputs.VpcSecurityGroupIngressArgs;\nimport com.pulumi.yandex.inputs.VpcSecurityGroupEgressArgs;\nimport com.pulumi.yandex.MdbGreenplumCluster;\nimport com.pulumi.yandex.MdbGreenplumClusterArgs;\nimport com.pulumi.yandex.inputs.MdbGreenplumClusterMasterSubclusterArgs;\nimport com.pulumi.yandex.inputs.MdbGreenplumClusterMasterSubclusterResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbGreenplumClusterSegmentSubclusterArgs;\nimport com.pulumi.yandex.inputs.MdbGreenplumClusterSegmentSubclusterResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbGreenplumClusterAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-a\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.5.0.0/24\")\n            .build());\n\n        var test_sg_x = new VpcSecurityGroup(\"test-sg-x\", VpcSecurityGroupArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .ingresses(VpcSecurityGroupIngressArgs.builder()\n                .protocol(\"ANY\")\n                .description(\"Allow incoming traffic from members of the same security group\")\n                .fromPort(0)\n                .toPort(65535)\n                .v4CidrBlocks(\"0.0.0.0/0\")\n                .build())\n            .egresses(VpcSecurityGroupEgressArgs.builder()\n                .protocol(\"ANY\")\n                .description(\"Allow outgoing traffic to members of the same security group\")\n                .fromPort(0)\n                .toPort(65535)\n                .v4CidrBlocks(\"0.0.0.0/0\")\n                .build())\n            .build());\n\n        var fooMdbGreenplumCluster = new MdbGreenplumCluster(\"fooMdbGreenplumCluster\", MdbGreenplumClusterArgs.builder()        \n            .description(\"test greenplum cluster\")\n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .zoneId(\"ru-central1-a\")\n            .subnetId(fooVpcSubnet.id())\n            .assignPublicIp(true)\n            .version(\"6.19\")\n            .masterHostCount(2)\n            .segmentHostCount(5)\n            .segmentInHost(1)\n            .masterSubcluster(MdbGreenplumClusterMasterSubclusterArgs.builder()\n                .resources(MdbGreenplumClusterMasterSubclusterResourcesArgs.builder()\n                    .resourcePresetId(\"s2.micro\")\n                    .diskSize(24)\n                    .diskTypeId(\"network-ssd\")\n                    .build())\n                .build())\n            .segmentSubcluster(MdbGreenplumClusterSegmentSubclusterArgs.builder()\n                .resources(MdbGreenplumClusterSegmentSubclusterResourcesArgs.builder()\n                    .resourcePresetId(\"s2.micro\")\n                    .diskSize(24)\n                    .diskTypeId(\"network-ssd\")\n                    .build())\n                .build())\n            .access(MdbGreenplumClusterAccessArgs.builder()\n                .webSql(true)\n                .build())\n            .greenplumConfig(Map.ofEntries(\n                Map.entry(\"max_connections\", 395),\n                Map.entry(\"gp_workfile_compression\", \"false\")\n            ))\n            .userName(\"admin_user\")\n            .userPassword(\"your_super_secret_password\")\n            .securityGroupIds(test_sg_x.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbGreenplumCluster:\n    type: yandex:MdbGreenplumCluster\n    properties:\n      description: test greenplum cluster\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      zoneId: ru-central1-a\n      subnetId: ${fooVpcSubnet.id}\n      assignPublicIp: true\n      version: '6.19'\n      masterHostCount: 2\n      segmentHostCount: 5\n      segmentInHost: 1\n      masterSubcluster:\n        resources:\n          resourcePresetId: s2.micro\n          diskSize: 24\n          diskTypeId: network-ssd\n      segmentSubcluster:\n        resources:\n          resourcePresetId: s2.micro\n          diskSize: 24\n          diskTypeId: network-ssd\n      access:\n        webSql: true\n      greenplumConfig:\n        max_connections: 395\n        gp_workfile_compression: 'false'\n      userName: admin_user\n      userPassword: your_super_secret_password\n      securityGroupIds:\n        - ${[\"test-sg-x\"].id}\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-a\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.5.0.0/24\n  test-sg-x:\n    type: yandex:VpcSecurityGroup\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      ingresses:\n        - protocol: ANY\n          description: Allow incoming traffic from members of the same security group\n          fromPort: 0\n          toPort: 65535\n          v4CidrBlocks:\n            - 0.0.0.0/0\n      egresses:\n        - protocol: ANY\n          description: Allow outgoing traffic to members of the same security group\n          fromPort: 0\n          toPort: 65535\n          v4CidrBlocks:\n            - 0.0.0.0/0\n```\n\n{{% /example %}}\n{{% /examples %}}\n## Greenplum cluster settings\n\n| Setting name and type \\ Greenplum version | 6.17 | 6.19 |\n| ------------------------------------------| ---- | ---- |\n| max_connections : integer | supported | supported |\n| max_prepared_transactions : integer | supported | supported |\n| gp_workfile_limit_per_query : integer | supported | supported |\n| gp_workfile_limit_files_per_query : integer | supported | supported |\n| max_slot_wal_keep_size : integer | supported | supported |\n| gp_workfile_limit_per_segment : integer | supported | supported |\n| gp_workfile_compression : boolean | supported | supported |\n| max_statement_mem : integer | - | supported |\n| log_statement : one of\u003cbr\u003e  - 0: \" LOG_STATEMENT_UNSPECIFIED\"\u003cbr\u003e  - 1: \" LOG_STATEMENT_NONE\"\u003cbr\u003e  - 2: \" LOG_STATEMENT_DDL\"\u003cer\u003e  - 3: \" LOG_STATEMENT_MOD\"\u003cbr\u003e  - 4: \" LOG_STATEMENT_ALL\"  | - | supported |\n\n\n## Import\n\nA cluster can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/mdbGreenplumCluster:MdbGreenplumCluster foo cluster_id\n```\n\n ",
            "properties": {
                "access": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterAccess:MdbGreenplumClusterAccess",
                    "description": "Access policy to the Greenplum cluster. The structure is documented below.\n"
                },
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.\n"
                },
                "backupWindowStart": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterBackupWindowStart:MdbGreenplumClusterBackupWindowStart",
                    "description": "Time to start the daily backup, in the UTC timezone. The structure is documented below.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the cluster.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Greenplum cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "greenplumConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Greenplum cluster config. Detail info in \"Greenplum cluster settings\" section (documented below).\n"
                },
                "health": {
                    "type": "string",
                    "description": "Aggregated health of the cluster.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Greenplum cluster.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterMaintenanceWindow:MdbGreenplumClusterMaintenanceWindow",
                    "description": "Maintenance policy of the Greenplum cluster. The structure is documented below.\n"
                },
                "masterHostCount": {
                    "type": "number",
                    "description": "Number of hosts in master subcluster (1 or 2).\n"
                },
                "masterHosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbGreenplumClusterMasterHost:MdbGreenplumClusterMasterHost"
                    },
                    "description": "(Computed) Info about hosts in master subcluster. The structure is documented below.\n"
                },
                "masterSubcluster": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterMasterSubcluster:MdbGreenplumClusterMasterSubcluster",
                    "description": "Settings for master subcluster. The structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Greenplum cluster. Provided by the client when the cluster is created.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the Greenplum cluster uses.\n"
                },
                "poolerConfig": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterPoolerConfig:MdbGreenplumClusterPoolerConfig",
                    "description": "Configuration of the connection pooler. The structure is documented below.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                },
                "segmentHostCount": {
                    "type": "number",
                    "description": "Number of hosts in segment subcluster (from 1 to 32).\n"
                },
                "segmentHosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbGreenplumClusterSegmentHost:MdbGreenplumClusterSegmentHost"
                    },
                    "description": "(Computed) Info about hosts in segment subcluster. The structure is documented below.\n"
                },
                "segmentInHost": {
                    "type": "number",
                    "description": "Number of segments on segment host (not more then 1 + RAM/8).\n"
                },
                "segmentSubcluster": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterSegmentSubcluster:MdbGreenplumClusterSegmentSubcluster",
                    "description": "Settings for segment subcluster. The structure is documented below.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the cluster.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterTimeouts:MdbGreenplumClusterTimeouts"
                },
                "userName": {
                    "type": "string",
                    "description": "Greenplum cluster admin user name.\n"
                },
                "userPassword": {
                    "type": "string",
                    "description": "Greenplum cluster admin password name.\n",
                    "secret": true
                },
                "version": {
                    "type": "string",
                    "description": "Version of the Greenplum cluster. (6.19)\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the Greenplum hosts will be created.\n"
                }
            },
            "required": [
                "assignPublicIp",
                "createdAt",
                "deletionProtection",
                "environment",
                "folderId",
                "greenplumConfig",
                "health",
                "masterHostCount",
                "masterHosts",
                "masterSubcluster",
                "name",
                "networkId",
                "segmentHostCount",
                "segmentHosts",
                "segmentInHost",
                "segmentSubcluster",
                "status",
                "subnetId",
                "timeouts",
                "userName",
                "userPassword",
                "version",
                "zone"
            ],
            "inputProperties": {
                "access": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterAccess:MdbGreenplumClusterAccess",
                    "description": "Access policy to the Greenplum cluster. The structure is documented below.\n"
                },
                "assignPublicIp": {
                    "type": "boolean",
                    "description": "Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.\n"
                },
                "backupWindowStart": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterBackupWindowStart:MdbGreenplumClusterBackupWindowStart",
                    "description": "Time to start the daily backup, in the UTC timezone. The structure is documented below.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Greenplum cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "greenplumConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Greenplum cluster config. Detail info in \"Greenplum cluster settings\" section (documented below).\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Greenplum cluster.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterMaintenanceWindow:MdbGreenplumClusterMaintenanceWindow",
                    "description": "Maintenance policy of the Greenplum cluster. The structure is documented below.\n"
                },
                "masterHostCount": {
                    "type": "number",
                    "description": "Number of hosts in master subcluster (1 or 2).\n"
                },
                "masterSubcluster": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterMasterSubcluster:MdbGreenplumClusterMasterSubcluster",
                    "description": "Settings for master subcluster. The structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Greenplum cluster. Provided by the client when the cluster is created.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the Greenplum cluster uses.\n"
                },
                "poolerConfig": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterPoolerConfig:MdbGreenplumClusterPoolerConfig",
                    "description": "Configuration of the connection pooler. The structure is documented below.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                },
                "segmentHostCount": {
                    "type": "number",
                    "description": "Number of hosts in segment subcluster (from 1 to 32).\n"
                },
                "segmentInHost": {
                    "type": "number",
                    "description": "Number of segments on segment host (not more then 1 + RAM/8).\n"
                },
                "segmentSubcluster": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterSegmentSubcluster:MdbGreenplumClusterSegmentSubcluster",
                    "description": "Settings for segment subcluster. The structure is documented below.\n"
                },
                "subnetId": {
                    "type": "string",
                    "description": "The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbGreenplumClusterTimeouts:MdbGreenplumClusterTimeouts"
                },
                "userName": {
                    "type": "string",
                    "description": "Greenplum cluster admin user name.\n"
                },
                "userPassword": {
                    "type": "string",
                    "description": "Greenplum cluster admin password name.\n",
                    "secret": true
                },
                "version": {
                    "type": "string",
                    "description": "Version of the Greenplum cluster. (6.19)\n"
                },
                "zone": {
                    "type": "string",
                    "description": "The availability zone where the Greenplum hosts will be created.\n"
                }
            },
            "requiredInputs": [
                "assignPublicIp",
                "environment",
                "masterHostCount",
                "masterSubcluster",
                "networkId",
                "segmentHostCount",
                "segmentInHost",
                "segmentSubcluster",
                "subnetId",
                "timeouts",
                "userName",
                "userPassword",
                "version",
                "zone"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbGreenplumCluster resources.\n",
                "properties": {
                    "access": {
                        "$ref": "#/types/yandex:index/MdbGreenplumClusterAccess:MdbGreenplumClusterAccess",
                        "description": "Access policy to the Greenplum cluster. The structure is documented below.\n"
                    },
                    "assignPublicIp": {
                        "type": "boolean",
                        "description": "Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.\n"
                    },
                    "backupWindowStart": {
                        "$ref": "#/types/yandex:index/MdbGreenplumClusterBackupWindowStart:MdbGreenplumClusterBackupWindowStart",
                        "description": "Time to start the daily backup, in the UTC timezone. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the cluster.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Greenplum cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the Greenplum cluster. (PRODUCTION, PRESTABLE)\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                    },
                    "greenplumConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Greenplum cluster config. Detail info in \"Greenplum cluster settings\" section (documented below).\n"
                    },
                    "health": {
                        "type": "string",
                        "description": "Aggregated health of the cluster.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Greenplum cluster.\n"
                    },
                    "maintenanceWindow": {
                        "$ref": "#/types/yandex:index/MdbGreenplumClusterMaintenanceWindow:MdbGreenplumClusterMaintenanceWindow",
                        "description": "Maintenance policy of the Greenplum cluster. The structure is documented below.\n"
                    },
                    "masterHostCount": {
                        "type": "number",
                        "description": "Number of hosts in master subcluster (1 or 2).\n"
                    },
                    "masterHosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbGreenplumClusterMasterHost:MdbGreenplumClusterMasterHost"
                        },
                        "description": "(Computed) Info about hosts in master subcluster. The structure is documented below.\n"
                    },
                    "masterSubcluster": {
                        "$ref": "#/types/yandex:index/MdbGreenplumClusterMasterSubcluster:MdbGreenplumClusterMasterSubcluster",
                        "description": "Settings for master subcluster. The structure is documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Greenplum cluster. Provided by the client when the cluster is created.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the Greenplum cluster uses.\n"
                    },
                    "poolerConfig": {
                        "$ref": "#/types/yandex:index/MdbGreenplumClusterPoolerConfig:MdbGreenplumClusterPoolerConfig",
                        "description": "Configuration of the connection pooler. The structure is documented below.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "segmentHostCount": {
                        "type": "number",
                        "description": "Number of hosts in segment subcluster (from 1 to 32).\n"
                    },
                    "segmentHosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbGreenplumClusterSegmentHost:MdbGreenplumClusterSegmentHost"
                        },
                        "description": "(Computed) Info about hosts in segment subcluster. The structure is documented below.\n"
                    },
                    "segmentInHost": {
                        "type": "number",
                        "description": "Number of segments on segment host (not more then 1 + RAM/8).\n"
                    },
                    "segmentSubcluster": {
                        "$ref": "#/types/yandex:index/MdbGreenplumClusterSegmentSubcluster:MdbGreenplumClusterSegmentSubcluster",
                        "description": "Settings for segment subcluster. The structure is documented below.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/MdbGreenplumClusterTimeouts:MdbGreenplumClusterTimeouts"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Greenplum cluster admin user name.\n"
                    },
                    "userPassword": {
                        "type": "string",
                        "description": "Greenplum cluster admin password name.\n",
                        "secret": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the Greenplum cluster. (6.19)\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The availability zone where the Greenplum hosts will be created.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbKafkaCluster:MdbKafkaCluster": {
            "description": "Manages a Kafka cluster within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-kafka/concepts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nExample of creating a Single Node Kafka.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"foo\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"foo\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.5.0.0/24\"],\n    zone: \"ru-central1-a\",\n});\nconst fooMdbKafkaCluster = new yandex.MdbKafkaCluster(\"foo\", {\n    config: {\n        assignPublicIp: false,\n        brokersCount: 1,\n        kafka: {\n            kafkaConfig: {\n                compressionType: \"COMPRESSION_TYPE_ZSTD\",\n                defaultReplicationFactor: \"1\",\n                logFlushIntervalMessages: \"1024\",\n                logFlushIntervalMs: \"1000\",\n                logFlushSchedulerIntervalMs: \"1000\",\n                logPreallocate: true,\n                logRetentionBytes: \"1.073741824e+09\",\n                logRetentionHours: \"168\",\n                logRetentionMinutes: \"10080\",\n                logRetentionMs: \"8.64e+07\",\n                logSegmentBytes: \"1.34217728e+08\",\n                messageMaxBytes: \"1.048588e+06\",\n                numPartitions: \"10\",\n                offsetsRetentionMinutes: \"10080\",\n                replicaFetchMaxBytes: \"1.048576e+06\",\n                sslCipherSuites: [\n                    \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n                    \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\n                ],\n            },\n            resources: {\n                diskSize: 32,\n                diskTypeId: \"network-ssd\",\n                resourcePresetId: \"s2.micro\",\n            },\n        },\n        schemaRegistry: false,\n        unmanagedTopics: false,\n        version: \"2.8\",\n        zones: [\"ru-central1-a\"],\n    },\n    environment: \"PRESTABLE\",\n    networkId: fooVpcNetwork.id,\n    subnetIds: [fooVpcSubnet.id],\n    users: [\n        {\n            name: \"producer-application\",\n            password: \"password\",\n            permissions: [{\n                role: \"ACCESS_ROLE_PRODUCER\",\n                topicName: \"input\",\n            }],\n        },\n        {\n            name: \"worker\",\n            password: \"password\",\n            permissions: [\n                {\n                    role: \"ACCESS_ROLE_CONSUMER\",\n                    topicName: \"input\",\n                },\n                {\n                    role: \"ACCESS_ROLE_PRODUCER\",\n                    topicName: \"output\",\n                },\n            ],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.5.0.0/24\"],\n    zone=\"ru-central1-a\")\nfoo_mdb_kafka_cluster = yandex.MdbKafkaCluster(\"fooMdbKafkaCluster\",\n    config=yandex.MdbKafkaClusterConfigArgs(\n        assign_public_ip=False,\n        brokers_count=1,\n        kafka=yandex.MdbKafkaClusterConfigKafkaArgs(\n            kafka_config=yandex.MdbKafkaClusterConfigKafkaKafkaConfigArgs(\n                compression_type=\"COMPRESSION_TYPE_ZSTD\",\n                default_replication_factor=\"1\",\n                log_flush_interval_messages=\"1024\",\n                log_flush_interval_ms=\"1000\",\n                log_flush_scheduler_interval_ms=\"1000\",\n                log_preallocate=True,\n                log_retention_bytes=\"1073741824\",\n                log_retention_hours=\"168\",\n                log_retention_minutes=\"10080\",\n                log_retention_ms=\"86400000\",\n                log_segment_bytes=\"134217728\",\n                message_max_bytes=\"1048588\",\n                num_partitions=\"10\",\n                offsets_retention_minutes=\"10080\",\n                replica_fetch_max_bytes=\"1048576\",\n                ssl_cipher_suites=[\n                    \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n                    \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\n                ],\n            ),\n            resources=yandex.MdbKafkaClusterConfigKafkaResourcesArgs(\n                disk_size=32,\n                disk_type_id=\"network-ssd\",\n                resource_preset_id=\"s2.micro\",\n            ),\n        ),\n        schema_registry=False,\n        unmanaged_topics=False,\n        version=\"2.8\",\n        zones=[\"ru-central1-a\"],\n    ),\n    environment=\"PRESTABLE\",\n    network_id=foo_vpc_network.id,\n    subnet_ids=[foo_vpc_subnet.id],\n    users=[\n        yandex.MdbKafkaClusterUserArgs(\n            name=\"producer-application\",\n            password=\"password\",\n            permissions=[yandex.MdbKafkaClusterUserPermissionArgs(\n                role=\"ACCESS_ROLE_PRODUCER\",\n                topic_name=\"input\",\n            )],\n        ),\n        yandex.MdbKafkaClusterUserArgs(\n            name=\"worker\",\n            password=\"password\",\n            permissions=[\n                yandex.MdbKafkaClusterUserPermissionArgs(\n                    role=\"ACCESS_ROLE_CONSUMER\",\n                    topic_name=\"input\",\n                ),\n                yandex.MdbKafkaClusterUserPermissionArgs(\n                    role=\"ACCESS_ROLE_PRODUCER\",\n                    topic_name=\"output\",\n                ),\n            ],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.5.0.0/24\",\n        },\n        Zone = \"ru-central1-a\",\n    });\n\n    var fooMdbKafkaCluster = new Yandex.MdbKafkaCluster(\"fooMdbKafkaCluster\", new()\n    {\n        Config = new Yandex.Inputs.MdbKafkaClusterConfigArgs\n        {\n            AssignPublicIp = false,\n            BrokersCount = 1,\n            Kafka = new Yandex.Inputs.MdbKafkaClusterConfigKafkaArgs\n            {\n                KafkaConfig = new Yandex.Inputs.MdbKafkaClusterConfigKafkaKafkaConfigArgs\n                {\n                    CompressionType = \"COMPRESSION_TYPE_ZSTD\",\n                    DefaultReplicationFactor = \"1\",\n                    LogFlushIntervalMessages = \"1024\",\n                    LogFlushIntervalMs = \"1000\",\n                    LogFlushSchedulerIntervalMs = \"1000\",\n                    LogPreallocate = true,\n                    LogRetentionBytes = \"1073741824\",\n                    LogRetentionHours = \"168\",\n                    LogRetentionMinutes = \"10080\",\n                    LogRetentionMs = \"86400000\",\n                    LogSegmentBytes = \"134217728\",\n                    MessageMaxBytes = \"1048588\",\n                    NumPartitions = \"10\",\n                    OffsetsRetentionMinutes = \"10080\",\n                    ReplicaFetchMaxBytes = \"1048576\",\n                    SslCipherSuites = new[]\n                    {\n                        \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n                        \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\n                    },\n                },\n                Resources = new Yandex.Inputs.MdbKafkaClusterConfigKafkaResourcesArgs\n                {\n                    DiskSize = 32,\n                    DiskTypeId = \"network-ssd\",\n                    ResourcePresetId = \"s2.micro\",\n                },\n            },\n            SchemaRegistry = false,\n            UnmanagedTopics = false,\n            Version = \"2.8\",\n            Zones = new[]\n            {\n                \"ru-central1-a\",\n            },\n        },\n        Environment = \"PRESTABLE\",\n        NetworkId = fooVpcNetwork.Id,\n        SubnetIds = new[]\n        {\n            fooVpcSubnet.Id,\n        },\n        Users = new[]\n        {\n            new Yandex.Inputs.MdbKafkaClusterUserArgs\n            {\n                Name = \"producer-application\",\n                Password = \"password\",\n                Permissions = new[]\n                {\n                    new Yandex.Inputs.MdbKafkaClusterUserPermissionArgs\n                    {\n                        Role = \"ACCESS_ROLE_PRODUCER\",\n                        TopicName = \"input\",\n                    },\n                },\n            },\n            new Yandex.Inputs.MdbKafkaClusterUserArgs\n            {\n                Name = \"worker\",\n                Password = \"password\",\n                Permissions = new[]\n                {\n                    new Yandex.Inputs.MdbKafkaClusterUserPermissionArgs\n                    {\n                        Role = \"ACCESS_ROLE_CONSUMER\",\n                        TopicName = \"input\",\n                    },\n                    new Yandex.Inputs.MdbKafkaClusterUserPermissionArgs\n                    {\n                        Role = \"ACCESS_ROLE_PRODUCER\",\n                        TopicName = \"output\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.5.0.0/24\"),\n\t\t\t},\n\t\t\tZone: pulumi.String(\"ru-central1-a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbKafkaCluster(ctx, \"fooMdbKafkaCluster\", \u0026yandex.MdbKafkaClusterArgs{\n\t\t\tConfig: \u0026MdbKafkaClusterConfigArgs{\n\t\t\t\tAssignPublicIp: pulumi.Bool(false),\n\t\t\t\tBrokersCount:   pulumi.Float64(1),\n\t\t\t\tKafka: \u0026MdbKafkaClusterConfigKafkaArgs{\n\t\t\t\t\tKafkaConfig: \u0026MdbKafkaClusterConfigKafkaKafkaConfigArgs{\n\t\t\t\t\t\tCompressionType:             pulumi.String(\"COMPRESSION_TYPE_ZSTD\"),\n\t\t\t\t\t\tDefaultReplicationFactor:    pulumi.String(\"1\"),\n\t\t\t\t\t\tLogFlushIntervalMessages:    pulumi.String(\"1024\"),\n\t\t\t\t\t\tLogFlushIntervalMs:          pulumi.String(\"1000\"),\n\t\t\t\t\t\tLogFlushSchedulerIntervalMs: pulumi.String(\"1000\"),\n\t\t\t\t\t\tLogPreallocate:              pulumi.Bool(true),\n\t\t\t\t\t\tLogRetentionBytes:           pulumi.String(\"1073741824\"),\n\t\t\t\t\t\tLogRetentionHours:           pulumi.String(\"168\"),\n\t\t\t\t\t\tLogRetentionMinutes:         pulumi.String(\"10080\"),\n\t\t\t\t\t\tLogRetentionMs:              pulumi.String(\"86400000\"),\n\t\t\t\t\t\tLogSegmentBytes:             pulumi.String(\"134217728\"),\n\t\t\t\t\t\tMessageMaxBytes:             pulumi.String(\"1048588\"),\n\t\t\t\t\t\tNumPartitions:               pulumi.String(\"10\"),\n\t\t\t\t\t\tOffsetsRetentionMinutes:     pulumi.String(\"10080\"),\n\t\t\t\t\t\tReplicaFetchMaxBytes:        pulumi.String(\"1048576\"),\n\t\t\t\t\t\tSslCipherSuites: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\"),\n\t\t\t\t\t\t\tpulumi.String(\"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tResources: \u0026MdbKafkaClusterConfigKafkaResourcesArgs{\n\t\t\t\t\t\tDiskSize:         pulumi.Float64(32),\n\t\t\t\t\t\tDiskTypeId:       pulumi.String(\"network-ssd\"),\n\t\t\t\t\t\tResourcePresetId: pulumi.String(\"s2.micro\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSchemaRegistry:  pulumi.Bool(false),\n\t\t\t\tUnmanagedTopics: pulumi.Bool(false),\n\t\t\t\tVersion:         pulumi.String(\"2.8\"),\n\t\t\t\tZones: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ru-central1-a\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tNetworkId:   fooVpcNetwork.ID(),\n\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\tfooVpcSubnet.ID(),\n\t\t\t},\n\t\t\tUsers: MdbKafkaClusterUserArray{\n\t\t\t\t\u0026MdbKafkaClusterUserArgs{\n\t\t\t\t\tName:     pulumi.String(\"producer-application\"),\n\t\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t\t\tPermissions: MdbKafkaClusterUserPermissionArray{\n\t\t\t\t\t\t\u0026MdbKafkaClusterUserPermissionArgs{\n\t\t\t\t\t\t\tRole:      pulumi.String(\"ACCESS_ROLE_PRODUCER\"),\n\t\t\t\t\t\t\tTopicName: pulumi.String(\"input\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026MdbKafkaClusterUserArgs{\n\t\t\t\t\tName:     pulumi.String(\"worker\"),\n\t\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t\t\tPermissions: MdbKafkaClusterUserPermissionArray{\n\t\t\t\t\t\t\u0026MdbKafkaClusterUserPermissionArgs{\n\t\t\t\t\t\t\tRole:      pulumi.String(\"ACCESS_ROLE_CONSUMER\"),\n\t\t\t\t\t\t\tTopicName: pulumi.String(\"input\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026MdbKafkaClusterUserPermissionArgs{\n\t\t\t\t\t\t\tRole:      pulumi.String(\"ACCESS_ROLE_PRODUCER\"),\n\t\t\t\t\t\t\tTopicName: pulumi.String(\"output\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbKafkaCluster;\nimport com.pulumi.yandex.MdbKafkaClusterArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterConfigArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterConfigKafkaArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterConfigKafkaKafkaConfigArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterConfigKafkaResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.5.0.0/24\")\n            .zone(\"ru-central1-a\")\n            .build());\n\n        var fooMdbKafkaCluster = new MdbKafkaCluster(\"fooMdbKafkaCluster\", MdbKafkaClusterArgs.builder()        \n            .config(MdbKafkaClusterConfigArgs.builder()\n                .assignPublicIp(false)\n                .brokersCount(1)\n                .kafka(MdbKafkaClusterConfigKafkaArgs.builder()\n                    .kafkaConfig(MdbKafkaClusterConfigKafkaKafkaConfigArgs.builder()\n                        .compressionType(\"COMPRESSION_TYPE_ZSTD\")\n                        .defaultReplicationFactor(1)\n                        .logFlushIntervalMessages(1024)\n                        .logFlushIntervalMs(1000)\n                        .logFlushSchedulerIntervalMs(1000)\n                        .logPreallocate(true)\n                        .logRetentionBytes(1073741824)\n                        .logRetentionHours(168)\n                        .logRetentionMinutes(10080)\n                        .logRetentionMs(86400000)\n                        .logSegmentBytes(134217728)\n                        .messageMaxBytes(1048588)\n                        .numPartitions(10)\n                        .offsetsRetentionMinutes(10080)\n                        .replicaFetchMaxBytes(1048576)\n                        .sslCipherSuites(                        \n                            \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n                            \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\")\n                        .build())\n                    .resources(MdbKafkaClusterConfigKafkaResourcesArgs.builder()\n                        .diskSize(32)\n                        .diskTypeId(\"network-ssd\")\n                        .resourcePresetId(\"s2.micro\")\n                        .build())\n                    .build())\n                .schemaRegistry(false)\n                .unmanagedTopics(false)\n                .version(\"2.8\")\n                .zones(\"ru-central1-a\")\n                .build())\n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .subnetIds(fooVpcSubnet.id())\n            .users(            \n                MdbKafkaClusterUserArgs.builder()\n                    .name(\"producer-application\")\n                    .password(\"password\")\n                    .permissions(MdbKafkaClusterUserPermissionArgs.builder()\n                        .role(\"ACCESS_ROLE_PRODUCER\")\n                        .topicName(\"input\")\n                        .build())\n                    .build(),\n                MdbKafkaClusterUserArgs.builder()\n                    .name(\"worker\")\n                    .password(\"password\")\n                    .permissions(                    \n                        MdbKafkaClusterUserPermissionArgs.builder()\n                            .role(\"ACCESS_ROLE_CONSUMER\")\n                            .topicName(\"input\")\n                            .build(),\n                        MdbKafkaClusterUserPermissionArgs.builder()\n                            .role(\"ACCESS_ROLE_PRODUCER\")\n                            .topicName(\"output\")\n                            .build())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbKafkaCluster:\n    type: yandex:MdbKafkaCluster\n    properties:\n      config:\n        assignPublicIp: false\n        brokersCount: 1\n        kafka:\n          kafkaConfig:\n            compressionType: COMPRESSION_TYPE_ZSTD\n            defaultReplicationFactor: 1\n            logFlushIntervalMessages: 1024\n            logFlushIntervalMs: 1000\n            logFlushSchedulerIntervalMs: 1000\n            logPreallocate: true\n            logRetentionBytes: 1.073741824e+09\n            logRetentionHours: 168\n            logRetentionMinutes: 10080\n            logRetentionMs: 8.64e+07\n            logSegmentBytes: 1.34217728e+08\n            messageMaxBytes: 1.048588e+06\n            numPartitions: 10\n            offsetsRetentionMinutes: 10080\n            replicaFetchMaxBytes: 1.048576e+06\n            sslCipherSuites:\n              - TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n              - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n          resources:\n            diskSize: 32\n            diskTypeId: network-ssd\n            resourcePresetId: s2.micro\n        schemaRegistry: false\n        unmanagedTopics: false\n        version: '2.8'\n        zones:\n          - ru-central1-a\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      subnetIds:\n        - ${fooVpcSubnet.id}\n      users:\n        - name: producer-application\n          password: password\n          permissions:\n            - role: ACCESS_ROLE_PRODUCER\n              topicName: input\n        - name: worker\n          password: password\n          permissions:\n            - role: ACCESS_ROLE_CONSUMER\n              topicName: input\n            - role: ACCESS_ROLE_PRODUCER\n              topicName: output\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.5.0.0/24\n      zone: ru-central1-a\n```\n\nExample of creating a HA Kafka Cluster with two brokers per AZ (6 brokers + 3 zk)\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"foo\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"foo\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.1.0.0/24\"],\n    zone: \"ru-central1-a\",\n});\nconst bar = new yandex.VpcSubnet(\"bar\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.2.0.0/24\"],\n    zone: \"ru-central1-b\",\n});\nconst baz = new yandex.VpcSubnet(\"baz\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.3.0.0/24\"],\n    zone: \"ru-central1-c\",\n});\nconst fooMdbKafkaCluster = new yandex.MdbKafkaCluster(\"foo\", {\n    config: {\n        assignPublicIp: true,\n        brokersCount: 2,\n        kafka: {\n            kafkaConfig: {\n                compressionType: \"COMPRESSION_TYPE_ZSTD\",\n                defaultReplicationFactor: \"6\",\n                logFlushIntervalMessages: \"1024\",\n                logFlushIntervalMs: \"1000\",\n                logFlushSchedulerIntervalMs: \"1000\",\n                logPreallocate: true,\n                logRetentionBytes: \"1.073741824e+09\",\n                logRetentionHours: \"168\",\n                logRetentionMinutes: \"10080\",\n                logRetentionMs: \"8.64e+07\",\n                logSegmentBytes: \"1.34217728e+08\",\n                messageMaxBytes: \"1.048588e+06\",\n                numPartitions: \"10\",\n                offsetsRetentionMinutes: \"10080\",\n                replicaFetchMaxBytes: \"1.048576e+06\",\n                sslCipherSuites: [\n                    \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n                    \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\n                ],\n            },\n            resources: {\n                diskSize: 128,\n                diskTypeId: \"network-ssd\",\n                resourcePresetId: \"s2.medium\",\n            },\n        },\n        schemaRegistry: false,\n        unmanagedTopics: false,\n        version: \"2.8\",\n        zones: [\n            \"ru-central1-a\",\n            \"ru-central1-b\",\n            \"ru-central1-c\",\n        ],\n        zookeeper: {\n            resources: {\n                diskSize: 20,\n                diskTypeId: \"network-ssd\",\n                resourcePresetId: \"s2.micro\",\n            },\n        },\n    },\n    environment: \"PRESTABLE\",\n    networkId: fooVpcNetwork.id,\n    subnetIds: [\n        fooVpcSubnet.id,\n        bar.id,\n        baz.id,\n    ],\n    users: [\n        {\n            name: \"producer-application\",\n            password: \"password\",\n            permissions: [{\n                role: \"ACCESS_ROLE_PRODUCER\",\n                topicName: \"input\",\n            }],\n        },\n        {\n            name: \"worker\",\n            password: \"password\",\n            permissions: [\n                {\n                    role: \"ACCESS_ROLE_CONSUMER\",\n                    topicName: \"input\",\n                },\n                {\n                    role: \"ACCESS_ROLE_PRODUCER\",\n                    topicName: \"output\",\n                },\n            ],\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.1.0.0/24\"],\n    zone=\"ru-central1-a\")\nbar = yandex.VpcSubnet(\"bar\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.2.0.0/24\"],\n    zone=\"ru-central1-b\")\nbaz = yandex.VpcSubnet(\"baz\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.3.0.0/24\"],\n    zone=\"ru-central1-c\")\nfoo_mdb_kafka_cluster = yandex.MdbKafkaCluster(\"fooMdbKafkaCluster\",\n    config=yandex.MdbKafkaClusterConfigArgs(\n        assign_public_ip=True,\n        brokers_count=2,\n        kafka=yandex.MdbKafkaClusterConfigKafkaArgs(\n            kafka_config=yandex.MdbKafkaClusterConfigKafkaKafkaConfigArgs(\n                compression_type=\"COMPRESSION_TYPE_ZSTD\",\n                default_replication_factor=\"6\",\n                log_flush_interval_messages=\"1024\",\n                log_flush_interval_ms=\"1000\",\n                log_flush_scheduler_interval_ms=\"1000\",\n                log_preallocate=True,\n                log_retention_bytes=\"1073741824\",\n                log_retention_hours=\"168\",\n                log_retention_minutes=\"10080\",\n                log_retention_ms=\"86400000\",\n                log_segment_bytes=\"134217728\",\n                message_max_bytes=\"1048588\",\n                num_partitions=\"10\",\n                offsets_retention_minutes=\"10080\",\n                replica_fetch_max_bytes=\"1048576\",\n                ssl_cipher_suites=[\n                    \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n                    \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\n                ],\n            ),\n            resources=yandex.MdbKafkaClusterConfigKafkaResourcesArgs(\n                disk_size=128,\n                disk_type_id=\"network-ssd\",\n                resource_preset_id=\"s2.medium\",\n            ),\n        ),\n        schema_registry=False,\n        unmanaged_topics=False,\n        version=\"2.8\",\n        zones=[\n            \"ru-central1-a\",\n            \"ru-central1-b\",\n            \"ru-central1-c\",\n        ],\n        zookeeper=yandex.MdbKafkaClusterConfigZookeeperArgs(\n            resources=yandex.MdbKafkaClusterConfigZookeeperResourcesArgs(\n                disk_size=20,\n                disk_type_id=\"network-ssd\",\n                resource_preset_id=\"s2.micro\",\n            ),\n        ),\n    ),\n    environment=\"PRESTABLE\",\n    network_id=foo_vpc_network.id,\n    subnet_ids=[\n        foo_vpc_subnet.id,\n        bar.id,\n        baz.id,\n    ],\n    users=[\n        yandex.MdbKafkaClusterUserArgs(\n            name=\"producer-application\",\n            password=\"password\",\n            permissions=[yandex.MdbKafkaClusterUserPermissionArgs(\n                role=\"ACCESS_ROLE_PRODUCER\",\n                topic_name=\"input\",\n            )],\n        ),\n        yandex.MdbKafkaClusterUserArgs(\n            name=\"worker\",\n            password=\"password\",\n            permissions=[\n                yandex.MdbKafkaClusterUserPermissionArgs(\n                    role=\"ACCESS_ROLE_CONSUMER\",\n                    topic_name=\"input\",\n                ),\n                yandex.MdbKafkaClusterUserPermissionArgs(\n                    role=\"ACCESS_ROLE_PRODUCER\",\n                    topic_name=\"output\",\n                ),\n            ],\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.1.0.0/24\",\n        },\n        Zone = \"ru-central1-a\",\n    });\n\n    var bar = new Yandex.VpcSubnet(\"bar\", new()\n    {\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.2.0.0/24\",\n        },\n        Zone = \"ru-central1-b\",\n    });\n\n    var baz = new Yandex.VpcSubnet(\"baz\", new()\n    {\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.3.0.0/24\",\n        },\n        Zone = \"ru-central1-c\",\n    });\n\n    var fooMdbKafkaCluster = new Yandex.MdbKafkaCluster(\"fooMdbKafkaCluster\", new()\n    {\n        Config = new Yandex.Inputs.MdbKafkaClusterConfigArgs\n        {\n            AssignPublicIp = true,\n            BrokersCount = 2,\n            Kafka = new Yandex.Inputs.MdbKafkaClusterConfigKafkaArgs\n            {\n                KafkaConfig = new Yandex.Inputs.MdbKafkaClusterConfigKafkaKafkaConfigArgs\n                {\n                    CompressionType = \"COMPRESSION_TYPE_ZSTD\",\n                    DefaultReplicationFactor = \"6\",\n                    LogFlushIntervalMessages = \"1024\",\n                    LogFlushIntervalMs = \"1000\",\n                    LogFlushSchedulerIntervalMs = \"1000\",\n                    LogPreallocate = true,\n                    LogRetentionBytes = \"1073741824\",\n                    LogRetentionHours = \"168\",\n                    LogRetentionMinutes = \"10080\",\n                    LogRetentionMs = \"86400000\",\n                    LogSegmentBytes = \"134217728\",\n                    MessageMaxBytes = \"1048588\",\n                    NumPartitions = \"10\",\n                    OffsetsRetentionMinutes = \"10080\",\n                    ReplicaFetchMaxBytes = \"1048576\",\n                    SslCipherSuites = new[]\n                    {\n                        \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n                        \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\",\n                    },\n                },\n                Resources = new Yandex.Inputs.MdbKafkaClusterConfigKafkaResourcesArgs\n                {\n                    DiskSize = 128,\n                    DiskTypeId = \"network-ssd\",\n                    ResourcePresetId = \"s2.medium\",\n                },\n            },\n            SchemaRegistry = false,\n            UnmanagedTopics = false,\n            Version = \"2.8\",\n            Zones = new[]\n            {\n                \"ru-central1-a\",\n                \"ru-central1-b\",\n                \"ru-central1-c\",\n            },\n            Zookeeper = new Yandex.Inputs.MdbKafkaClusterConfigZookeeperArgs\n            {\n                Resources = new Yandex.Inputs.MdbKafkaClusterConfigZookeeperResourcesArgs\n                {\n                    DiskSize = 20,\n                    DiskTypeId = \"network-ssd\",\n                    ResourcePresetId = \"s2.micro\",\n                },\n            },\n        },\n        Environment = \"PRESTABLE\",\n        NetworkId = fooVpcNetwork.Id,\n        SubnetIds = new[]\n        {\n            fooVpcSubnet.Id,\n            bar.Id,\n            baz.Id,\n        },\n        Users = new[]\n        {\n            new Yandex.Inputs.MdbKafkaClusterUserArgs\n            {\n                Name = \"producer-application\",\n                Password = \"password\",\n                Permissions = new[]\n                {\n                    new Yandex.Inputs.MdbKafkaClusterUserPermissionArgs\n                    {\n                        Role = \"ACCESS_ROLE_PRODUCER\",\n                        TopicName = \"input\",\n                    },\n                },\n            },\n            new Yandex.Inputs.MdbKafkaClusterUserArgs\n            {\n                Name = \"worker\",\n                Password = \"password\",\n                Permissions = new[]\n                {\n                    new Yandex.Inputs.MdbKafkaClusterUserPermissionArgs\n                    {\n                        Role = \"ACCESS_ROLE_CONSUMER\",\n                        TopicName = \"input\",\n                    },\n                    new Yandex.Inputs.MdbKafkaClusterUserPermissionArgs\n                    {\n                        Role = \"ACCESS_ROLE_PRODUCER\",\n                        TopicName = \"output\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.1.0.0/24\"),\n\t\t\t},\n\t\t\tZone: pulumi.String(\"ru-central1-a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbar, err := yandex.NewVpcSubnet(ctx, \"bar\", \u0026yandex.VpcSubnetArgs{\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.2.0.0/24\"),\n\t\t\t},\n\t\t\tZone: pulumi.String(\"ru-central1-b\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbaz, err := yandex.NewVpcSubnet(ctx, \"baz\", \u0026yandex.VpcSubnetArgs{\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.3.0.0/24\"),\n\t\t\t},\n\t\t\tZone: pulumi.String(\"ru-central1-c\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbKafkaCluster(ctx, \"fooMdbKafkaCluster\", \u0026yandex.MdbKafkaClusterArgs{\n\t\t\tConfig: \u0026MdbKafkaClusterConfigArgs{\n\t\t\t\tAssignPublicIp: pulumi.Bool(true),\n\t\t\t\tBrokersCount:   pulumi.Float64(2),\n\t\t\t\tKafka: \u0026MdbKafkaClusterConfigKafkaArgs{\n\t\t\t\t\tKafkaConfig: \u0026MdbKafkaClusterConfigKafkaKafkaConfigArgs{\n\t\t\t\t\t\tCompressionType:             pulumi.String(\"COMPRESSION_TYPE_ZSTD\"),\n\t\t\t\t\t\tDefaultReplicationFactor:    pulumi.String(\"6\"),\n\t\t\t\t\t\tLogFlushIntervalMessages:    pulumi.String(\"1024\"),\n\t\t\t\t\t\tLogFlushIntervalMs:          pulumi.String(\"1000\"),\n\t\t\t\t\t\tLogFlushSchedulerIntervalMs: pulumi.String(\"1000\"),\n\t\t\t\t\t\tLogPreallocate:              pulumi.Bool(true),\n\t\t\t\t\t\tLogRetentionBytes:           pulumi.String(\"1073741824\"),\n\t\t\t\t\t\tLogRetentionHours:           pulumi.String(\"168\"),\n\t\t\t\t\t\tLogRetentionMinutes:         pulumi.String(\"10080\"),\n\t\t\t\t\t\tLogRetentionMs:              pulumi.String(\"86400000\"),\n\t\t\t\t\t\tLogSegmentBytes:             pulumi.String(\"134217728\"),\n\t\t\t\t\t\tMessageMaxBytes:             pulumi.String(\"1048588\"),\n\t\t\t\t\t\tNumPartitions:               pulumi.String(\"10\"),\n\t\t\t\t\t\tOffsetsRetentionMinutes:     pulumi.String(\"10080\"),\n\t\t\t\t\t\tReplicaFetchMaxBytes:        pulumi.String(\"1048576\"),\n\t\t\t\t\t\tSslCipherSuites: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\"),\n\t\t\t\t\t\t\tpulumi.String(\"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tResources: \u0026MdbKafkaClusterConfigKafkaResourcesArgs{\n\t\t\t\t\t\tDiskSize:         pulumi.Float64(128),\n\t\t\t\t\t\tDiskTypeId:       pulumi.String(\"network-ssd\"),\n\t\t\t\t\t\tResourcePresetId: pulumi.String(\"s2.medium\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSchemaRegistry:  pulumi.Bool(false),\n\t\t\t\tUnmanagedTopics: pulumi.Bool(false),\n\t\t\t\tVersion:         pulumi.String(\"2.8\"),\n\t\t\t\tZones: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ru-central1-a\"),\n\t\t\t\t\tpulumi.String(\"ru-central1-b\"),\n\t\t\t\t\tpulumi.String(\"ru-central1-c\"),\n\t\t\t\t},\n\t\t\t\tZookeeper: \u0026MdbKafkaClusterConfigZookeeperArgs{\n\t\t\t\t\tResources: \u0026MdbKafkaClusterConfigZookeeperResourcesArgs{\n\t\t\t\t\t\tDiskSize:         pulumi.Float64(20),\n\t\t\t\t\t\tDiskTypeId:       pulumi.String(\"network-ssd\"),\n\t\t\t\t\t\tResourcePresetId: pulumi.String(\"s2.micro\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tNetworkId:   fooVpcNetwork.ID(),\n\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\tfooVpcSubnet.ID(),\n\t\t\t\tbar.ID(),\n\t\t\t\tbaz.ID(),\n\t\t\t},\n\t\t\tUsers: MdbKafkaClusterUserArray{\n\t\t\t\t\u0026MdbKafkaClusterUserArgs{\n\t\t\t\t\tName:     pulumi.String(\"producer-application\"),\n\t\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t\t\tPermissions: MdbKafkaClusterUserPermissionArray{\n\t\t\t\t\t\t\u0026MdbKafkaClusterUserPermissionArgs{\n\t\t\t\t\t\t\tRole:      pulumi.String(\"ACCESS_ROLE_PRODUCER\"),\n\t\t\t\t\t\t\tTopicName: pulumi.String(\"input\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026MdbKafkaClusterUserArgs{\n\t\t\t\t\tName:     pulumi.String(\"worker\"),\n\t\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t\t\tPermissions: MdbKafkaClusterUserPermissionArray{\n\t\t\t\t\t\t\u0026MdbKafkaClusterUserPermissionArgs{\n\t\t\t\t\t\t\tRole:      pulumi.String(\"ACCESS_ROLE_CONSUMER\"),\n\t\t\t\t\t\t\tTopicName: pulumi.String(\"input\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026MdbKafkaClusterUserPermissionArgs{\n\t\t\t\t\t\t\tRole:      pulumi.String(\"ACCESS_ROLE_PRODUCER\"),\n\t\t\t\t\t\t\tTopicName: pulumi.String(\"output\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbKafkaCluster;\nimport com.pulumi.yandex.MdbKafkaClusterArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterConfigArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterConfigKafkaArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterConfigKafkaKafkaConfigArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterConfigKafkaResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterConfigZookeeperArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterConfigZookeeperResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.1.0.0/24\")\n            .zone(\"ru-central1-a\")\n            .build());\n\n        var bar = new VpcSubnet(\"bar\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.2.0.0/24\")\n            .zone(\"ru-central1-b\")\n            .build());\n\n        var baz = new VpcSubnet(\"baz\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.3.0.0/24\")\n            .zone(\"ru-central1-c\")\n            .build());\n\n        var fooMdbKafkaCluster = new MdbKafkaCluster(\"fooMdbKafkaCluster\", MdbKafkaClusterArgs.builder()        \n            .config(MdbKafkaClusterConfigArgs.builder()\n                .assignPublicIp(true)\n                .brokersCount(2)\n                .kafka(MdbKafkaClusterConfigKafkaArgs.builder()\n                    .kafkaConfig(MdbKafkaClusterConfigKafkaKafkaConfigArgs.builder()\n                        .compressionType(\"COMPRESSION_TYPE_ZSTD\")\n                        .defaultReplicationFactor(6)\n                        .logFlushIntervalMessages(1024)\n                        .logFlushIntervalMs(1000)\n                        .logFlushSchedulerIntervalMs(1000)\n                        .logPreallocate(true)\n                        .logRetentionBytes(1073741824)\n                        .logRetentionHours(168)\n                        .logRetentionMinutes(10080)\n                        .logRetentionMs(86400000)\n                        .logSegmentBytes(134217728)\n                        .messageMaxBytes(1048588)\n                        .numPartitions(10)\n                        .offsetsRetentionMinutes(10080)\n                        .replicaFetchMaxBytes(1048576)\n                        .sslCipherSuites(                        \n                            \"TLS_DHE_RSA_WITH_AES_128_CBC_SHA\",\n                            \"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\")\n                        .build())\n                    .resources(MdbKafkaClusterConfigKafkaResourcesArgs.builder()\n                        .diskSize(128)\n                        .diskTypeId(\"network-ssd\")\n                        .resourcePresetId(\"s2.medium\")\n                        .build())\n                    .build())\n                .schemaRegistry(false)\n                .unmanagedTopics(false)\n                .version(\"2.8\")\n                .zones(                \n                    \"ru-central1-a\",\n                    \"ru-central1-b\",\n                    \"ru-central1-c\")\n                .zookeeper(MdbKafkaClusterConfigZookeeperArgs.builder()\n                    .resources(MdbKafkaClusterConfigZookeeperResourcesArgs.builder()\n                        .diskSize(20)\n                        .diskTypeId(\"network-ssd\")\n                        .resourcePresetId(\"s2.micro\")\n                        .build())\n                    .build())\n                .build())\n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .subnetIds(            \n                fooVpcSubnet.id(),\n                bar.id(),\n                baz.id())\n            .users(            \n                MdbKafkaClusterUserArgs.builder()\n                    .name(\"producer-application\")\n                    .password(\"password\")\n                    .permissions(MdbKafkaClusterUserPermissionArgs.builder()\n                        .role(\"ACCESS_ROLE_PRODUCER\")\n                        .topicName(\"input\")\n                        .build())\n                    .build(),\n                MdbKafkaClusterUserArgs.builder()\n                    .name(\"worker\")\n                    .password(\"password\")\n                    .permissions(                    \n                        MdbKafkaClusterUserPermissionArgs.builder()\n                            .role(\"ACCESS_ROLE_CONSUMER\")\n                            .topicName(\"input\")\n                            .build(),\n                        MdbKafkaClusterUserPermissionArgs.builder()\n                            .role(\"ACCESS_ROLE_PRODUCER\")\n                            .topicName(\"output\")\n                            .build())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbKafkaCluster:\n    type: yandex:MdbKafkaCluster\n    properties:\n      config:\n        assignPublicIp: true\n        brokersCount: 2\n        kafka:\n          kafkaConfig:\n            compressionType: COMPRESSION_TYPE_ZSTD\n            defaultReplicationFactor: 6\n            logFlushIntervalMessages: 1024\n            logFlushIntervalMs: 1000\n            logFlushSchedulerIntervalMs: 1000\n            logPreallocate: true\n            logRetentionBytes: 1.073741824e+09\n            logRetentionHours: 168\n            logRetentionMinutes: 10080\n            logRetentionMs: 8.64e+07\n            logSegmentBytes: 1.34217728e+08\n            messageMaxBytes: 1.048588e+06\n            numPartitions: 10\n            offsetsRetentionMinutes: 10080\n            replicaFetchMaxBytes: 1.048576e+06\n            sslCipherSuites:\n              - TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n              - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n          resources:\n            diskSize: 128\n            diskTypeId: network-ssd\n            resourcePresetId: s2.medium\n        schemaRegistry: false\n        unmanagedTopics: false\n        version: '2.8'\n        zones:\n          - ru-central1-a\n          - ru-central1-b\n          - ru-central1-c\n        zookeeper:\n          resources:\n            diskSize: 20\n            diskTypeId: network-ssd\n            resourcePresetId: s2.micro\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      subnetIds:\n        - ${fooVpcSubnet.id}\n        - ${bar.id}\n        - ${baz.id}\n      users:\n        - name: producer-application\n          password: password\n          permissions:\n            - role: ACCESS_ROLE_PRODUCER\n              topicName: input\n        - name: worker\n          password: password\n          permissions:\n            - role: ACCESS_ROLE_CONSUMER\n              topicName: input\n            - role: ACCESS_ROLE_PRODUCER\n              topicName: output\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.1.0.0/24\n      zone: ru-central1-a\n  bar:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.2.0.0/24\n      zone: ru-central1-b\n  baz:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.3.0.0/24\n      zone: ru-central1-c\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA cluster can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/mdbKafkaCluster:MdbKafkaCluster foo cluster_id\n```\n\n ",
            "properties": {
                "config": {
                    "$ref": "#/types/yandex:index/MdbKafkaClusterConfig:MdbKafkaClusterConfig",
                    "description": "Configuration of the Kafka cluster. The structure is documented below.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of cluster creation.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Kafka cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the Kafka cluster. Can be either `PRESTABLE` or `PRODUCTION`. \nThe default is `PRODUCTION`.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.\n"
                },
                "health": {
                    "type": "string",
                    "description": "Health of the host.\n"
                },
                "hostGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IDs of the host groups to place VMs of the cluster on.\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaClusterHost:MdbKafkaClusterHost"
                    },
                    "description": "A host of the Kafka cluster. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Kafka cluster.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbKafkaClusterMaintenanceWindow:MdbKafkaClusterMaintenanceWindow",
                    "description": "Maintenance policy of the Kafka cluster. The structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the topic.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the Kafka cluster belongs.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Security group ids, to which the Kafka cluster belongs.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.\nFor more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-kafka/api-ref/Cluster/).\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the subnets, to which the Kafka cluster belongs.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbKafkaClusterTimeouts:MdbKafkaClusterTimeouts"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaClusterTopic:MdbKafkaClusterTopic"
                    },
                    "description": "To manage topics, please switch to using a separate resource type `yandex.MdbKafkaTopic`.\n",
                    "deprecationMessage": "topic is deprecated"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaClusterUser:MdbKafkaClusterUser"
                    },
                    "description": "A user of the Kafka cluster. The structure is documented below.\n"
                }
            },
            "required": [
                "config",
                "createdAt",
                "deletionProtection",
                "folderId",
                "health",
                "hosts",
                "hostGroupIds",
                "labels",
                "name",
                "networkId",
                "securityGroupIds",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/yandex:index/MdbKafkaClusterConfig:MdbKafkaClusterConfig",
                    "description": "Configuration of the Kafka cluster. The structure is documented below.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Kafka cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the Kafka cluster. Can be either `PRESTABLE` or `PRODUCTION`. \nThe default is `PRODUCTION`.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.\n"
                },
                "hostGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IDs of the host groups to place VMs of the cluster on.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Kafka cluster.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbKafkaClusterMaintenanceWindow:MdbKafkaClusterMaintenanceWindow",
                    "description": "Maintenance policy of the Kafka cluster. The structure is documented below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the topic.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the Kafka cluster belongs.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Security group ids, to which the Kafka cluster belongs.\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of the subnets, to which the Kafka cluster belongs.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbKafkaClusterTimeouts:MdbKafkaClusterTimeouts"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaClusterTopic:MdbKafkaClusterTopic"
                    },
                    "description": "To manage topics, please switch to using a separate resource type `yandex.MdbKafkaTopic`.\n",
                    "deprecationMessage": "topic is deprecated"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaClusterUser:MdbKafkaClusterUser"
                    },
                    "description": "A user of the Kafka cluster. The structure is documented below.\n"
                }
            },
            "requiredInputs": [
                "config",
                "networkId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbKafkaCluster resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/yandex:index/MdbKafkaClusterConfig:MdbKafkaClusterConfig",
                        "description": "Configuration of the Kafka cluster. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp of cluster creation.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Kafka cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the Kafka cluster. Can be either `PRESTABLE` or `PRODUCTION`. \nThe default is `PRODUCTION`.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.\n"
                    },
                    "health": {
                        "type": "string",
                        "description": "Health of the host.\n"
                    },
                    "hostGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IDs of the host groups to place VMs of the cluster on.\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbKafkaClusterHost:MdbKafkaClusterHost"
                        },
                        "description": "A host of the Kafka cluster. The structure is documented below.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Kafka cluster.\n"
                    },
                    "maintenanceWindow": {
                        "$ref": "#/types/yandex:index/MdbKafkaClusterMaintenanceWindow:MdbKafkaClusterMaintenanceWindow",
                        "description": "Maintenance policy of the Kafka cluster. The structure is documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the topic.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the Kafka cluster belongs.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Security group ids, to which the Kafka cluster belongs.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.\nFor more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-kafka/api-ref/Cluster/).\n"
                    },
                    "subnetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of the subnets, to which the Kafka cluster belongs.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/MdbKafkaClusterTimeouts:MdbKafkaClusterTimeouts"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbKafkaClusterTopic:MdbKafkaClusterTopic"
                        },
                        "description": "To manage topics, please switch to using a separate resource type `yandex.MdbKafkaTopic`.\n",
                        "deprecationMessage": "topic is deprecated"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbKafkaClusterUser:MdbKafkaClusterUser"
                        },
                        "description": "A user of the Kafka cluster. The structure is documented below.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbKafkaConnector:MdbKafkaConnector": {
            "properties": {
                "clusterId": {
                    "type": "string"
                },
                "connectorConfigMirrormakers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaConnectorConnectorConfigMirrormaker:MdbKafkaConnectorConnectorConfigMirrormaker"
                    }
                },
                "connectorConfigS3Sinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaConnectorConnectorConfigS3Sink:MdbKafkaConnectorConnectorConfigS3Sink"
                    }
                },
                "name": {
                    "type": "string"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tasksMax": {
                    "type": "number"
                }
            },
            "required": [
                "clusterId",
                "name",
                "properties"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string"
                },
                "connectorConfigMirrormakers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaConnectorConnectorConfigMirrormaker:MdbKafkaConnectorConnectorConfigMirrormaker"
                    }
                },
                "connectorConfigS3Sinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbKafkaConnectorConnectorConfigS3Sink:MdbKafkaConnectorConnectorConfigS3Sink"
                    }
                },
                "name": {
                    "type": "string"
                },
                "properties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "tasksMax": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "clusterId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbKafkaConnector resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "connectorConfigMirrormakers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbKafkaConnectorConnectorConfigMirrormaker:MdbKafkaConnectorConnectorConfigMirrormaker"
                        }
                    },
                    "connectorConfigS3Sinks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbKafkaConnectorConnectorConfigS3Sink:MdbKafkaConnectorConnectorConfigS3Sink"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tasksMax": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbKafkaTopic:MdbKafkaTopic": {
            "description": "Manages a topic of a Kafka cluster within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-kafka/concepts).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = new yandex.MdbKafkaCluster(\"foo\", {\n    networkId: \"c64vs98keiqc7f24pvkd\",\n    config: {\n        version: \"2.8\",\n        zones: [\"ru-central1-a\"],\n        unmanagedTopics: true,\n        kafka: {\n            resources: {\n                resourcePresetId: \"s2.micro\",\n                diskTypeId: \"network-hdd\",\n                diskSize: 16,\n            },\n        },\n    },\n});\nconst events = new yandex.MdbKafkaTopic(\"events\", {\n    clusterId: foo.id,\n    partitions: 4,\n    replicationFactor: 1,\n    topicConfig: {\n        cleanupPolicy: \"CLEANUP_POLICY_COMPACT\",\n        compressionType: \"COMPRESSION_TYPE_LZ4\",\n        deleteRetentionMs: \"86400000\",\n        fileDeleteDelayMs: \"60000\",\n        flushMessages: \"128\",\n        flushMs: \"1000\",\n        minCompactionLagMs: \"0\",\n        retentionBytes: \"10737418240\",\n        retentionMs: \"604800000\",\n        maxMessageBytes: \"1048588\",\n        minInsyncReplicas: \"1\",\n        segmentBytes: \"268435456\",\n        preallocate: true,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.MdbKafkaCluster(\"foo\",\n    network_id=\"c64vs98keiqc7f24pvkd\",\n    config=yandex.MdbKafkaClusterConfigArgs(\n        version=\"2.8\",\n        zones=[\"ru-central1-a\"],\n        unmanaged_topics=True,\n        kafka=yandex.MdbKafkaClusterConfigKafkaArgs(\n            resources=yandex.MdbKafkaClusterConfigKafkaResourcesArgs(\n                resource_preset_id=\"s2.micro\",\n                disk_type_id=\"network-hdd\",\n                disk_size=16,\n            ),\n        ),\n    ))\nevents = yandex.MdbKafkaTopic(\"events\",\n    cluster_id=foo.id,\n    partitions=4,\n    replication_factor=1,\n    topic_config=yandex.MdbKafkaTopicTopicConfigArgs(\n        cleanup_policy=\"CLEANUP_POLICY_COMPACT\",\n        compression_type=\"COMPRESSION_TYPE_LZ4\",\n        delete_retention_ms=\"86400000\",\n        file_delete_delay_ms=\"60000\",\n        flush_messages=\"128\",\n        flush_ms=\"1000\",\n        min_compaction_lag_ms=\"0\",\n        retention_bytes=\"10737418240\",\n        retention_ms=\"604800000\",\n        max_message_bytes=\"1048588\",\n        min_insync_replicas=\"1\",\n        segment_bytes=\"268435456\",\n        preallocate=True,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = new Yandex.MdbKafkaCluster(\"foo\", new()\n    {\n        NetworkId = \"c64vs98keiqc7f24pvkd\",\n        Config = new Yandex.Inputs.MdbKafkaClusterConfigArgs\n        {\n            Version = \"2.8\",\n            Zones = new[]\n            {\n                \"ru-central1-a\",\n            },\n            UnmanagedTopics = true,\n            Kafka = new Yandex.Inputs.MdbKafkaClusterConfigKafkaArgs\n            {\n                Resources = new Yandex.Inputs.MdbKafkaClusterConfigKafkaResourcesArgs\n                {\n                    ResourcePresetId = \"s2.micro\",\n                    DiskTypeId = \"network-hdd\",\n                    DiskSize = 16,\n                },\n            },\n        },\n    });\n\n    var events = new Yandex.MdbKafkaTopic(\"events\", new()\n    {\n        ClusterId = foo.Id,\n        Partitions = 4,\n        ReplicationFactor = 1,\n        TopicConfig = new Yandex.Inputs.MdbKafkaTopicTopicConfigArgs\n        {\n            CleanupPolicy = \"CLEANUP_POLICY_COMPACT\",\n            CompressionType = \"COMPRESSION_TYPE_LZ4\",\n            DeleteRetentionMs = \"86400000\",\n            FileDeleteDelayMs = \"60000\",\n            FlushMessages = \"128\",\n            FlushMs = \"1000\",\n            MinCompactionLagMs = \"0\",\n            RetentionBytes = \"10737418240\",\n            RetentionMs = \"604800000\",\n            MaxMessageBytes = \"1048588\",\n            MinInsyncReplicas = \"1\",\n            SegmentBytes = \"268435456\",\n            Preallocate = true,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.NewMdbKafkaCluster(ctx, \"foo\", \u0026yandex.MdbKafkaClusterArgs{\n\t\t\tNetworkId: pulumi.String(\"c64vs98keiqc7f24pvkd\"),\n\t\t\tConfig: \u0026MdbKafkaClusterConfigArgs{\n\t\t\t\tVersion: pulumi.String(\"2.8\"),\n\t\t\t\tZones: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"ru-central1-a\"),\n\t\t\t\t},\n\t\t\t\tUnmanagedTopics: pulumi.Bool(true),\n\t\t\t\tKafka: \u0026MdbKafkaClusterConfigKafkaArgs{\n\t\t\t\t\tResources: \u0026MdbKafkaClusterConfigKafkaResourcesArgs{\n\t\t\t\t\t\tResourcePresetId: pulumi.String(\"s2.micro\"),\n\t\t\t\t\t\tDiskTypeId:       pulumi.String(\"network-hdd\"),\n\t\t\t\t\t\tDiskSize:         pulumi.Float64(16),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbKafkaTopic(ctx, \"events\", \u0026yandex.MdbKafkaTopicArgs{\n\t\t\tClusterId:         foo.ID(),\n\t\t\tPartitions:        pulumi.Float64(4),\n\t\t\tReplicationFactor: pulumi.Float64(1),\n\t\t\tTopicConfig: \u0026MdbKafkaTopicTopicConfigArgs{\n\t\t\t\tCleanupPolicy:      pulumi.String(\"CLEANUP_POLICY_COMPACT\"),\n\t\t\t\tCompressionType:    pulumi.String(\"COMPRESSION_TYPE_LZ4\"),\n\t\t\t\tDeleteRetentionMs:  pulumi.String(\"86400000\"),\n\t\t\t\tFileDeleteDelayMs:  pulumi.String(\"60000\"),\n\t\t\t\tFlushMessages:      pulumi.String(\"128\"),\n\t\t\t\tFlushMs:            pulumi.String(\"1000\"),\n\t\t\t\tMinCompactionLagMs: pulumi.String(\"0\"),\n\t\t\t\tRetentionBytes:     pulumi.String(\"10737418240\"),\n\t\t\t\tRetentionMs:        pulumi.String(\"604800000\"),\n\t\t\t\tMaxMessageBytes:    pulumi.String(\"1048588\"),\n\t\t\t\tMinInsyncReplicas:  pulumi.String(\"1\"),\n\t\t\t\tSegmentBytes:       pulumi.String(\"268435456\"),\n\t\t\t\tPreallocate:        pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.MdbKafkaCluster;\nimport com.pulumi.yandex.MdbKafkaClusterArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterConfigArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterConfigKafkaArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaClusterConfigKafkaResourcesArgs;\nimport com.pulumi.yandex.MdbKafkaTopic;\nimport com.pulumi.yandex.MdbKafkaTopicArgs;\nimport com.pulumi.yandex.inputs.MdbKafkaTopicTopicConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var foo = new MdbKafkaCluster(\"foo\", MdbKafkaClusterArgs.builder()        \n            .networkId(\"c64vs98keiqc7f24pvkd\")\n            .config(MdbKafkaClusterConfigArgs.builder()\n                .version(\"2.8\")\n                .zones(\"ru-central1-a\")\n                .unmanagedTopics(true)\n                .kafka(MdbKafkaClusterConfigKafkaArgs.builder()\n                    .resources(MdbKafkaClusterConfigKafkaResourcesArgs.builder()\n                        .resourcePresetId(\"s2.micro\")\n                        .diskTypeId(\"network-hdd\")\n                        .diskSize(16)\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        var events = new MdbKafkaTopic(\"events\", MdbKafkaTopicArgs.builder()        \n            .clusterId(foo.id())\n            .partitions(4)\n            .replicationFactor(1)\n            .topicConfig(MdbKafkaTopicTopicConfigArgs.builder()\n                .cleanupPolicy(\"CLEANUP_POLICY_COMPACT\")\n                .compressionType(\"COMPRESSION_TYPE_LZ4\")\n                .deleteRetentionMs(86400000)\n                .fileDeleteDelayMs(60000)\n                .flushMessages(128)\n                .flushMs(1000)\n                .minCompactionLagMs(0)\n                .retentionBytes(10737418240)\n                .retentionMs(604800000)\n                .maxMessageBytes(1048588)\n                .minInsyncReplicas(1)\n                .segmentBytes(268435456)\n                .preallocate(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  foo:\n    type: yandex:MdbKafkaCluster\n    properties:\n      networkId: c64vs98keiqc7f24pvkd\n      config:\n        version: '2.8'\n        zones:\n          - ru-central1-a\n        unmanagedTopics: true\n        kafka:\n          resources:\n            resourcePresetId: s2.micro\n            diskTypeId: network-hdd\n            diskSize: 16\n  events:\n    type: yandex:MdbKafkaTopic\n    properties:\n      clusterId: ${foo.id}\n      partitions: 4\n      replicationFactor: 1\n      topicConfig:\n        cleanupPolicy: CLEANUP_POLICY_COMPACT\n        compressionType: COMPRESSION_TYPE_LZ4\n        deleteRetentionMs: 8.64e+07\n        fileDeleteDelayMs: 60000\n        flushMessages: 128\n        flushMs: 1000\n        minCompactionLagMs: 0\n        retentionBytes: 1.073741824e+10\n        retentionMs: 6.048e+08\n        maxMessageBytes: 1.048588e+06\n        minInsyncReplicas: 1\n        segmentBytes: 2.68435456e+08\n        preallocate: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nKafka topic can be imported using following format\n\n```sh\n $ pulumi import yandex:index/mdbKafkaTopic:MdbKafkaTopic foo {{cluster_id}}:{{topic_name}}\n```\n\n ",
            "properties": {
                "clusterId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the topic.\n"
                },
                "partitions": {
                    "type": "number",
                    "description": "The number of the topic's partitions.\n"
                },
                "replicationFactor": {
                    "type": "number",
                    "description": "Amount of data copies (replicas) for the topic in the cluster.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbKafkaTopicTimeouts:MdbKafkaTopicTimeouts"
                },
                "topicConfig": {
                    "$ref": "#/types/yandex:index/MdbKafkaTopicTopicConfig:MdbKafkaTopicTopicConfig",
                    "description": "User-defined settings for the topic. The structure is documented below.\n"
                }
            },
            "required": [
                "clusterId",
                "name",
                "partitions",
                "replicationFactor",
                "timeouts"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the topic.\n"
                },
                "partitions": {
                    "type": "number",
                    "description": "The number of the topic's partitions.\n"
                },
                "replicationFactor": {
                    "type": "number",
                    "description": "Amount of data copies (replicas) for the topic in the cluster.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbKafkaTopicTimeouts:MdbKafkaTopicTimeouts"
                },
                "topicConfig": {
                    "$ref": "#/types/yandex:index/MdbKafkaTopicTopicConfig:MdbKafkaTopicTopicConfig",
                    "description": "User-defined settings for the topic. The structure is documented below.\n"
                }
            },
            "requiredInputs": [
                "clusterId",
                "partitions",
                "replicationFactor",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbKafkaTopic resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the topic.\n"
                    },
                    "partitions": {
                        "type": "number",
                        "description": "The number of the topic's partitions.\n"
                    },
                    "replicationFactor": {
                        "type": "number",
                        "description": "Amount of data copies (replicas) for the topic in the cluster.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/MdbKafkaTopicTimeouts:MdbKafkaTopicTimeouts"
                    },
                    "topicConfig": {
                        "$ref": "#/types/yandex:index/MdbKafkaTopicTopicConfig:MdbKafkaTopicTopicConfig",
                        "description": "User-defined settings for the topic. The structure is documented below.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbMongodbCluster:MdbMongodbCluster": {
            "description": "Manages a MongoDB cluster within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-mongodb/concepts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nExample of creating a Single Node MongoDB.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"foo\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"foo\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.1.0.0/24\"],\n    zone: \"ru-central1-a\",\n});\nconst fooMdbMongodbCluster = new yandex.MdbMongodbCluster(\"foo\", {\n    clusterConfig: {\n        version: \"4.2\",\n    },\n    databases: [{\n        name: \"testdb\",\n    }],\n    environment: \"PRESTABLE\",\n    hosts: [{\n        subnetId: fooVpcSubnet.id,\n        zoneId: \"ru-central1-a\",\n    }],\n    labels: {\n        test_key: \"test_value\",\n    },\n    maintenanceWindow: {\n        type: \"ANYTIME\",\n    },\n    networkId: fooVpcNetwork.id,\n    resources: {\n        diskSize: 16,\n        diskTypeId: \"network-hdd\",\n        resourcePresetId: \"b1.nano\",\n    },\n    users: [{\n        name: \"john\",\n        password: \"password\",\n        permissions: [{\n            databaseName: \"testdb\",\n        }],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.1.0.0/24\"],\n    zone=\"ru-central1-a\")\nfoo_mdb_mongodb_cluster = yandex.MdbMongodbCluster(\"fooMdbMongodbCluster\",\n    cluster_config=yandex.MdbMongodbClusterClusterConfigArgs(\n        version=\"4.2\",\n    ),\n    databases=[yandex.MdbMongodbClusterDatabaseArgs(\n        name=\"testdb\",\n    )],\n    environment=\"PRESTABLE\",\n    hosts=[yandex.MdbMongodbClusterHostArgs(\n        subnet_id=foo_vpc_subnet.id,\n        zone_id=\"ru-central1-a\",\n    )],\n    labels={\n        \"test_key\": \"test_value\",\n    },\n    maintenance_window=yandex.MdbMongodbClusterMaintenanceWindowArgs(\n        type=\"ANYTIME\",\n    ),\n    network_id=foo_vpc_network.id,\n    resources=yandex.MdbMongodbClusterResourcesArgs(\n        disk_size=16,\n        disk_type_id=\"network-hdd\",\n        resource_preset_id=\"b1.nano\",\n    ),\n    users=[yandex.MdbMongodbClusterUserArgs(\n        name=\"john\",\n        password=\"password\",\n        permissions=[yandex.MdbMongodbClusterUserPermissionArgs(\n            database_name=\"testdb\",\n        )],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.1.0.0/24\",\n        },\n        Zone = \"ru-central1-a\",\n    });\n\n    var fooMdbMongodbCluster = new Yandex.MdbMongodbCluster(\"fooMdbMongodbCluster\", new()\n    {\n        ClusterConfig = new Yandex.Inputs.MdbMongodbClusterClusterConfigArgs\n        {\n            Version = \"4.2\",\n        },\n        Databases = new[]\n        {\n            new Yandex.Inputs.MdbMongodbClusterDatabaseArgs\n            {\n                Name = \"testdb\",\n            },\n        },\n        Environment = \"PRESTABLE\",\n        Hosts = new[]\n        {\n            new Yandex.Inputs.MdbMongodbClusterHostArgs\n            {\n                SubnetId = fooVpcSubnet.Id,\n                ZoneId = \"ru-central1-a\",\n            },\n        },\n        Labels = \n        {\n            { \"test_key\", \"test_value\" },\n        },\n        MaintenanceWindow = new Yandex.Inputs.MdbMongodbClusterMaintenanceWindowArgs\n        {\n            Type = \"ANYTIME\",\n        },\n        NetworkId = fooVpcNetwork.Id,\n        Resources = new Yandex.Inputs.MdbMongodbClusterResourcesArgs\n        {\n            DiskSize = 16,\n            DiskTypeId = \"network-hdd\",\n            ResourcePresetId = \"b1.nano\",\n        },\n        Users = new[]\n        {\n            new Yandex.Inputs.MdbMongodbClusterUserArgs\n            {\n                Name = \"john\",\n                Password = \"password\",\n                Permissions = new[]\n                {\n                    new Yandex.Inputs.MdbMongodbClusterUserPermissionArgs\n                    {\n                        DatabaseName = \"testdb\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.1.0.0/24\"),\n\t\t\t},\n\t\t\tZone: pulumi.String(\"ru-central1-a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbMongodbCluster(ctx, \"fooMdbMongodbCluster\", \u0026yandex.MdbMongodbClusterArgs{\n\t\t\tClusterConfig: \u0026MdbMongodbClusterClusterConfigArgs{\n\t\t\t\tVersion: pulumi.String(\"4.2\"),\n\t\t\t},\n\t\t\tDatabases: MdbMongodbClusterDatabaseArray{\n\t\t\t\t\u0026MdbMongodbClusterDatabaseArgs{\n\t\t\t\t\tName: pulumi.String(\"testdb\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tHosts: MdbMongodbClusterHostArray{\n\t\t\t\t\u0026MdbMongodbClusterHostArgs{\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t\tZoneId:   pulumi.String(\"ru-central1-a\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"test_key\": pulumi.String(\"test_value\"),\n\t\t\t},\n\t\t\tMaintenanceWindow: \u0026MdbMongodbClusterMaintenanceWindowArgs{\n\t\t\t\tType: pulumi.String(\"ANYTIME\"),\n\t\t\t},\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tResources: \u0026MdbMongodbClusterResourcesArgs{\n\t\t\t\tDiskSize:         pulumi.Float64(16),\n\t\t\t\tDiskTypeId:       pulumi.String(\"network-hdd\"),\n\t\t\t\tResourcePresetId: pulumi.String(\"b1.nano\"),\n\t\t\t},\n\t\t\tUsers: MdbMongodbClusterUserArray{\n\t\t\t\t\u0026MdbMongodbClusterUserArgs{\n\t\t\t\t\tName:     pulumi.String(\"john\"),\n\t\t\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\t\t\tPermissions: MdbMongodbClusterUserPermissionArray{\n\t\t\t\t\t\t\u0026MdbMongodbClusterUserPermissionArgs{\n\t\t\t\t\t\t\tDatabaseName: pulumi.String(\"testdb\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbMongodbCluster;\nimport com.pulumi.yandex.MdbMongodbClusterArgs;\nimport com.pulumi.yandex.inputs.MdbMongodbClusterClusterConfigArgs;\nimport com.pulumi.yandex.inputs.MdbMongodbClusterDatabaseArgs;\nimport com.pulumi.yandex.inputs.MdbMongodbClusterHostArgs;\nimport com.pulumi.yandex.inputs.MdbMongodbClusterMaintenanceWindowArgs;\nimport com.pulumi.yandex.inputs.MdbMongodbClusterResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbMongodbClusterUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.1.0.0/24\")\n            .zone(\"ru-central1-a\")\n            .build());\n\n        var fooMdbMongodbCluster = new MdbMongodbCluster(\"fooMdbMongodbCluster\", MdbMongodbClusterArgs.builder()        \n            .clusterConfig(MdbMongodbClusterClusterConfigArgs.builder()\n                .version(\"4.2\")\n                .build())\n            .databases(MdbMongodbClusterDatabaseArgs.builder()\n                .name(\"testdb\")\n                .build())\n            .environment(\"PRESTABLE\")\n            .hosts(MdbMongodbClusterHostArgs.builder()\n                .subnetId(fooVpcSubnet.id())\n                .zoneId(\"ru-central1-a\")\n                .build())\n            .labels(Map.of(\"test_key\", \"test_value\"))\n            .maintenanceWindow(MdbMongodbClusterMaintenanceWindowArgs.builder()\n                .type(\"ANYTIME\")\n                .build())\n            .networkId(fooVpcNetwork.id())\n            .resources(MdbMongodbClusterResourcesArgs.builder()\n                .diskSize(16)\n                .diskTypeId(\"network-hdd\")\n                .resourcePresetId(\"b1.nano\")\n                .build())\n            .users(MdbMongodbClusterUserArgs.builder()\n                .name(\"john\")\n                .password(\"password\")\n                .permissions(MdbMongodbClusterUserPermissionArgs.builder()\n                    .databaseName(\"testdb\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.1.0.0/24\n      zone: ru-central1-a\n  fooMdbMongodbCluster:\n    type: yandex:MdbMongodbCluster\n    properties:\n      clusterConfig:\n        version: '4.2'\n      databases:\n        - name: testdb\n      environment: PRESTABLE\n      hosts:\n        - subnetId: ${fooVpcSubnet.id}\n          zoneId: ru-central1-a\n      labels:\n        test_key: test_value\n      maintenanceWindow:\n        type: ANYTIME\n      networkId: ${fooVpcNetwork.id}\n      resources:\n        diskSize: 16\n        diskTypeId: network-hdd\n        resourcePresetId: b1.nano\n      users:\n        - name: john\n          password: password\n          permissions:\n            - databaseName: testdb\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA cluster can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/mdbMongodbCluster:MdbMongodbCluster foo cluster_id\n```\n\n ",
            "properties": {
                "clusterConfig": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterClusterConfig:MdbMongodbClusterClusterConfig",
                    "description": "Configuration of the MongoDB subcluster. The structure is documented below.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the cluster.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the key.\n"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMongodbClusterDatabase:MdbMongodbClusterDatabase"
                    },
                    "description": "A database of the MongoDB cluster. The structure is documented below.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n- - -\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the MongoDB cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "health": {
                    "type": "string",
                    "description": "The health of the host.\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMongodbClusterHost:MdbMongodbClusterHost"
                    },
                    "description": "A host of the MongoDB cluster. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the MongoDB cluster.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterMaintenanceWindow:MdbMongodbClusterMaintenanceWindow"
                },
                "name": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host. Computed on server side.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the MongoDB cluster belongs.\n"
                },
                "resources": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterResources:MdbMongodbClusterResources",
                    "description": "Resources allocated to hosts of the MongoDB cluster. The structure is documented below.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                },
                "sharded": {
                    "type": "boolean",
                    "description": "MongoDB Cluster mode enabled/disabled.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.\nFor more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/api-ref/Cluster/).\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterTimeouts:MdbMongodbClusterTimeouts"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMongodbClusterUser:MdbMongodbClusterUser"
                    },
                    "description": "A user of the MongoDB cluster. The structure is documented below.\n"
                }
            },
            "required": [
                "clusterConfig",
                "clusterId",
                "createdAt",
                "databases",
                "deletionProtection",
                "description",
                "environment",
                "folderId",
                "health",
                "hosts",
                "labels",
                "name",
                "networkId",
                "resources",
                "sharded",
                "status",
                "timeouts",
                "users"
            ],
            "inputProperties": {
                "clusterConfig": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterClusterConfig:MdbMongodbClusterClusterConfig",
                    "description": "Configuration of the MongoDB subcluster. The structure is documented below.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The ID of the cluster.\n"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMongodbClusterDatabase:MdbMongodbClusterDatabase"
                    },
                    "description": "A database of the MongoDB cluster. The structure is documented below.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n- - -\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the MongoDB cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMongodbClusterHost:MdbMongodbClusterHost"
                    },
                    "description": "A host of the MongoDB cluster. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the MongoDB cluster.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterMaintenanceWindow:MdbMongodbClusterMaintenanceWindow"
                },
                "name": {
                    "type": "string",
                    "description": "The fully qualified domain name of the host. Computed on server side.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the MongoDB cluster belongs.\n"
                },
                "resources": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterResources:MdbMongodbClusterResources",
                    "description": "Resources allocated to hosts of the MongoDB cluster. The structure is documented below.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbMongodbClusterTimeouts:MdbMongodbClusterTimeouts"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMongodbClusterUser:MdbMongodbClusterUser"
                    },
                    "description": "A user of the MongoDB cluster. The structure is documented below.\n"
                }
            },
            "requiredInputs": [
                "clusterConfig",
                "databases",
                "environment",
                "hosts",
                "networkId",
                "resources",
                "timeouts",
                "users"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbMongodbCluster resources.\n",
                "properties": {
                    "clusterConfig": {
                        "$ref": "#/types/yandex:index/MdbMongodbClusterClusterConfig:MdbMongodbClusterClusterConfig",
                        "description": "Configuration of the MongoDB subcluster. The structure is documented below.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the cluster.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbMongodbClusterDatabase:MdbMongodbClusterDatabase"
                        },
                        "description": "A database of the MongoDB cluster. The structure is documented below.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n- - -\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the MongoDB cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                    },
                    "health": {
                        "type": "string",
                        "description": "The health of the host.\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbMongodbClusterHost:MdbMongodbClusterHost"
                        },
                        "description": "A host of the MongoDB cluster. The structure is documented below.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the MongoDB cluster.\n"
                    },
                    "maintenanceWindow": {
                        "$ref": "#/types/yandex:index/MdbMongodbClusterMaintenanceWindow:MdbMongodbClusterMaintenanceWindow"
                    },
                    "name": {
                        "type": "string",
                        "description": "The fully qualified domain name of the host. Computed on server side.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the MongoDB cluster belongs.\n"
                    },
                    "resources": {
                        "$ref": "#/types/yandex:index/MdbMongodbClusterResources:MdbMongodbClusterResources",
                        "description": "Resources allocated to hosts of the MongoDB cluster. The structure is documented below.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "sharded": {
                        "type": "boolean",
                        "description": "MongoDB Cluster mode enabled/disabled.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.\nFor more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/api-ref/Cluster/).\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/MdbMongodbClusterTimeouts:MdbMongodbClusterTimeouts"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbMongodbClusterUser:MdbMongodbClusterUser"
                        },
                        "description": "A user of the MongoDB cluster. The structure is documented below.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbMysqlCluster:MdbMysqlCluster": {
            "description": "Manages a MySQL cluster within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-mysql/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nExample of creating a Single Node MySQL.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"fooVpcNetwork\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"fooVpcSubnet\", {\n    zone: \"ru-central1-a\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.5.0.0/24\"],\n});\nconst fooMdbMysqlCluster = new yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", {\n    environment: \"PRESTABLE\",\n    networkId: fooVpcNetwork.id,\n    version: \"8.0\",\n    resources: {\n        resourcePresetId: \"s2.micro\",\n        diskTypeId: \"network-ssd\",\n        diskSize: 16,\n    },\n    mysqlConfig: {\n        sql_mode: \"ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\",\n        max_connections: \"100\",\n        default_authentication_plugin: \"MYSQL_NATIVE_PASSWORD\",\n        innodb_print_all_deadlocks: \"true\",\n    },\n    hosts: [{\n        zone: \"ru-central1-a\",\n        subnetId: fooVpcSubnet.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    zone=\"ru-central1-a\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.5.0.0/24\"])\nfoo_mdb_mysql_cluster = yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\",\n    environment=\"PRESTABLE\",\n    network_id=foo_vpc_network.id,\n    version=\"8.0\",\n    resources=yandex.MdbMysqlClusterResourcesArgs(\n        resource_preset_id=\"s2.micro\",\n        disk_type_id=\"network-ssd\",\n        disk_size=16,\n    ),\n    mysql_config={\n        \"sql_mode\": \"ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\",\n        \"max_connections\": \"100\",\n        \"default_authentication_plugin\": \"MYSQL_NATIVE_PASSWORD\",\n        \"innodb_print_all_deadlocks\": \"true\",\n    },\n    hosts=[yandex.MdbMysqlClusterHostArgs(\n        zone=\"ru-central1-a\",\n        subnet_id=foo_vpc_subnet.id,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        Zone = \"ru-central1-a\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.5.0.0/24\",\n        },\n    });\n\n    var fooMdbMysqlCluster = new Yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", new()\n    {\n        Environment = \"PRESTABLE\",\n        NetworkId = fooVpcNetwork.Id,\n        Version = \"8.0\",\n        Resources = new Yandex.Inputs.MdbMysqlClusterResourcesArgs\n        {\n            ResourcePresetId = \"s2.micro\",\n            DiskTypeId = \"network-ssd\",\n            DiskSize = 16,\n        },\n        MysqlConfig = \n        {\n            { \"sql_mode\", \"ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\" },\n            { \"max_connections\", \"100\" },\n            { \"default_authentication_plugin\", \"MYSQL_NATIVE_PASSWORD\" },\n            { \"innodb_print_all_deadlocks\", \"true\" },\n        },\n        Hosts = new[]\n        {\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-a\",\n                SubnetId = fooVpcSubnet.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-a\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.5.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbMysqlCluster(ctx, \"fooMdbMysqlCluster\", \u0026yandex.MdbMysqlClusterArgs{\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tNetworkId:   fooVpcNetwork.ID(),\n\t\t\tVersion:     pulumi.String(\"8.0\"),\n\t\t\tResources: \u0026MdbMysqlClusterResourcesArgs{\n\t\t\t\tResourcePresetId: pulumi.String(\"s2.micro\"),\n\t\t\t\tDiskTypeId:       pulumi.String(\"network-ssd\"),\n\t\t\t\tDiskSize:         pulumi.Float64(16),\n\t\t\t},\n\t\t\tMysqlConfig: pulumi.StringMap{\n\t\t\t\t\"sql_mode\":                      pulumi.String(\"ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\"),\n\t\t\t\t\"max_connections\":               pulumi.String(\"100\"),\n\t\t\t\t\"default_authentication_plugin\": pulumi.String(\"MYSQL_NATIVE_PASSWORD\"),\n\t\t\t\t\"innodb_print_all_deadlocks\":    pulumi.String(\"true\"),\n\t\t\t},\n\t\t\tHosts: MdbMysqlClusterHostArray{\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-a\"),\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbMysqlCluster;\nimport com.pulumi.yandex.MdbMysqlClusterArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterHostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-a\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.5.0.0/24\")\n            .build());\n\n        var fooMdbMysqlCluster = new MdbMysqlCluster(\"fooMdbMysqlCluster\", MdbMysqlClusterArgs.builder()        \n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .version(\"8.0\")\n            .resources(MdbMysqlClusterResourcesArgs.builder()\n                .resourcePresetId(\"s2.micro\")\n                .diskTypeId(\"network-ssd\")\n                .diskSize(16)\n                .build())\n            .mysqlConfig(Map.ofEntries(\n                Map.entry(\"sql_mode\", \"ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\"),\n                Map.entry(\"max_connections\", 100),\n                Map.entry(\"default_authentication_plugin\", \"MYSQL_NATIVE_PASSWORD\"),\n                Map.entry(\"innodb_print_all_deadlocks\", true)\n            ))\n            .hosts(MdbMysqlClusterHostArgs.builder()\n                .zone(\"ru-central1-a\")\n                .subnetId(fooVpcSubnet.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbMysqlCluster:\n    type: yandex:MdbMysqlCluster\n    properties:\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      version: '8.0'\n      resources:\n        resourcePresetId: s2.micro\n        diskTypeId: network-ssd\n        diskSize: 16\n      mysqlConfig:\n        sql_mode: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\n        max_connections: 100\n        default_authentication_plugin: MYSQL_NATIVE_PASSWORD\n        innodb_print_all_deadlocks: true\n      hosts:\n        - zone: ru-central1-a\n          subnetId: ${fooVpcSubnet.id}\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-a\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.5.0.0/24\n```\n\nExample of creating a High-Availability(HA) MySQL Cluster.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"fooVpcNetwork\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"fooVpcSubnet\", {\n    zone: \"ru-central1-a\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.1.0.0/24\"],\n});\nconst bar = new yandex.VpcSubnet(\"bar\", {\n    zone: \"ru-central1-b\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.2.0.0/24\"],\n});\nconst fooMdbMysqlCluster = new yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", {\n    environment: \"PRESTABLE\",\n    networkId: fooVpcNetwork.id,\n    version: \"8.0\",\n    resources: {\n        resourcePresetId: \"s2.micro\",\n        diskTypeId: \"network-ssd\",\n        diskSize: 16,\n    },\n    maintenanceWindow: {\n        type: \"WEEKLY\",\n        day: \"SAT\",\n        hour: 12,\n    },\n    hosts: [\n        {\n            zone: \"ru-central1-a\",\n            subnetId: fooVpcSubnet.id,\n        },\n        {\n            zone: \"ru-central1-b\",\n            subnetId: bar.id,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    zone=\"ru-central1-a\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.1.0.0/24\"])\nbar = yandex.VpcSubnet(\"bar\",\n    zone=\"ru-central1-b\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.2.0.0/24\"])\nfoo_mdb_mysql_cluster = yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\",\n    environment=\"PRESTABLE\",\n    network_id=foo_vpc_network.id,\n    version=\"8.0\",\n    resources=yandex.MdbMysqlClusterResourcesArgs(\n        resource_preset_id=\"s2.micro\",\n        disk_type_id=\"network-ssd\",\n        disk_size=16,\n    ),\n    maintenance_window=yandex.MdbMysqlClusterMaintenanceWindowArgs(\n        type=\"WEEKLY\",\n        day=\"SAT\",\n        hour=12,\n    ),\n    hosts=[\n        yandex.MdbMysqlClusterHostArgs(\n            zone=\"ru-central1-a\",\n            subnet_id=foo_vpc_subnet.id,\n        ),\n        yandex.MdbMysqlClusterHostArgs(\n            zone=\"ru-central1-b\",\n            subnet_id=bar.id,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        Zone = \"ru-central1-a\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.1.0.0/24\",\n        },\n    });\n\n    var bar = new Yandex.VpcSubnet(\"bar\", new()\n    {\n        Zone = \"ru-central1-b\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.2.0.0/24\",\n        },\n    });\n\n    var fooMdbMysqlCluster = new Yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", new()\n    {\n        Environment = \"PRESTABLE\",\n        NetworkId = fooVpcNetwork.Id,\n        Version = \"8.0\",\n        Resources = new Yandex.Inputs.MdbMysqlClusterResourcesArgs\n        {\n            ResourcePresetId = \"s2.micro\",\n            DiskTypeId = \"network-ssd\",\n            DiskSize = 16,\n        },\n        MaintenanceWindow = new Yandex.Inputs.MdbMysqlClusterMaintenanceWindowArgs\n        {\n            Type = \"WEEKLY\",\n            Day = \"SAT\",\n            Hour = 12,\n        },\n        Hosts = new[]\n        {\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-a\",\n                SubnetId = fooVpcSubnet.Id,\n            },\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-b\",\n                SubnetId = bar.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-a\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.1.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbar, err := yandex.NewVpcSubnet(ctx, \"bar\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-b\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.2.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbMysqlCluster(ctx, \"fooMdbMysqlCluster\", \u0026yandex.MdbMysqlClusterArgs{\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tNetworkId:   fooVpcNetwork.ID(),\n\t\t\tVersion:     pulumi.String(\"8.0\"),\n\t\t\tResources: \u0026MdbMysqlClusterResourcesArgs{\n\t\t\t\tResourcePresetId: pulumi.String(\"s2.micro\"),\n\t\t\t\tDiskTypeId:       pulumi.String(\"network-ssd\"),\n\t\t\t\tDiskSize:         pulumi.Float64(16),\n\t\t\t},\n\t\t\tMaintenanceWindow: \u0026MdbMysqlClusterMaintenanceWindowArgs{\n\t\t\t\tType: pulumi.String(\"WEEKLY\"),\n\t\t\t\tDay:  pulumi.String(\"SAT\"),\n\t\t\t\tHour: pulumi.Float64(12),\n\t\t\t},\n\t\t\tHosts: MdbMysqlClusterHostArray{\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-a\"),\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t},\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-b\"),\n\t\t\t\t\tSubnetId: bar.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbMysqlCluster;\nimport com.pulumi.yandex.MdbMysqlClusterArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterMaintenanceWindowArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterHostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-a\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.1.0.0/24\")\n            .build());\n\n        var bar = new VpcSubnet(\"bar\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-b\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.2.0.0/24\")\n            .build());\n\n        var fooMdbMysqlCluster = new MdbMysqlCluster(\"fooMdbMysqlCluster\", MdbMysqlClusterArgs.builder()        \n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .version(\"8.0\")\n            .resources(MdbMysqlClusterResourcesArgs.builder()\n                .resourcePresetId(\"s2.micro\")\n                .diskTypeId(\"network-ssd\")\n                .diskSize(16)\n                .build())\n            .maintenanceWindow(MdbMysqlClusterMaintenanceWindowArgs.builder()\n                .type(\"WEEKLY\")\n                .day(\"SAT\")\n                .hour(12)\n                .build())\n            .hosts(            \n                MdbMysqlClusterHostArgs.builder()\n                    .zone(\"ru-central1-a\")\n                    .subnetId(fooVpcSubnet.id())\n                    .build(),\n                MdbMysqlClusterHostArgs.builder()\n                    .zone(\"ru-central1-b\")\n                    .subnetId(bar.id())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbMysqlCluster:\n    type: yandex:MdbMysqlCluster\n    properties:\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      version: '8.0'\n      resources:\n        resourcePresetId: s2.micro\n        diskTypeId: network-ssd\n        diskSize: 16\n      maintenanceWindow:\n        type: WEEKLY\n        day: SAT\n        hour: 12\n      hosts:\n        - zone: ru-central1-a\n          subnetId: ${fooVpcSubnet.id}\n        - zone: ru-central1-b\n          subnetId: ${bar.id}\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-a\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.1.0.0/24\n  bar:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-b\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.2.0.0/24\n```\n\nExample of creating a MySQL Cluster with cascade replicas: HA-group consist of 'na-1' and 'na-2', cascade replicas form a chain 'na-1' \u003e 'nb-1' \u003e 'nb-2'\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"fooVpcNetwork\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"fooVpcSubnet\", {\n    zone: \"ru-central1-a\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.1.0.0/24\"],\n});\nconst bar = new yandex.VpcSubnet(\"bar\", {\n    zone: \"ru-central1-b\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.2.0.0/24\"],\n});\nconst fooMdbMysqlCluster = new yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", {\n    environment: \"PRESTABLE\",\n    networkId: fooVpcNetwork.id,\n    version: \"8.0\",\n    resources: {\n        resourcePresetId: \"s2.micro\",\n        diskTypeId: \"network-ssd\",\n        diskSize: 16,\n    },\n    maintenanceWindow: {\n        type: \"WEEKLY\",\n        day: \"SAT\",\n        hour: 12,\n    },\n    hosts: [\n        {\n            zone: \"ru-central1-a\",\n            name: \"na-1\",\n            subnetId: fooVpcSubnet.id,\n        },\n        {\n            zone: \"ru-central1-a\",\n            name: \"na-2\",\n            subnetId: fooVpcSubnet.id,\n        },\n        {\n            zone: \"ru-central1-b\",\n            name: \"nb-1\",\n            replicationSourceName: \"na-1\",\n            subnetId: bar.id,\n        },\n        {\n            zone: \"ru-central1-b\",\n            name: \"nb-2\",\n            replicationSourceName: \"nb-1\",\n            subnetId: bar.id,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    zone=\"ru-central1-a\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.1.0.0/24\"])\nbar = yandex.VpcSubnet(\"bar\",\n    zone=\"ru-central1-b\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.2.0.0/24\"])\nfoo_mdb_mysql_cluster = yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\",\n    environment=\"PRESTABLE\",\n    network_id=foo_vpc_network.id,\n    version=\"8.0\",\n    resources=yandex.MdbMysqlClusterResourcesArgs(\n        resource_preset_id=\"s2.micro\",\n        disk_type_id=\"network-ssd\",\n        disk_size=16,\n    ),\n    maintenance_window=yandex.MdbMysqlClusterMaintenanceWindowArgs(\n        type=\"WEEKLY\",\n        day=\"SAT\",\n        hour=12,\n    ),\n    hosts=[\n        yandex.MdbMysqlClusterHostArgs(\n            zone=\"ru-central1-a\",\n            name=\"na-1\",\n            subnet_id=foo_vpc_subnet.id,\n        ),\n        yandex.MdbMysqlClusterHostArgs(\n            zone=\"ru-central1-a\",\n            name=\"na-2\",\n            subnet_id=foo_vpc_subnet.id,\n        ),\n        yandex.MdbMysqlClusterHostArgs(\n            zone=\"ru-central1-b\",\n            name=\"nb-1\",\n            replication_source_name=\"na-1\",\n            subnet_id=bar.id,\n        ),\n        yandex.MdbMysqlClusterHostArgs(\n            zone=\"ru-central1-b\",\n            name=\"nb-2\",\n            replication_source_name=\"nb-1\",\n            subnet_id=bar.id,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        Zone = \"ru-central1-a\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.1.0.0/24\",\n        },\n    });\n\n    var bar = new Yandex.VpcSubnet(\"bar\", new()\n    {\n        Zone = \"ru-central1-b\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.2.0.0/24\",\n        },\n    });\n\n    var fooMdbMysqlCluster = new Yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", new()\n    {\n        Environment = \"PRESTABLE\",\n        NetworkId = fooVpcNetwork.Id,\n        Version = \"8.0\",\n        Resources = new Yandex.Inputs.MdbMysqlClusterResourcesArgs\n        {\n            ResourcePresetId = \"s2.micro\",\n            DiskTypeId = \"network-ssd\",\n            DiskSize = 16,\n        },\n        MaintenanceWindow = new Yandex.Inputs.MdbMysqlClusterMaintenanceWindowArgs\n        {\n            Type = \"WEEKLY\",\n            Day = \"SAT\",\n            Hour = 12,\n        },\n        Hosts = new[]\n        {\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-a\",\n                Name = \"na-1\",\n                SubnetId = fooVpcSubnet.Id,\n            },\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-a\",\n                Name = \"na-2\",\n                SubnetId = fooVpcSubnet.Id,\n            },\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-b\",\n                Name = \"nb-1\",\n                ReplicationSourceName = \"na-1\",\n                SubnetId = bar.Id,\n            },\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-b\",\n                Name = \"nb-2\",\n                ReplicationSourceName = \"nb-1\",\n                SubnetId = bar.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-a\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.1.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbar, err := yandex.NewVpcSubnet(ctx, \"bar\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-b\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.2.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbMysqlCluster(ctx, \"fooMdbMysqlCluster\", \u0026yandex.MdbMysqlClusterArgs{\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tNetworkId:   fooVpcNetwork.ID(),\n\t\t\tVersion:     pulumi.String(\"8.0\"),\n\t\t\tResources: \u0026MdbMysqlClusterResourcesArgs{\n\t\t\t\tResourcePresetId: pulumi.String(\"s2.micro\"),\n\t\t\t\tDiskTypeId:       pulumi.String(\"network-ssd\"),\n\t\t\t\tDiskSize:         pulumi.Float64(16),\n\t\t\t},\n\t\t\tMaintenanceWindow: \u0026MdbMysqlClusterMaintenanceWindowArgs{\n\t\t\t\tType: pulumi.String(\"WEEKLY\"),\n\t\t\t\tDay:  pulumi.String(\"SAT\"),\n\t\t\t\tHour: pulumi.Float64(12),\n\t\t\t},\n\t\t\tHosts: MdbMysqlClusterHostArray{\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-a\"),\n\t\t\t\t\tName:     pulumi.String(\"na-1\"),\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t},\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-a\"),\n\t\t\t\t\tName:     pulumi.String(\"na-2\"),\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t},\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:                  pulumi.String(\"ru-central1-b\"),\n\t\t\t\t\tName:                  pulumi.String(\"nb-1\"),\n\t\t\t\t\tReplicationSourceName: pulumi.String(\"na-1\"),\n\t\t\t\t\tSubnetId:              bar.ID(),\n\t\t\t\t},\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:                  pulumi.String(\"ru-central1-b\"),\n\t\t\t\t\tName:                  pulumi.String(\"nb-2\"),\n\t\t\t\t\tReplicationSourceName: pulumi.String(\"nb-1\"),\n\t\t\t\t\tSubnetId:              bar.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbMysqlCluster;\nimport com.pulumi.yandex.MdbMysqlClusterArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterMaintenanceWindowArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterHostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-a\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.1.0.0/24\")\n            .build());\n\n        var bar = new VpcSubnet(\"bar\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-b\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.2.0.0/24\")\n            .build());\n\n        var fooMdbMysqlCluster = new MdbMysqlCluster(\"fooMdbMysqlCluster\", MdbMysqlClusterArgs.builder()        \n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .version(\"8.0\")\n            .resources(MdbMysqlClusterResourcesArgs.builder()\n                .resourcePresetId(\"s2.micro\")\n                .diskTypeId(\"network-ssd\")\n                .diskSize(16)\n                .build())\n            .maintenanceWindow(MdbMysqlClusterMaintenanceWindowArgs.builder()\n                .type(\"WEEKLY\")\n                .day(\"SAT\")\n                .hour(12)\n                .build())\n            .hosts(            \n                MdbMysqlClusterHostArgs.builder()\n                    .zone(\"ru-central1-a\")\n                    .name(\"na-1\")\n                    .subnetId(fooVpcSubnet.id())\n                    .build(),\n                MdbMysqlClusterHostArgs.builder()\n                    .zone(\"ru-central1-a\")\n                    .name(\"na-2\")\n                    .subnetId(fooVpcSubnet.id())\n                    .build(),\n                MdbMysqlClusterHostArgs.builder()\n                    .zone(\"ru-central1-b\")\n                    .name(\"nb-1\")\n                    .replicationSourceName(\"na-1\")\n                    .subnetId(bar.id())\n                    .build(),\n                MdbMysqlClusterHostArgs.builder()\n                    .zone(\"ru-central1-b\")\n                    .name(\"nb-2\")\n                    .replicationSourceName(\"nb-1\")\n                    .subnetId(bar.id())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbMysqlCluster:\n    type: yandex:MdbMysqlCluster\n    properties:\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      version: '8.0'\n      resources:\n        resourcePresetId: s2.micro\n        diskTypeId: network-ssd\n        diskSize: 16\n      maintenanceWindow:\n        type: WEEKLY\n        day: SAT\n        hour: 12\n      hosts:\n        - zone: ru-central1-a\n          name: na-1\n          subnetId: ${fooVpcSubnet.id}\n        - zone: ru-central1-a\n          name: na-2\n          subnetId: ${fooVpcSubnet.id}\n        - zone: ru-central1-b\n          name: nb-1\n          replicationSourceName: na-1\n          subnetId: ${bar.id}\n        - zone: ru-central1-b\n          name: nb-2\n          replicationSourceName: nb-1\n          subnetId: ${bar.id}\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-a\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.1.0.0/24\n  bar:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-b\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.2.0.0/24\n```\n\n\nExample of creating a MySQL Cluster with different backup priorities. Backup will be created from nb-2, if it's not master. na-2 will be used as a backup source as a last resort.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"fooVpcNetwork\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"fooVpcSubnet\", {\n    zone: \"ru-central1-a\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.1.0.0/24\"],\n});\nconst bar = new yandex.VpcSubnet(\"bar\", {\n    zone: \"ru-central1-b\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.2.0.0/24\"],\n});\nconst fooMdbMysqlCluster = new yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", {\n    environment: \"PRESTABLE\",\n    networkId: fooVpcNetwork.id,\n    version: \"8.0\",\n    resources: {\n        resourcePresetId: \"s2.micro\",\n        diskTypeId: \"network-ssd\",\n        diskSize: 16,\n    },\n    maintenanceWindow: {\n        type: \"WEEKLY\",\n        day: \"SAT\",\n        hour: 12,\n    },\n    hosts: [\n        {\n            zone: \"ru-central1-a\",\n            name: \"na-1\",\n            subnetId: fooVpcSubnet.id,\n        },\n        {\n            zone: \"ru-central1-b\",\n            name: \"nb-1\",\n            backupPriority: 5,\n            subnetId: bar.id,\n        },\n        {\n            zone: \"ru-central1-b\",\n            name: \"nb-2\",\n            backupPriority: 10,\n            subnetId: bar.id,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    zone=\"ru-central1-a\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.1.0.0/24\"])\nbar = yandex.VpcSubnet(\"bar\",\n    zone=\"ru-central1-b\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.2.0.0/24\"])\nfoo_mdb_mysql_cluster = yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\",\n    environment=\"PRESTABLE\",\n    network_id=foo_vpc_network.id,\n    version=\"8.0\",\n    resources=yandex.MdbMysqlClusterResourcesArgs(\n        resource_preset_id=\"s2.micro\",\n        disk_type_id=\"network-ssd\",\n        disk_size=16,\n    ),\n    maintenance_window=yandex.MdbMysqlClusterMaintenanceWindowArgs(\n        type=\"WEEKLY\",\n        day=\"SAT\",\n        hour=12,\n    ),\n    hosts=[\n        yandex.MdbMysqlClusterHostArgs(\n            zone=\"ru-central1-a\",\n            name=\"na-1\",\n            subnet_id=foo_vpc_subnet.id,\n        ),\n        yandex.MdbMysqlClusterHostArgs(\n            zone=\"ru-central1-b\",\n            name=\"nb-1\",\n            backup_priority=5,\n            subnet_id=bar.id,\n        ),\n        yandex.MdbMysqlClusterHostArgs(\n            zone=\"ru-central1-b\",\n            name=\"nb-2\",\n            backup_priority=10,\n            subnet_id=bar.id,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        Zone = \"ru-central1-a\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.1.0.0/24\",\n        },\n    });\n\n    var bar = new Yandex.VpcSubnet(\"bar\", new()\n    {\n        Zone = \"ru-central1-b\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.2.0.0/24\",\n        },\n    });\n\n    var fooMdbMysqlCluster = new Yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", new()\n    {\n        Environment = \"PRESTABLE\",\n        NetworkId = fooVpcNetwork.Id,\n        Version = \"8.0\",\n        Resources = new Yandex.Inputs.MdbMysqlClusterResourcesArgs\n        {\n            ResourcePresetId = \"s2.micro\",\n            DiskTypeId = \"network-ssd\",\n            DiskSize = 16,\n        },\n        MaintenanceWindow = new Yandex.Inputs.MdbMysqlClusterMaintenanceWindowArgs\n        {\n            Type = \"WEEKLY\",\n            Day = \"SAT\",\n            Hour = 12,\n        },\n        Hosts = new[]\n        {\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-a\",\n                Name = \"na-1\",\n                SubnetId = fooVpcSubnet.Id,\n            },\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-b\",\n                Name = \"nb-1\",\n                BackupPriority = 5,\n                SubnetId = bar.Id,\n            },\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-b\",\n                Name = \"nb-2\",\n                BackupPriority = 10,\n                SubnetId = bar.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-a\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.1.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbar, err := yandex.NewVpcSubnet(ctx, \"bar\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-b\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.2.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbMysqlCluster(ctx, \"fooMdbMysqlCluster\", \u0026yandex.MdbMysqlClusterArgs{\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tNetworkId:   fooVpcNetwork.ID(),\n\t\t\tVersion:     pulumi.String(\"8.0\"),\n\t\t\tResources: \u0026MdbMysqlClusterResourcesArgs{\n\t\t\t\tResourcePresetId: pulumi.String(\"s2.micro\"),\n\t\t\t\tDiskTypeId:       pulumi.String(\"network-ssd\"),\n\t\t\t\tDiskSize:         pulumi.Float64(16),\n\t\t\t},\n\t\t\tMaintenanceWindow: \u0026MdbMysqlClusterMaintenanceWindowArgs{\n\t\t\t\tType: pulumi.String(\"WEEKLY\"),\n\t\t\t\tDay:  pulumi.String(\"SAT\"),\n\t\t\t\tHour: pulumi.Float64(12),\n\t\t\t},\n\t\t\tHosts: MdbMysqlClusterHostArray{\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-a\"),\n\t\t\t\t\tName:     pulumi.String(\"na-1\"),\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t},\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:           pulumi.String(\"ru-central1-b\"),\n\t\t\t\t\tName:           pulumi.String(\"nb-1\"),\n\t\t\t\t\tBackupPriority: pulumi.Float64(5),\n\t\t\t\t\tSubnetId:       bar.ID(),\n\t\t\t\t},\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:           pulumi.String(\"ru-central1-b\"),\n\t\t\t\t\tName:           pulumi.String(\"nb-2\"),\n\t\t\t\t\tBackupPriority: pulumi.Float64(10),\n\t\t\t\t\tSubnetId:       bar.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbMysqlCluster;\nimport com.pulumi.yandex.MdbMysqlClusterArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterMaintenanceWindowArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterHostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-a\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.1.0.0/24\")\n            .build());\n\n        var bar = new VpcSubnet(\"bar\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-b\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.2.0.0/24\")\n            .build());\n\n        var fooMdbMysqlCluster = new MdbMysqlCluster(\"fooMdbMysqlCluster\", MdbMysqlClusterArgs.builder()        \n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .version(\"8.0\")\n            .resources(MdbMysqlClusterResourcesArgs.builder()\n                .resourcePresetId(\"s2.micro\")\n                .diskTypeId(\"network-ssd\")\n                .diskSize(16)\n                .build())\n            .maintenanceWindow(MdbMysqlClusterMaintenanceWindowArgs.builder()\n                .type(\"WEEKLY\")\n                .day(\"SAT\")\n                .hour(12)\n                .build())\n            .hosts(            \n                MdbMysqlClusterHostArgs.builder()\n                    .zone(\"ru-central1-a\")\n                    .name(\"na-1\")\n                    .subnetId(fooVpcSubnet.id())\n                    .build(),\n                MdbMysqlClusterHostArgs.builder()\n                    .zone(\"ru-central1-b\")\n                    .name(\"nb-1\")\n                    .backupPriority(5)\n                    .subnetId(bar.id())\n                    .build(),\n                MdbMysqlClusterHostArgs.builder()\n                    .zone(\"ru-central1-b\")\n                    .name(\"nb-2\")\n                    .backupPriority(10)\n                    .subnetId(bar.id())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbMysqlCluster:\n    type: yandex:MdbMysqlCluster\n    properties:\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      version: '8.0'\n      resources:\n        resourcePresetId: s2.micro\n        diskTypeId: network-ssd\n        diskSize: 16\n      maintenanceWindow:\n        type: WEEKLY\n        day: SAT\n        hour: 12\n      hosts:\n        - zone: ru-central1-a\n          name: na-1\n          subnetId: ${fooVpcSubnet.id}\n        - zone: ru-central1-b\n          name: nb-1\n          backupPriority: 5\n          subnetId: ${bar.id}\n        - zone: ru-central1-b\n          name: nb-2\n          backupPriority: 10\n          subnetId: ${bar.id}\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-a\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.1.0.0/24\n  bar:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-b\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.2.0.0/24\n```\n\nExample of creating a MySQL Cluster with different host priorities. During failover master will be set to nb-2\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"fooVpcNetwork\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"fooVpcSubnet\", {\n    zone: \"ru-central1-a\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.1.0.0/24\"],\n});\nconst bar = new yandex.VpcSubnet(\"bar\", {\n    zone: \"ru-central1-b\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.2.0.0/24\"],\n});\nconst fooMdbMysqlCluster = new yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", {\n    environment: \"PRESTABLE\",\n    networkId: fooVpcNetwork.id,\n    version: \"8.0\",\n    resources: {\n        resourcePresetId: \"s2.micro\",\n        diskTypeId: \"network-ssd\",\n        diskSize: 16,\n    },\n    maintenanceWindow: {\n        type: \"WEEKLY\",\n        day: \"SAT\",\n        hour: 12,\n    },\n    hosts: [\n        {\n            zone: \"ru-central1-a\",\n            name: \"na-1\",\n            subnetId: fooVpcSubnet.id,\n        },\n        {\n            zone: \"ru-central1-b\",\n            name: \"nb-1\",\n            priority: 5,\n            subnetId: bar.id,\n        },\n        {\n            zone: \"ru-central1-b\",\n            name: \"nb-2\",\n            priority: 10,\n            subnetId: bar.id,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    zone=\"ru-central1-a\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.1.0.0/24\"])\nbar = yandex.VpcSubnet(\"bar\",\n    zone=\"ru-central1-b\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.2.0.0/24\"])\nfoo_mdb_mysql_cluster = yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\",\n    environment=\"PRESTABLE\",\n    network_id=foo_vpc_network.id,\n    version=\"8.0\",\n    resources=yandex.MdbMysqlClusterResourcesArgs(\n        resource_preset_id=\"s2.micro\",\n        disk_type_id=\"network-ssd\",\n        disk_size=16,\n    ),\n    maintenance_window=yandex.MdbMysqlClusterMaintenanceWindowArgs(\n        type=\"WEEKLY\",\n        day=\"SAT\",\n        hour=12,\n    ),\n    hosts=[\n        yandex.MdbMysqlClusterHostArgs(\n            zone=\"ru-central1-a\",\n            name=\"na-1\",\n            subnet_id=foo_vpc_subnet.id,\n        ),\n        yandex.MdbMysqlClusterHostArgs(\n            zone=\"ru-central1-b\",\n            name=\"nb-1\",\n            priority=5,\n            subnet_id=bar.id,\n        ),\n        yandex.MdbMysqlClusterHostArgs(\n            zone=\"ru-central1-b\",\n            name=\"nb-2\",\n            priority=10,\n            subnet_id=bar.id,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        Zone = \"ru-central1-a\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.1.0.0/24\",\n        },\n    });\n\n    var bar = new Yandex.VpcSubnet(\"bar\", new()\n    {\n        Zone = \"ru-central1-b\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.2.0.0/24\",\n        },\n    });\n\n    var fooMdbMysqlCluster = new Yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", new()\n    {\n        Environment = \"PRESTABLE\",\n        NetworkId = fooVpcNetwork.Id,\n        Version = \"8.0\",\n        Resources = new Yandex.Inputs.MdbMysqlClusterResourcesArgs\n        {\n            ResourcePresetId = \"s2.micro\",\n            DiskTypeId = \"network-ssd\",\n            DiskSize = 16,\n        },\n        MaintenanceWindow = new Yandex.Inputs.MdbMysqlClusterMaintenanceWindowArgs\n        {\n            Type = \"WEEKLY\",\n            Day = \"SAT\",\n            Hour = 12,\n        },\n        Hosts = new[]\n        {\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-a\",\n                Name = \"na-1\",\n                SubnetId = fooVpcSubnet.Id,\n            },\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-b\",\n                Name = \"nb-1\",\n                Priority = 5,\n                SubnetId = bar.Id,\n            },\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-b\",\n                Name = \"nb-2\",\n                Priority = 10,\n                SubnetId = bar.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-a\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.1.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbar, err := yandex.NewVpcSubnet(ctx, \"bar\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-b\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.2.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbMysqlCluster(ctx, \"fooMdbMysqlCluster\", \u0026yandex.MdbMysqlClusterArgs{\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tNetworkId:   fooVpcNetwork.ID(),\n\t\t\tVersion:     pulumi.String(\"8.0\"),\n\t\t\tResources: \u0026MdbMysqlClusterResourcesArgs{\n\t\t\t\tResourcePresetId: pulumi.String(\"s2.micro\"),\n\t\t\t\tDiskTypeId:       pulumi.String(\"network-ssd\"),\n\t\t\t\tDiskSize:         pulumi.Float64(16),\n\t\t\t},\n\t\t\tMaintenanceWindow: \u0026MdbMysqlClusterMaintenanceWindowArgs{\n\t\t\t\tType: pulumi.String(\"WEEKLY\"),\n\t\t\t\tDay:  pulumi.String(\"SAT\"),\n\t\t\t\tHour: pulumi.Float64(12),\n\t\t\t},\n\t\t\tHosts: MdbMysqlClusterHostArray{\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-a\"),\n\t\t\t\t\tName:     pulumi.String(\"na-1\"),\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t},\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-b\"),\n\t\t\t\t\tName:     pulumi.String(\"nb-1\"),\n\t\t\t\t\tPriority: pulumi.Float64(5),\n\t\t\t\t\tSubnetId: bar.ID(),\n\t\t\t\t},\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-b\"),\n\t\t\t\t\tName:     pulumi.String(\"nb-2\"),\n\t\t\t\t\tPriority: pulumi.Float64(10),\n\t\t\t\t\tSubnetId: bar.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbMysqlCluster;\nimport com.pulumi.yandex.MdbMysqlClusterArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterMaintenanceWindowArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterHostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-a\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.1.0.0/24\")\n            .build());\n\n        var bar = new VpcSubnet(\"bar\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-b\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.2.0.0/24\")\n            .build());\n\n        var fooMdbMysqlCluster = new MdbMysqlCluster(\"fooMdbMysqlCluster\", MdbMysqlClusterArgs.builder()        \n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .version(\"8.0\")\n            .resources(MdbMysqlClusterResourcesArgs.builder()\n                .resourcePresetId(\"s2.micro\")\n                .diskTypeId(\"network-ssd\")\n                .diskSize(16)\n                .build())\n            .maintenanceWindow(MdbMysqlClusterMaintenanceWindowArgs.builder()\n                .type(\"WEEKLY\")\n                .day(\"SAT\")\n                .hour(12)\n                .build())\n            .hosts(            \n                MdbMysqlClusterHostArgs.builder()\n                    .zone(\"ru-central1-a\")\n                    .name(\"na-1\")\n                    .subnetId(fooVpcSubnet.id())\n                    .build(),\n                MdbMysqlClusterHostArgs.builder()\n                    .zone(\"ru-central1-b\")\n                    .name(\"nb-1\")\n                    .priority(5)\n                    .subnetId(bar.id())\n                    .build(),\n                MdbMysqlClusterHostArgs.builder()\n                    .zone(\"ru-central1-b\")\n                    .name(\"nb-2\")\n                    .priority(10)\n                    .subnetId(bar.id())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbMysqlCluster:\n    type: yandex:MdbMysqlCluster\n    properties:\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      version: '8.0'\n      resources:\n        resourcePresetId: s2.micro\n        diskTypeId: network-ssd\n        diskSize: 16\n      maintenanceWindow:\n        type: WEEKLY\n        day: SAT\n        hour: 12\n      hosts:\n        - zone: ru-central1-a\n          name: na-1\n          subnetId: ${fooVpcSubnet.id}\n        - zone: ru-central1-b\n          name: nb-1\n          priority: 5\n          subnetId: ${bar.id}\n        - zone: ru-central1-b\n          name: nb-2\n          priority: 10\n          subnetId: ${bar.id}\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-a\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.1.0.0/24\n  bar:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-b\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.2.0.0/24\n```\n\nExample of creating a Single Node MySQL with user params.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"fooVpcNetwork\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"fooVpcSubnet\", {\n    zone: \"ru-central1-a\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.5.0.0/24\"],\n});\nconst fooMdbMysqlCluster = new yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", {\n    environment: \"PRESTABLE\",\n    networkId: fooVpcNetwork.id,\n    version: \"8.0\",\n    resources: {\n        resourcePresetId: \"s2.micro\",\n        diskTypeId: \"network-ssd\",\n        diskSize: 16,\n    },\n    maintenanceWindow: {\n        type: \"ANYTIME\",\n    },\n    hosts: [{\n        zone: \"ru-central1-a\",\n        subnetId: fooVpcSubnet.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    zone=\"ru-central1-a\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.5.0.0/24\"])\nfoo_mdb_mysql_cluster = yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\",\n    environment=\"PRESTABLE\",\n    network_id=foo_vpc_network.id,\n    version=\"8.0\",\n    resources=yandex.MdbMysqlClusterResourcesArgs(\n        resource_preset_id=\"s2.micro\",\n        disk_type_id=\"network-ssd\",\n        disk_size=16,\n    ),\n    maintenance_window=yandex.MdbMysqlClusterMaintenanceWindowArgs(\n        type=\"ANYTIME\",\n    ),\n    hosts=[yandex.MdbMysqlClusterHostArgs(\n        zone=\"ru-central1-a\",\n        subnet_id=foo_vpc_subnet.id,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        Zone = \"ru-central1-a\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.5.0.0/24\",\n        },\n    });\n\n    var fooMdbMysqlCluster = new Yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", new()\n    {\n        Environment = \"PRESTABLE\",\n        NetworkId = fooVpcNetwork.Id,\n        Version = \"8.0\",\n        Resources = new Yandex.Inputs.MdbMysqlClusterResourcesArgs\n        {\n            ResourcePresetId = \"s2.micro\",\n            DiskTypeId = \"network-ssd\",\n            DiskSize = 16,\n        },\n        MaintenanceWindow = new Yandex.Inputs.MdbMysqlClusterMaintenanceWindowArgs\n        {\n            Type = \"ANYTIME\",\n        },\n        Hosts = new[]\n        {\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-a\",\n                SubnetId = fooVpcSubnet.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-a\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.5.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbMysqlCluster(ctx, \"fooMdbMysqlCluster\", \u0026yandex.MdbMysqlClusterArgs{\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tNetworkId:   fooVpcNetwork.ID(),\n\t\t\tVersion:     pulumi.String(\"8.0\"),\n\t\t\tResources: \u0026MdbMysqlClusterResourcesArgs{\n\t\t\t\tResourcePresetId: pulumi.String(\"s2.micro\"),\n\t\t\t\tDiskTypeId:       pulumi.String(\"network-ssd\"),\n\t\t\t\tDiskSize:         pulumi.Float64(16),\n\t\t\t},\n\t\t\tMaintenanceWindow: \u0026MdbMysqlClusterMaintenanceWindowArgs{\n\t\t\t\tType: pulumi.String(\"ANYTIME\"),\n\t\t\t},\n\t\t\tHosts: MdbMysqlClusterHostArray{\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-a\"),\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbMysqlCluster;\nimport com.pulumi.yandex.MdbMysqlClusterArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterMaintenanceWindowArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterHostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-a\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.5.0.0/24\")\n            .build());\n\n        var fooMdbMysqlCluster = new MdbMysqlCluster(\"fooMdbMysqlCluster\", MdbMysqlClusterArgs.builder()        \n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .version(\"8.0\")\n            .resources(MdbMysqlClusterResourcesArgs.builder()\n                .resourcePresetId(\"s2.micro\")\n                .diskTypeId(\"network-ssd\")\n                .diskSize(16)\n                .build())\n            .maintenanceWindow(MdbMysqlClusterMaintenanceWindowArgs.builder()\n                .type(\"ANYTIME\")\n                .build())\n            .hosts(MdbMysqlClusterHostArgs.builder()\n                .zone(\"ru-central1-a\")\n                .subnetId(fooVpcSubnet.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbMysqlCluster:\n    type: yandex:MdbMysqlCluster\n    properties:\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      version: '8.0'\n      resources:\n        resourcePresetId: s2.micro\n        diskTypeId: network-ssd\n        diskSize: 16\n      maintenanceWindow:\n        type: ANYTIME\n      hosts:\n        - zone: ru-central1-a\n          subnetId: ${fooVpcSubnet.id}\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-a\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.5.0.0/24\n```\n\nExample of restoring MySQL cluster.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"fooVpcNetwork\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"fooVpcSubnet\", {\n    zone: \"ru-central1-a\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.5.0.0/24\"],\n});\nconst fooMdbMysqlCluster = new yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", {\n    environment: \"PRESTABLE\",\n    networkId: fooVpcNetwork.id,\n    version: \"8.0\",\n    restore: {\n        backupId: \"c9qj2tns23432471d9qha:stream_20210122T141717Z\",\n        time: \"2021-01-23T15:04:05\",\n    },\n    resources: {\n        resourcePresetId: \"s2.micro\",\n        diskTypeId: \"network-ssd\",\n        diskSize: 16,\n    },\n    hosts: [{\n        zone: \"ru-central1-a\",\n        subnetId: fooVpcSubnet.id,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    zone=\"ru-central1-a\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.5.0.0/24\"])\nfoo_mdb_mysql_cluster = yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\",\n    environment=\"PRESTABLE\",\n    network_id=foo_vpc_network.id,\n    version=\"8.0\",\n    restore=yandex.MdbMysqlClusterRestoreArgs(\n        backup_id=\"c9qj2tns23432471d9qha:stream_20210122T141717Z\",\n        time=\"2021-01-23T15:04:05\",\n    ),\n    resources=yandex.MdbMysqlClusterResourcesArgs(\n        resource_preset_id=\"s2.micro\",\n        disk_type_id=\"network-ssd\",\n        disk_size=16,\n    ),\n    hosts=[yandex.MdbMysqlClusterHostArgs(\n        zone=\"ru-central1-a\",\n        subnet_id=foo_vpc_subnet.id,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        Zone = \"ru-central1-a\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.5.0.0/24\",\n        },\n    });\n\n    var fooMdbMysqlCluster = new Yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", new()\n    {\n        Environment = \"PRESTABLE\",\n        NetworkId = fooVpcNetwork.Id,\n        Version = \"8.0\",\n        Restore = new Yandex.Inputs.MdbMysqlClusterRestoreArgs\n        {\n            BackupId = \"c9qj2tns23432471d9qha:stream_20210122T141717Z\",\n            Time = \"2021-01-23T15:04:05\",\n        },\n        Resources = new Yandex.Inputs.MdbMysqlClusterResourcesArgs\n        {\n            ResourcePresetId = \"s2.micro\",\n            DiskTypeId = \"network-ssd\",\n            DiskSize = 16,\n        },\n        Hosts = new[]\n        {\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-a\",\n                SubnetId = fooVpcSubnet.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-a\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.5.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbMysqlCluster(ctx, \"fooMdbMysqlCluster\", \u0026yandex.MdbMysqlClusterArgs{\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tNetworkId:   fooVpcNetwork.ID(),\n\t\t\tVersion:     pulumi.String(\"8.0\"),\n\t\t\tRestore: \u0026MdbMysqlClusterRestoreArgs{\n\t\t\t\tBackupId: pulumi.String(\"c9qj2tns23432471d9qha:stream_20210122T141717Z\"),\n\t\t\t\tTime:     pulumi.String(\"2021-01-23T15:04:05\"),\n\t\t\t},\n\t\t\tResources: \u0026MdbMysqlClusterResourcesArgs{\n\t\t\t\tResourcePresetId: pulumi.String(\"s2.micro\"),\n\t\t\t\tDiskTypeId:       pulumi.String(\"network-ssd\"),\n\t\t\t\tDiskSize:         pulumi.Float64(16),\n\t\t\t},\n\t\t\tHosts: MdbMysqlClusterHostArray{\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-a\"),\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbMysqlCluster;\nimport com.pulumi.yandex.MdbMysqlClusterArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterRestoreArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterHostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-a\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.5.0.0/24\")\n            .build());\n\n        var fooMdbMysqlCluster = new MdbMysqlCluster(\"fooMdbMysqlCluster\", MdbMysqlClusterArgs.builder()        \n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .version(\"8.0\")\n            .restore(MdbMysqlClusterRestoreArgs.builder()\n                .backupId(\"c9qj2tns23432471d9qha:stream_20210122T141717Z\")\n                .time(\"2021-01-23T15:04:05\")\n                .build())\n            .resources(MdbMysqlClusterResourcesArgs.builder()\n                .resourcePresetId(\"s2.micro\")\n                .diskTypeId(\"network-ssd\")\n                .diskSize(16)\n                .build())\n            .hosts(MdbMysqlClusterHostArgs.builder()\n                .zone(\"ru-central1-a\")\n                .subnetId(fooVpcSubnet.id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbMysqlCluster:\n    type: yandex:MdbMysqlCluster\n    properties:\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      version: '8.0'\n      restore:\n        backupId: c9qj2tns23432471d9qha:stream_20210122T141717Z\n        time: 2021-01-23T15:04:05\n      resources:\n        resourcePresetId: s2.micro\n        diskTypeId: network-ssd\n        diskSize: 16\n      hosts:\n        - zone: ru-central1-a\n          subnetId: ${fooVpcSubnet.id}\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-a\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.5.0.0/24\n```\n\n{{% /example %}}\n{{% /examples %}}\n## MySQL config\n\nIf not specified `mysql_config` then does not make any changes.  \n\n* `sql_mode` default value: `ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION`  \n\nsome of:  \n\t-\t1: \"ALLOW_INVALID_DATES\"\n\t-\t2: \"ANSI_QUOTES\"\n\t-\t3: \"ERROR_FOR_DIVISION_BY_ZERO\"\n\t-\t4: \"HIGH_NOT_PRECEDENCE\"\n\t-\t5: \"IGNORE_SPACE\"\n\t-\t6: \"NO_AUTO_VALUE_ON_ZERO\"\n\t-\t7: \"NO_BACKSLASH_ESCAPES\"\n\t-\t8: \"NO_ENGINE_SUBSTITUTION\"\n\t-\t9: \"NO_UNSIGNED_SUBTRACTION\"\n\t-\t10: \"NO_ZERO_DATE\"\n\t-\t11: \"NO_ZERO_IN_DATE\"\n\t-\t15: \"ONLY_FULL_GROUP_BY\"\n\t-\t16: \"PAD_CHAR_TO_FULL_LENGTH\"\n\t-\t17: \"PIPES_AS_CONCAT\"\n\t-\t18: \"REAL_AS_FLOAT\"\n\t-\t19: \"STRICT_ALL_TABLES\"\n\t-\t20: \"STRICT_TRANS_TABLES\"\n\t-\t21: \"TIME_TRUNCATE_FRACTIONAL\"\n\t-\t22: \"ANSI\"\n\t-\t23: \"TRADITIONAL\"\n\t-\t24: \"NO_DIR_IN_CREATE\"\nor:  \n  - 0: \"SQLMODE_UNSPECIFIED\"\n\n### MysqlConfig 8.0\n* `audit_log` boolean\n\n* `auto_increment_increment` integer\n\n* `auto_increment_offset` integer\n\n* `binlog_cache_size` integer\n\n* `binlog_group_commit_sync_delay` integer\n\n* `binlog_row_image` one of:\n  - 0: \"BINLOG_ROW_IMAGE_UNSPECIFIED\"\n  - 1: \"FULL\"\n  - 2: \"MINIMAL\"\n  - 3: \"NOBLOB\"\n\n* `binlog_rows_query_log_events` boolean\n\n* `character_set_server` text\n\n* `collation_server` text\n\n* `default_authentication_plugin` one of:\n  - 0: \"AUTH_PLUGIN_UNSPECIFIED\"\n  - 1: \"MYSQL_NATIVE_PASSWORD\"\n  - 2: \"CACHING_SHA2_PASSWORD\"\n  - 3: \"SHA256_PASSWORD\"\n\n* `default_time_zone` text\n\n* `explicit_defaults_for_timestamp` boolean\n\n* `general_log` boolean\n\n* `group_concat_max_len` integer\n\n* `innodb_adaptive_hash_index` boolean\n\n* `innodb_buffer_pool_size` integer\n\n* `innodb_flush_log_at_trx_commit` integer\n\n* `innodb_ft_max_token_size` integer\n\n* `innodb_ft_min_token_size` integer\n\n* `innodb_io_capacity` integer\n\n* `innodb_io_capacity_max` integer\n\n* `innodb_lock_wait_timeout` integer\n\n* `innodb_log_buffer_size` integer\n\n* `innodb_log_file_size` integer\n\n* `innodb_numa_interleave` boolean\n\n* `innodb_online_alter_log_max_size` integer\n\n* `innodb_page_size` integer (create-only option)\n\n* `innodb_print_all_deadlocks` boolean\n\n* `innodb_purge_threads` integer\n\n* `innodb_read_io_threads` integer\n\n* `innodb_temp_data_file_max_size` integer\n\n* `innodb_thread_concurrency` integer\n\n* `innodb_write_io_threads` integer\n\n* `interactive_timeout` integer\n\n* `join_buffer_size` integer\n\n* `log_slow_rate_limit` intger\n\n* `log_slow_rate_type` one of:\n   - 0: \"SESSION\"\n   - 1: \"QUERY\"\n\n* `log_slow_sp_statements` boolean\n\n* `long_query_time` float\n\n* `lower_case_table_names` boolean (create-only option)\n\n* `max_allowed_packet` integer\n\n* `max_connections` integer\n\n* `max_heap_table_size` integer\n\n* `mdb_offline_mode_disable_lag` integer\n\n* `mdb_offline_mode_enable_lag` integer\n\n* `mdb_preserve_binlog_bytes` integer\n\n* `mdb_priority_choice_max_lag` integer\n\n* `net_read_timeout` integer\n\n* `net_write_timeout` integer\n\n* `range_optimizer_max_mem_size` integer\n\n* `regexp_time_limit` integer\n\n* `rpl_semi_sync_master_wait_for_slave_count` integer\n\n* `slave_parallel_type` one of:\n  - 0: \"SLAVE_PARALLEL_TYPE_UNSPECIFIED\"\n  - 1: \"DATABASE\"\n  - 2: \"LOGICAL_CLOCK\"\n\n* `slow_query_log` boolean\n\n* `slow_query_log_always_write_time` float\n\n* `slave_parallel_workers` integer\n\n* `sort_buffer_size` integer\n\n* `sync_binlog` integer\n\n* `table_definition_cache` integer\n\n* `table_open_cache` integer\n\n* `table_open_cache_instances` integer\n\n* `thread_cache_size` integer\n\n* `thread_stack` integer\n\n* `tmp_table_size` integer\n\n* `transaction_isolation` one of:\n  - 0: \"TRANSACTION_ISOLATION_UNSPECIFIED\"\n  - 1: \"READ_COMMITTED\"\n  - 2: \"REPEATABLE_READ\"\n  - 3: \"SERIALIZABLE\"\n\n* `wait_timeout` integer\n\n### MysqlConfig 5.7\n* `audit_log` boolean\n\n* `auto_increment_increment` integer\n\n* `auto_increment_offset` integer\n\n* `binlog_cache_size` integer\n\n* `binlog_group_commit_sync_delay` integer\n\n* `binlog_row_image` one of:\n  - 0: \"BINLOG_ROW_IMAGE_UNSPECIFIED\"\n  - 1: \"FULL\"\n  - 2: \"MINIMAL\"\n  - 3: \"NOBLOB\"\n\n* `binlog_rows_query_log_events` boolean\n\n* `character_set_server` text\n\n* `collation_server` text\n\n* `default_authentication_plugin` one of:\n  - 0: \"AUTH_PLUGIN_UNSPECIFIED\"\n  - 1: \"MYSQL_NATIVE_PASSWORD\"\n  - 2: \"CACHING_SHA2_PASSWORD\"\n  - 3: \"SHA256_PASSWORD\"\n\n* `default_time_zone` text\n\n* `explicit_defaults_for_timestamp` boolean\n\n* `general_log` boolean\n\n* `group_concat_max_len` integer\n\n* `innodb_adaptive_hash_index` boolean\n\n* `innodb_buffer_pool_size` integer\n\n* `innodb_flush_log_at_trx_commit` integer\n\n* `innodb_ft_max_token_size` integer\n\n* `innodb_ft_min_token_size` integer\n\n* `innodb_io_capacity` integer\n\n* `innodb_io_capacity_max` integer\n\n* `innodb_lock_wait_timeout` integer\n\n* `innodb_log_buffer_size` integer\n\n* `innodb_log_file_size` integer\n\n* `innodb_numa_interleave` boolean\n\n* `innodb_online_alter_log_max_size` integer\n\n* `innodb_page_size` integer (create-only option)\n\n* `innodb_print_all_deadlocks` boolean\n\n* `innodb_purge_threads` integer\n\n* `innodb_read_io_threads` integer\n\n* `innodb_temp_data_file_max_size` integer\n\n* `innodb_thread_concurrency` integer\n\n* `innodb_write_io_threads` integer\n\n* `interactive_timeout` integer\n\n* `join_buffer_size` integer\n\n* `log_slow_rate_limit` integer\n\n* `log_slow_rate_type` one of:\n   - 0: \"SESSION\"\n   - 1: \"QUERY\"\n\n* `log_slow_sp_statements` boolean\n\n* `long_query_time` float\n\n* `lower_case_table_names` boolean (create-only option)\n\n* `max_allowed_packet` integer\n\n* `max_connections` integer\n\n* `max_heap_table_size` integer\n\n* `mdb_offline_mode_disable_lag` integer\n\n* `mdb_offline_mode_enable_lag` integer\n\n* `mdb_preserve_binlog_bytes` integer\n\n* `mdb_priority_choice_max_lag` integer\n\n* `net_read_timeout` integer\n\n* `net_write_timeout` integer\n\n* `range_optimizer_max_mem_size` integer\n\n* `rpl_semi_sync_master_wait_for_slave_count` integer\n\n* `show_compatibility_56` boolean\n\n* `slave_parallel_type` one of:\n  - 0: \"SLAVE_PARALLEL_TYPE_UNSPECIFIED\"\n  - 1: \"DATABASE\"\n  - 2: \"LOGICAL_CLOCK\"\n\n* `slow_query_log` boolean\n\n* `slow_query_log_always_write_time` float\n\n* `slave_parallel_workers` integer\n\n* `sort_buffer_size` integer\n\n* `sync_binlog` integer\n\n* `table_definition_cache` integer\n\n* `table_open_cache` integer\n\n* `table_open_cache_instances` integer\n\n* `thread_cache_size` integer\n\n* `thread_stack` integer\n\n* `tmp_table_size` integer\n\n* `transaction_isolation` one of:\n  - 0: \"TRANSACTION_ISOLATION_UNSPECIFIED\"\n  - 1: \"READ_COMMITTED\"\n  - 2: \"REPEATABLE_READ\"\n  - 3: \"SERIALIZABLE\"\n\n\n## Import\n\nA cluster can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/mdbMysqlCluster:MdbMysqlCluster foo cluster_id\n```\n\n ",
            "properties": {
                "access": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterAccess:MdbMysqlClusterAccess",
                    "description": "Access policy to the MySQL cluster. The structure is documented below.\n"
                },
                "allowRegenerationHost": {
                    "type": "boolean",
                    "deprecationMessage": "allow_regeneration_host is deprecated"
                },
                "backupRetainPeriodDays": {
                    "type": "number",
                    "description": "The period in days during which backups are stored.\n"
                },
                "backupWindowStart": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterBackupWindowStart:MdbMysqlClusterBackupWindowStart",
                    "description": "Time to start the daily backup, in the UTC. The structure is documented below.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the cluster.\n"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMysqlClusterDatabase:MdbMysqlClusterDatabase"
                    },
                    "description": "To manage databases, please switch to using a separate resource type `yandex_mdb_mysql_databases`.\n",
                    "deprecationMessage": "database is deprecated"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the MySQL cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the MySQL cluster.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "health": {
                    "type": "string",
                    "description": "Aggregated health of the cluster.\n"
                },
                "hostGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMysqlClusterHost:MdbMysqlClusterHost"
                    },
                    "description": "A host of the MySQL cluster. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the MySQL cluster.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterMaintenanceWindow:MdbMysqlClusterMaintenanceWindow",
                    "description": "Maintenance policy of the MySQL cluster. The structure is documented below.\n"
                },
                "mysqlConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "MySQL cluster config. Detail info in \"MySQL config\" section (documented below).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Host state name. It should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please refer to `replication_source_name` parameter.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the MySQL cluster uses.\n"
                },
                "performanceDiagnostics": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterPerformanceDiagnostics:MdbMysqlClusterPerformanceDiagnostics",
                    "description": "Cluster performance diagnostics settings. The structure is documented below. [YC Documentation](https://cloud.yandex.com/en-ru/docs/managed-mysql/api-ref/grpc/cluster_service#PerformanceDiagnostics)\n"
                },
                "resources": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterResources:MdbMysqlClusterResources",
                    "description": "Resources allocated to hosts of the MySQL cluster. The structure is documented below.\n"
                },
                "restore": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterRestore:MdbMysqlClusterRestore",
                    "description": "The cluster will be created from the specified backup. The structure is documented below.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the cluster.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterTimeouts:MdbMysqlClusterTimeouts"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMysqlClusterUser:MdbMysqlClusterUser"
                    },
                    "description": "To manage users, please switch to using a separate resource type `yandex.MdbMysqlUser`.\n",
                    "deprecationMessage": "user is deprecated"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the MySQL cluster. (allowed versions are: 5.7, 8.0)\n"
                }
            },
            "required": [
                "backupRetainPeriodDays",
                "createdAt",
                "deletionProtection",
                "environment",
                "folderId",
                "health",
                "hosts",
                "hostGroupIds",
                "mysqlConfig",
                "name",
                "networkId",
                "resources",
                "status",
                "timeouts",
                "version"
            ],
            "inputProperties": {
                "access": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterAccess:MdbMysqlClusterAccess",
                    "description": "Access policy to the MySQL cluster. The structure is documented below.\n"
                },
                "allowRegenerationHost": {
                    "type": "boolean",
                    "deprecationMessage": "allow_regeneration_host is deprecated"
                },
                "backupRetainPeriodDays": {
                    "type": "number",
                    "description": "The period in days during which backups are stored.\n"
                },
                "backupWindowStart": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterBackupWindowStart:MdbMysqlClusterBackupWindowStart",
                    "description": "Time to start the daily backup, in the UTC. The structure is documented below.\n"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMysqlClusterDatabase:MdbMysqlClusterDatabase"
                    },
                    "description": "To manage databases, please switch to using a separate resource type `yandex_mdb_mysql_databases`.\n",
                    "deprecationMessage": "database is deprecated"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the MySQL cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the MySQL cluster.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "hostGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMysqlClusterHost:MdbMysqlClusterHost"
                    },
                    "description": "A host of the MySQL cluster. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the MySQL cluster.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterMaintenanceWindow:MdbMysqlClusterMaintenanceWindow",
                    "description": "Maintenance policy of the MySQL cluster. The structure is documented below.\n"
                },
                "mysqlConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "MySQL cluster config. Detail info in \"MySQL config\" section (documented below).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Host state name. It should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please refer to `replication_source_name` parameter.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the MySQL cluster uses.\n"
                },
                "performanceDiagnostics": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterPerformanceDiagnostics:MdbMysqlClusterPerformanceDiagnostics",
                    "description": "Cluster performance diagnostics settings. The structure is documented below. [YC Documentation](https://cloud.yandex.com/en-ru/docs/managed-mysql/api-ref/grpc/cluster_service#PerformanceDiagnostics)\n"
                },
                "resources": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterResources:MdbMysqlClusterResources",
                    "description": "Resources allocated to hosts of the MySQL cluster. The structure is documented below.\n"
                },
                "restore": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterRestore:MdbMysqlClusterRestore",
                    "description": "The cluster will be created from the specified backup. The structure is documented below.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbMysqlClusterTimeouts:MdbMysqlClusterTimeouts"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMysqlClusterUser:MdbMysqlClusterUser"
                    },
                    "description": "To manage users, please switch to using a separate resource type `yandex.MdbMysqlUser`.\n",
                    "deprecationMessage": "user is deprecated"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the MySQL cluster. (allowed versions are: 5.7, 8.0)\n"
                }
            },
            "requiredInputs": [
                "environment",
                "hosts",
                "networkId",
                "resources",
                "timeouts",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbMysqlCluster resources.\n",
                "properties": {
                    "access": {
                        "$ref": "#/types/yandex:index/MdbMysqlClusterAccess:MdbMysqlClusterAccess",
                        "description": "Access policy to the MySQL cluster. The structure is documented below.\n"
                    },
                    "allowRegenerationHost": {
                        "type": "boolean",
                        "deprecationMessage": "allow_regeneration_host is deprecated"
                    },
                    "backupRetainPeriodDays": {
                        "type": "number",
                        "description": "The period in days during which backups are stored.\n"
                    },
                    "backupWindowStart": {
                        "$ref": "#/types/yandex:index/MdbMysqlClusterBackupWindowStart:MdbMysqlClusterBackupWindowStart",
                        "description": "Time to start the daily backup, in the UTC. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the cluster.\n"
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbMysqlClusterDatabase:MdbMysqlClusterDatabase"
                        },
                        "description": "To manage databases, please switch to using a separate resource type `yandex_mdb_mysql_databases`.\n",
                        "deprecationMessage": "database is deprecated"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the MySQL cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the MySQL cluster.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                    },
                    "health": {
                        "type": "string",
                        "description": "Aggregated health of the cluster.\n"
                    },
                    "hostGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbMysqlClusterHost:MdbMysqlClusterHost"
                        },
                        "description": "A host of the MySQL cluster. The structure is documented below.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the MySQL cluster.\n"
                    },
                    "maintenanceWindow": {
                        "$ref": "#/types/yandex:index/MdbMysqlClusterMaintenanceWindow:MdbMysqlClusterMaintenanceWindow",
                        "description": "Maintenance policy of the MySQL cluster. The structure is documented below.\n"
                    },
                    "mysqlConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "MySQL cluster config. Detail info in \"MySQL config\" section (documented below).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Host state name. It should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please refer to `replication_source_name` parameter.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the MySQL cluster uses.\n"
                    },
                    "performanceDiagnostics": {
                        "$ref": "#/types/yandex:index/MdbMysqlClusterPerformanceDiagnostics:MdbMysqlClusterPerformanceDiagnostics",
                        "description": "Cluster performance diagnostics settings. The structure is documented below. [YC Documentation](https://cloud.yandex.com/en-ru/docs/managed-mysql/api-ref/grpc/cluster_service#PerformanceDiagnostics)\n"
                    },
                    "resources": {
                        "$ref": "#/types/yandex:index/MdbMysqlClusterResources:MdbMysqlClusterResources",
                        "description": "Resources allocated to hosts of the MySQL cluster. The structure is documented below.\n"
                    },
                    "restore": {
                        "$ref": "#/types/yandex:index/MdbMysqlClusterRestore:MdbMysqlClusterRestore",
                        "description": "The cluster will be created from the specified backup. The structure is documented below.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/MdbMysqlClusterTimeouts:MdbMysqlClusterTimeouts"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbMysqlClusterUser:MdbMysqlClusterUser"
                        },
                        "description": "To manage users, please switch to using a separate resource type `yandex.MdbMysqlUser`.\n",
                        "deprecationMessage": "user is deprecated"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the MySQL cluster. (allowed versions are: 5.7, 8.0)\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbMysqlDatabase:MdbMysqlDatabase": {
            "description": "Manages a MySQL database within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-mysql/).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"fooVpcNetwork\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"fooVpcSubnet\", {\n    zone: \"ru-central1-a\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.5.0.0/24\"],\n});\nconst fooMdbMysqlCluster = new yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", {\n    environment: \"PRESTABLE\",\n    networkId: fooVpcNetwork.id,\n    version: \"8.0\",\n    resources: {\n        resourcePresetId: \"s2.micro\",\n        diskTypeId: \"network-ssd\",\n        diskSize: 16,\n    },\n    hosts: [{\n        zone: \"ru-central1-a\",\n        subnetId: fooVpcSubnet.id,\n    }],\n});\nconst fooMdbMysqlDatabase = new yandex.MdbMysqlDatabase(\"fooMdbMysqlDatabase\", {clusterId: fooMdbMysqlCluster.id});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    zone=\"ru-central1-a\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.5.0.0/24\"])\nfoo_mdb_mysql_cluster = yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\",\n    environment=\"PRESTABLE\",\n    network_id=foo_vpc_network.id,\n    version=\"8.0\",\n    resources=yandex.MdbMysqlClusterResourcesArgs(\n        resource_preset_id=\"s2.micro\",\n        disk_type_id=\"network-ssd\",\n        disk_size=16,\n    ),\n    hosts=[yandex.MdbMysqlClusterHostArgs(\n        zone=\"ru-central1-a\",\n        subnet_id=foo_vpc_subnet.id,\n    )])\nfoo_mdb_mysql_database = yandex.MdbMysqlDatabase(\"fooMdbMysqlDatabase\", cluster_id=foo_mdb_mysql_cluster.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        Zone = \"ru-central1-a\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.5.0.0/24\",\n        },\n    });\n\n    var fooMdbMysqlCluster = new Yandex.MdbMysqlCluster(\"fooMdbMysqlCluster\", new()\n    {\n        Environment = \"PRESTABLE\",\n        NetworkId = fooVpcNetwork.Id,\n        Version = \"8.0\",\n        Resources = new Yandex.Inputs.MdbMysqlClusterResourcesArgs\n        {\n            ResourcePresetId = \"s2.micro\",\n            DiskTypeId = \"network-ssd\",\n            DiskSize = 16,\n        },\n        Hosts = new[]\n        {\n            new Yandex.Inputs.MdbMysqlClusterHostArgs\n            {\n                Zone = \"ru-central1-a\",\n                SubnetId = fooVpcSubnet.Id,\n            },\n        },\n    });\n\n    var fooMdbMysqlDatabase = new Yandex.MdbMysqlDatabase(\"fooMdbMysqlDatabase\", new()\n    {\n        ClusterId = fooMdbMysqlCluster.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-a\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.5.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooMdbMysqlCluster, err := yandex.NewMdbMysqlCluster(ctx, \"fooMdbMysqlCluster\", \u0026yandex.MdbMysqlClusterArgs{\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tNetworkId:   fooVpcNetwork.ID(),\n\t\t\tVersion:     pulumi.String(\"8.0\"),\n\t\t\tResources: \u0026MdbMysqlClusterResourcesArgs{\n\t\t\t\tResourcePresetId: pulumi.String(\"s2.micro\"),\n\t\t\t\tDiskTypeId:       pulumi.String(\"network-ssd\"),\n\t\t\t\tDiskSize:         pulumi.Float64(16),\n\t\t\t},\n\t\t\tHosts: MdbMysqlClusterHostArray{\n\t\t\t\t\u0026MdbMysqlClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-a\"),\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbMysqlDatabase(ctx, \"fooMdbMysqlDatabase\", \u0026yandex.MdbMysqlDatabaseArgs{\n\t\t\tClusterId: fooMdbMysqlCluster.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbMysqlCluster;\nimport com.pulumi.yandex.MdbMysqlClusterArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterHostArgs;\nimport com.pulumi.yandex.MdbMysqlDatabase;\nimport com.pulumi.yandex.MdbMysqlDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-a\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.5.0.0/24\")\n            .build());\n\n        var fooMdbMysqlCluster = new MdbMysqlCluster(\"fooMdbMysqlCluster\", MdbMysqlClusterArgs.builder()        \n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .version(\"8.0\")\n            .resources(MdbMysqlClusterResourcesArgs.builder()\n                .resourcePresetId(\"s2.micro\")\n                .diskTypeId(\"network-ssd\")\n                .diskSize(16)\n                .build())\n            .hosts(MdbMysqlClusterHostArgs.builder()\n                .zone(\"ru-central1-a\")\n                .subnetId(fooVpcSubnet.id())\n                .build())\n            .build());\n\n        var fooMdbMysqlDatabase = new MdbMysqlDatabase(\"fooMdbMysqlDatabase\", MdbMysqlDatabaseArgs.builder()        \n            .clusterId(fooMdbMysqlCluster.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbMysqlDatabase:\n    type: yandex:MdbMysqlDatabase\n    properties:\n      clusterId: ${fooMdbMysqlCluster.id}\n  fooMdbMysqlCluster:\n    type: yandex:MdbMysqlCluster\n    properties:\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      version: '8.0'\n      resources:\n        resourcePresetId: s2.micro\n        diskTypeId: network-ssd\n        diskSize: 16\n      hosts:\n        - zone: ru-central1-a\n          subnetId: ${fooVpcSubnet.id}\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-a\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.5.0.0/24\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA MySQL database can be imported using the following format\n\n```sh\n $ pulumi import yandex:index/mdbMysqlDatabase:MdbMysqlDatabase foo {{cluster_id}}:{{database_name}}\n```\n\n ",
            "properties": {
                "clusterId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbMysqlDatabaseTimeouts:MdbMysqlDatabaseTimeouts"
                }
            },
            "required": [
                "clusterId",
                "name",
                "timeouts"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbMysqlDatabaseTimeouts:MdbMysqlDatabaseTimeouts"
                }
            },
            "requiredInputs": [
                "clusterId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbMysqlDatabase resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/MdbMysqlDatabaseTimeouts:MdbMysqlDatabaseTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbMysqlUser:MdbMysqlUser": {
            "description": "Manages a MySQL user within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-mysql/).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbMysqlCluster;\nimport com.pulumi.yandex.MdbMysqlClusterArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlClusterHostArgs;\nimport com.pulumi.yandex.MdbMysqlUser;\nimport com.pulumi.yandex.MdbMysqlUserArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlUserPermissionArgs;\nimport com.pulumi.yandex.inputs.MdbMysqlUserConnectionLimitsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-a\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.5.0.0/24\")\n            .build());\n\n        var fooMdbMysqlCluster = new MdbMysqlCluster(\"fooMdbMysqlCluster\", MdbMysqlClusterArgs.builder()        \n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .config(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .hosts(MdbMysqlClusterHostArgs.builder()\n                .zone(\"ru-central1-a\")\n                .subnetId(fooVpcSubnet.id())\n                .build())\n            .build());\n\n        var john = new MdbMysqlUser(\"john\", MdbMysqlUserArgs.builder()        \n            .clusterId(fooMdbMysqlCluster.id())\n            .password(\"password\")\n            .permissions(            \n                MdbMysqlUserPermissionArgs.builder()\n                    .databaseName(yandex_mdb_mysql_database.testdb().name())\n                    .roles(\"ALL\")\n                    .build(),\n                MdbMysqlUserPermissionArgs.builder()\n                    .databaseName(yandex_mdb_mysql_database.new_testdb().name())\n                    .roles(                    \n                        \"ALL\",\n                        \"INSERT\")\n                    .build())\n            .connectionLimits(MdbMysqlUserConnectionLimitsArgs.builder()\n                .maxQuestionsPerHour(10)\n                .maxUpdatesPerHour(20)\n                .maxConnectionsPerHour(30)\n                .maxUserConnections(40)\n                .build())\n            .globalPermissions(\"PROCESS\")\n            .authenticationPlugin(\"SHA256_PASSWORD\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  john:\n    type: yandex:MdbMysqlUser\n    properties:\n      clusterId: ${fooMdbMysqlCluster.id}\n      password: password\n      permissions:\n        - databaseName: ${yandex_mdb_mysql_database.testdb.name}\n          roles:\n            - ALL\n        - databaseName: ${yandex_mdb_mysql_database.new_testdb.name}\n          roles:\n            - ALL\n            - INSERT\n      connectionLimits:\n        maxQuestionsPerHour: 10\n        maxUpdatesPerHour: 20\n        maxConnectionsPerHour: 30\n        maxUserConnections: 40\n      globalPermissions:\n        - PROCESS\n      authenticationPlugin: SHA256_PASSWORD\n  fooMdbMysqlCluster:\n    type: yandex:MdbMysqlCluster\n    properties:\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      config:\n        - version: 14\n          resources:\n            - resourcePresetId: s2.micro\n              diskTypeId: network-ssd\n              diskSize: 16\n      hosts:\n        - zone: ru-central1-a\n          subnetId: ${fooVpcSubnet.id}\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-a\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.5.0.0/24\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA MySQL user can be imported using the following format\n\n```sh\n $ pulumi import yandex:index/mdbMysqlUser:MdbMysqlUser foo {{cluster_id}}:{{username}}\n```\n\n ",
            "properties": {
                "authenticationPlugin": {
                    "type": "string",
                    "description": "Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD` (for version 5.7 `MYSQL_NATIVE_PASSWORD`, `SHA256_PASSWORD`)\n"
                },
                "clusterId": {
                    "type": "string"
                },
                "connectionLimits": {
                    "$ref": "#/types/yandex:index/MdbMysqlUserConnectionLimits:MdbMysqlUserConnectionLimits",
                    "description": "User's connection limits. The structure is documented below.\nIf the attribute is not specified there will be no changes.\n"
                },
                "globalPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List user's global permissions     \nAllowed permissions:  `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS` for clear list use empty list.\nIf the attribute is not specified there will be no changes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n",
                    "secret": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMysqlUserPermission:MdbMysqlUserPermission"
                    },
                    "description": "Set of permissions granted to the user. The structure is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbMysqlUserTimeouts:MdbMysqlUserTimeouts"
                }
            },
            "required": [
                "authenticationPlugin",
                "clusterId",
                "globalPermissions",
                "name",
                "password",
                "timeouts"
            ],
            "inputProperties": {
                "authenticationPlugin": {
                    "type": "string",
                    "description": "Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD` (for version 5.7 `MYSQL_NATIVE_PASSWORD`, `SHA256_PASSWORD`)\n"
                },
                "clusterId": {
                    "type": "string"
                },
                "connectionLimits": {
                    "$ref": "#/types/yandex:index/MdbMysqlUserConnectionLimits:MdbMysqlUserConnectionLimits",
                    "description": "User's connection limits. The structure is documented below.\nIf the attribute is not specified there will be no changes.\n"
                },
                "globalPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List user's global permissions     \nAllowed permissions:  `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS` for clear list use empty list.\nIf the attribute is not specified there will be no changes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n",
                    "secret": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbMysqlUserPermission:MdbMysqlUserPermission"
                    },
                    "description": "Set of permissions granted to the user. The structure is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbMysqlUserTimeouts:MdbMysqlUserTimeouts"
                }
            },
            "requiredInputs": [
                "clusterId",
                "password",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbMysqlUser resources.\n",
                "properties": {
                    "authenticationPlugin": {
                        "type": "string",
                        "description": "Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD` (for version 5.7 `MYSQL_NATIVE_PASSWORD`, `SHA256_PASSWORD`)\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "connectionLimits": {
                        "$ref": "#/types/yandex:index/MdbMysqlUserConnectionLimits:MdbMysqlUserConnectionLimits",
                        "description": "User's connection limits. The structure is documented below.\nIf the attribute is not specified there will be no changes.\n"
                    },
                    "globalPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List user's global permissions     \nAllowed permissions:  `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS` for clear list use empty list.\nIf the attribute is not specified there will be no changes.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user.\n",
                        "secret": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbMysqlUserPermission:MdbMysqlUserPermission"
                        },
                        "description": "Set of permissions granted to the user. The structure is documented below.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/MdbMysqlUserTimeouts:MdbMysqlUserTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbPostgresqlCluster:MdbPostgresqlCluster": {
            "properties": {
                "config": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlClusterConfig:MdbPostgresqlClusterConfig"
                },
                "createdAt": {
                    "type": "string"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlClusterDatabase:MdbPostgresqlClusterDatabase"
                    },
                    "deprecationMessage": "database is deprecated"
                },
                "deletionProtection": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "environment": {
                    "type": "string"
                },
                "folderId": {
                    "type": "string"
                },
                "health": {
                    "type": "string"
                },
                "hostGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "hostMasterName": {
                    "type": "string"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlClusterHost:MdbPostgresqlClusterHost"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlClusterMaintenanceWindow:MdbPostgresqlClusterMaintenanceWindow"
                },
                "name": {
                    "type": "string"
                },
                "networkId": {
                    "type": "string"
                },
                "restore": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlClusterRestore:MdbPostgresqlClusterRestore"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlClusterTimeouts:MdbPostgresqlClusterTimeouts"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlClusterUser:MdbPostgresqlClusterUser"
                    },
                    "deprecationMessage": "user is deprecated"
                }
            },
            "required": [
                "config",
                "createdAt",
                "deletionProtection",
                "description",
                "environment",
                "folderId",
                "health",
                "hosts",
                "hostGroupIds",
                "hostMasterName",
                "labels",
                "name",
                "networkId",
                "securityGroupIds",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlClusterConfig:MdbPostgresqlClusterConfig"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlClusterDatabase:MdbPostgresqlClusterDatabase"
                    },
                    "deprecationMessage": "database is deprecated"
                },
                "deletionProtection": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "environment": {
                    "type": "string"
                },
                "folderId": {
                    "type": "string"
                },
                "hostGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "hostMasterName": {
                    "type": "string"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlClusterHost:MdbPostgresqlClusterHost"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlClusterMaintenanceWindow:MdbPostgresqlClusterMaintenanceWindow"
                },
                "name": {
                    "type": "string"
                },
                "networkId": {
                    "type": "string"
                },
                "restore": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlClusterRestore:MdbPostgresqlClusterRestore"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlClusterTimeouts:MdbPostgresqlClusterTimeouts"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlClusterUser:MdbPostgresqlClusterUser"
                    },
                    "deprecationMessage": "user is deprecated"
                }
            },
            "requiredInputs": [
                "config",
                "environment",
                "hosts",
                "networkId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbPostgresqlCluster resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlClusterConfig:MdbPostgresqlClusterConfig"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbPostgresqlClusterDatabase:MdbPostgresqlClusterDatabase"
                        },
                        "deprecationMessage": "database is deprecated"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "environment": {
                        "type": "string"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "health": {
                        "type": "string"
                    },
                    "hostGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hostMasterName": {
                        "type": "string"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbPostgresqlClusterHost:MdbPostgresqlClusterHost"
                        }
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "maintenanceWindow": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlClusterMaintenanceWindow:MdbPostgresqlClusterMaintenanceWindow"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string"
                    },
                    "restore": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlClusterRestore:MdbPostgresqlClusterRestore"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "status": {
                        "type": "string"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlClusterTimeouts:MdbPostgresqlClusterTimeouts"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbPostgresqlClusterUser:MdbPostgresqlClusterUser"
                        },
                        "deprecationMessage": "user is deprecated"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbPostgresqlDatabase:MdbPostgresqlDatabase": {
            "description": "Manages a PostgreSQL database within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-postgresql/).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"fooVpcNetwork\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"fooVpcSubnet\", {\n    zone: \"ru-central1-a\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.5.0.0/24\"],\n});\nconst fooMdbPostgresqlCluster = new yandex.MdbPostgresqlCluster(\"fooMdbPostgresqlCluster\", {\n    environment: \"PRESTABLE\",\n    networkId: fooVpcNetwork.id,\n    config: {\n        version: \"14\",\n        resources: {\n            resourcePresetId: \"s2.micro\",\n            diskTypeId: \"network-ssd\",\n            diskSize: 16,\n        },\n    },\n    hosts: [{\n        zone: \"ru-central1-a\",\n        subnetId: fooVpcSubnet.id,\n    }],\n});\nconst fooMdbPostgresqlDatabase = new yandex.MdbPostgresqlDatabase(\"fooMdbPostgresqlDatabase\", {\n    clusterId: fooMdbPostgresqlCluster.id,\n    owner: yandex_mdb_postgresql_user.alice.name,\n    lcCollate: \"en_US.UTF-8\",\n    lcType: \"en_US.UTF-8\",\n    extensions: [\n        {\n            name: \"uuid-ossp\",\n        },\n        {\n            name: \"xml2\",\n        },\n    ],\n});\nconst fooMdbPostgresqlUser = new yandex.MdbPostgresqlUser(\"fooMdbPostgresqlUser\", {\n    clusterId: fooMdbPostgresqlCluster.id,\n    password: \"password\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    zone=\"ru-central1-a\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.5.0.0/24\"])\nfoo_mdb_postgresql_cluster = yandex.MdbPostgresqlCluster(\"fooMdbPostgresqlCluster\",\n    environment=\"PRESTABLE\",\n    network_id=foo_vpc_network.id,\n    config=yandex.MdbPostgresqlClusterConfigArgs(\n        version=\"14\",\n        resources=yandex.MdbPostgresqlClusterConfigResourcesArgs(\n            resource_preset_id=\"s2.micro\",\n            disk_type_id=\"network-ssd\",\n            disk_size=16,\n        ),\n    ),\n    hosts=[yandex.MdbPostgresqlClusterHostArgs(\n        zone=\"ru-central1-a\",\n        subnet_id=foo_vpc_subnet.id,\n    )])\nfoo_mdb_postgresql_database = yandex.MdbPostgresqlDatabase(\"fooMdbPostgresqlDatabase\",\n    cluster_id=foo_mdb_postgresql_cluster.id,\n    owner=yandex_mdb_postgresql_user[\"alice\"][\"name\"],\n    lc_collate=\"en_US.UTF-8\",\n    lc_type=\"en_US.UTF-8\",\n    extensions=[\n        yandex.MdbPostgresqlDatabaseExtensionArgs(\n            name=\"uuid-ossp\",\n        ),\n        yandex.MdbPostgresqlDatabaseExtensionArgs(\n            name=\"xml2\",\n        ),\n    ])\nfoo_mdb_postgresql_user = yandex.MdbPostgresqlUser(\"fooMdbPostgresqlUser\",\n    cluster_id=foo_mdb_postgresql_cluster.id,\n    password=\"password\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        Zone = \"ru-central1-a\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.5.0.0/24\",\n        },\n    });\n\n    var fooMdbPostgresqlCluster = new Yandex.MdbPostgresqlCluster(\"fooMdbPostgresqlCluster\", new()\n    {\n        Environment = \"PRESTABLE\",\n        NetworkId = fooVpcNetwork.Id,\n        Config = new Yandex.Inputs.MdbPostgresqlClusterConfigArgs\n        {\n            Version = \"14\",\n            Resources = new Yandex.Inputs.MdbPostgresqlClusterConfigResourcesArgs\n            {\n                ResourcePresetId = \"s2.micro\",\n                DiskTypeId = \"network-ssd\",\n                DiskSize = 16,\n            },\n        },\n        Hosts = new[]\n        {\n            new Yandex.Inputs.MdbPostgresqlClusterHostArgs\n            {\n                Zone = \"ru-central1-a\",\n                SubnetId = fooVpcSubnet.Id,\n            },\n        },\n    });\n\n    var fooMdbPostgresqlDatabase = new Yandex.MdbPostgresqlDatabase(\"fooMdbPostgresqlDatabase\", new()\n    {\n        ClusterId = fooMdbPostgresqlCluster.Id,\n        Owner = yandex_mdb_postgresql_user.Alice.Name,\n        LcCollate = \"en_US.UTF-8\",\n        LcType = \"en_US.UTF-8\",\n        Extensions = new[]\n        {\n            new Yandex.Inputs.MdbPostgresqlDatabaseExtensionArgs\n            {\n                Name = \"uuid-ossp\",\n            },\n            new Yandex.Inputs.MdbPostgresqlDatabaseExtensionArgs\n            {\n                Name = \"xml2\",\n            },\n        },\n    });\n\n    var fooMdbPostgresqlUser = new Yandex.MdbPostgresqlUser(\"fooMdbPostgresqlUser\", new()\n    {\n        ClusterId = fooMdbPostgresqlCluster.Id,\n        Password = \"password\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-a\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.5.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooMdbPostgresqlCluster, err := yandex.NewMdbPostgresqlCluster(ctx, \"fooMdbPostgresqlCluster\", \u0026yandex.MdbPostgresqlClusterArgs{\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tNetworkId:   fooVpcNetwork.ID(),\n\t\t\tConfig: \u0026MdbPostgresqlClusterConfigArgs{\n\t\t\t\tVersion: pulumi.String(\"14\"),\n\t\t\t\tResources: \u0026MdbPostgresqlClusterConfigResourcesArgs{\n\t\t\t\t\tResourcePresetId: pulumi.String(\"s2.micro\"),\n\t\t\t\t\tDiskTypeId:       pulumi.String(\"network-ssd\"),\n\t\t\t\t\tDiskSize:         pulumi.Float64(16),\n\t\t\t\t},\n\t\t\t},\n\t\t\tHosts: MdbPostgresqlClusterHostArray{\n\t\t\t\t\u0026MdbPostgresqlClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-a\"),\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbPostgresqlDatabase(ctx, \"fooMdbPostgresqlDatabase\", \u0026yandex.MdbPostgresqlDatabaseArgs{\n\t\t\tClusterId: fooMdbPostgresqlCluster.ID(),\n\t\t\tOwner:     pulumi.Any(yandex_mdb_postgresql_user.Alice.Name),\n\t\t\tLcCollate: pulumi.String(\"en_US.UTF-8\"),\n\t\t\tLcType:    pulumi.String(\"en_US.UTF-8\"),\n\t\t\tExtensions: MdbPostgresqlDatabaseExtensionArray{\n\t\t\t\t\u0026MdbPostgresqlDatabaseExtensionArgs{\n\t\t\t\t\tName: pulumi.String(\"uuid-ossp\"),\n\t\t\t\t},\n\t\t\t\t\u0026MdbPostgresqlDatabaseExtensionArgs{\n\t\t\t\t\tName: pulumi.String(\"xml2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbPostgresqlUser(ctx, \"fooMdbPostgresqlUser\", \u0026yandex.MdbPostgresqlUserArgs{\n\t\t\tClusterId: fooMdbPostgresqlCluster.ID(),\n\t\t\tPassword:  pulumi.String(\"password\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbPostgresqlCluster;\nimport com.pulumi.yandex.MdbPostgresqlClusterArgs;\nimport com.pulumi.yandex.inputs.MdbPostgresqlClusterConfigArgs;\nimport com.pulumi.yandex.inputs.MdbPostgresqlClusterConfigResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbPostgresqlClusterHostArgs;\nimport com.pulumi.yandex.MdbPostgresqlDatabase;\nimport com.pulumi.yandex.MdbPostgresqlDatabaseArgs;\nimport com.pulumi.yandex.inputs.MdbPostgresqlDatabaseExtensionArgs;\nimport com.pulumi.yandex.MdbPostgresqlUser;\nimport com.pulumi.yandex.MdbPostgresqlUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-a\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.5.0.0/24\")\n            .build());\n\n        var fooMdbPostgresqlCluster = new MdbPostgresqlCluster(\"fooMdbPostgresqlCluster\", MdbPostgresqlClusterArgs.builder()        \n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .config(MdbPostgresqlClusterConfigArgs.builder()\n                .version(14)\n                .resources(MdbPostgresqlClusterConfigResourcesArgs.builder()\n                    .resourcePresetId(\"s2.micro\")\n                    .diskTypeId(\"network-ssd\")\n                    .diskSize(16)\n                    .build())\n                .build())\n            .hosts(MdbPostgresqlClusterHostArgs.builder()\n                .zone(\"ru-central1-a\")\n                .subnetId(fooVpcSubnet.id())\n                .build())\n            .build());\n\n        var fooMdbPostgresqlDatabase = new MdbPostgresqlDatabase(\"fooMdbPostgresqlDatabase\", MdbPostgresqlDatabaseArgs.builder()        \n            .clusterId(fooMdbPostgresqlCluster.id())\n            .owner(yandex_mdb_postgresql_user.alice().name())\n            .lcCollate(\"en_US.UTF-8\")\n            .lcType(\"en_US.UTF-8\")\n            .extensions(            \n                MdbPostgresqlDatabaseExtensionArgs.builder()\n                    .name(\"uuid-ossp\")\n                    .build(),\n                MdbPostgresqlDatabaseExtensionArgs.builder()\n                    .name(\"xml2\")\n                    .build())\n            .build());\n\n        var fooMdbPostgresqlUser = new MdbPostgresqlUser(\"fooMdbPostgresqlUser\", MdbPostgresqlUserArgs.builder()        \n            .clusterId(fooMdbPostgresqlCluster.id())\n            .password(\"password\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbPostgresqlDatabase:\n    type: yandex:MdbPostgresqlDatabase\n    properties:\n      clusterId: ${fooMdbPostgresqlCluster.id}\n      owner: ${yandex_mdb_postgresql_user.alice.name}\n      lcCollate: en_US.UTF-8\n      lcType: en_US.UTF-8\n      extensions:\n        - name: uuid-ossp\n        - name: xml2\n  fooMdbPostgresqlUser:\n    type: yandex:MdbPostgresqlUser\n    properties:\n      clusterId: ${fooMdbPostgresqlCluster.id}\n      password: password\n  fooMdbPostgresqlCluster:\n    type: yandex:MdbPostgresqlCluster\n    properties:\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      config:\n        version: 14\n        resources:\n          resourcePresetId: s2.micro\n          diskTypeId: network-ssd\n          diskSize: 16\n      hosts:\n        - zone: ru-central1-a\n          subnetId: ${fooVpcSubnet.id}\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-a\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.5.0.0/24\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA PostgreSQL database can be imported using the following format\n\n```sh\n $ pulumi import yandex:index/mdbPostgresqlDatabase:MdbPostgresqlDatabase foo {{cluster_id}}:{{database_name}}\n```\n\n ",
            "properties": {
                "clusterId": {
                    "type": "string"
                },
                "extensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlDatabaseExtension:MdbPostgresqlDatabaseExtension"
                    },
                    "description": "Set of database extensions. The structure is documented below\n"
                },
                "lcCollate": {
                    "type": "string",
                    "description": "POSIX locale for string sorting order. Forbidden to change in an existing database.\n"
                },
                "lcType": {
                    "type": "string",
                    "description": "POSIX locale for character classification. Forbidden to change in an existing database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database extension. For more information on available extensions see [the official documentation](https://cloud.yandex.com/docs/managed-postgresql/operations/cluster-extensions).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the user assigned as the owner of the database. Forbidden to change in an existing database.\n"
                },
                "templateDb": {
                    "type": "string",
                    "description": "Name of the template database.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlDatabaseTimeouts:MdbPostgresqlDatabaseTimeouts"
                }
            },
            "required": [
                "clusterId",
                "name",
                "owner",
                "timeouts"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string"
                },
                "extensions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlDatabaseExtension:MdbPostgresqlDatabaseExtension"
                    },
                    "description": "Set of database extensions. The structure is documented below\n"
                },
                "lcCollate": {
                    "type": "string",
                    "description": "POSIX locale for string sorting order. Forbidden to change in an existing database.\n"
                },
                "lcType": {
                    "type": "string",
                    "description": "POSIX locale for character classification. Forbidden to change in an existing database.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the database extension. For more information on available extensions see [the official documentation](https://cloud.yandex.com/docs/managed-postgresql/operations/cluster-extensions).\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Name of the user assigned as the owner of the database. Forbidden to change in an existing database.\n"
                },
                "templateDb": {
                    "type": "string",
                    "description": "Name of the template database.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlDatabaseTimeouts:MdbPostgresqlDatabaseTimeouts"
                }
            },
            "requiredInputs": [
                "clusterId",
                "owner",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbPostgresqlDatabase resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "extensions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbPostgresqlDatabaseExtension:MdbPostgresqlDatabaseExtension"
                        },
                        "description": "Set of database extensions. The structure is documented below\n"
                    },
                    "lcCollate": {
                        "type": "string",
                        "description": "POSIX locale for string sorting order. Forbidden to change in an existing database.\n"
                    },
                    "lcType": {
                        "type": "string",
                        "description": "POSIX locale for character classification. Forbidden to change in an existing database.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database extension. For more information on available extensions see [the official documentation](https://cloud.yandex.com/docs/managed-postgresql/operations/cluster-extensions).\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the user assigned as the owner of the database. Forbidden to change in an existing database.\n"
                    },
                    "templateDb": {
                        "type": "string",
                        "description": "Name of the template database.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlDatabaseTimeouts:MdbPostgresqlDatabaseTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbPostgresqlUser:MdbPostgresqlUser": {
            "description": "Manages a PostgreSQL user within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-postgresql/).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"fooVpcNetwork\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"fooVpcSubnet\", {\n    zone: \"ru-central1-a\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.5.0.0/24\"],\n});\nconst fooMdbPostgresqlCluster = new yandex.MdbPostgresqlCluster(\"fooMdbPostgresqlCluster\", {\n    environment: \"PRESTABLE\",\n    networkId: fooVpcNetwork.id,\n    config: {\n        version: \"14\",\n        resources: {\n            resourcePresetId: \"s2.micro\",\n            diskTypeId: \"network-ssd\",\n            diskSize: 16,\n        },\n    },\n    hosts: [{\n        zone: \"ru-central1-a\",\n        subnetId: fooVpcSubnet.id,\n    }],\n});\nconst fooMdbPostgresqlUser = new yandex.MdbPostgresqlUser(\"fooMdbPostgresqlUser\", {\n    clusterId: fooMdbPostgresqlCluster.id,\n    password: \"password\",\n    connLimit: 50,\n    settings: {\n        default_transaction_isolation: \"read committed\",\n        log_min_duration_statement: \"5000\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    zone=\"ru-central1-a\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.5.0.0/24\"])\nfoo_mdb_postgresql_cluster = yandex.MdbPostgresqlCluster(\"fooMdbPostgresqlCluster\",\n    environment=\"PRESTABLE\",\n    network_id=foo_vpc_network.id,\n    config=yandex.MdbPostgresqlClusterConfigArgs(\n        version=\"14\",\n        resources=yandex.MdbPostgresqlClusterConfigResourcesArgs(\n            resource_preset_id=\"s2.micro\",\n            disk_type_id=\"network-ssd\",\n            disk_size=16,\n        ),\n    ),\n    hosts=[yandex.MdbPostgresqlClusterHostArgs(\n        zone=\"ru-central1-a\",\n        subnet_id=foo_vpc_subnet.id,\n    )])\nfoo_mdb_postgresql_user = yandex.MdbPostgresqlUser(\"fooMdbPostgresqlUser\",\n    cluster_id=foo_mdb_postgresql_cluster.id,\n    password=\"password\",\n    conn_limit=50,\n    settings={\n        \"default_transaction_isolation\": \"read committed\",\n        \"log_min_duration_statement\": \"5000\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        Zone = \"ru-central1-a\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.5.0.0/24\",\n        },\n    });\n\n    var fooMdbPostgresqlCluster = new Yandex.MdbPostgresqlCluster(\"fooMdbPostgresqlCluster\", new()\n    {\n        Environment = \"PRESTABLE\",\n        NetworkId = fooVpcNetwork.Id,\n        Config = new Yandex.Inputs.MdbPostgresqlClusterConfigArgs\n        {\n            Version = \"14\",\n            Resources = new Yandex.Inputs.MdbPostgresqlClusterConfigResourcesArgs\n            {\n                ResourcePresetId = \"s2.micro\",\n                DiskTypeId = \"network-ssd\",\n                DiskSize = 16,\n            },\n        },\n        Hosts = new[]\n        {\n            new Yandex.Inputs.MdbPostgresqlClusterHostArgs\n            {\n                Zone = \"ru-central1-a\",\n                SubnetId = fooVpcSubnet.Id,\n            },\n        },\n    });\n\n    var fooMdbPostgresqlUser = new Yandex.MdbPostgresqlUser(\"fooMdbPostgresqlUser\", new()\n    {\n        ClusterId = fooMdbPostgresqlCluster.Id,\n        Password = \"password\",\n        ConnLimit = 50,\n        Settings = \n        {\n            { \"default_transaction_isolation\", \"read committed\" },\n            { \"log_min_duration_statement\", \"5000\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-a\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.5.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooMdbPostgresqlCluster, err := yandex.NewMdbPostgresqlCluster(ctx, \"fooMdbPostgresqlCluster\", \u0026yandex.MdbPostgresqlClusterArgs{\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tNetworkId:   fooVpcNetwork.ID(),\n\t\t\tConfig: \u0026MdbPostgresqlClusterConfigArgs{\n\t\t\t\tVersion: pulumi.String(\"14\"),\n\t\t\t\tResources: \u0026MdbPostgresqlClusterConfigResourcesArgs{\n\t\t\t\t\tResourcePresetId: pulumi.String(\"s2.micro\"),\n\t\t\t\t\tDiskTypeId:       pulumi.String(\"network-ssd\"),\n\t\t\t\t\tDiskSize:         pulumi.Float64(16),\n\t\t\t\t},\n\t\t\t},\n\t\t\tHosts: MdbPostgresqlClusterHostArray{\n\t\t\t\t\u0026MdbPostgresqlClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-a\"),\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbPostgresqlUser(ctx, \"fooMdbPostgresqlUser\", \u0026yandex.MdbPostgresqlUserArgs{\n\t\t\tClusterId: fooMdbPostgresqlCluster.ID(),\n\t\t\tPassword:  pulumi.String(\"password\"),\n\t\t\tConnLimit: pulumi.Float64(50),\n\t\t\tSettings: pulumi.StringMap{\n\t\t\t\t\"default_transaction_isolation\": pulumi.String(\"read committed\"),\n\t\t\t\t\"log_min_duration_statement\":    pulumi.String(\"5000\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbPostgresqlCluster;\nimport com.pulumi.yandex.MdbPostgresqlClusterArgs;\nimport com.pulumi.yandex.inputs.MdbPostgresqlClusterConfigArgs;\nimport com.pulumi.yandex.inputs.MdbPostgresqlClusterConfigResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbPostgresqlClusterHostArgs;\nimport com.pulumi.yandex.MdbPostgresqlUser;\nimport com.pulumi.yandex.MdbPostgresqlUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-a\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.5.0.0/24\")\n            .build());\n\n        var fooMdbPostgresqlCluster = new MdbPostgresqlCluster(\"fooMdbPostgresqlCluster\", MdbPostgresqlClusterArgs.builder()        \n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .config(MdbPostgresqlClusterConfigArgs.builder()\n                .version(14)\n                .resources(MdbPostgresqlClusterConfigResourcesArgs.builder()\n                    .resourcePresetId(\"s2.micro\")\n                    .diskTypeId(\"network-ssd\")\n                    .diskSize(16)\n                    .build())\n                .build())\n            .hosts(MdbPostgresqlClusterHostArgs.builder()\n                .zone(\"ru-central1-a\")\n                .subnetId(fooVpcSubnet.id())\n                .build())\n            .build());\n\n        var fooMdbPostgresqlUser = new MdbPostgresqlUser(\"fooMdbPostgresqlUser\", MdbPostgresqlUserArgs.builder()        \n            .clusterId(fooMdbPostgresqlCluster.id())\n            .password(\"password\")\n            .connLimit(50)\n            .settings(Map.ofEntries(\n                Map.entry(\"default_transaction_isolation\", \"read committed\"),\n                Map.entry(\"log_min_duration_statement\", 5000)\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbPostgresqlUser:\n    type: yandex:MdbPostgresqlUser\n    properties:\n      clusterId: ${fooMdbPostgresqlCluster.id}\n      password: password\n      connLimit: 50\n      settings:\n        default_transaction_isolation: read committed\n        log_min_duration_statement: 5000\n  fooMdbPostgresqlCluster:\n    type: yandex:MdbPostgresqlCluster\n    properties:\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      config:\n        version: 14\n        resources:\n          resourcePresetId: s2.micro\n          diskTypeId: network-ssd\n          diskSize: 16\n      hosts:\n        - zone: ru-central1-a\n          subnetId: ${fooVpcSubnet.id}\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-a\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.5.0.0/24\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA PostgreSQL user can be imported using the following format\n\n```sh\n $ pulumi import yandex:index/mdbPostgresqlUser:MdbPostgresqlUser foo {{cluster_id}}:{{username}}\n```\n\n ",
            "properties": {
                "clusterId": {
                    "type": "string"
                },
                "connLimit": {
                    "type": "number",
                    "description": "The maximum number of connections per user. (Default 50)\n"
                },
                "grants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the user's grants.\n"
                },
                "login": {
                    "type": "boolean",
                    "description": "User's ability to login.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n",
                    "secret": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlUserPermission:MdbPostgresqlUserPermission"
                    },
                    "description": "Set of permissions granted to the user. The structure is documented below.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of user settings. List of settings is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlUserTimeouts:MdbPostgresqlUserTimeouts"
                }
            },
            "required": [
                "clusterId",
                "connLimit",
                "grants",
                "name",
                "password",
                "settings",
                "timeouts"
            ],
            "inputProperties": {
                "clusterId": {
                    "type": "string"
                },
                "connLimit": {
                    "type": "number",
                    "description": "The maximum number of connections per user. (Default 50)\n"
                },
                "grants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the user's grants.\n"
                },
                "login": {
                    "type": "boolean",
                    "description": "User's ability to login.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user.\n",
                    "secret": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlUserPermission:MdbPostgresqlUserPermission"
                    },
                    "description": "Set of permissions granted to the user. The structure is documented below.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of user settings. List of settings is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbPostgresqlUserTimeouts:MdbPostgresqlUserTimeouts"
                }
            },
            "requiredInputs": [
                "clusterId",
                "password",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbPostgresqlUser resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "connLimit": {
                        "type": "number",
                        "description": "The maximum number of connections per user. (Default 50)\n"
                    },
                    "grants": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the user's grants.\n"
                    },
                    "login": {
                        "type": "boolean",
                        "description": "User's ability to login.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user.\n",
                        "secret": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbPostgresqlUserPermission:MdbPostgresqlUserPermission"
                        },
                        "description": "Set of permissions granted to the user. The structure is documented below.\n"
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of user settings. List of settings is documented below.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/MdbPostgresqlUserTimeouts:MdbPostgresqlUserTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbRedisCluster:MdbRedisCluster": {
            "description": "Manages a Redis cluster within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-redis/concepts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nExample of creating a Standalone Redis.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"foo\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"foo\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.5.0.0/24\"],\n    zone: \"ru-central1-a\",\n});\nconst fooMdbRedisCluster = new yandex.MdbRedisCluster(\"foo\", {\n    config: {\n        password: \"your_password\",\n        version: \"6.2\",\n    },\n    environment: \"PRESTABLE\",\n    hosts: [{\n        subnetId: fooVpcSubnet.id,\n        zone: \"ru-central1-a\",\n    }],\n    maintenanceWindow: {\n        type: \"ANYTIME\",\n    },\n    networkId: fooVpcNetwork.id,\n    resources: {\n        diskSize: 16,\n        resourcePresetId: \"hm1.nano\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.5.0.0/24\"],\n    zone=\"ru-central1-a\")\nfoo_mdb_redis_cluster = yandex.MdbRedisCluster(\"fooMdbRedisCluster\",\n    config=yandex.MdbRedisClusterConfigArgs(\n        password=\"your_password\",\n        version=\"6.2\",\n    ),\n    environment=\"PRESTABLE\",\n    hosts=[yandex.MdbRedisClusterHostArgs(\n        subnet_id=foo_vpc_subnet.id,\n        zone=\"ru-central1-a\",\n    )],\n    maintenance_window=yandex.MdbRedisClusterMaintenanceWindowArgs(\n        type=\"ANYTIME\",\n    ),\n    network_id=foo_vpc_network.id,\n    resources=yandex.MdbRedisClusterResourcesArgs(\n        disk_size=16,\n        resource_preset_id=\"hm1.nano\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.5.0.0/24\",\n        },\n        Zone = \"ru-central1-a\",\n    });\n\n    var fooMdbRedisCluster = new Yandex.MdbRedisCluster(\"fooMdbRedisCluster\", new()\n    {\n        Config = new Yandex.Inputs.MdbRedisClusterConfigArgs\n        {\n            Password = \"your_password\",\n            Version = \"6.2\",\n        },\n        Environment = \"PRESTABLE\",\n        Hosts = new[]\n        {\n            new Yandex.Inputs.MdbRedisClusterHostArgs\n            {\n                SubnetId = fooVpcSubnet.Id,\n                Zone = \"ru-central1-a\",\n            },\n        },\n        MaintenanceWindow = new Yandex.Inputs.MdbRedisClusterMaintenanceWindowArgs\n        {\n            Type = \"ANYTIME\",\n        },\n        NetworkId = fooVpcNetwork.Id,\n        Resources = new Yandex.Inputs.MdbRedisClusterResourcesArgs\n        {\n            DiskSize = 16,\n            ResourcePresetId = \"hm1.nano\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.5.0.0/24\"),\n\t\t\t},\n\t\t\tZone: pulumi.String(\"ru-central1-a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbRedisCluster(ctx, \"fooMdbRedisCluster\", \u0026yandex.MdbRedisClusterArgs{\n\t\t\tConfig: \u0026MdbRedisClusterConfigArgs{\n\t\t\t\tPassword: pulumi.String(\"your_password\"),\n\t\t\t\tVersion:  pulumi.String(\"6.2\"),\n\t\t\t},\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tHosts: MdbRedisClusterHostArray{\n\t\t\t\t\u0026MdbRedisClusterHostArgs{\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-a\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMaintenanceWindow: \u0026MdbRedisClusterMaintenanceWindowArgs{\n\t\t\t\tType: pulumi.String(\"ANYTIME\"),\n\t\t\t},\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tResources: \u0026MdbRedisClusterResourcesArgs{\n\t\t\t\tDiskSize:         pulumi.Float64(16),\n\t\t\t\tResourcePresetId: pulumi.String(\"hm1.nano\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbRedisCluster;\nimport com.pulumi.yandex.MdbRedisClusterArgs;\nimport com.pulumi.yandex.inputs.MdbRedisClusterConfigArgs;\nimport com.pulumi.yandex.inputs.MdbRedisClusterHostArgs;\nimport com.pulumi.yandex.inputs.MdbRedisClusterMaintenanceWindowArgs;\nimport com.pulumi.yandex.inputs.MdbRedisClusterResourcesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.5.0.0/24\")\n            .zone(\"ru-central1-a\")\n            .build());\n\n        var fooMdbRedisCluster = new MdbRedisCluster(\"fooMdbRedisCluster\", MdbRedisClusterArgs.builder()        \n            .config(MdbRedisClusterConfigArgs.builder()\n                .password(\"your_password\")\n                .version(\"6.2\")\n                .build())\n            .environment(\"PRESTABLE\")\n            .hosts(MdbRedisClusterHostArgs.builder()\n                .subnetId(fooVpcSubnet.id())\n                .zone(\"ru-central1-a\")\n                .build())\n            .maintenanceWindow(MdbRedisClusterMaintenanceWindowArgs.builder()\n                .type(\"ANYTIME\")\n                .build())\n            .networkId(fooVpcNetwork.id())\n            .resources(MdbRedisClusterResourcesArgs.builder()\n                .diskSize(16)\n                .resourcePresetId(\"hm1.nano\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbRedisCluster:\n    type: yandex:MdbRedisCluster\n    properties:\n      config:\n        password: your_password\n        version: '6.2'\n      environment: PRESTABLE\n      hosts:\n        - subnetId: ${fooVpcSubnet.id}\n          zone: ru-central1-a\n      maintenanceWindow:\n        type: ANYTIME\n      networkId: ${fooVpcNetwork.id}\n      resources:\n        diskSize: 16\n        resourcePresetId: hm1.nano\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.5.0.0/24\n      zone: ru-central1-a\n```\n\nExample of creating a sharded Redis Cluster.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"foo\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"foo\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.1.0.0/24\"],\n    zone: \"ru-central1-a\",\n});\nconst bar = new yandex.VpcSubnet(\"bar\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.2.0.0/24\"],\n    zone: \"ru-central1-b\",\n});\nconst baz = new yandex.VpcSubnet(\"baz\", {\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.3.0.0/24\"],\n    zone: \"ru-central1-c\",\n});\nconst fooMdbRedisCluster = new yandex.MdbRedisCluster(\"foo\", {\n    config: {\n        password: \"your_password\",\n        version: \"6.2\",\n    },\n    environment: \"PRESTABLE\",\n    hosts: [\n        {\n            shardName: \"first\",\n            subnetId: fooVpcSubnet.id,\n            zone: \"ru-central1-a\",\n        },\n        {\n            shardName: \"second\",\n            subnetId: bar.id,\n            zone: \"ru-central1-b\",\n        },\n        {\n            shardName: \"third\",\n            subnetId: baz.id,\n            zone: \"ru-central1-c\",\n        },\n    ],\n    networkId: fooVpcNetwork.id,\n    resources: {\n        diskSize: 16,\n        resourcePresetId: \"hm1.nano\",\n    },\n    sharded: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.1.0.0/24\"],\n    zone=\"ru-central1-a\")\nbar = yandex.VpcSubnet(\"bar\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.2.0.0/24\"],\n    zone=\"ru-central1-b\")\nbaz = yandex.VpcSubnet(\"baz\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.3.0.0/24\"],\n    zone=\"ru-central1-c\")\nfoo_mdb_redis_cluster = yandex.MdbRedisCluster(\"fooMdbRedisCluster\",\n    config=yandex.MdbRedisClusterConfigArgs(\n        password=\"your_password\",\n        version=\"6.2\",\n    ),\n    environment=\"PRESTABLE\",\n    hosts=[\n        yandex.MdbRedisClusterHostArgs(\n            shard_name=\"first\",\n            subnet_id=foo_vpc_subnet.id,\n            zone=\"ru-central1-a\",\n        ),\n        yandex.MdbRedisClusterHostArgs(\n            shard_name=\"second\",\n            subnet_id=bar.id,\n            zone=\"ru-central1-b\",\n        ),\n        yandex.MdbRedisClusterHostArgs(\n            shard_name=\"third\",\n            subnet_id=baz.id,\n            zone=\"ru-central1-c\",\n        ),\n    ],\n    network_id=foo_vpc_network.id,\n    resources=yandex.MdbRedisClusterResourcesArgs(\n        disk_size=16,\n        resource_preset_id=\"hm1.nano\",\n    ),\n    sharded=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.1.0.0/24\",\n        },\n        Zone = \"ru-central1-a\",\n    });\n\n    var bar = new Yandex.VpcSubnet(\"bar\", new()\n    {\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.2.0.0/24\",\n        },\n        Zone = \"ru-central1-b\",\n    });\n\n    var baz = new Yandex.VpcSubnet(\"baz\", new()\n    {\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.3.0.0/24\",\n        },\n        Zone = \"ru-central1-c\",\n    });\n\n    var fooMdbRedisCluster = new Yandex.MdbRedisCluster(\"fooMdbRedisCluster\", new()\n    {\n        Config = new Yandex.Inputs.MdbRedisClusterConfigArgs\n        {\n            Password = \"your_password\",\n            Version = \"6.2\",\n        },\n        Environment = \"PRESTABLE\",\n        Hosts = new[]\n        {\n            new Yandex.Inputs.MdbRedisClusterHostArgs\n            {\n                ShardName = \"first\",\n                SubnetId = fooVpcSubnet.Id,\n                Zone = \"ru-central1-a\",\n            },\n            new Yandex.Inputs.MdbRedisClusterHostArgs\n            {\n                ShardName = \"second\",\n                SubnetId = bar.Id,\n                Zone = \"ru-central1-b\",\n            },\n            new Yandex.Inputs.MdbRedisClusterHostArgs\n            {\n                ShardName = \"third\",\n                SubnetId = baz.Id,\n                Zone = \"ru-central1-c\",\n            },\n        },\n        NetworkId = fooVpcNetwork.Id,\n        Resources = new Yandex.Inputs.MdbRedisClusterResourcesArgs\n        {\n            DiskSize = 16,\n            ResourcePresetId = \"hm1.nano\",\n        },\n        Sharded = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.1.0.0/24\"),\n\t\t\t},\n\t\t\tZone: pulumi.String(\"ru-central1-a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbar, err := yandex.NewVpcSubnet(ctx, \"bar\", \u0026yandex.VpcSubnetArgs{\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.2.0.0/24\"),\n\t\t\t},\n\t\t\tZone: pulumi.String(\"ru-central1-b\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tbaz, err := yandex.NewVpcSubnet(ctx, \"baz\", \u0026yandex.VpcSubnetArgs{\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.3.0.0/24\"),\n\t\t\t},\n\t\t\tZone: pulumi.String(\"ru-central1-c\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbRedisCluster(ctx, \"fooMdbRedisCluster\", \u0026yandex.MdbRedisClusterArgs{\n\t\t\tConfig: \u0026MdbRedisClusterConfigArgs{\n\t\t\t\tPassword: pulumi.String(\"your_password\"),\n\t\t\t\tVersion:  pulumi.String(\"6.2\"),\n\t\t\t},\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tHosts: MdbRedisClusterHostArray{\n\t\t\t\t\u0026MdbRedisClusterHostArgs{\n\t\t\t\t\tShardName: pulumi.String(\"first\"),\n\t\t\t\t\tSubnetId:  fooVpcSubnet.ID(),\n\t\t\t\t\tZone:      pulumi.String(\"ru-central1-a\"),\n\t\t\t\t},\n\t\t\t\t\u0026MdbRedisClusterHostArgs{\n\t\t\t\t\tShardName: pulumi.String(\"second\"),\n\t\t\t\t\tSubnetId:  bar.ID(),\n\t\t\t\t\tZone:      pulumi.String(\"ru-central1-b\"),\n\t\t\t\t},\n\t\t\t\t\u0026MdbRedisClusterHostArgs{\n\t\t\t\t\tShardName: pulumi.String(\"third\"),\n\t\t\t\t\tSubnetId:  baz.ID(),\n\t\t\t\t\tZone:      pulumi.String(\"ru-central1-c\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tResources: \u0026MdbRedisClusterResourcesArgs{\n\t\t\t\tDiskSize:         pulumi.Float64(16),\n\t\t\t\tResourcePresetId: pulumi.String(\"hm1.nano\"),\n\t\t\t},\n\t\t\tSharded: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.MdbRedisCluster;\nimport com.pulumi.yandex.MdbRedisClusterArgs;\nimport com.pulumi.yandex.inputs.MdbRedisClusterConfigArgs;\nimport com.pulumi.yandex.inputs.MdbRedisClusterHostArgs;\nimport com.pulumi.yandex.inputs.MdbRedisClusterResourcesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.1.0.0/24\")\n            .zone(\"ru-central1-a\")\n            .build());\n\n        var bar = new VpcSubnet(\"bar\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.2.0.0/24\")\n            .zone(\"ru-central1-b\")\n            .build());\n\n        var baz = new VpcSubnet(\"baz\", VpcSubnetArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.3.0.0/24\")\n            .zone(\"ru-central1-c\")\n            .build());\n\n        var fooMdbRedisCluster = new MdbRedisCluster(\"fooMdbRedisCluster\", MdbRedisClusterArgs.builder()        \n            .config(MdbRedisClusterConfigArgs.builder()\n                .password(\"your_password\")\n                .version(\"6.2\")\n                .build())\n            .environment(\"PRESTABLE\")\n            .hosts(            \n                MdbRedisClusterHostArgs.builder()\n                    .shardName(\"first\")\n                    .subnetId(fooVpcSubnet.id())\n                    .zone(\"ru-central1-a\")\n                    .build(),\n                MdbRedisClusterHostArgs.builder()\n                    .shardName(\"second\")\n                    .subnetId(bar.id())\n                    .zone(\"ru-central1-b\")\n                    .build(),\n                MdbRedisClusterHostArgs.builder()\n                    .shardName(\"third\")\n                    .subnetId(baz.id())\n                    .zone(\"ru-central1-c\")\n                    .build())\n            .networkId(fooVpcNetwork.id())\n            .resources(MdbRedisClusterResourcesArgs.builder()\n                .diskSize(16)\n                .resourcePresetId(\"hm1.nano\")\n                .build())\n            .sharded(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbRedisCluster:\n    type: yandex:MdbRedisCluster\n    properties:\n      config:\n        password: your_password\n        version: '6.2'\n      environment: PRESTABLE\n      hosts:\n        - shardName: first\n          subnetId: ${fooVpcSubnet.id}\n          zone: ru-central1-a\n        - shardName: second\n          subnetId: ${bar.id}\n          zone: ru-central1-b\n        - shardName: third\n          subnetId: ${baz.id}\n          zone: ru-central1-c\n      networkId: ${fooVpcNetwork.id}\n      resources:\n        diskSize: 16\n        resourcePresetId: hm1.nano\n      sharded: true\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.1.0.0/24\n      zone: ru-central1-a\n  bar:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.2.0.0/24\n      zone: ru-central1-b\n  baz:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.3.0.0/24\n      zone: ru-central1-c\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA cluster can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/mdbRedisCluster:MdbRedisCluster foo cluster_id\n```\n\n ",
            "properties": {
                "config": {
                    "$ref": "#/types/yandex:index/MdbRedisClusterConfig:MdbRedisClusterConfig",
                    "description": "Configuration of the Redis cluster. The structure is documented below.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the key.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Redis cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "health": {
                    "type": "string",
                    "description": "Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`.\nFor more information see `health` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-redis/api-ref/Cluster/).\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbRedisClusterHost:MdbRedisClusterHost"
                    },
                    "description": "A host of the Redis cluster. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Redis cluster.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbRedisClusterMaintenanceWindow:MdbRedisClusterMaintenanceWindow"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Redis cluster. Provided by the client when the cluster is created.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the Redis cluster belongs.\n"
                },
                "persistenceMode": {
                    "type": "string",
                    "description": "Persistence mode.\n"
                },
                "resources": {
                    "$ref": "#/types/yandex:index/MdbRedisClusterResources:MdbRedisClusterResources",
                    "description": "Resources allocated to hosts of the Redis cluster. The structure is documented below.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                },
                "sharded": {
                    "type": "boolean",
                    "description": "Redis Cluster mode enabled/disabled.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.\nFor more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-redis/api-ref/Cluster/).\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbRedisClusterTimeouts:MdbRedisClusterTimeouts"
                },
                "tlsEnabled": {
                    "type": "boolean",
                    "description": "TLS support mode enabled/disabled.\n"
                }
            },
            "required": [
                "config",
                "createdAt",
                "deletionProtection",
                "environment",
                "folderId",
                "health",
                "hosts",
                "name",
                "networkId",
                "persistenceMode",
                "resources",
                "status",
                "timeouts",
                "tlsEnabled"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/yandex:index/MdbRedisClusterConfig:MdbRedisClusterConfig",
                    "description": "Configuration of the Redis cluster. The structure is documented below.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Redis cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbRedisClusterHost:MdbRedisClusterHost"
                    },
                    "description": "A host of the Redis cluster. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Redis cluster.\n"
                },
                "maintenanceWindow": {
                    "$ref": "#/types/yandex:index/MdbRedisClusterMaintenanceWindow:MdbRedisClusterMaintenanceWindow"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Redis cluster. Provided by the client when the cluster is created.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the Redis cluster belongs.\n"
                },
                "persistenceMode": {
                    "type": "string",
                    "description": "Persistence mode.\n"
                },
                "resources": {
                    "$ref": "#/types/yandex:index/MdbRedisClusterResources:MdbRedisClusterResources",
                    "description": "Resources allocated to hosts of the Redis cluster. The structure is documented below.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                },
                "sharded": {
                    "type": "boolean",
                    "description": "Redis Cluster mode enabled/disabled.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbRedisClusterTimeouts:MdbRedisClusterTimeouts"
                },
                "tlsEnabled": {
                    "type": "boolean",
                    "description": "TLS support mode enabled/disabled.\n"
                }
            },
            "requiredInputs": [
                "config",
                "environment",
                "hosts",
                "networkId",
                "resources",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbRedisCluster resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/yandex:index/MdbRedisClusterConfig:MdbRedisClusterConfig",
                        "description": "Configuration of the Redis cluster. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Redis cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the Redis cluster. Can be either `PRESTABLE` or `PRODUCTION`.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                    },
                    "health": {
                        "type": "string",
                        "description": "Aggregated health of the cluster. Can be either `ALIVE`, `DEGRADED`, `DEAD` or `HEALTH_UNKNOWN`.\nFor more information see `health` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-redis/api-ref/Cluster/).\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbRedisClusterHost:MdbRedisClusterHost"
                        },
                        "description": "A host of the Redis cluster. The structure is documented below.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Redis cluster.\n"
                    },
                    "maintenanceWindow": {
                        "$ref": "#/types/yandex:index/MdbRedisClusterMaintenanceWindow:MdbRedisClusterMaintenanceWindow"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Redis cluster. Provided by the client when the cluster is created.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the Redis cluster belongs.\n"
                    },
                    "persistenceMode": {
                        "type": "string",
                        "description": "Persistence mode.\n"
                    },
                    "resources": {
                        "$ref": "#/types/yandex:index/MdbRedisClusterResources:MdbRedisClusterResources",
                        "description": "Resources allocated to hosts of the Redis cluster. The structure is documented below.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "sharded": {
                        "type": "boolean",
                        "description": "Redis Cluster mode enabled/disabled.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.\nFor more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-redis/api-ref/Cluster/).\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/MdbRedisClusterTimeouts:MdbRedisClusterTimeouts"
                    },
                    "tlsEnabled": {
                        "type": "boolean",
                        "description": "TLS support mode enabled/disabled.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/mdbSqlServerCluster:MdbSqlServerCluster": {
            "description": "Manages a SQLServer cluster within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-sqlserver/).\n\nPlease read [Pricing for Managed Service for SQL Server](https://cloud.yandex.com/docs/managed-sqlserver/pricing#prices) before using SQLServer cluster.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nExample of creating a Single Node SQLServer.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst fooVpcNetwork = new yandex.VpcNetwork(\"fooVpcNetwork\", {});\nconst fooVpcSubnet = new yandex.VpcSubnet(\"fooVpcSubnet\", {\n    zone: \"ru-central1-a\",\n    networkId: fooVpcNetwork.id,\n    v4CidrBlocks: [\"10.5.0.0/24\"],\n});\nconst test_sg_x = new yandex.VpcSecurityGroup(\"test-sg-x\", {\n    networkId: fooVpcNetwork.id,\n    ingresses: [{\n        protocol: \"ANY\",\n        description: \"Allow incoming traffic from members of the same security group\",\n        fromPort: 0,\n        toPort: 65535,\n        v4CidrBlocks: [\"0.0.0.0/0\"],\n    }],\n    egresses: [{\n        protocol: \"ANY\",\n        description: \"Allow outgoing traffic to members of the same security group\",\n        fromPort: 0,\n        toPort: 65535,\n        v4CidrBlocks: [\"0.0.0.0/0\"],\n    }],\n});\nconst fooMdbSqlServerCluster = new yandex.MdbSqlServerCluster(\"fooMdbSqlServerCluster\", {\n    environment: \"PRESTABLE\",\n    networkId: fooVpcNetwork.id,\n    version: \"2016sp2std\",\n    resources: {\n        resourcePresetId: \"s2.small\",\n        diskTypeId: \"network-ssd\",\n        diskSize: 20,\n    },\n    labels: {\n        test_key: \"test_value\",\n    },\n    backupWindowStart: {\n        hours: 20,\n        minutes: 30,\n    },\n    sqlserverConfig: {\n        fill_factor_percent: \"49\",\n        optimize_for_ad_hoc_workloads: \"true\",\n    },\n    databases: [\n        {\n            name: \"db_name_a\",\n        },\n        {\n            name: \"db_name\",\n        },\n        {\n            name: \"db_name_b\",\n        },\n    ],\n    users: [\n        {\n            name: \"bob\",\n            password: \"mysecurepassword\",\n        },\n        {\n            name: \"alice\",\n            password: \"mysecurepassword\",\n            permissions: [{\n                databaseName: \"db_name\",\n                roles: [\"DDLADMIN\"],\n            }],\n        },\n        {\n            name: \"chuck\",\n            password: \"mysecurepassword\",\n            permissions: [\n                {\n                    databaseName: \"db_name_a\",\n                    roles: [\"OWNER\"],\n                },\n                {\n                    databaseName: \"db_name\",\n                    roles: [\n                        \"OWNER\",\n                        \"DDLADMIN\",\n                    ],\n                },\n                {\n                    databaseName: \"db_name_b\",\n                    roles: [\n                        \"OWNER\",\n                        \"DDLADMIN\",\n                    ],\n                },\n            ],\n        },\n    ],\n    hosts: [{\n        zone: \"ru-central1-a\",\n        subnetId: fooVpcSubnet.id,\n    }],\n    securityGroupIds: [test_sg_x.id],\n    hostGroupIds: [\n        \"host_group_1\",\n        \"host_group_2\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo_vpc_network = yandex.VpcNetwork(\"fooVpcNetwork\")\nfoo_vpc_subnet = yandex.VpcSubnet(\"fooVpcSubnet\",\n    zone=\"ru-central1-a\",\n    network_id=foo_vpc_network.id,\n    v4_cidr_blocks=[\"10.5.0.0/24\"])\ntest_sg_x = yandex.VpcSecurityGroup(\"test-sg-x\",\n    network_id=foo_vpc_network.id,\n    ingresses=[yandex.VpcSecurityGroupIngressArgs(\n        protocol=\"ANY\",\n        description=\"Allow incoming traffic from members of the same security group\",\n        from_port=0,\n        to_port=65535,\n        v4_cidr_blocks=[\"0.0.0.0/0\"],\n    )],\n    egresses=[yandex.VpcSecurityGroupEgressArgs(\n        protocol=\"ANY\",\n        description=\"Allow outgoing traffic to members of the same security group\",\n        from_port=0,\n        to_port=65535,\n        v4_cidr_blocks=[\"0.0.0.0/0\"],\n    )])\nfoo_mdb_sql_server_cluster = yandex.MdbSqlServerCluster(\"fooMdbSqlServerCluster\",\n    environment=\"PRESTABLE\",\n    network_id=foo_vpc_network.id,\n    version=\"2016sp2std\",\n    resources=yandex.MdbSqlServerClusterResourcesArgs(\n        resource_preset_id=\"s2.small\",\n        disk_type_id=\"network-ssd\",\n        disk_size=20,\n    ),\n    labels={\n        \"test_key\": \"test_value\",\n    },\n    backup_window_start=yandex.MdbSqlServerClusterBackupWindowStartArgs(\n        hours=20,\n        minutes=30,\n    ),\n    sqlserver_config={\n        \"fill_factor_percent\": \"49\",\n        \"optimize_for_ad_hoc_workloads\": \"true\",\n    },\n    databases=[\n        yandex.MdbSqlServerClusterDatabaseArgs(\n            name=\"db_name_a\",\n        ),\n        yandex.MdbSqlServerClusterDatabaseArgs(\n            name=\"db_name\",\n        ),\n        yandex.MdbSqlServerClusterDatabaseArgs(\n            name=\"db_name_b\",\n        ),\n    ],\n    users=[\n        yandex.MdbSqlServerClusterUserArgs(\n            name=\"bob\",\n            password=\"mysecurepassword\",\n        ),\n        yandex.MdbSqlServerClusterUserArgs(\n            name=\"alice\",\n            password=\"mysecurepassword\",\n            permissions=[yandex.MdbSqlServerClusterUserPermissionArgs(\n                database_name=\"db_name\",\n                roles=[\"DDLADMIN\"],\n            )],\n        ),\n        yandex.MdbSqlServerClusterUserArgs(\n            name=\"chuck\",\n            password=\"mysecurepassword\",\n            permissions=[\n                yandex.MdbSqlServerClusterUserPermissionArgs(\n                    database_name=\"db_name_a\",\n                    roles=[\"OWNER\"],\n                ),\n                yandex.MdbSqlServerClusterUserPermissionArgs(\n                    database_name=\"db_name\",\n                    roles=[\n                        \"OWNER\",\n                        \"DDLADMIN\",\n                    ],\n                ),\n                yandex.MdbSqlServerClusterUserPermissionArgs(\n                    database_name=\"db_name_b\",\n                    roles=[\n                        \"OWNER\",\n                        \"DDLADMIN\",\n                    ],\n                ),\n            ],\n        ),\n    ],\n    hosts=[yandex.MdbSqlServerClusterHostArgs(\n        zone=\"ru-central1-a\",\n        subnet_id=foo_vpc_subnet.id,\n    )],\n    security_group_ids=[test_sg_x.id],\n    host_group_ids=[\n        \"host_group_1\",\n        \"host_group_2\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fooVpcNetwork = new Yandex.VpcNetwork(\"fooVpcNetwork\");\n\n    var fooVpcSubnet = new Yandex.VpcSubnet(\"fooVpcSubnet\", new()\n    {\n        Zone = \"ru-central1-a\",\n        NetworkId = fooVpcNetwork.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.5.0.0/24\",\n        },\n    });\n\n    var test_sg_x = new Yandex.VpcSecurityGroup(\"test-sg-x\", new()\n    {\n        NetworkId = fooVpcNetwork.Id,\n        Ingresses = new[]\n        {\n            new Yandex.Inputs.VpcSecurityGroupIngressArgs\n            {\n                Protocol = \"ANY\",\n                Description = \"Allow incoming traffic from members of the same security group\",\n                FromPort = 0,\n                ToPort = 65535,\n                V4CidrBlocks = new[]\n                {\n                    \"0.0.0.0/0\",\n                },\n            },\n        },\n        Egresses = new[]\n        {\n            new Yandex.Inputs.VpcSecurityGroupEgressArgs\n            {\n                Protocol = \"ANY\",\n                Description = \"Allow outgoing traffic to members of the same security group\",\n                FromPort = 0,\n                ToPort = 65535,\n                V4CidrBlocks = new[]\n                {\n                    \"0.0.0.0/0\",\n                },\n            },\n        },\n    });\n\n    var fooMdbSqlServerCluster = new Yandex.MdbSqlServerCluster(\"fooMdbSqlServerCluster\", new()\n    {\n        Environment = \"PRESTABLE\",\n        NetworkId = fooVpcNetwork.Id,\n        Version = \"2016sp2std\",\n        Resources = new Yandex.Inputs.MdbSqlServerClusterResourcesArgs\n        {\n            ResourcePresetId = \"s2.small\",\n            DiskTypeId = \"network-ssd\",\n            DiskSize = 20,\n        },\n        Labels = \n        {\n            { \"test_key\", \"test_value\" },\n        },\n        BackupWindowStart = new Yandex.Inputs.MdbSqlServerClusterBackupWindowStartArgs\n        {\n            Hours = 20,\n            Minutes = 30,\n        },\n        SqlserverConfig = \n        {\n            { \"fill_factor_percent\", \"49\" },\n            { \"optimize_for_ad_hoc_workloads\", \"true\" },\n        },\n        Databases = new[]\n        {\n            new Yandex.Inputs.MdbSqlServerClusterDatabaseArgs\n            {\n                Name = \"db_name_a\",\n            },\n            new Yandex.Inputs.MdbSqlServerClusterDatabaseArgs\n            {\n                Name = \"db_name\",\n            },\n            new Yandex.Inputs.MdbSqlServerClusterDatabaseArgs\n            {\n                Name = \"db_name_b\",\n            },\n        },\n        Users = new[]\n        {\n            new Yandex.Inputs.MdbSqlServerClusterUserArgs\n            {\n                Name = \"bob\",\n                Password = \"mysecurepassword\",\n            },\n            new Yandex.Inputs.MdbSqlServerClusterUserArgs\n            {\n                Name = \"alice\",\n                Password = \"mysecurepassword\",\n                Permissions = new[]\n                {\n                    new Yandex.Inputs.MdbSqlServerClusterUserPermissionArgs\n                    {\n                        DatabaseName = \"db_name\",\n                        Roles = new[]\n                        {\n                            \"DDLADMIN\",\n                        },\n                    },\n                },\n            },\n            new Yandex.Inputs.MdbSqlServerClusterUserArgs\n            {\n                Name = \"chuck\",\n                Password = \"mysecurepassword\",\n                Permissions = new[]\n                {\n                    new Yandex.Inputs.MdbSqlServerClusterUserPermissionArgs\n                    {\n                        DatabaseName = \"db_name_a\",\n                        Roles = new[]\n                        {\n                            \"OWNER\",\n                        },\n                    },\n                    new Yandex.Inputs.MdbSqlServerClusterUserPermissionArgs\n                    {\n                        DatabaseName = \"db_name\",\n                        Roles = new[]\n                        {\n                            \"OWNER\",\n                            \"DDLADMIN\",\n                        },\n                    },\n                    new Yandex.Inputs.MdbSqlServerClusterUserPermissionArgs\n                    {\n                        DatabaseName = \"db_name_b\",\n                        Roles = new[]\n                        {\n                            \"OWNER\",\n                            \"DDLADMIN\",\n                        },\n                    },\n                },\n            },\n        },\n        Hosts = new[]\n        {\n            new Yandex.Inputs.MdbSqlServerClusterHostArgs\n            {\n                Zone = \"ru-central1-a\",\n                SubnetId = fooVpcSubnet.Id,\n            },\n        },\n        SecurityGroupIds = new[]\n        {\n            test_sg_x.Id,\n        },\n        HostGroupIds = new[]\n        {\n            \"host_group_1\",\n            \"host_group_2\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfooVpcNetwork, err := yandex.NewVpcNetwork(ctx, \"fooVpcNetwork\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfooVpcSubnet, err := yandex.NewVpcSubnet(ctx, \"fooVpcSubnet\", \u0026yandex.VpcSubnetArgs{\n\t\t\tZone:      pulumi.String(\"ru-central1-a\"),\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.5.0.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewVpcSecurityGroup(ctx, \"test-sg-x\", \u0026yandex.VpcSecurityGroupArgs{\n\t\t\tNetworkId: fooVpcNetwork.ID(),\n\t\t\tIngresses: VpcSecurityGroupIngressArray{\n\t\t\t\t\u0026VpcSecurityGroupIngressArgs{\n\t\t\t\t\tProtocol:    pulumi.String(\"ANY\"),\n\t\t\t\t\tDescription: pulumi.String(\"Allow incoming traffic from members of the same security group\"),\n\t\t\t\t\tFromPort:    pulumi.Float64(0),\n\t\t\t\t\tToPort:      pulumi.Float64(65535),\n\t\t\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tEgresses: VpcSecurityGroupEgressArray{\n\t\t\t\t\u0026VpcSecurityGroupEgressArgs{\n\t\t\t\t\tProtocol:    pulumi.String(\"ANY\"),\n\t\t\t\t\tDescription: pulumi.String(\"Allow outgoing traffic to members of the same security group\"),\n\t\t\t\t\tFromPort:    pulumi.Float64(0),\n\t\t\t\t\tToPort:      pulumi.Float64(65535),\n\t\t\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"0.0.0.0/0\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMdbSqlServerCluster(ctx, \"fooMdbSqlServerCluster\", \u0026yandex.MdbSqlServerClusterArgs{\n\t\t\tEnvironment: pulumi.String(\"PRESTABLE\"),\n\t\t\tNetworkId:   fooVpcNetwork.ID(),\n\t\t\tVersion:     pulumi.String(\"2016sp2std\"),\n\t\t\tResources: \u0026MdbSqlServerClusterResourcesArgs{\n\t\t\t\tResourcePresetId: pulumi.String(\"s2.small\"),\n\t\t\t\tDiskTypeId:       pulumi.String(\"network-ssd\"),\n\t\t\t\tDiskSize:         pulumi.Float64(20),\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"test_key\": pulumi.String(\"test_value\"),\n\t\t\t},\n\t\t\tBackupWindowStart: \u0026MdbSqlServerClusterBackupWindowStartArgs{\n\t\t\t\tHours:   pulumi.Float64(20),\n\t\t\t\tMinutes: pulumi.Float64(30),\n\t\t\t},\n\t\t\tSqlserverConfig: pulumi.StringMap{\n\t\t\t\t\"fill_factor_percent\":           pulumi.String(\"49\"),\n\t\t\t\t\"optimize_for_ad_hoc_workloads\": pulumi.String(\"true\"),\n\t\t\t},\n\t\t\tDatabases: MdbSqlServerClusterDatabaseArray{\n\t\t\t\t\u0026MdbSqlServerClusterDatabaseArgs{\n\t\t\t\t\tName: pulumi.String(\"db_name_a\"),\n\t\t\t\t},\n\t\t\t\t\u0026MdbSqlServerClusterDatabaseArgs{\n\t\t\t\t\tName: pulumi.String(\"db_name\"),\n\t\t\t\t},\n\t\t\t\t\u0026MdbSqlServerClusterDatabaseArgs{\n\t\t\t\t\tName: pulumi.String(\"db_name_b\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUsers: MdbSqlServerClusterUserArray{\n\t\t\t\t\u0026MdbSqlServerClusterUserArgs{\n\t\t\t\t\tName:     pulumi.String(\"bob\"),\n\t\t\t\t\tPassword: pulumi.String(\"mysecurepassword\"),\n\t\t\t\t},\n\t\t\t\t\u0026MdbSqlServerClusterUserArgs{\n\t\t\t\t\tName:     pulumi.String(\"alice\"),\n\t\t\t\t\tPassword: pulumi.String(\"mysecurepassword\"),\n\t\t\t\t\tPermissions: MdbSqlServerClusterUserPermissionArray{\n\t\t\t\t\t\t\u0026MdbSqlServerClusterUserPermissionArgs{\n\t\t\t\t\t\t\tDatabaseName: pulumi.String(\"db_name\"),\n\t\t\t\t\t\t\tRoles: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"DDLADMIN\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026MdbSqlServerClusterUserArgs{\n\t\t\t\t\tName:     pulumi.String(\"chuck\"),\n\t\t\t\t\tPassword: pulumi.String(\"mysecurepassword\"),\n\t\t\t\t\tPermissions: MdbSqlServerClusterUserPermissionArray{\n\t\t\t\t\t\t\u0026MdbSqlServerClusterUserPermissionArgs{\n\t\t\t\t\t\t\tDatabaseName: pulumi.String(\"db_name_a\"),\n\t\t\t\t\t\t\tRoles: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"OWNER\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026MdbSqlServerClusterUserPermissionArgs{\n\t\t\t\t\t\t\tDatabaseName: pulumi.String(\"db_name\"),\n\t\t\t\t\t\t\tRoles: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"OWNER\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"DDLADMIN\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026MdbSqlServerClusterUserPermissionArgs{\n\t\t\t\t\t\t\tDatabaseName: pulumi.String(\"db_name_b\"),\n\t\t\t\t\t\t\tRoles: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"OWNER\"),\n\t\t\t\t\t\t\t\tpulumi.String(\"DDLADMIN\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tHosts: MdbSqlServerClusterHostArray{\n\t\t\t\t\u0026MdbSqlServerClusterHostArgs{\n\t\t\t\t\tZone:     pulumi.String(\"ru-central1-a\"),\n\t\t\t\t\tSubnetId: fooVpcSubnet.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSecurityGroupIds: pulumi.StringArray{\n\t\t\t\ttest_sg_x.ID(),\n\t\t\t},\n\t\t\tHostGroupIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"host_group_1\"),\n\t\t\t\tpulumi.String(\"host_group_2\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport com.pulumi.yandex.VpcSecurityGroup;\nimport com.pulumi.yandex.VpcSecurityGroupArgs;\nimport com.pulumi.yandex.inputs.VpcSecurityGroupIngressArgs;\nimport com.pulumi.yandex.inputs.VpcSecurityGroupEgressArgs;\nimport com.pulumi.yandex.MdbSqlServerCluster;\nimport com.pulumi.yandex.MdbSqlServerClusterArgs;\nimport com.pulumi.yandex.inputs.MdbSqlServerClusterResourcesArgs;\nimport com.pulumi.yandex.inputs.MdbSqlServerClusterBackupWindowStartArgs;\nimport com.pulumi.yandex.inputs.MdbSqlServerClusterDatabaseArgs;\nimport com.pulumi.yandex.inputs.MdbSqlServerClusterUserArgs;\nimport com.pulumi.yandex.inputs.MdbSqlServerClusterHostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var fooVpcNetwork = new VpcNetwork(\"fooVpcNetwork\");\n\n        var fooVpcSubnet = new VpcSubnet(\"fooVpcSubnet\", VpcSubnetArgs.builder()        \n            .zone(\"ru-central1-a\")\n            .networkId(fooVpcNetwork.id())\n            .v4CidrBlocks(\"10.5.0.0/24\")\n            .build());\n\n        var test_sg_x = new VpcSecurityGroup(\"test-sg-x\", VpcSecurityGroupArgs.builder()        \n            .networkId(fooVpcNetwork.id())\n            .ingresses(VpcSecurityGroupIngressArgs.builder()\n                .protocol(\"ANY\")\n                .description(\"Allow incoming traffic from members of the same security group\")\n                .fromPort(0)\n                .toPort(65535)\n                .v4CidrBlocks(\"0.0.0.0/0\")\n                .build())\n            .egresses(VpcSecurityGroupEgressArgs.builder()\n                .protocol(\"ANY\")\n                .description(\"Allow outgoing traffic to members of the same security group\")\n                .fromPort(0)\n                .toPort(65535)\n                .v4CidrBlocks(\"0.0.0.0/0\")\n                .build())\n            .build());\n\n        var fooMdbSqlServerCluster = new MdbSqlServerCluster(\"fooMdbSqlServerCluster\", MdbSqlServerClusterArgs.builder()        \n            .environment(\"PRESTABLE\")\n            .networkId(fooVpcNetwork.id())\n            .version(\"2016sp2std\")\n            .resources(MdbSqlServerClusterResourcesArgs.builder()\n                .resourcePresetId(\"s2.small\")\n                .diskTypeId(\"network-ssd\")\n                .diskSize(20)\n                .build())\n            .labels(Map.of(\"test_key\", \"test_value\"))\n            .backupWindowStart(MdbSqlServerClusterBackupWindowStartArgs.builder()\n                .hours(20)\n                .minutes(30)\n                .build())\n            .sqlserverConfig(Map.ofEntries(\n                Map.entry(\"fill_factor_percent\", 49),\n                Map.entry(\"optimize_for_ad_hoc_workloads\", true)\n            ))\n            .databases(            \n                MdbSqlServerClusterDatabaseArgs.builder()\n                    .name(\"db_name_a\")\n                    .build(),\n                MdbSqlServerClusterDatabaseArgs.builder()\n                    .name(\"db_name\")\n                    .build(),\n                MdbSqlServerClusterDatabaseArgs.builder()\n                    .name(\"db_name_b\")\n                    .build())\n            .users(            \n                MdbSqlServerClusterUserArgs.builder()\n                    .name(\"bob\")\n                    .password(\"mysecurepassword\")\n                    .build(),\n                MdbSqlServerClusterUserArgs.builder()\n                    .name(\"alice\")\n                    .password(\"mysecurepassword\")\n                    .permissions(MdbSqlServerClusterUserPermissionArgs.builder()\n                        .databaseName(\"db_name\")\n                        .roles(\"DDLADMIN\")\n                        .build())\n                    .build(),\n                MdbSqlServerClusterUserArgs.builder()\n                    .name(\"chuck\")\n                    .password(\"mysecurepassword\")\n                    .permissions(                    \n                        MdbSqlServerClusterUserPermissionArgs.builder()\n                            .databaseName(\"db_name_a\")\n                            .roles(\"OWNER\")\n                            .build(),\n                        MdbSqlServerClusterUserPermissionArgs.builder()\n                            .databaseName(\"db_name\")\n                            .roles(                            \n                                \"OWNER\",\n                                \"DDLADMIN\")\n                            .build(),\n                        MdbSqlServerClusterUserPermissionArgs.builder()\n                            .databaseName(\"db_name_b\")\n                            .roles(                            \n                                \"OWNER\",\n                                \"DDLADMIN\")\n                            .build())\n                    .build())\n            .hosts(MdbSqlServerClusterHostArgs.builder()\n                .zone(\"ru-central1-a\")\n                .subnetId(fooVpcSubnet.id())\n                .build())\n            .securityGroupIds(test_sg_x.id())\n            .hostGroupIds(            \n                \"host_group_1\",\n                \"host_group_2\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fooMdbSqlServerCluster:\n    type: yandex:MdbSqlServerCluster\n    properties:\n      environment: PRESTABLE\n      networkId: ${fooVpcNetwork.id}\n      version: 2016sp2std\n      resources:\n        resourcePresetId: s2.small\n        diskTypeId: network-ssd\n        diskSize: 20\n      labels:\n        test_key: test_value\n      backupWindowStart:\n        hours: 20\n        minutes: 30\n      sqlserverConfig:\n        fill_factor_percent: 49\n        optimize_for_ad_hoc_workloads: true\n      databases:\n        - name: db_name_a\n        - name: db_name\n        - name: db_name_b\n      users:\n        - name: bob\n          password: mysecurepassword\n        - name: alice\n          password: mysecurepassword\n          permissions:\n            - databaseName: db_name\n              roles:\n                - DDLADMIN\n        - name: chuck\n          password: mysecurepassword\n          permissions:\n            - databaseName: db_name_a\n              roles:\n                - OWNER\n            - databaseName: db_name\n              roles:\n                - OWNER\n                - DDLADMIN\n            - databaseName: db_name_b\n              roles:\n                - OWNER\n                - DDLADMIN\n      hosts:\n        - zone: ru-central1-a\n          subnetId: ${fooVpcSubnet.id}\n      securityGroupIds:\n        - ${[\"test-sg-x\"].id}\n      hostGroupIds:\n        - host_group_1\n        - host_group_2\n  fooVpcNetwork:\n    type: yandex:VpcNetwork\n  fooVpcSubnet:\n    type: yandex:VpcSubnet\n    properties:\n      zone: ru-central1-a\n      networkId: ${fooVpcNetwork.id}\n      v4CidrBlocks:\n        - 10.5.0.0/24\n  test-sg-x:\n    type: yandex:VpcSecurityGroup\n    properties:\n      networkId: ${fooVpcNetwork.id}\n      ingresses:\n        - protocol: ANY\n          description: Allow incoming traffic from members of the same security group\n          fromPort: 0\n          toPort: 65535\n          v4CidrBlocks:\n            - 0.0.0.0/0\n      egresses:\n        - protocol: ANY\n          description: Allow outgoing traffic to members of the same security group\n          fromPort: 0\n          toPort: 65535\n          v4CidrBlocks:\n            - 0.0.0.0/0\n```\n\n{{% /example %}}\n{{% /examples %}}\n## SQLServer config\n\nIf not specified `sqlserver_config` then does not make any changes.  \n\n* max_degree_of_parallelism - Limits the number of processors to use in parallel plan execution per task. See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-max-degree-of-parallelism-server-configuration-option?view=sql-server-2016).\n\t\n* cost_threshold_for_parallelism - Specifies the threshold at which SQL Server creates and runs parallel plans for queries. SQL Server creates and runs a parallel plan for a query only when the estimated cost to run a serial plan for the same query is higher than the value of the option. See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-cost-threshold-for-parallelism-server-configuration-option?view=sql-server-2016).\n\n* audit_level - Describes how to configure login auditing to monitor SQL Server Database Engine login activity. Possible values:\n  - 0 — do not log login attempts,˚√\n  - 1 — log only failed login attempts,\n  - 2 — log only successful login attempts (not recommended),\n  - 3 — log all login attempts (not recommended).\n\t See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/ssms/configure-login-auditing-sql-server-management-studio?view=sql-server-2016).\n\t\n* fill_factor_percent - Manages the fill factor server configuration option. When an index is created or rebuilt the fill factor determines the percentage of space on each index leaf-level page to be filled with data, reserving the rest as free space for future growth. Values 0 and 100 mean full page usage (no space reserved). See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/configure-the-fill-factor-server-configuration-option?view=sql-server-2016).\n* optimize_for_ad_hoc_workloads - Determines whether plans should be cached only after second execution. Allows to avoid SQL cache bloat because of single-use plans. See in-depth description in [SQL Server documentation](https://docs.microsoft.com/en-us/sql/database-engine/configure-windows/optimize-for-ad-hoc-workloads-server-configuration-option?view=sql-server-2016).\n\n\n## Import\n\nA cluster can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/mdbSqlServerCluster:MdbSqlServerCluster foo cluster_id\n```\n\n ",
            "properties": {
                "backupWindowStart": {
                    "$ref": "#/types/yandex:index/MdbSqlServerClusterBackupWindowStart:MdbSqlServerClusterBackupWindowStart",
                    "description": "Time to start the daily backup, in the UTC. The structure is documented below.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the cluster.\n"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbSqlServerClusterDatabase:MdbSqlServerClusterDatabase"
                    },
                    "description": "A database of the SQLServer cluster. The structure is documented below.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the SQLServer cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE)\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "health": {
                    "type": "string",
                    "description": "Aggregated health of the cluster.\n"
                },
                "hostGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IDs of the host groups hosting VMs of the cluster.\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbSqlServerClusterHost:MdbSqlServerClusterHost"
                    },
                    "description": "A host of the SQLServer cluster. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the SQLServer cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the SQLServer cluster uses.\n"
                },
                "resources": {
                    "$ref": "#/types/yandex:index/MdbSqlServerClusterResources:MdbSqlServerClusterResources",
                    "description": "Resources allocated to hosts of the SQLServer cluster. The structure is documented below.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                },
                "sqlcollation": {
                    "type": "string",
                    "description": "SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!\n"
                },
                "sqlserverConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "SQLServer cluster config. Detail info in \"SQLServer config\" section (documented below).\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the cluster.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbSqlServerClusterTimeouts:MdbSqlServerClusterTimeouts"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbSqlServerClusterUser:MdbSqlServerClusterUser"
                    },
                    "description": "A user of the SQLServer cluster. The structure is documented below.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the SQLServer cluster. (2016sp2std, 2016sp2ent)\n"
                }
            },
            "required": [
                "createdAt",
                "databases",
                "deletionProtection",
                "environment",
                "folderId",
                "health",
                "hosts",
                "hostGroupIds",
                "name",
                "networkId",
                "resources",
                "sqlcollation",
                "sqlserverConfig",
                "status",
                "timeouts",
                "users",
                "version"
            ],
            "inputProperties": {
                "backupWindowStart": {
                    "$ref": "#/types/yandex:index/MdbSqlServerClusterBackupWindowStart:MdbSqlServerClusterBackupWindowStart",
                    "description": "Time to start the daily backup, in the UTC. The structure is documented below.\n"
                },
                "databases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbSqlServerClusterDatabase:MdbSqlServerClusterDatabase"
                    },
                    "description": "A database of the SQLServer cluster. The structure is documented below.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the SQLServer cluster.\n"
                },
                "environment": {
                    "type": "string",
                    "description": "Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE)\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "hostGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IDs of the host groups hosting VMs of the cluster.\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbSqlServerClusterHost:MdbSqlServerClusterHost"
                    },
                    "description": "A host of the SQLServer cluster. The structure is documented below.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the SQLServer cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network, to which the SQLServer cluster uses.\n"
                },
                "resources": {
                    "$ref": "#/types/yandex:index/MdbSqlServerClusterResources:MdbSqlServerClusterResources",
                    "description": "Resources allocated to hosts of the SQLServer cluster. The structure is documented below.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                },
                "sqlcollation": {
                    "type": "string",
                    "description": "SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!\n"
                },
                "sqlserverConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "SQLServer cluster config. Detail info in \"SQLServer config\" section (documented below).\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/MdbSqlServerClusterTimeouts:MdbSqlServerClusterTimeouts"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/MdbSqlServerClusterUser:MdbSqlServerClusterUser"
                    },
                    "description": "A user of the SQLServer cluster. The structure is documented below.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the SQLServer cluster. (2016sp2std, 2016sp2ent)\n"
                }
            },
            "requiredInputs": [
                "databases",
                "environment",
                "hosts",
                "networkId",
                "resources",
                "timeouts",
                "users",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MdbSqlServerCluster resources.\n",
                "properties": {
                    "backupWindowStart": {
                        "$ref": "#/types/yandex:index/MdbSqlServerClusterBackupWindowStart:MdbSqlServerClusterBackupWindowStart",
                        "description": "Time to start the daily backup, in the UTC. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the cluster.\n"
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbSqlServerClusterDatabase:MdbSqlServerClusterDatabase"
                        },
                        "description": "A database of the SQLServer cluster. The structure is documented below.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the SQLServer cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the SQLServer cluster. (PRODUCTION, PRESTABLE)\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                    },
                    "health": {
                        "type": "string",
                        "description": "Aggregated health of the cluster.\n"
                    },
                    "hostGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IDs of the host groups hosting VMs of the cluster.\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbSqlServerClusterHost:MdbSqlServerClusterHost"
                        },
                        "description": "A host of the SQLServer cluster. The structure is documented below.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the SQLServer cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the SQLServer cluster uses.\n"
                    },
                    "resources": {
                        "$ref": "#/types/yandex:index/MdbSqlServerClusterResources:MdbSqlServerClusterResources",
                        "description": "Resources allocated to hosts of the SQLServer cluster. The structure is documented below.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "sqlcollation": {
                        "type": "string",
                        "description": "SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!\n"
                    },
                    "sqlserverConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "SQLServer cluster config. Detail info in \"SQLServer config\" section (documented below).\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/MdbSqlServerClusterTimeouts:MdbSqlServerClusterTimeouts"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/MdbSqlServerClusterUser:MdbSqlServerClusterUser"
                        },
                        "description": "A user of the SQLServer cluster. The structure is documented below.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the SQLServer cluster. (2016sp2std, 2016sp2ent)\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/messageQueue:MessageQueue": {
            "description": "Allows management of [Yandex.Cloud Message Queue](https://cloud.yandex.com/docs/message-queue).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst exampleDeadletterQueue = new yandex.MessageQueue(\"exampleDeadletterQueue\", {});\nconst exampleQueue = new yandex.MessageQueue(\"exampleQueue\", {\n    visibilityTimeoutSeconds: 600,\n    receiveWaitTimeSeconds: 20,\n    messageRetentionSeconds: 1209600,\n    redrivePolicy: exampleDeadletterQueue.arn.apply(arn =\u003e JSON.stringify({\n        deadLetterTargetArn: arn,\n        maxReceiveCount: 3,\n    })),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_yandex as yandex\n\nexample_deadletter_queue = yandex.MessageQueue(\"exampleDeadletterQueue\")\nexample_queue = yandex.MessageQueue(\"exampleQueue\",\n    visibility_timeout_seconds=600,\n    receive_wait_time_seconds=20,\n    message_retention_seconds=1209600,\n    redrive_policy=example_deadletter_queue.arn.apply(lambda arn: json.dumps({\n        \"deadLetterTargetArn\": arn,\n        \"maxReceiveCount\": 3,\n    })))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleDeadletterQueue = new Yandex.MessageQueue(\"exampleDeadletterQueue\");\n\n    var exampleQueue = new Yandex.MessageQueue(\"exampleQueue\", new()\n    {\n        VisibilityTimeoutSeconds = 600,\n        ReceiveWaitTimeSeconds = 20,\n        MessageRetentionSeconds = 1209600,\n        RedrivePolicy = exampleDeadletterQueue.Arn.Apply(arn =\u003e JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n        {\n            [\"deadLetterTargetArn\"] = arn,\n            [\"maxReceiveCount\"] = 3,\n        })),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleDeadletterQueue, err := yandex.NewMessageQueue(ctx, \"exampleDeadletterQueue\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewMessageQueue(ctx, \"exampleQueue\", \u0026yandex.MessageQueueArgs{\n\t\t\tVisibilityTimeoutSeconds: pulumi.Float64(600),\n\t\t\tReceiveWaitTimeSeconds:   pulumi.Float64(20),\n\t\t\tMessageRetentionSeconds:  pulumi.Float64(1209600),\n\t\t\tRedrivePolicy: exampleDeadletterQueue.Arn.ApplyT(func(arn string) (pulumi.String, error) {\n\t\t\t\tvar _zero pulumi.String\n\t\t\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\t\t\"deadLetterTargetArn\": arn,\n\t\t\t\t\t\"maxReceiveCount\":     3,\n\t\t\t\t})\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn _zero, err\n\t\t\t\t}\n\t\t\t\tjson0 := string(tmpJSON0)\n\t\t\t\treturn pulumi.String(json0), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.MessageQueue;\nimport com.pulumi.yandex.MessageQueueArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleDeadletterQueue = new MessageQueue(\"exampleDeadletterQueue\");\n\n        var exampleQueue = new MessageQueue(\"exampleQueue\", MessageQueueArgs.builder()        \n            .visibilityTimeoutSeconds(600)\n            .receiveWaitTimeSeconds(20)\n            .messageRetentionSeconds(1209600)\n            .redrivePolicy(exampleDeadletterQueue.arn().applyValue(arn -\u003e serializeJson(\n                jsonObject(\n                    jsonProperty(\"deadLetterTargetArn\", arn),\n                    jsonProperty(\"maxReceiveCount\", 3)\n                ))))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleQueue:\n    type: yandex:MessageQueue\n    properties:\n      visibilityTimeoutSeconds: 600\n      receiveWaitTimeSeconds: 20\n      messageRetentionSeconds: 1.2096e+06\n      redrivePolicy:\n        fn::toJSON:\n          deadLetterTargetArn: ${exampleDeadletterQueue.arn}\n          maxReceiveCount: 3\n  exampleDeadletterQueue:\n    type: yandex:MessageQueue\n```\n{{% /example %}}\n{{% /examples %}}\n## FIFO queue\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst exampleFifoQueue = new yandex.MessageQueue(\"example_fifo_queue\", {\n    contentBasedDeduplication: true,\n    fifoQueue: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nexample_fifo_queue = yandex.MessageQueue(\"exampleFifoQueue\",\n    content_based_deduplication=True,\n    fifo_queue=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleFifoQueue = new Yandex.MessageQueue(\"exampleFifoQueue\", new()\n    {\n        ContentBasedDeduplication = true,\n        FifoQueue = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewMessageQueue(ctx, \"exampleFifoQueue\", \u0026yandex.MessageQueueArgs{\n\t\t\tContentBasedDeduplication: pulumi.Bool(true),\n\t\t\tFifoQueue:                 pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.MessageQueue;\nimport com.pulumi.yandex.MessageQueueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleFifoQueue = new MessageQueue(\"exampleFifoQueue\", MessageQueueArgs.builder()        \n            .contentBasedDeduplication(true)\n            .fifoQueue(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleFifoQueue:\n    type: yandex:MessageQueue\n    properties:\n      contentBasedDeduplication: true\n      fifoQueue: true\n```\n\n\n## Import\n\nYandex Message Queues can be imported using its `queue url`, e.g.\n\n```sh\n $ pulumi import yandex:index/messageQueue:MessageQueue example_import_queue https://message-queue.api.cloud.yandex.net/abcdefghijklmn123456/opqrstuvwxyz87654321/ymq_terraform_import_example\n```\n\n ",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The [access key](https://cloud.yandex.com/docs/iam/operations/sa/create-access-key) to use when applying changes. If omitted, `ymq_access_key` specified in provider config is used. For more information see [documentation](https://cloud.yandex.com/docs/message-queue/quickstart).\n"
                },
                "arn": {
                    "type": "string",
                    "description": "ARN of the Yandex Message Queue. It is used for setting up a [redrive policy](https://cloud.yandex.com/docs/message-queue/concepts/dlq). See [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/SetQueueAttributes).\n"
                },
                "contentBasedDeduplication": {
                    "type": "boolean",
                    "description": "Enables [content-based deduplication](https://cloud.yandex.com/docs/message-queue/concepts/deduplication#content-based-deduplication). Can be used only if queue is [FIFO](https://cloud.yandex.com/docs/message-queue/concepts/queue#fifo-queues).\n"
                },
                "delaySeconds": {
                    "type": "number",
                    "description": "Number of seconds to [delay the message from being available for processing](https://cloud.yandex.com/docs/message-queue/concepts/delay-queues#delay-queues). Valid values: from 0 to 900 seconds (15 minutes). Default: 0.\n"
                },
                "fifoQueue": {
                    "type": "boolean",
                    "description": "Is this queue [FIFO](https://cloud.yandex.com/docs/message-queue/concepts/queue#fifo-queues). If this parameter is not used, a standard queue is created. You cannot change the parameter value for a created queue.\n"
                },
                "maxMessageSize": {
                    "type": "number",
                    "description": "Maximum message size in bytes. Valid values: from 1024 bytes (1 KB) to 262144 bytes (256 KB). Default: 262144 (256 KB). For more information see [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/CreateQueue).\n"
                },
                "messageRetentionSeconds": {
                    "type": "number",
                    "description": "The length of time in seconds to retain a message. Valid values: from 60 seconds (1 minute) to 1209600 seconds (14 days). Default: 345600 (4 days). For more information see [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/CreateQueue).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Queue name. The maximum length is 80 characters. You can use numbers, letters, underscores, and hyphens in the name. The name of a FIFO queue must end with the `.fifo` suffix. If not specified, random name will be generated. Conflicts with `name_prefix`. For more information see [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/CreateQueue).\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Generates random name with the specified prefix. Conflicts with `name`.\n"
                },
                "receiveWaitTimeSeconds": {
                    "type": "number",
                    "description": "Wait time for the [ReceiveMessage](https://cloud.yandex.com/docs/message-queue/api-ref/message/ReceiveMessage) method (for long polling), in seconds. Valid values: from 0 to 20 seconds. Default: 0. For more information about long polling see [documentation](https://cloud.yandex.com/docs/message-queue/concepts/long-polling).\n"
                },
                "redrivePolicy": {
                    "type": "string",
                    "description": "Message redrive policy in [Dead Letter Queue](https://cloud.yandex.com/docs/message-queue/concepts/dlq). The source queue and DLQ must be the same type: for FIFO queues, the DLQ must also be a FIFO queue. For more information about redrive policy see [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/CreateQueue). Also you can use example in this page.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "ID of the region where the message queue is located at.\nThe default is 'ru-central1'.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The [secret key](https://cloud.yandex.com/docs/iam/operations/sa/create-access-key) to use when applying changes. If omitted, `ymq_secret_key` specified in provider config is used. For more information see [documentation](https://cloud.yandex.com/docs/message-queue/quickstart).\n",
                    "secret": true
                },
                "visibilityTimeoutSeconds": {
                    "type": "number",
                    "description": "[Visibility timeout](https://cloud.yandex.com/docs/message-queue/concepts/visibility-timeout) for messages in a queue, specified in seconds. Valid values: from 0 to 43200 seconds (12 hours). Default: 30.\n"
                }
            },
            "required": [
                "arn",
                "name"
            ],
            "inputProperties": {
                "accessKey": {
                    "type": "string",
                    "description": "The [access key](https://cloud.yandex.com/docs/iam/operations/sa/create-access-key) to use when applying changes. If omitted, `ymq_access_key` specified in provider config is used. For more information see [documentation](https://cloud.yandex.com/docs/message-queue/quickstart).\n"
                },
                "contentBasedDeduplication": {
                    "type": "boolean",
                    "description": "Enables [content-based deduplication](https://cloud.yandex.com/docs/message-queue/concepts/deduplication#content-based-deduplication). Can be used only if queue is [FIFO](https://cloud.yandex.com/docs/message-queue/concepts/queue#fifo-queues).\n"
                },
                "delaySeconds": {
                    "type": "number",
                    "description": "Number of seconds to [delay the message from being available for processing](https://cloud.yandex.com/docs/message-queue/concepts/delay-queues#delay-queues). Valid values: from 0 to 900 seconds (15 minutes). Default: 0.\n"
                },
                "fifoQueue": {
                    "type": "boolean",
                    "description": "Is this queue [FIFO](https://cloud.yandex.com/docs/message-queue/concepts/queue#fifo-queues). If this parameter is not used, a standard queue is created. You cannot change the parameter value for a created queue.\n"
                },
                "maxMessageSize": {
                    "type": "number",
                    "description": "Maximum message size in bytes. Valid values: from 1024 bytes (1 KB) to 262144 bytes (256 KB). Default: 262144 (256 KB). For more information see [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/CreateQueue).\n"
                },
                "messageRetentionSeconds": {
                    "type": "number",
                    "description": "The length of time in seconds to retain a message. Valid values: from 60 seconds (1 minute) to 1209600 seconds (14 days). Default: 345600 (4 days). For more information see [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/CreateQueue).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Queue name. The maximum length is 80 characters. You can use numbers, letters, underscores, and hyphens in the name. The name of a FIFO queue must end with the `.fifo` suffix. If not specified, random name will be generated. Conflicts with `name_prefix`. For more information see [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/CreateQueue).\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Generates random name with the specified prefix. Conflicts with `name`.\n"
                },
                "receiveWaitTimeSeconds": {
                    "type": "number",
                    "description": "Wait time for the [ReceiveMessage](https://cloud.yandex.com/docs/message-queue/api-ref/message/ReceiveMessage) method (for long polling), in seconds. Valid values: from 0 to 20 seconds. Default: 0. For more information about long polling see [documentation](https://cloud.yandex.com/docs/message-queue/concepts/long-polling).\n"
                },
                "redrivePolicy": {
                    "type": "string",
                    "description": "Message redrive policy in [Dead Letter Queue](https://cloud.yandex.com/docs/message-queue/concepts/dlq). The source queue and DLQ must be the same type: for FIFO queues, the DLQ must also be a FIFO queue. For more information about redrive policy see [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/CreateQueue). Also you can use example in this page.\n"
                },
                "regionId": {
                    "type": "string",
                    "description": "ID of the region where the message queue is located at.\nThe default is 'ru-central1'.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The [secret key](https://cloud.yandex.com/docs/iam/operations/sa/create-access-key) to use when applying changes. If omitted, `ymq_secret_key` specified in provider config is used. For more information see [documentation](https://cloud.yandex.com/docs/message-queue/quickstart).\n",
                    "secret": true
                },
                "visibilityTimeoutSeconds": {
                    "type": "number",
                    "description": "[Visibility timeout](https://cloud.yandex.com/docs/message-queue/concepts/visibility-timeout) for messages in a queue, specified in seconds. Valid values: from 0 to 43200 seconds (12 hours). Default: 30.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MessageQueue resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The [access key](https://cloud.yandex.com/docs/iam/operations/sa/create-access-key) to use when applying changes. If omitted, `ymq_access_key` specified in provider config is used. For more information see [documentation](https://cloud.yandex.com/docs/message-queue/quickstart).\n"
                    },
                    "arn": {
                        "type": "string",
                        "description": "ARN of the Yandex Message Queue. It is used for setting up a [redrive policy](https://cloud.yandex.com/docs/message-queue/concepts/dlq). See [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/SetQueueAttributes).\n"
                    },
                    "contentBasedDeduplication": {
                        "type": "boolean",
                        "description": "Enables [content-based deduplication](https://cloud.yandex.com/docs/message-queue/concepts/deduplication#content-based-deduplication). Can be used only if queue is [FIFO](https://cloud.yandex.com/docs/message-queue/concepts/queue#fifo-queues).\n"
                    },
                    "delaySeconds": {
                        "type": "number",
                        "description": "Number of seconds to [delay the message from being available for processing](https://cloud.yandex.com/docs/message-queue/concepts/delay-queues#delay-queues). Valid values: from 0 to 900 seconds (15 minutes). Default: 0.\n"
                    },
                    "fifoQueue": {
                        "type": "boolean",
                        "description": "Is this queue [FIFO](https://cloud.yandex.com/docs/message-queue/concepts/queue#fifo-queues). If this parameter is not used, a standard queue is created. You cannot change the parameter value for a created queue.\n"
                    },
                    "maxMessageSize": {
                        "type": "number",
                        "description": "Maximum message size in bytes. Valid values: from 1024 bytes (1 KB) to 262144 bytes (256 KB). Default: 262144 (256 KB). For more information see [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/CreateQueue).\n"
                    },
                    "messageRetentionSeconds": {
                        "type": "number",
                        "description": "The length of time in seconds to retain a message. Valid values: from 60 seconds (1 minute) to 1209600 seconds (14 days). Default: 345600 (4 days). For more information see [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/CreateQueue).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Queue name. The maximum length is 80 characters. You can use numbers, letters, underscores, and hyphens in the name. The name of a FIFO queue must end with the `.fifo` suffix. If not specified, random name will be generated. Conflicts with `name_prefix`. For more information see [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/CreateQueue).\n"
                    },
                    "namePrefix": {
                        "type": "string",
                        "description": "Generates random name with the specified prefix. Conflicts with `name`.\n"
                    },
                    "receiveWaitTimeSeconds": {
                        "type": "number",
                        "description": "Wait time for the [ReceiveMessage](https://cloud.yandex.com/docs/message-queue/api-ref/message/ReceiveMessage) method (for long polling), in seconds. Valid values: from 0 to 20 seconds. Default: 0. For more information about long polling see [documentation](https://cloud.yandex.com/docs/message-queue/concepts/long-polling).\n"
                    },
                    "redrivePolicy": {
                        "type": "string",
                        "description": "Message redrive policy in [Dead Letter Queue](https://cloud.yandex.com/docs/message-queue/concepts/dlq). The source queue and DLQ must be the same type: for FIFO queues, the DLQ must also be a FIFO queue. For more information about redrive policy see [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/CreateQueue). Also you can use example in this page.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "ID of the region where the message queue is located at.\nThe default is 'ru-central1'.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The [secret key](https://cloud.yandex.com/docs/iam/operations/sa/create-access-key) to use when applying changes. If omitted, `ymq_secret_key` specified in provider config is used. For more information see [documentation](https://cloud.yandex.com/docs/message-queue/quickstart).\n",
                        "secret": true
                    },
                    "visibilityTimeoutSeconds": {
                        "type": "number",
                        "description": "[Visibility timeout](https://cloud.yandex.com/docs/message-queue/concepts/visibility-timeout) for messages in a queue, specified in seconds. Valid values: from 0 to 43200 seconds (12 hours). Default: 30.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/organizationManagerGroup:OrganizationManagerGroup": {
            "description": "Allows management of a single Group within an existing Yandex.Cloud Organization. For more information, see [the official documentation](https://cloud.yandex.com/en-ru/docs/organization/manage-groups).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst group = new yandex.OrganizationManagerGroup(\"group\", {\n    description: \"My new Group\",\n    organizationId: \"sdf4*********3fr\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ngroup = yandex.OrganizationManagerGroup(\"group\",\n    description=\"My new Group\",\n    organization_id=\"sdf4*********3fr\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @group = new Yandex.OrganizationManagerGroup(\"group\", new()\n    {\n        Description = \"My new Group\",\n        OrganizationId = \"sdf4*********3fr\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewOrganizationManagerGroup(ctx, \"group\", \u0026yandex.OrganizationManagerGroupArgs{\n\t\t\tDescription:    pulumi.String(\"My new Group\"),\n\t\t\tOrganizationId: pulumi.String(\"sdf4*********3fr\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.OrganizationManagerGroup;\nimport com.pulumi.yandex.OrganizationManagerGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var group = new OrganizationManagerGroup(\"group\", OrganizationManagerGroupArgs.builder()        \n            .description(\"My new Group\")\n            .organizationId(\"sdf4*********3fr\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  group:\n    type: yandex:OrganizationManagerGroup\n    properties:\n      description: My new Group\n      organizationId: sdf4*********3fr\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA Yandex.Cloud Organization Manager Group can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/organizationManagerGroup:OrganizationManagerGroup group \"group_id\"\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "(Computed) The SAML Federation creation timestamp.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Group.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization to attach this Group to.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/OrganizationManagerGroupTimeouts:OrganizationManagerGroupTimeouts"
                }
            },
            "required": [
                "createdAt",
                "name",
                "organizationId",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Group.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization to attach this Group to.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/OrganizationManagerGroupTimeouts:OrganizationManagerGroupTimeouts"
                }
            },
            "requiredInputs": [
                "organizationId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationManagerGroup resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "(Computed) The SAML Federation creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Group.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization to attach this Group to.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/OrganizationManagerGroupTimeouts:OrganizationManagerGroupTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/organizationManagerGroupIamMember:OrganizationManagerGroupIamMember": {
            "description": "Allows creation and management of a single member for a single binding within\nthe IAM policy for an existing Yandex Organization Manager Group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst editor = new yandex.OrganizationManagerGroupIamMember(\"editor\", {\n    groupId: \"some_group_id\",\n    member: \"userAccount:user_id\",\n    role: \"editor\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\neditor = yandex.OrganizationManagerGroupIamMember(\"editor\",\n    group_id=\"some_group_id\",\n    member=\"userAccount:user_id\",\n    role=\"editor\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var editor = new Yandex.OrganizationManagerGroupIamMember(\"editor\", new()\n    {\n        GroupId = \"some_group_id\",\n        Member = \"userAccount:user_id\",\n        Role = \"editor\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewOrganizationManagerGroupIamMember(ctx, \"editor\", \u0026yandex.OrganizationManagerGroupIamMemberArgs{\n\t\t\tGroupId: pulumi.String(\"some_group_id\"),\n\t\t\tMember:  pulumi.String(\"userAccount:user_id\"),\n\t\t\tRole:    pulumi.String(\"editor\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.OrganizationManagerGroupIamMember;\nimport com.pulumi.yandex.OrganizationManagerGroupIamMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var editor = new OrganizationManagerGroupIamMember(\"editor\", OrganizationManagerGroupIamMemberArgs.builder()        \n            .groupId(\"some_group_id\")\n            .member(\"userAccount:user_id\")\n            .role(\"editor\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  editor:\n    type: yandex:OrganizationManagerGroupIamMember\n    properties:\n      groupId: some_group_id\n      member: userAccount:user_id\n      role: editor\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIAM member imports use space-delimited identifiers; the resource in question, the role, and the account. This member resource can be imported using the `group_id`, role, and account, e.g.\n\n```sh\n $ pulumi import yandex:index/organizationManagerGroupIamMember:OrganizationManagerGroupIamMember my_project \"group_id viewer foo@example.com\"\n```\n\n ",
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "ID of the organization to attach a policy to.\n"
                },
                "member": {
                    "type": "string",
                    "description": "The identity that will be granted the privilege that is specified in the `role` field.\nThis field can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **federatedUser:{federated_user_id}**: A unique federated user ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be assigned.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "required": [
                "groupId",
                "member",
                "role"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "string",
                    "description": "ID of the organization to attach a policy to.\n"
                },
                "member": {
                    "type": "string",
                    "description": "The identity that will be granted the privilege that is specified in the `role` field.\nThis field can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **federatedUser:{federated_user_id}**: A unique federated user ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be assigned.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "groupId",
                "member",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationManagerGroupIamMember resources.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "ID of the organization to attach a policy to.\n"
                    },
                    "member": {
                        "type": "string",
                        "description": "The identity that will be granted the privilege that is specified in the `role` field.\nThis field can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **federatedUser:{federated_user_id}**: A unique federated user ID.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be assigned.\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/organizationManagerGroupMembership:OrganizationManagerGroupMembership": {
            "description": "Allows members management of a single Yandex.Cloud Organization Manager Group. For more information, see [the official documentation](https://cloud.yandex.com/en-ru/docs/organization/manage-groups#add-member).\n\n\u003e **Note:** Multiple `yandex_organizationmanager_group_iam_binding` resources with the same group id will produce inconsistent behavior!\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst group = new yandex.OrganizationManagerGroupMembership(\"group\", {\n    groupId: \"sdf4*********3fr\",\n    members: [\"xdf********123\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ngroup = yandex.OrganizationManagerGroupMembership(\"group\",\n    group_id=\"sdf4*********3fr\",\n    members=[\"xdf********123\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @group = new Yandex.OrganizationManagerGroupMembership(\"group\", new()\n    {\n        GroupId = \"sdf4*********3fr\",\n        Members = new[]\n        {\n            \"xdf********123\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewOrganizationManagerGroupMembership(ctx, \"group\", \u0026yandex.OrganizationManagerGroupMembershipArgs{\n\t\t\tGroupId: pulumi.String(\"sdf4*********3fr\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"xdf********123\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.OrganizationManagerGroupMembership;\nimport com.pulumi.yandex.OrganizationManagerGroupMembershipArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var group = new OrganizationManagerGroupMembership(\"group\", OrganizationManagerGroupMembershipArgs.builder()        \n            .groupId(\"sdf4*********3fr\")\n            .members(\"xdf********123\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  group:\n    type: yandex:OrganizationManagerGroupMembership\n    properties:\n      groupId: sdf4*********3fr\n      members:\n        - xdf********123\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "The Group to add/remove members to/from.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of members of the Group. Each member is represented by an id.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/OrganizationManagerGroupMembershipTimeouts:OrganizationManagerGroupMembershipTimeouts"
                }
            },
            "required": [
                "groupId",
                "members",
                "timeouts"
            ],
            "inputProperties": {
                "groupId": {
                    "type": "string",
                    "description": "The Group to add/remove members to/from.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of members of the Group. Each member is represented by an id.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/OrganizationManagerGroupMembershipTimeouts:OrganizationManagerGroupMembershipTimeouts"
                }
            },
            "requiredInputs": [
                "groupId",
                "members",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationManagerGroupMembership resources.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "The Group to add/remove members to/from.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of members of the Group. Each member is represented by an id.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/OrganizationManagerGroupMembershipTimeouts:OrganizationManagerGroupMembershipTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/organizationManagerOrganizationIamBinding:OrganizationManagerOrganizationIamBinding": {
            "description": "Allows creation and management of a single binding within IAM policy for\nan existing Yandex.Cloud Organization Manager organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst editor = new yandex.OrganizationManagerOrganizationIamBinding(\"editor\", {\n    members: [\"userAccount:some_user_id\"],\n    organizationId: \"some_organization_id\",\n    role: \"editor\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\neditor = yandex.OrganizationManagerOrganizationIamBinding(\"editor\",\n    members=[\"userAccount:some_user_id\"],\n    organization_id=\"some_organization_id\",\n    role=\"editor\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var editor = new Yandex.OrganizationManagerOrganizationIamBinding(\"editor\", new()\n    {\n        Members = new[]\n        {\n            \"userAccount:some_user_id\",\n        },\n        OrganizationId = \"some_organization_id\",\n        Role = \"editor\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewOrganizationManagerOrganizationIamBinding(ctx, \"editor\", \u0026yandex.OrganizationManagerOrganizationIamBindingArgs{\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"userAccount:some_user_id\"),\n\t\t\t},\n\t\t\tOrganizationId: pulumi.String(\"some_organization_id\"),\n\t\t\tRole:           pulumi.String(\"editor\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.OrganizationManagerOrganizationIamBinding;\nimport com.pulumi.yandex.OrganizationManagerOrganizationIamBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var editor = new OrganizationManagerOrganizationIamBinding(\"editor\", OrganizationManagerOrganizationIamBindingArgs.builder()        \n            .members(\"userAccount:some_user_id\")\n            .organizationId(\"some_organization_id\")\n            .role(\"editor\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  editor:\n    type: yandex:OrganizationManagerOrganizationIamBinding\n    properties:\n      members:\n        - userAccount:some_user_id\n      organizationId: some_organization_id\n      role: editor\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIAM binding imports use space-delimited identifiers; first the resource in question and then the role. These bindings can be imported using the `organization_id` and role, e.g.\n\n```sh\n $ pulumi import yandex:index/organizationManagerOrganizationIamBinding:OrganizationManagerOrganizationIamBinding viewer \"organization_id viewer\"\n```\n\n ",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of identities that will be granted the privilege in the `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **federatedUser:{federated_user_id}**: A unique federated user ID.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of the organization to attach the policy to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be assigned. Only one\n`yandex.OrganizationManagerOrganizationIamBinding` can be used per role.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "required": [
                "members",
                "organizationId",
                "role"
            ],
            "inputProperties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of identities that will be granted the privilege in the `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **federatedUser:{federated_user_id}**: A unique federated user ID.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of the organization to attach the policy to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be assigned. Only one\n`yandex.OrganizationManagerOrganizationIamBinding` can be used per role.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "members",
                "organizationId",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationManagerOrganizationIamBinding resources.\n",
                "properties": {
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of identities that will be granted the privilege in the `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **federatedUser:{federated_user_id}**: A unique federated user ID.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of the organization to attach the policy to.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be assigned. Only one\n`yandex.OrganizationManagerOrganizationIamBinding` can be used per role.\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/organizationManagerOrganizationIamMember:OrganizationManagerOrganizationIamMember": {
            "description": "Allows creation and management of a single member for a single binding within\nthe IAM policy for an existing Yandex Organization Manager organization.\n\n\u003e **Note:** Roles controlled by `yandex.OrganizationManagerOrganizationIamBinding`\n   should not be assigned using `yandex.OrganizationManagerOrganizationIamMember`.\n\n\u003e **Note:** When you delete `yandex.OrganizationManagerOrganizationIamBinding` resource,\n   the roles can be deleted from other users within the organization as well. Be careful!\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst editor = new yandex.OrganizationManagerOrganizationIamMember(\"editor\", {\n    member: \"userAccount:user_id\",\n    organizationId: \"some_organization_id\",\n    role: \"editor\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\neditor = yandex.OrganizationManagerOrganizationIamMember(\"editor\",\n    member=\"userAccount:user_id\",\n    organization_id=\"some_organization_id\",\n    role=\"editor\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var editor = new Yandex.OrganizationManagerOrganizationIamMember(\"editor\", new()\n    {\n        Member = \"userAccount:user_id\",\n        OrganizationId = \"some_organization_id\",\n        Role = \"editor\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewOrganizationManagerOrganizationIamMember(ctx, \"editor\", \u0026yandex.OrganizationManagerOrganizationIamMemberArgs{\n\t\t\tMember:         pulumi.String(\"userAccount:user_id\"),\n\t\t\tOrganizationId: pulumi.String(\"some_organization_id\"),\n\t\t\tRole:           pulumi.String(\"editor\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.OrganizationManagerOrganizationIamMember;\nimport com.pulumi.yandex.OrganizationManagerOrganizationIamMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var editor = new OrganizationManagerOrganizationIamMember(\"editor\", OrganizationManagerOrganizationIamMemberArgs.builder()        \n            .member(\"userAccount:user_id\")\n            .organizationId(\"some_organization_id\")\n            .role(\"editor\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  editor:\n    type: yandex:OrganizationManagerOrganizationIamMember\n    properties:\n      member: userAccount:user_id\n      organizationId: some_organization_id\n      role: editor\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIAM member imports use space-delimited identifiers; the resource in question, the role, and the account. This member resource can be imported using the `organization id`, role, and account, e.g.\n\n```sh\n $ pulumi import yandex:index/organizationManagerOrganizationIamMember:OrganizationManagerOrganizationIamMember my_project \"organization_id viewer foo@example.com\"\n```\n\n ",
            "properties": {
                "member": {
                    "type": "string",
                    "description": "The identity that will be granted the privilege that is specified in the `role` field.\nThis field can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **federatedUser:{federated_user_id}**: A unique federated user ID.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of the organization to attach a policy to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be assigned.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "required": [
                "member",
                "organizationId",
                "role"
            ],
            "inputProperties": {
                "member": {
                    "type": "string",
                    "description": "The identity that will be granted the privilege that is specified in the `role` field.\nThis field can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **federatedUser:{federated_user_id}**: A unique federated user ID.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "ID of the organization to attach a policy to.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be assigned.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "member",
                "organizationId",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationManagerOrganizationIamMember resources.\n",
                "properties": {
                    "member": {
                        "type": "string",
                        "description": "The identity that will be granted the privilege that is specified in the `role` field.\nThis field can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **federatedUser:{federated_user_id}**: A unique federated user ID.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "ID of the organization to attach a policy to.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be assigned.\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/organizationManagerSamlFederation:OrganizationManagerSamlFederation": {
            "description": "Allows management of a single SAML Federation within an existing Yandex.Cloud Organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst federation = new yandex.OrganizationManagerSamlFederation(\"federation\", {\n    description: \"My new SAML federation\",\n    issuer: \"my-issuer\",\n    organizationId: \"sdf4*********3fr\",\n    ssoBinding: \"POST\",\n    ssoUrl: \"https://my-sso.url\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfederation = yandex.OrganizationManagerSamlFederation(\"federation\",\n    description=\"My new SAML federation\",\n    issuer=\"my-issuer\",\n    organization_id=\"sdf4*********3fr\",\n    sso_binding=\"POST\",\n    sso_url=\"https://my-sso.url\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var federation = new Yandex.OrganizationManagerSamlFederation(\"federation\", new()\n    {\n        Description = \"My new SAML federation\",\n        Issuer = \"my-issuer\",\n        OrganizationId = \"sdf4*********3fr\",\n        SsoBinding = \"POST\",\n        SsoUrl = \"https://my-sso.url\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewOrganizationManagerSamlFederation(ctx, \"federation\", \u0026yandex.OrganizationManagerSamlFederationArgs{\n\t\t\tDescription:    pulumi.String(\"My new SAML federation\"),\n\t\t\tIssuer:         pulumi.String(\"my-issuer\"),\n\t\t\tOrganizationId: pulumi.String(\"sdf4*********3fr\"),\n\t\t\tSsoBinding:     pulumi.String(\"POST\"),\n\t\t\tSsoUrl:         pulumi.String(\"https://my-sso.url\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.OrganizationManagerSamlFederation;\nimport com.pulumi.yandex.OrganizationManagerSamlFederationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var federation = new OrganizationManagerSamlFederation(\"federation\", OrganizationManagerSamlFederationArgs.builder()        \n            .description(\"My new SAML federation\")\n            .issuer(\"my-issuer\")\n            .organizationId(\"sdf4*********3fr\")\n            .ssoBinding(\"POST\")\n            .ssoUrl(\"https://my-sso.url\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  federation:\n    type: yandex:OrganizationManagerSamlFederation\n    properties:\n      description: My new SAML federation\n      issuer: my-issuer\n      organizationId: sdf4*********3fr\n      ssoBinding: POST\n      ssoUrl: https://my-sso.url\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA Yandex SAML Federation can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/organizationManagerSamlFederation:OrganizationManagerSamlFederation federation \"federation_id\"\n```\n\n ",
            "properties": {
                "autoCreateAccountOnLogin": {
                    "type": "boolean",
                    "description": "Add new users automatically on successful authentication. The user will get the `resource-manager.clouds.member` role automatically, but you need to grant other roles to them. If the value is `false`, users who aren't added to the cloud can't log in, even if they have authenticated on your server.\n"
                },
                "caseInsensitiveNameIds": {
                    "type": "boolean",
                    "description": "Use case-insensitive name ids.\n"
                },
                "cookieMaxAge": {
                    "type": "string",
                    "description": "The lifetime of a Browser cookie in seconds. If the cookie is still valid, the management console authenticates the user immediately and redirects them to the home page. The default value is `8h`.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "(Computed) The SAML Federation creation timestamp.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SAML Federation.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The ID of the IdP server to be used for authentication. The IdP server also responds to IAM with this ID after the user authenticates.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs assigned to the SAML Federation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SAML Federation.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization to attach this SAML Federation to.\n"
                },
                "securitySettings": {
                    "$ref": "#/types/yandex:index/OrganizationManagerSamlFederationSecuritySettings:OrganizationManagerSamlFederationSecuritySettings",
                    "description": "Federation security settings, structure is documented below.\n"
                },
                "ssoBinding": {
                    "type": "string",
                    "description": "Single sign-on endpoint binding type. Most Identity Providers support the `POST` binding type. SAML Binding is a mapping of a SAML protocol message onto standard messaging formats and/or communications protocols.\n"
                },
                "ssoUrl": {
                    "type": "string",
                    "description": "Single sign-on endpoint URL. Specify the link to the IdP login page here.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/OrganizationManagerSamlFederationTimeouts:OrganizationManagerSamlFederationTimeouts"
                }
            },
            "required": [
                "autoCreateAccountOnLogin",
                "caseInsensitiveNameIds",
                "cookieMaxAge",
                "createdAt",
                "issuer",
                "name",
                "organizationId",
                "ssoBinding",
                "ssoUrl",
                "timeouts"
            ],
            "inputProperties": {
                "autoCreateAccountOnLogin": {
                    "type": "boolean",
                    "description": "Add new users automatically on successful authentication. The user will get the `resource-manager.clouds.member` role automatically, but you need to grant other roles to them. If the value is `false`, users who aren't added to the cloud can't log in, even if they have authenticated on your server.\n"
                },
                "caseInsensitiveNameIds": {
                    "type": "boolean",
                    "description": "Use case-insensitive name ids.\n"
                },
                "cookieMaxAge": {
                    "type": "string",
                    "description": "The lifetime of a Browser cookie in seconds. If the cookie is still valid, the management console authenticates the user immediately and redirects them to the home page. The default value is `8h`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the SAML Federation.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The ID of the IdP server to be used for authentication. The IdP server also responds to IAM with this ID after the user authenticates.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs assigned to the SAML Federation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the SAML Federation.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The organization to attach this SAML Federation to.\n"
                },
                "securitySettings": {
                    "$ref": "#/types/yandex:index/OrganizationManagerSamlFederationSecuritySettings:OrganizationManagerSamlFederationSecuritySettings",
                    "description": "Federation security settings, structure is documented below.\n"
                },
                "ssoBinding": {
                    "type": "string",
                    "description": "Single sign-on endpoint binding type. Most Identity Providers support the `POST` binding type. SAML Binding is a mapping of a SAML protocol message onto standard messaging formats and/or communications protocols.\n"
                },
                "ssoUrl": {
                    "type": "string",
                    "description": "Single sign-on endpoint URL. Specify the link to the IdP login page here.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/OrganizationManagerSamlFederationTimeouts:OrganizationManagerSamlFederationTimeouts"
                }
            },
            "requiredInputs": [
                "issuer",
                "organizationId",
                "ssoBinding",
                "ssoUrl",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationManagerSamlFederation resources.\n",
                "properties": {
                    "autoCreateAccountOnLogin": {
                        "type": "boolean",
                        "description": "Add new users automatically on successful authentication. The user will get the `resource-manager.clouds.member` role automatically, but you need to grant other roles to them. If the value is `false`, users who aren't added to the cloud can't log in, even if they have authenticated on your server.\n"
                    },
                    "caseInsensitiveNameIds": {
                        "type": "boolean",
                        "description": "Use case-insensitive name ids.\n"
                    },
                    "cookieMaxAge": {
                        "type": "string",
                        "description": "The lifetime of a Browser cookie in seconds. If the cookie is still valid, the management console authenticates the user immediately and redirects them to the home page. The default value is `8h`.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "(Computed) The SAML Federation creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the SAML Federation.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The ID of the IdP server to be used for authentication. The IdP server also responds to IAM with this ID after the user authenticates.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the SAML Federation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SAML Federation.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The organization to attach this SAML Federation to.\n"
                    },
                    "securitySettings": {
                        "$ref": "#/types/yandex:index/OrganizationManagerSamlFederationSecuritySettings:OrganizationManagerSamlFederationSecuritySettings",
                        "description": "Federation security settings, structure is documented below.\n"
                    },
                    "ssoBinding": {
                        "type": "string",
                        "description": "Single sign-on endpoint binding type. Most Identity Providers support the `POST` binding type. SAML Binding is a mapping of a SAML protocol message onto standard messaging formats and/or communications protocols.\n"
                    },
                    "ssoUrl": {
                        "type": "string",
                        "description": "Single sign-on endpoint URL. Specify the link to the IdP login page here.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/OrganizationManagerSamlFederationTimeouts:OrganizationManagerSamlFederationTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/resourceManagerCloud:ResourceManagerCloud": {
            "description": "Allows creation and management of Cloud resources for an existing Yandex.Cloud Organization. See [the official documentation](https://cloud.yandex.com/docs/resource-manager/concepts/resources-hierarchy) for additional info.\nNote: deletion of clouds may take up to 30 minutes as it requires a lot of communication between cloud services.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst cloud1 = new yandex.ResourceManagerCloud(\"cloud1\", {\n    organizationId: \"my_organization_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ncloud1 = yandex.ResourceManagerCloud(\"cloud1\", organization_id=\"my_organization_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cloud1 = new Yandex.ResourceManagerCloud(\"cloud1\", new()\n    {\n        OrganizationId = \"my_organization_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewResourceManagerCloud(ctx, \"cloud1\", \u0026yandex.ResourceManagerCloudArgs{\n\t\t\tOrganizationId: pulumi.String(\"my_organization_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ResourceManagerCloud;\nimport com.pulumi.yandex.ResourceManagerCloudArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var cloud1 = new ResourceManagerCloud(\"cloud1\", ResourceManagerCloudArgs.builder()        \n            .organizationId(\"my_organization_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cloud1:\n    type: yandex:ResourceManagerCloud\n    properties:\n      organizationId: my_organization_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the Cloud.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Cloud.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cloud.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Yandex.Cloud Organization that the cloud belongs to. If value is omitted, the default provider Organization ID is used.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ResourceManagerCloudTimeouts:ResourceManagerCloudTimeouts"
                }
            },
            "required": [
                "createdAt",
                "name",
                "organizationId",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description of the Cloud.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Cloud.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Cloud.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "Yandex.Cloud Organization that the cloud belongs to. If value is omitted, the default provider Organization ID is used.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ResourceManagerCloudTimeouts:ResourceManagerCloudTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourceManagerCloud resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the Cloud.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Cloud.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Cloud.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "Yandex.Cloud Organization that the cloud belongs to. If value is omitted, the default provider Organization ID is used.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/ResourceManagerCloudTimeouts:ResourceManagerCloudTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/resourcemanagerCloudIamBinding:ResourcemanagerCloudIamBinding": {
            "description": "Allows creation and management of a single binding within IAM policy for\nan existing Yandex Resource Manager cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst project1 = pulumi.output(yandex.getResourcemanagerCloud({\n    name: \"Project 1\",\n}));\nconst admin = new yandex.ResourcemanagerCloudIamBinding(\"admin\", {\n    cloudId: project1.id,\n    members: [\"userAccount:some_user_id\"],\n    role: \"editor\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nproject1 = yandex.get_resourcemanager_cloud(name=\"Project 1\")\nadmin = yandex.ResourcemanagerCloudIamBinding(\"admin\",\n    cloud_id=project1.id,\n    members=[\"userAccount:some_user_id\"],\n    role=\"editor\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project1 = Yandex.GetResourcemanagerCloud.Invoke(new()\n    {\n        Name = \"Project 1\",\n    });\n\n    var admin = new Yandex.ResourcemanagerCloudIamBinding(\"admin\", new()\n    {\n        CloudId = project1.Apply(getResourcemanagerCloudResult =\u003e getResourcemanagerCloudResult.Id),\n        Members = new[]\n        {\n            \"userAccount:some_user_id\",\n        },\n        Role = \"editor\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject1, err := yandex.GetResourcemanagerCloud(ctx, \u0026GetResourcemanagerCloudArgs{\n\t\t\tName: pulumi.StringRef(\"Project 1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewResourcemanagerCloudIamBinding(ctx, \"admin\", \u0026yandex.ResourcemanagerCloudIamBindingArgs{\n\t\t\tCloudId: pulumi.String(project1.Id),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"userAccount:some_user_id\"),\n\t\t\t},\n\t\t\tRole: pulumi.String(\"editor\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetResourcemanagerCloudArgs;\nimport com.pulumi.yandex.ResourcemanagerCloudIamBinding;\nimport com.pulumi.yandex.ResourcemanagerCloudIamBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var project1 = YandexFunctions.getResourcemanagerCloud(GetResourcemanagerCloudArgs.builder()\n            .name(\"Project 1\")\n            .build());\n\n        var admin = new ResourcemanagerCloudIamBinding(\"admin\", ResourcemanagerCloudIamBindingArgs.builder()        \n            .cloudId(project1.applyValue(getResourcemanagerCloudResult -\u003e getResourcemanagerCloudResult.id()))\n            .members(\"userAccount:some_user_id\")\n            .role(\"editor\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  admin:\n    type: yandex:ResourcemanagerCloudIamBinding\n    properties:\n      cloudId: ${project1.id}\n      members:\n        - userAccount:some_user_id\n      role: editor\nvariables:\n  project1:\n    fn::invoke:\n      Function: yandex:getResourcemanagerCloud\n      Arguments:\n        name: Project 1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIAM binding imports use space-delimited identifiers; first the resource in question and then the role. These bindings can be imported using the `cloud_id` and role, e.g.\n\n```sh\n $ pulumi import yandex:index/resourcemanagerCloudIamBinding:ResourcemanagerCloudIamBinding viewer \"cloud_id viewer\"\n```\n\n ",
            "properties": {
                "cloudId": {
                    "type": "string",
                    "description": "ID of the cloud to attach the policy to.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of identities that will be granted the privilege in the `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **federatedUser:{federated_user_id}**: A unique federated user ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be assigned. Only one\n`yandex.ResourcemanagerCloudIamBinding` can be used per role.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "required": [
                "cloudId",
                "members",
                "role"
            ],
            "inputProperties": {
                "cloudId": {
                    "type": "string",
                    "description": "ID of the cloud to attach the policy to.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of identities that will be granted the privilege in the `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **federatedUser:{federated_user_id}**: A unique federated user ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be assigned. Only one\n`yandex.ResourcemanagerCloudIamBinding` can be used per role.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "cloudId",
                "members",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourcemanagerCloudIamBinding resources.\n",
                "properties": {
                    "cloudId": {
                        "type": "string",
                        "description": "ID of the cloud to attach the policy to.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of identities that will be granted the privilege in the `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **federatedUser:{federated_user_id}**: A unique federated user ID.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be assigned. Only one\n`yandex.ResourcemanagerCloudIamBinding` can be used per role.\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/resourcemanagerCloudIamMember:ResourcemanagerCloudIamMember": {
            "description": "Allows creation and management of a single member for a single binding within\nthe IAM policy for an existing Yandex Resource Manager cloud.\n\n\u003e **Note:** Roles controlled by `yandex.ResourcemanagerCloudIamBinding`\n   should not be assigned using `yandex.ResourcemanagerCloudIamMember`.\n\n\u003e **Note:** When you delete `yandex.ResourcemanagerCloudIamBinding` resource,\n   the roles can be deleted from other users within the cloud as well. Be careful!\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst department1 = pulumi.output(yandex.getResourcemanagerCloud({\n    name: \"Department 1\",\n}));\nconst admin = new yandex.ResourcemanagerCloudIamMember(\"admin\", {\n    cloudId: department1.id,\n    member: \"userAccount:user_id\",\n    role: \"editor\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ndepartment1 = yandex.get_resourcemanager_cloud(name=\"Department 1\")\nadmin = yandex.ResourcemanagerCloudIamMember(\"admin\",\n    cloud_id=department1.id,\n    member=\"userAccount:user_id\",\n    role=\"editor\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var department1 = Yandex.GetResourcemanagerCloud.Invoke(new()\n    {\n        Name = \"Department 1\",\n    });\n\n    var admin = new Yandex.ResourcemanagerCloudIamMember(\"admin\", new()\n    {\n        CloudId = department1.Apply(getResourcemanagerCloudResult =\u003e getResourcemanagerCloudResult.Id),\n        Member = \"userAccount:user_id\",\n        Role = \"editor\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdepartment1, err := yandex.GetResourcemanagerCloud(ctx, \u0026GetResourcemanagerCloudArgs{\n\t\t\tName: pulumi.StringRef(\"Department 1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewResourcemanagerCloudIamMember(ctx, \"admin\", \u0026yandex.ResourcemanagerCloudIamMemberArgs{\n\t\t\tCloudId: pulumi.String(department1.Id),\n\t\t\tMember:  pulumi.String(\"userAccount:user_id\"),\n\t\t\tRole:    pulumi.String(\"editor\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetResourcemanagerCloudArgs;\nimport com.pulumi.yandex.ResourcemanagerCloudIamMember;\nimport com.pulumi.yandex.ResourcemanagerCloudIamMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var department1 = YandexFunctions.getResourcemanagerCloud(GetResourcemanagerCloudArgs.builder()\n            .name(\"Department 1\")\n            .build());\n\n        var admin = new ResourcemanagerCloudIamMember(\"admin\", ResourcemanagerCloudIamMemberArgs.builder()        \n            .cloudId(department1.applyValue(getResourcemanagerCloudResult -\u003e getResourcemanagerCloudResult.id()))\n            .member(\"userAccount:user_id\")\n            .role(\"editor\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  admin:\n    type: yandex:ResourcemanagerCloudIamMember\n    properties:\n      cloudId: ${department1.id}\n      member: userAccount:user_id\n      role: editor\nvariables:\n  department1:\n    fn::invoke:\n      Function: yandex:getResourcemanagerCloud\n      Arguments:\n        name: Department 1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIAM member imports use space-delimited identifiers; the resource in question, the role, and the account. This member resource can be imported using the `cloud id`, role, and account, e.g.\n\n```sh\n $ pulumi import yandex:index/resourcemanagerCloudIamMember:ResourcemanagerCloudIamMember my_project \"cloud_id viewer foo@example.com\"\n```\n\n ",
            "properties": {
                "cloudId": {
                    "type": "string",
                    "description": "ID of the cloud to attach a policy to.\n"
                },
                "member": {
                    "type": "string",
                    "description": "The identity that will be granted the privilege that is specified in the `role` field.\nThis field can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be assigned.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "required": [
                "cloudId",
                "member",
                "role"
            ],
            "inputProperties": {
                "cloudId": {
                    "type": "string",
                    "description": "ID of the cloud to attach a policy to.\n"
                },
                "member": {
                    "type": "string",
                    "description": "The identity that will be granted the privilege that is specified in the `role` field.\nThis field can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be assigned.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "cloudId",
                "member",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourcemanagerCloudIamMember resources.\n",
                "properties": {
                    "cloudId": {
                        "type": "string",
                        "description": "ID of the cloud to attach a policy to.\n"
                    },
                    "member": {
                        "type": "string",
                        "description": "The identity that will be granted the privilege that is specified in the `role` field.\nThis field can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be assigned.\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/resourcemanagerFolder:ResourcemanagerFolder": {
            "description": "Allows creation and management of Cloud Folders for an existing Yandex Cloud. See [the official documentation](https://cloud.yandex.com/docs/resource-manager/concepts/resources-hierarchy) for additional info.\nNote: deletion of folders may take up to 30 minutes as it requires a lot of communication between cloud services.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst folder1 = new yandex.ResourcemanagerFolder(\"folder1\", {\n    cloudId: \"my_cloud_id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfolder1 = yandex.ResourcemanagerFolder(\"folder1\", cloud_id=\"my_cloud_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var folder1 = new Yandex.ResourcemanagerFolder(\"folder1\", new()\n    {\n        CloudId = \"my_cloud_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewResourcemanagerFolder(ctx, \"folder1\", \u0026yandex.ResourcemanagerFolderArgs{\n\t\t\tCloudId: pulumi.String(\"my_cloud_id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ResourcemanagerFolder;\nimport com.pulumi.yandex.ResourcemanagerFolderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var folder1 = new ResourcemanagerFolder(\"folder1\", ResourcemanagerFolderArgs.builder()        \n            .cloudId(\"my_cloud_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  folder1:\n    type: yandex:ResourcemanagerFolder\n    properties:\n      cloudId: my_cloud_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "cloudId": {
                    "type": "string",
                    "description": "Cloud that the resource belongs to. If value is omitted, the default provider Cloud ID is used.\n"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the Folder.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Folder.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Folder.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ResourcemanagerFolderTimeouts:ResourcemanagerFolderTimeouts"
                }
            },
            "required": [
                "cloudId",
                "createdAt",
                "name",
                "timeouts"
            ],
            "inputProperties": {
                "cloudId": {
                    "type": "string",
                    "description": "Cloud that the resource belongs to. If value is omitted, the default provider Cloud ID is used.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the Folder.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Folder.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Folder.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ResourcemanagerFolderTimeouts:ResourcemanagerFolderTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourcemanagerFolder resources.\n",
                "properties": {
                    "cloudId": {
                        "type": "string",
                        "description": "Cloud that the resource belongs to. If value is omitted, the default provider Cloud ID is used.\n"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the Folder.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Folder.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Folder.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/ResourcemanagerFolderTimeouts:ResourcemanagerFolderTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/resourcemanagerFolderIamBinding:ResourcemanagerFolderIamBinding": {
            "description": "Allows creation and management of a single binding within IAM policy for\nan existing Yandex Resource Manager folder.\n\n\u003e **Note:** This resource _must not_ be used in conjunction with\n   `yandex.ResourcemanagerFolderIamPolicy` or they will conflict over what your policy\n   should be.\n\n\u003e **Note:** When you delete `yandex.ResourcemanagerFolderIamBinding` resource,\n   the roles can be deleted from other users within the folder as well. Be careful!\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst project1 = pulumi.output(yandex.getResourcemanagerFolder({\n    folderId: \"some_folder_id\",\n}));\nconst admin = new yandex.ResourcemanagerFolderIamBinding(\"admin\", {\n    folderId: project1.id,\n    members: [\"userAccount:some_user_id\"],\n    role: \"editor\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nproject1 = yandex.get_resourcemanager_folder(folder_id=\"some_folder_id\")\nadmin = yandex.ResourcemanagerFolderIamBinding(\"admin\",\n    folder_id=project1.id,\n    members=[\"userAccount:some_user_id\"],\n    role=\"editor\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project1 = Yandex.GetResourcemanagerFolder.Invoke(new()\n    {\n        FolderId = \"some_folder_id\",\n    });\n\n    var admin = new Yandex.ResourcemanagerFolderIamBinding(\"admin\", new()\n    {\n        FolderId = project1.Apply(getResourcemanagerFolderResult =\u003e getResourcemanagerFolderResult.Id),\n        Members = new[]\n        {\n            \"userAccount:some_user_id\",\n        },\n        Role = \"editor\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject1, err := yandex.LookupResourcemanagerFolder(ctx, \u0026GetResourcemanagerFolderArgs{\n\t\t\tFolderId: pulumi.StringRef(\"some_folder_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewResourcemanagerFolderIamBinding(ctx, \"admin\", \u0026yandex.ResourcemanagerFolderIamBindingArgs{\n\t\t\tFolderId: pulumi.String(project1.Id),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"userAccount:some_user_id\"),\n\t\t\t},\n\t\t\tRole: pulumi.String(\"editor\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetResourcemanagerFolderArgs;\nimport com.pulumi.yandex.ResourcemanagerFolderIamBinding;\nimport com.pulumi.yandex.ResourcemanagerFolderIamBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var project1 = YandexFunctions.getResourcemanagerFolder(GetResourcemanagerFolderArgs.builder()\n            .folderId(\"some_folder_id\")\n            .build());\n\n        var admin = new ResourcemanagerFolderIamBinding(\"admin\", ResourcemanagerFolderIamBindingArgs.builder()        \n            .folderId(project1.applyValue(getResourcemanagerFolderResult -\u003e getResourcemanagerFolderResult.id()))\n            .members(\"userAccount:some_user_id\")\n            .role(\"editor\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  admin:\n    type: yandex:ResourcemanagerFolderIamBinding\n    properties:\n      folderId: ${project1.id}\n      members:\n        - userAccount:some_user_id\n      role: editor\nvariables:\n  project1:\n    fn::invoke:\n      Function: yandex:getResourcemanagerFolder\n      Arguments:\n        folderId: some_folder_id\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIAM binding imports use space-delimited identifiers; first the resource in question and then the role. These bindings can be imported using the `folder_id` and role, e.g.\n\n```sh\n $ pulumi import yandex:index/resourcemanagerFolderIamBinding:ResourcemanagerFolderIamBinding viewer \"folder_id viewer\"\n```\n\n ",
            "properties": {
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder to attach a policy to.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of identities that will be granted the privilege that is specified in the `role` field.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: An email address that represents a specific Yandex account. For example, ivan@yandex.ru or joe@example.com.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be assigned. Only one\n`yandex.ResourcemanagerFolderIamBinding` can be used per role.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "required": [
                "folderId",
                "members",
                "role"
            ],
            "inputProperties": {
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder to attach a policy to.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of identities that will be granted the privilege that is specified in the `role` field.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: An email address that represents a specific Yandex account. For example, ivan@yandex.ru or joe@example.com.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be assigned. Only one\n`yandex.ResourcemanagerFolderIamBinding` can be used per role.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "folderId",
                "members",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourcemanagerFolderIamBinding resources.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder to attach a policy to.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of identities that will be granted the privilege that is specified in the `role` field.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: An email address that represents a specific Yandex account. For example, ivan@yandex.ru or joe@example.com.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be assigned. Only one\n`yandex.ResourcemanagerFolderIamBinding` can be used per role.\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/resourcemanagerFolderIamMember:ResourcemanagerFolderIamMember": {
            "description": "Allows creation and management of a single member for a single binding within\nthe IAM policy for an existing Yandex Resource Manager folder.\n\n\u003e **Note:** This resource _must not_ be used in conjunction with\n   `yandex.ResourcemanagerFolderIamPolicy` or they will conflict over what your policy should be. Similarly, roles controlled by `yandex.ResourcemanagerFolderIamBinding`\n   should not be assigned using `yandex.ResourcemanagerFolderIamMember`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst department1 = pulumi.output(yandex.getResourcemanagerFolder({\n    folderId: \"some_folder_id\",\n}));\nconst admin = new yandex.ResourcemanagerFolderIamMember(\"admin\", {\n    folderId: yandex_resourcemanager_department1.name,\n    member: \"userAccount:user_id\",\n    role: \"editor\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ndepartment1 = yandex.get_resourcemanager_folder(folder_id=\"some_folder_id\")\nadmin = yandex.ResourcemanagerFolderIamMember(\"admin\",\n    folder_id=data[\"yandex_resourcemanager\"][\"department1\"][\"name\"],\n    member=\"userAccount:user_id\",\n    role=\"editor\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var department1 = Yandex.GetResourcemanagerFolder.Invoke(new()\n    {\n        FolderId = \"some_folder_id\",\n    });\n\n    var admin = new Yandex.ResourcemanagerFolderIamMember(\"admin\", new()\n    {\n        FolderId = data.Yandex_resourcemanager.Department1.Name,\n        Member = \"userAccount:user_id\",\n        Role = \"editor\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupResourcemanagerFolder(ctx, \u0026GetResourcemanagerFolderArgs{\n\t\t\tFolderId: pulumi.StringRef(\"some_folder_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewResourcemanagerFolderIamMember(ctx, \"admin\", \u0026yandex.ResourcemanagerFolderIamMemberArgs{\n\t\t\tFolderId: pulumi.Any(data.Yandex_resourcemanager.Department1.Name),\n\t\t\tMember:   pulumi.String(\"userAccount:user_id\"),\n\t\t\tRole:     pulumi.String(\"editor\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetResourcemanagerFolderArgs;\nimport com.pulumi.yandex.ResourcemanagerFolderIamMember;\nimport com.pulumi.yandex.ResourcemanagerFolderIamMemberArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var department1 = YandexFunctions.getResourcemanagerFolder(GetResourcemanagerFolderArgs.builder()\n            .folderId(\"some_folder_id\")\n            .build());\n\n        var admin = new ResourcemanagerFolderIamMember(\"admin\", ResourcemanagerFolderIamMemberArgs.builder()        \n            .folderId(data.yandex_resourcemanager().department1().name())\n            .member(\"userAccount:user_id\")\n            .role(\"editor\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  admin:\n    type: yandex:ResourcemanagerFolderIamMember\n    properties:\n      folderId: ${data.yandex_resourcemanager.department1.name}\n      member: userAccount:user_id\n      role: editor\nvariables:\n  department1:\n    fn::invoke:\n      Function: yandex:getResourcemanagerFolder\n      Arguments:\n        folderId: some_folder_id\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIAM member imports use space-delimited identifiers; the resource in question, the role, and the account. This member resource can be imported using the `folder id`, role, and account, e.g.\n\n```sh\n $ pulumi import yandex:index/resourcemanagerFolderIamMember:ResourcemanagerFolderIamMember my_project \"folder_id viewer foo@example.com\"\n```\n\n ",
            "properties": {
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder to attach a policy to.\n"
                },
                "member": {
                    "type": "string",
                    "description": "The identity that will be granted the privilege that is specified in the `role` field.\nThis field can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be assigned.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "required": [
                "folderId",
                "member",
                "role"
            ],
            "inputProperties": {
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder to attach a policy to.\n"
                },
                "member": {
                    "type": "string",
                    "description": "The identity that will be granted the privilege that is specified in the `role` field.\nThis field can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be assigned.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "folderId",
                "member",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourcemanagerFolderIamMember resources.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder to attach a policy to.\n"
                    },
                    "member": {
                        "type": "string",
                        "description": "The identity that will be granted the privilege that is specified in the `role` field.\nThis field can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be assigned.\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/resourcemanagerFolderIamPolicy:ResourcemanagerFolderIamPolicy": {
            "description": "Allows creation and management of the IAM policy for an existing Yandex Resource\nManager folder.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst project1 = pulumi.output(yandex.getResourcemanagerFolder({\n    folderId: \"my_folder_id\",\n}));\nconst admin = pulumi.output(yandex.getIamPolicy({\n    bindings: [{\n        members: [\"userAccount:some_user_id\"],\n        role: \"editor\",\n    }],\n}));\nconst folderAdminPolicy = new yandex.ResourcemanagerFolderIamPolicy(\"folder_admin_policy\", {\n    folderId: yandex_folder_project1.id,\n    policyData: admin.policyData,\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nproject1 = yandex.get_resourcemanager_folder(folder_id=\"my_folder_id\")\nadmin = yandex.get_iam_policy(bindings=[yandex.GetIamPolicyBindingArgs(\n    members=[\"userAccount:some_user_id\"],\n    role=\"editor\",\n)])\nfolder_admin_policy = yandex.ResourcemanagerFolderIamPolicy(\"folderAdminPolicy\",\n    folder_id=data[\"yandex_folder\"][\"project1\"][\"id\"],\n    policy_data=admin.policy_data)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var project1 = Yandex.GetResourcemanagerFolder.Invoke(new()\n    {\n        FolderId = \"my_folder_id\",\n    });\n\n    var admin = Yandex.GetIamPolicy.Invoke(new()\n    {\n        Bindings = new[]\n        {\n            new Yandex.Inputs.GetIamPolicyBindingInputArgs\n            {\n                Members = new[]\n                {\n                    \"userAccount:some_user_id\",\n                },\n                Role = \"editor\",\n            },\n        },\n    });\n\n    var folderAdminPolicy = new Yandex.ResourcemanagerFolderIamPolicy(\"folderAdminPolicy\", new()\n    {\n        FolderId = data.Yandex_folder.Project1.Id,\n        PolicyData = admin.Apply(getIamPolicyResult =\u003e getIamPolicyResult.PolicyData),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupResourcemanagerFolder(ctx, \u0026GetResourcemanagerFolderArgs{\n\t\t\tFolderId: pulumi.StringRef(\"my_folder_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tadmin, err := yandex.GetIamPolicy(ctx, \u0026GetIamPolicyArgs{\n\t\t\tBindings: []GetIamPolicyBinding{\n\t\t\t\tGetIamPolicyBinding{\n\t\t\t\t\tMembers: []string{\n\t\t\t\t\t\t\"userAccount:some_user_id\",\n\t\t\t\t\t},\n\t\t\t\t\tRole: \"editor\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewResourcemanagerFolderIamPolicy(ctx, \"folderAdminPolicy\", \u0026yandex.ResourcemanagerFolderIamPolicyArgs{\n\t\t\tFolderId:   pulumi.Any(data.Yandex_folder.Project1.Id),\n\t\t\tPolicyData: pulumi.String(admin.PolicyData),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetResourcemanagerFolderArgs;\nimport com.pulumi.yandex.inputs.GetIamPolicyArgs;\nimport com.pulumi.yandex.ResourcemanagerFolderIamPolicy;\nimport com.pulumi.yandex.ResourcemanagerFolderIamPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var project1 = YandexFunctions.getResourcemanagerFolder(GetResourcemanagerFolderArgs.builder()\n            .folderId(\"my_folder_id\")\n            .build());\n\n        final var admin = YandexFunctions.getIamPolicy(GetIamPolicyArgs.builder()\n            .bindings(GetIamPolicyBindingArgs.builder()\n                .members(\"userAccount:some_user_id\")\n                .role(\"editor\")\n                .build())\n            .build());\n\n        var folderAdminPolicy = new ResourcemanagerFolderIamPolicy(\"folderAdminPolicy\", ResourcemanagerFolderIamPolicyArgs.builder()        \n            .folderId(data.yandex_folder().project1().id())\n            .policyData(admin.applyValue(getIamPolicyResult -\u003e getIamPolicyResult.policyData()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  folderAdminPolicy:\n    type: yandex:ResourcemanagerFolderIamPolicy\n    properties:\n      folderId: ${data.yandex_folder.project1.id}\n      policyData: ${admin.policyData}\nvariables:\n  project1:\n    fn::invoke:\n      Function: yandex:getResourcemanagerFolder\n      Arguments:\n        folderId: my_folder_id\n  admin:\n    fn::invoke:\n      Function: yandex:getIamPolicy\n      Arguments:\n        bindings:\n          - members:\n              - userAccount:some_user_id\n            role: editor\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the policy is attached to.\n"
                },
                "policyData": {
                    "type": "string",
                    "description": "The `yandex.getIamPolicy` data source that represents\nthe IAM policy that will be applied to the folder. This policy overrides any existing policy applied to the folder.\n"
                }
            },
            "required": [
                "folderId",
                "policyData"
            ],
            "inputProperties": {
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the policy is attached to.\n"
                },
                "policyData": {
                    "type": "string",
                    "description": "The `yandex.getIamPolicy` data source that represents\nthe IAM policy that will be applied to the folder. This policy overrides any existing policy applied to the folder.\n"
                }
            },
            "requiredInputs": [
                "folderId",
                "policyData"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ResourcemanagerFolderIamPolicy resources.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the policy is attached to.\n"
                    },
                    "policyData": {
                        "type": "string",
                        "description": "The `yandex.getIamPolicy` data source that represents\nthe IAM policy that will be applied to the folder. This policy overrides any existing policy applied to the folder.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/serverlessContainer:ServerlessContainer": {
            "description": "Allows management of Yandex Cloud Serverless Containers\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst test_container = new yandex.ServerlessContainer(\"test-container\", {\n    coreFraction: 100,\n    cores: 1,\n    description: \"any description\",\n    executionTimeout: \"15s\",\n    image: {\n        url: \"cr.yandex/yc/test-image:v1\",\n    },\n    memory: 256,\n    serviceAccountId: \"are1service2account3id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ntest_container = yandex.ServerlessContainer(\"test-container\",\n    core_fraction=100,\n    cores=1,\n    description=\"any description\",\n    execution_timeout=\"15s\",\n    image=yandex.ServerlessContainerImageArgs(\n        url=\"cr.yandex/yc/test-image:v1\",\n    ),\n    memory=256,\n    service_account_id=\"are1service2account3id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_container = new Yandex.ServerlessContainer(\"test-container\", new()\n    {\n        CoreFraction = 100,\n        Cores = 1,\n        Description = \"any description\",\n        ExecutionTimeout = \"15s\",\n        Image = new Yandex.Inputs.ServerlessContainerImageArgs\n        {\n            Url = \"cr.yandex/yc/test-image:v1\",\n        },\n        Memory = 256,\n        ServiceAccountId = \"are1service2account3id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewServerlessContainer(ctx, \"test-container\", \u0026yandex.ServerlessContainerArgs{\n\t\t\tCoreFraction:     pulumi.Float64(100),\n\t\t\tCores:            pulumi.Float64(1),\n\t\t\tDescription:      pulumi.String(\"any description\"),\n\t\t\tExecutionTimeout: pulumi.String(\"15s\"),\n\t\t\tImage: \u0026ServerlessContainerImageArgs{\n\t\t\t\tUrl: pulumi.String(\"cr.yandex/yc/test-image:v1\"),\n\t\t\t},\n\t\t\tMemory:           pulumi.Float64(256),\n\t\t\tServiceAccountId: pulumi.String(\"are1service2account3id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ServerlessContainer;\nimport com.pulumi.yandex.ServerlessContainerArgs;\nimport com.pulumi.yandex.inputs.ServerlessContainerImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_container = new ServerlessContainer(\"test-container\", ServerlessContainerArgs.builder()        \n            .coreFraction(100)\n            .cores(1)\n            .description(\"any description\")\n            .executionTimeout(\"15s\")\n            .image(ServerlessContainerImageArgs.builder()\n                .url(\"cr.yandex/yc/test-image:v1\")\n                .build())\n            .memory(256)\n            .serviceAccountId(\"are1service2account3id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-container:\n    type: yandex:ServerlessContainer\n    properties:\n      coreFraction: 100\n      cores: 1\n      description: any description\n      executionTimeout: 15s\n      image:\n        url: cr.yandex/yc/test-image:v1\n      memory: 256\n      serviceAccountId: are1service2account3id\n```\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst test_container_with_digest = new yandex.ServerlessContainer(\"test-container-with-digest\", {\n    image: {\n        digest: \"sha256:e1d772fa8795adac847a2420c87d0d2e3d38fb02f168cab8c0b5fe2fb95c47f4\",\n        url: \"cr.yandex/yc/test-image:v1\",\n    },\n    memory: 128,\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ntest_container_with_digest = yandex.ServerlessContainer(\"test-container-with-digest\",\n    image=yandex.ServerlessContainerImageArgs(\n        digest=\"sha256:e1d772fa8795adac847a2420c87d0d2e3d38fb02f168cab8c0b5fe2fb95c47f4\",\n        url=\"cr.yandex/yc/test-image:v1\",\n    ),\n    memory=128)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test_container_with_digest = new Yandex.ServerlessContainer(\"test-container-with-digest\", new()\n    {\n        Image = new Yandex.Inputs.ServerlessContainerImageArgs\n        {\n            Digest = \"sha256:e1d772fa8795adac847a2420c87d0d2e3d38fb02f168cab8c0b5fe2fb95c47f4\",\n            Url = \"cr.yandex/yc/test-image:v1\",\n        },\n        Memory = 128,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewServerlessContainer(ctx, \"test-container-with-digest\", \u0026yandex.ServerlessContainerArgs{\n\t\t\tImage: \u0026ServerlessContainerImageArgs{\n\t\t\t\tDigest: pulumi.String(\"sha256:e1d772fa8795adac847a2420c87d0d2e3d38fb02f168cab8c0b5fe2fb95c47f4\"),\n\t\t\t\tUrl:    pulumi.String(\"cr.yandex/yc/test-image:v1\"),\n\t\t\t},\n\t\t\tMemory: pulumi.Float64(128),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ServerlessContainer;\nimport com.pulumi.yandex.ServerlessContainerArgs;\nimport com.pulumi.yandex.inputs.ServerlessContainerImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test_container_with_digest = new ServerlessContainer(\"test-container-with-digest\", ServerlessContainerArgs.builder()        \n            .image(ServerlessContainerImageArgs.builder()\n                .digest(\"sha256:e1d772fa8795adac847a2420c87d0d2e3d38fb02f168cab8c0b5fe2fb95c47f4\")\n                .url(\"cr.yandex/yc/test-image:v1\")\n                .build())\n            .memory(128)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test-container-with-digest:\n    type: yandex:ServerlessContainer\n    properties:\n      image:\n        digest: sha256:e1d772fa8795adac847a2420c87d0d2e3d38fb02f168cab8c0b5fe2fb95c47f4\n        url: cr.yandex/yc/test-image:v1\n      memory: 128\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "concurrency": {
                    "type": "number",
                    "description": "Concurrency of Yandex Cloud Serverless Container\n"
                },
                "coreFraction": {
                    "type": "number",
                    "description": "Core fraction (**0...100**) of the Yandex Cloud Serverless Container\n"
                },
                "cores": {
                    "type": "number"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the Yandex Cloud Serverless Container\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Yandex Cloud Serverless Container\n"
                },
                "executionTimeout": {
                    "type": "string",
                    "description": "Execution timeout in seconds (**duration format**) for Yandex Cloud Serverless Container\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder ID for the Yandex Cloud Serverless Container\n"
                },
                "image": {
                    "$ref": "#/types/yandex:index/ServerlessContainerImage:ServerlessContainerImage",
                    "description": "Revision deployment image for Yandex Cloud Serverless Container\n* `image.0.url` (Required) - URL of image that will be deployed as Yandex Cloud Serverless Container\n* `image.0.work_dir` - Working directory for Yandex Cloud Serverless Container\n* `image.0.digest` - Digest of image that will be deployed as Yandex Cloud Serverless Container.\nIf presented, should be equal to digest that will be resolved at server side by URL.\nContainer will be updated on digest change even if `image.0.url` stays the same.\nIf field not specified then its value will be computed.\n* `image.0.command` - List of commands for Yandex Cloud Serverless Container\n* `image.0.args` - List of arguments for Yandex Cloud Serverless Container\n* `image.0.environment` -  A set of key/value environment variable pairs for Yandex Cloud Serverless Container\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Cloud Serverless Container\n"
                },
                "memory": {
                    "type": "number",
                    "description": "Memory in megabytes (**aligned to 128MB**) for Yandex Cloud Serverless Container\n"
                },
                "name": {
                    "type": "string",
                    "description": "Yandex Cloud Serverless Container name\n"
                },
                "revisionId": {
                    "type": "string",
                    "description": "Last revision ID of the Yandex Cloud Serverless Container\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ServerlessContainerSecret:ServerlessContainerSecret"
                    },
                    "description": "Secrets for Yandex Cloud Serverless Container\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "Service account ID for Yandex Cloud Serverless Container\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ServerlessContainerTimeouts:ServerlessContainerTimeouts"
                },
                "url": {
                    "type": "string",
                    "description": "Invoke URL for the Yandex Cloud Serverless Container\n"
                }
            },
            "required": [
                "coreFraction",
                "createdAt",
                "executionTimeout",
                "folderId",
                "image",
                "memory",
                "name",
                "revisionId",
                "timeouts",
                "url"
            ],
            "inputProperties": {
                "concurrency": {
                    "type": "number",
                    "description": "Concurrency of Yandex Cloud Serverless Container\n"
                },
                "coreFraction": {
                    "type": "number",
                    "description": "Core fraction (**0...100**) of the Yandex Cloud Serverless Container\n"
                },
                "cores": {
                    "type": "number"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Yandex Cloud Serverless Container\n"
                },
                "executionTimeout": {
                    "type": "string",
                    "description": "Execution timeout in seconds (**duration format**) for Yandex Cloud Serverless Container\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Folder ID for the Yandex Cloud Serverless Container\n"
                },
                "image": {
                    "$ref": "#/types/yandex:index/ServerlessContainerImage:ServerlessContainerImage",
                    "description": "Revision deployment image for Yandex Cloud Serverless Container\n* `image.0.url` (Required) - URL of image that will be deployed as Yandex Cloud Serverless Container\n* `image.0.work_dir` - Working directory for Yandex Cloud Serverless Container\n* `image.0.digest` - Digest of image that will be deployed as Yandex Cloud Serverless Container.\nIf presented, should be equal to digest that will be resolved at server side by URL.\nContainer will be updated on digest change even if `image.0.url` stays the same.\nIf field not specified then its value will be computed.\n* `image.0.command` - List of commands for Yandex Cloud Serverless Container\n* `image.0.args` - List of arguments for Yandex Cloud Serverless Container\n* `image.0.environment` -  A set of key/value environment variable pairs for Yandex Cloud Serverless Container\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Cloud Serverless Container\n"
                },
                "memory": {
                    "type": "number",
                    "description": "Memory in megabytes (**aligned to 128MB**) for Yandex Cloud Serverless Container\n"
                },
                "name": {
                    "type": "string",
                    "description": "Yandex Cloud Serverless Container name\n"
                },
                "secrets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/ServerlessContainerSecret:ServerlessContainerSecret"
                    },
                    "description": "Secrets for Yandex Cloud Serverless Container\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "Service account ID for Yandex Cloud Serverless Container\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/ServerlessContainerTimeouts:ServerlessContainerTimeouts"
                }
            },
            "requiredInputs": [
                "image",
                "memory",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerlessContainer resources.\n",
                "properties": {
                    "concurrency": {
                        "type": "number",
                        "description": "Concurrency of Yandex Cloud Serverless Container\n"
                    },
                    "coreFraction": {
                        "type": "number",
                        "description": "Core fraction (**0...100**) of the Yandex Cloud Serverless Container\n"
                    },
                    "cores": {
                        "type": "number"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the Yandex Cloud Serverless Container\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Yandex Cloud Serverless Container\n"
                    },
                    "executionTimeout": {
                        "type": "string",
                        "description": "Execution timeout in seconds (**duration format**) for Yandex Cloud Serverless Container\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID for the Yandex Cloud Serverless Container\n"
                    },
                    "image": {
                        "$ref": "#/types/yandex:index/ServerlessContainerImage:ServerlessContainerImage",
                        "description": "Revision deployment image for Yandex Cloud Serverless Container\n* `image.0.url` (Required) - URL of image that will be deployed as Yandex Cloud Serverless Container\n* `image.0.work_dir` - Working directory for Yandex Cloud Serverless Container\n* `image.0.digest` - Digest of image that will be deployed as Yandex Cloud Serverless Container.\nIf presented, should be equal to digest that will be resolved at server side by URL.\nContainer will be updated on digest change even if `image.0.url` stays the same.\nIf field not specified then its value will be computed.\n* `image.0.command` - List of commands for Yandex Cloud Serverless Container\n* `image.0.args` - List of arguments for Yandex Cloud Serverless Container\n* `image.0.environment` -  A set of key/value environment variable pairs for Yandex Cloud Serverless Container\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Yandex Cloud Serverless Container\n"
                    },
                    "memory": {
                        "type": "number",
                        "description": "Memory in megabytes (**aligned to 128MB**) for Yandex Cloud Serverless Container\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Yandex Cloud Serverless Container name\n"
                    },
                    "revisionId": {
                        "type": "string",
                        "description": "Last revision ID of the Yandex Cloud Serverless Container\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/ServerlessContainerSecret:ServerlessContainerSecret"
                        },
                        "description": "Secrets for Yandex Cloud Serverless Container\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "Service account ID for Yandex Cloud Serverless Container\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/ServerlessContainerTimeouts:ServerlessContainerTimeouts"
                    },
                    "url": {
                        "type": "string",
                        "description": "Invoke URL for the Yandex Cloud Serverless Container\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/serverlessContainerIamBinding:ServerlessContainerIamBinding": {
            "description": "## yandex\\_serverless\\_container\\_iam\\_binding\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst container_iam = new yandex.ServerlessContainerIamBinding(\"container-iam\", {\n    containerId: \"your-container-id\",\n    members: [\"system:allUsers\"],\n    role: \"serverless.containers.invoker\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ncontainer_iam = yandex.ServerlessContainerIamBinding(\"container-iam\",\n    container_id=\"your-container-id\",\n    members=[\"system:allUsers\"],\n    role=\"serverless.containers.invoker\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var container_iam = new Yandex.ServerlessContainerIamBinding(\"container-iam\", new()\n    {\n        ContainerId = \"your-container-id\",\n        Members = new[]\n        {\n            \"system:allUsers\",\n        },\n        Role = \"serverless.containers.invoker\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewServerlessContainerIamBinding(ctx, \"container-iam\", \u0026yandex.ServerlessContainerIamBindingArgs{\n\t\t\tContainerId: pulumi.String(\"your-container-id\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"system:allUsers\"),\n\t\t\t},\n\t\t\tRole: pulumi.String(\"serverless.containers.invoker\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.ServerlessContainerIamBinding;\nimport com.pulumi.yandex.ServerlessContainerIamBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var container_iam = new ServerlessContainerIamBinding(\"container-iam\", ServerlessContainerIamBindingArgs.builder()        \n            .containerId(\"your-container-id\")\n            .members(\"system:allUsers\")\n            .role(\"serverless.containers.invoker\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  container-iam:\n    type: yandex:ServerlessContainerIamBinding\n    properties:\n      containerId: your-container-id\n      members:\n        - system:allUsers\n      role: serverless.containers.invoker\n```\n",
            "properties": {
                "containerId": {
                    "type": "string",
                    "description": "The [Yandex Serverless Container](https://cloud.yandex.com/docs/serverless-containers/) ID to apply a binding to.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "required": [
                "containerId",
                "members",
                "role"
            ],
            "inputProperties": {
                "containerId": {
                    "type": "string",
                    "description": "The [Yandex Serverless Container](https://cloud.yandex.com/docs/serverless-containers/) ID to apply a binding to.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied.\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "containerId",
                "members",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerlessContainerIamBinding resources.\n",
                "properties": {
                    "containerId": {
                        "type": "string",
                        "description": "The [Yandex Serverless Container](https://cloud.yandex.com/docs/serverless-containers/) ID to apply a binding to.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be applied.\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/storageBucket:StorageBucket": {
            "description": "Allows management of [Yandex.Cloud Storage Bucket](https://cloud.yandex.com/docs/storage/concepts/bucket).\n\n\u003e **Note:** Your need to provide [static access key](https://cloud.yandex.com/docs/iam/concepts/authorization/access-key) (Access and Secret) to create storage client to work with Storage Service. To create them you need Service Account and proper permissions.\n\n\u003e **Note:** For extended API usage, such as setting `max_size`, `folder_id`, `anonymous_access_flags`,\n`default_storage_class` and `https` parameters for bucket, will be used default authorization method, i.e.\n`IAM` / `OAuth` token from `provider` block will be used.\nThis might be a little bit confusing in cases when separate service account is used for managing buckets because\nin this case buckets will be accessed by two different accounts that might have different permissions for buckets.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Simple Private Bucket\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst folderId = \"\u003cfolder-id\u003e\";\n// Create SA\nconst sa = new yandex.IamServiceAccount(\"sa\", {folderId: folderId});\n// Grant permissions\nconst sa_editor = new yandex.ResourcemanagerFolderIamMember(\"sa-editor\", {\n    folderId: folderId,\n    role: \"storage.editor\",\n    member: pulumi.interpolate`serviceAccount:${sa.id}`,\n});\n// Create Static Access Keys\nconst sa_static_key = new yandex.IamServiceAccountStaticAccessKey(\"sa-static-key\", {\n    serviceAccountId: sa.id,\n    description: \"static access key for object storage\",\n});\n// Use keys to create bucket\nconst test = new yandex.StorageBucket(\"test\", {\n    accessKey: sa_static_key.accessKey,\n    secretKey: sa_static_key.secretKey,\n    bucket: \"tf-test-bucket\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfolder_id = \"\u003cfolder-id\u003e\"\n# Create SA\nsa = yandex.IamServiceAccount(\"sa\", folder_id=folder_id)\n# Grant permissions\nsa_editor = yandex.ResourcemanagerFolderIamMember(\"sa-editor\",\n    folder_id=folder_id,\n    role=\"storage.editor\",\n    member=sa.id.apply(lambda id: f\"serviceAccount:{id}\"))\n# Create Static Access Keys\nsa_static_key = yandex.IamServiceAccountStaticAccessKey(\"sa-static-key\",\n    service_account_id=sa.id,\n    description=\"static access key for object storage\")\n# Use keys to create bucket\ntest = yandex.StorageBucket(\"test\",\n    access_key=sa_static_key.access_key,\n    secret_key=sa_static_key.secret_key,\n    bucket=\"tf-test-bucket\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var folderId = \"\u003cfolder-id\u003e\";\n\n    // Create SA\n    var sa = new Yandex.IamServiceAccount(\"sa\", new()\n    {\n        FolderId = folderId,\n    });\n\n    // Grant permissions\n    var sa_editor = new Yandex.ResourcemanagerFolderIamMember(\"sa-editor\", new()\n    {\n        FolderId = folderId,\n        Role = \"storage.editor\",\n        Member = sa.Id.Apply(id =\u003e $\"serviceAccount:{id}\"),\n    });\n\n    // Create Static Access Keys\n    var sa_static_key = new Yandex.IamServiceAccountStaticAccessKey(\"sa-static-key\", new()\n    {\n        ServiceAccountId = sa.Id,\n        Description = \"static access key for object storage\",\n    });\n\n    // Use keys to create bucket\n    var test = new Yandex.StorageBucket(\"test\", new()\n    {\n        AccessKey = sa_static_key.AccessKey,\n        SecretKey = sa_static_key.SecretKey,\n        Bucket = \"tf-test-bucket\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfolderId := \"\u003cfolder-id\u003e\"\n\t\tsa, err := yandex.NewIamServiceAccount(ctx, \"sa\", \u0026yandex.IamServiceAccountArgs{\n\t\t\tFolderId: pulumi.String(folderId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewResourcemanagerFolderIamMember(ctx, \"sa-editor\", \u0026yandex.ResourcemanagerFolderIamMemberArgs{\n\t\t\tFolderId: pulumi.String(folderId),\n\t\t\tRole:     pulumi.String(\"storage.editor\"),\n\t\t\tMember: sa.ID().ApplyT(func(id string) (string, error) {\n\t\t\t\treturn fmt.Sprintf(\"serviceAccount:%v\", id), nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewIamServiceAccountStaticAccessKey(ctx, \"sa-static-key\", \u0026yandex.IamServiceAccountStaticAccessKeyArgs{\n\t\t\tServiceAccountId: sa.ID(),\n\t\t\tDescription:      pulumi.String(\"static access key for object storage\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewStorageBucket(ctx, \"test\", \u0026yandex.StorageBucketArgs{\n\t\t\tAccessKey: sa_static_key.AccessKey,\n\t\t\tSecretKey: sa_static_key.SecretKey,\n\t\t\tBucket:    pulumi.String(\"tf-test-bucket\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.IamServiceAccount;\nimport com.pulumi.yandex.IamServiceAccountArgs;\nimport com.pulumi.yandex.ResourcemanagerFolderIamMember;\nimport com.pulumi.yandex.ResourcemanagerFolderIamMemberArgs;\nimport com.pulumi.yandex.IamServiceAccountStaticAccessKey;\nimport com.pulumi.yandex.IamServiceAccountStaticAccessKeyArgs;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var folderId = \"\u003cfolder-id\u003e\";\n\n        var sa = new IamServiceAccount(\"sa\", IamServiceAccountArgs.builder()        \n            .folderId(folderId)\n            .build());\n\n        var sa_editor = new ResourcemanagerFolderIamMember(\"sa-editor\", ResourcemanagerFolderIamMemberArgs.builder()        \n            .folderId(folderId)\n            .role(\"storage.editor\")\n            .member(sa.id().applyValue(id -\u003e String.format(\"serviceAccount:%s\", id)))\n            .build());\n\n        var sa_static_key = new IamServiceAccountStaticAccessKey(\"sa-static-key\", IamServiceAccountStaticAccessKeyArgs.builder()        \n            .serviceAccountId(sa.id())\n            .description(\"static access key for object storage\")\n            .build());\n\n        var test = new StorageBucket(\"test\", StorageBucketArgs.builder()        \n            .accessKey(sa_static_key.accessKey())\n            .secretKey(sa_static_key.secretKey())\n            .bucket(\"tf-test-bucket\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Create SA\n  sa:\n    type: yandex:IamServiceAccount\n    properties:\n      folderId: ${folderId}\n  # Grant permissions\n  sa-editor:\n    type: yandex:ResourcemanagerFolderIamMember\n    properties:\n      folderId: ${folderId}\n      role: storage.editor\n      member: serviceAccount:${sa.id}\n  # Create Static Access Keys\n  sa-static-key:\n    type: yandex:IamServiceAccountStaticAccessKey\n    properties:\n      serviceAccountId: ${sa.id}\n      description: static access key for object storage\n  # Use keys to create bucket\n  test:\n    type: yandex:StorageBucket\n    properties:\n      accessKey: ${[\"sa-static-key\"].accessKey}\n      secretKey: ${[\"sa-static-key\"].secretKey}\n      bucket: tf-test-bucket\nvariables:\n  folderId: \u003cfolder-id\u003e\n```\n{{% /example %}}\n{{% example %}}\n### Static Website Hosting\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst test = new yandex.StorageBucket(\"test\", {\n    acl: \"public-read\",\n    bucket: \"storage-website-test.hashicorp.com\",\n    website: {\n        errorDocument: \"error.html\",\n        indexDocument: \"index.html\",\n        routingRules: `[{\n    \"Condition\": {\n        \"KeyPrefixEquals\": \"docs/\"\n    },\n    \"Redirect\": {\n        \"ReplaceKeyPrefixWith\": \"documents/\"\n    }\n}]\n`,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ntest = yandex.StorageBucket(\"test\",\n    acl=\"public-read\",\n    bucket=\"storage-website-test.hashicorp.com\",\n    website=yandex.StorageBucketWebsiteArgs(\n        error_document=\"error.html\",\n        index_document=\"index.html\",\n        routing_rules=\"\"\"[{\n    \"Condition\": {\n        \"KeyPrefixEquals\": \"docs/\"\n    },\n    \"Redirect\": {\n        \"ReplaceKeyPrefixWith\": \"documents/\"\n    }\n}]\n\n\"\"\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Yandex.StorageBucket(\"test\", new()\n    {\n        Acl = \"public-read\",\n        Bucket = \"storage-website-test.hashicorp.com\",\n        Website = new Yandex.Inputs.StorageBucketWebsiteArgs\n        {\n            ErrorDocument = \"error.html\",\n            IndexDocument = \"index.html\",\n            RoutingRules = @\"[{\n    \"\"Condition\"\": {\n        \"\"KeyPrefixEquals\"\": \"\"docs/\"\"\n    },\n    \"\"Redirect\"\": {\n        \"\"ReplaceKeyPrefixWith\"\": \"\"documents/\"\"\n    }\n}]\n\n\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewStorageBucket(ctx, \"test\", \u0026yandex.StorageBucketArgs{\n\t\t\tAcl:    pulumi.String(\"public-read\"),\n\t\t\tBucket: pulumi.String(\"storage-website-test.hashicorp.com\"),\n\t\t\tWebsite: \u0026StorageBucketWebsiteArgs{\n\t\t\t\tErrorDocument: pulumi.String(\"error.html\"),\n\t\t\t\tIndexDocument: pulumi.String(\"index.html\"),\n\t\t\t\tRoutingRules: pulumi.String(fmt.Sprintf(`[{\n    \"Condition\": {\n        \"KeyPrefixEquals\": \"docs/\"\n    },\n    \"Redirect\": {\n        \"ReplaceKeyPrefixWith\": \"documents/\"\n    }\n}]\n\n`)),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport com.pulumi.yandex.inputs.StorageBucketWebsiteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new StorageBucket(\"test\", StorageBucketArgs.builder()        \n            .acl(\"public-read\")\n            .bucket(\"storage-website-test.hashicorp.com\")\n            .website(StorageBucketWebsiteArgs.builder()\n                .errorDocument(\"error.html\")\n                .indexDocument(\"index.html\")\n                .routingRules(\"\"\"\n[{\n    \"Condition\": {\n        \"KeyPrefixEquals\": \"docs/\"\n    },\n    \"Redirect\": {\n        \"ReplaceKeyPrefixWith\": \"documents/\"\n    }\n}]\n\n                \"\"\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: yandex:StorageBucket\n    properties:\n      acl: public-read\n      bucket: storage-website-test.hashicorp.com\n      website:\n        errorDocument: error.html\n        indexDocument: index.html\n        routingRules: |+\n          [{\n              \"Condition\": {\n                  \"KeyPrefixEquals\": \"docs/\"\n              },\n              \"Redirect\": {\n                  \"ReplaceKeyPrefixWith\": \"documents/\"\n              }\n          }]\n```\n{{% /example %}}\n{{% example %}}\n### Using ACL policy grants\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst test = new yandex.StorageBucket(\"test\", {\n    bucket: \"mybucket\",\n    grants: [\n        {\n            id: \"myuser\",\n            permissions: [\"FULL_CONTROL\"],\n            type: \"CanonicalUser\",\n        },\n        {\n            permissions: [\n                \"READ\",\n                \"WRITE\",\n            ],\n            type: \"Group\",\n            uri: \"http://acs.amazonaws.com/groups/global/AllUsers\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ntest = yandex.StorageBucket(\"test\",\n    bucket=\"mybucket\",\n    grants=[\n        yandex.StorageBucketGrantArgs(\n            id=\"myuser\",\n            permissions=[\"FULL_CONTROL\"],\n            type=\"CanonicalUser\",\n        ),\n        yandex.StorageBucketGrantArgs(\n            permissions=[\n                \"READ\",\n                \"WRITE\",\n            ],\n            type=\"Group\",\n            uri=\"http://acs.amazonaws.com/groups/global/AllUsers\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Yandex.StorageBucket(\"test\", new()\n    {\n        Bucket = \"mybucket\",\n        Grants = new[]\n        {\n            new Yandex.Inputs.StorageBucketGrantArgs\n            {\n                Id = \"myuser\",\n                Permissions = new[]\n                {\n                    \"FULL_CONTROL\",\n                },\n                Type = \"CanonicalUser\",\n            },\n            new Yandex.Inputs.StorageBucketGrantArgs\n            {\n                Permissions = new[]\n                {\n                    \"READ\",\n                    \"WRITE\",\n                },\n                Type = \"Group\",\n                Uri = \"http://acs.amazonaws.com/groups/global/AllUsers\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewStorageBucket(ctx, \"test\", \u0026yandex.StorageBucketArgs{\n\t\t\tBucket: pulumi.String(\"mybucket\"),\n\t\t\tGrants: StorageBucketGrantArray{\n\t\t\t\t\u0026StorageBucketGrantArgs{\n\t\t\t\t\tId: pulumi.String(\"myuser\"),\n\t\t\t\t\tPermissions: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"FULL_CONTROL\"),\n\t\t\t\t\t},\n\t\t\t\t\tType: pulumi.String(\"CanonicalUser\"),\n\t\t\t\t},\n\t\t\t\t\u0026StorageBucketGrantArgs{\n\t\t\t\t\tPermissions: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"READ\"),\n\t\t\t\t\t\tpulumi.String(\"WRITE\"),\n\t\t\t\t\t},\n\t\t\t\t\tType: pulumi.String(\"Group\"),\n\t\t\t\t\tUri:  pulumi.String(\"http://acs.amazonaws.com/groups/global/AllUsers\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport com.pulumi.yandex.inputs.StorageBucketGrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new StorageBucket(\"test\", StorageBucketArgs.builder()        \n            .bucket(\"mybucket\")\n            .grants(            \n                StorageBucketGrantArgs.builder()\n                    .id(\"myuser\")\n                    .permissions(\"FULL_CONTROL\")\n                    .type(\"CanonicalUser\")\n                    .build(),\n                StorageBucketGrantArgs.builder()\n                    .permissions(                    \n                        \"READ\",\n                        \"WRITE\")\n                    .type(\"Group\")\n                    .uri(\"http://acs.amazonaws.com/groups/global/AllUsers\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: yandex:StorageBucket\n    properties:\n      bucket: mybucket\n      grants:\n        - id: myuser\n          permissions:\n            - FULL_CONTROL\n          type: CanonicalUser\n        - permissions:\n            - READ\n            - WRITE\n          type: Group\n          uri: http://acs.amazonaws.com/groups/global/AllUsers\n```\n{{% /example %}}\n{{% example %}}\n### Using CORS\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst storageBucket = new yandex.StorageBucket(\"b\", {\n    acl: \"public-read\",\n    bucket: \"s3-website-test.hashicorp.com\",\n    corsRules: [{\n        allowedHeaders: [\"*\"],\n        allowedMethods: [\n            \"PUT\",\n            \"POST\",\n        ],\n        allowedOrigins: [\"https://s3-website-test.hashicorp.com\"],\n        exposeHeaders: [\"ETag\"],\n        maxAgeSeconds: 3000,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nstorage_bucket = yandex.StorageBucket(\"storageBucket\",\n    acl=\"public-read\",\n    bucket=\"s3-website-test.hashicorp.com\",\n    cors_rules=[yandex.StorageBucketCorsRuleArgs(\n        allowed_headers=[\"*\"],\n        allowed_methods=[\n            \"PUT\",\n            \"POST\",\n        ],\n        allowed_origins=[\"https://s3-website-test.hashicorp.com\"],\n        expose_headers=[\"ETag\"],\n        max_age_seconds=3000,\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var storageBucket = new Yandex.StorageBucket(\"storageBucket\", new()\n    {\n        Acl = \"public-read\",\n        Bucket = \"s3-website-test.hashicorp.com\",\n        CorsRules = new[]\n        {\n            new Yandex.Inputs.StorageBucketCorsRuleArgs\n            {\n                AllowedHeaders = new[]\n                {\n                    \"*\",\n                },\n                AllowedMethods = new[]\n                {\n                    \"PUT\",\n                    \"POST\",\n                },\n                AllowedOrigins = new[]\n                {\n                    \"https://s3-website-test.hashicorp.com\",\n                },\n                ExposeHeaders = new[]\n                {\n                    \"ETag\",\n                },\n                MaxAgeSeconds = 3000,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewStorageBucket(ctx, \"storageBucket\", \u0026yandex.StorageBucketArgs{\n\t\t\tAcl:    pulumi.String(\"public-read\"),\n\t\t\tBucket: pulumi.String(\"s3-website-test.hashicorp.com\"),\n\t\t\tCorsRules: StorageBucketCorsRuleArray{\n\t\t\t\t\u0026StorageBucketCorsRuleArgs{\n\t\t\t\t\tAllowedHeaders: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t\tAllowedMethods: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"PUT\"),\n\t\t\t\t\t\tpulumi.String(\"POST\"),\n\t\t\t\t\t},\n\t\t\t\t\tAllowedOrigins: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"https://s3-website-test.hashicorp.com\"),\n\t\t\t\t\t},\n\t\t\t\t\tExposeHeaders: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"ETag\"),\n\t\t\t\t\t},\n\t\t\t\t\tMaxAgeSeconds: pulumi.Float64(3000),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport com.pulumi.yandex.inputs.StorageBucketCorsRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var storageBucket = new StorageBucket(\"storageBucket\", StorageBucketArgs.builder()        \n            .acl(\"public-read\")\n            .bucket(\"s3-website-test.hashicorp.com\")\n            .corsRules(StorageBucketCorsRuleArgs.builder()\n                .allowedHeaders(\"*\")\n                .allowedMethods(                \n                    \"PUT\",\n                    \"POST\")\n                .allowedOrigins(\"https://s3-website-test.hashicorp.com\")\n                .exposeHeaders(\"ETag\")\n                .maxAgeSeconds(3000)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  storageBucket:\n    type: yandex:StorageBucket\n    properties:\n      acl: public-read\n      bucket: s3-website-test.hashicorp.com\n      corsRules:\n        - allowedHeaders:\n            - '*'\n          allowedMethods:\n            - PUT\n            - POST\n          allowedOrigins:\n            - https://s3-website-test.hashicorp.com\n          exposeHeaders:\n            - ETag\n          maxAgeSeconds: 3000\n```\n{{% /example %}}\n{{% example %}}\n### Using versioning\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst storageBucket = new yandex.StorageBucket(\"b\", {\n    acl: \"private\",\n    bucket: \"my-tf-test-bucket\",\n    versioning: {\n        enabled: true,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nstorage_bucket = yandex.StorageBucket(\"storageBucket\",\n    acl=\"private\",\n    bucket=\"my-tf-test-bucket\",\n    versioning=yandex.StorageBucketVersioningArgs(\n        enabled=True,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var storageBucket = new Yandex.StorageBucket(\"storageBucket\", new()\n    {\n        Acl = \"private\",\n        Bucket = \"my-tf-test-bucket\",\n        Versioning = new Yandex.Inputs.StorageBucketVersioningArgs\n        {\n            Enabled = true,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewStorageBucket(ctx, \"storageBucket\", \u0026yandex.StorageBucketArgs{\n\t\t\tAcl:    pulumi.String(\"private\"),\n\t\t\tBucket: pulumi.String(\"my-tf-test-bucket\"),\n\t\t\tVersioning: \u0026StorageBucketVersioningArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport com.pulumi.yandex.inputs.StorageBucketVersioningArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var storageBucket = new StorageBucket(\"storageBucket\", StorageBucketArgs.builder()        \n            .acl(\"private\")\n            .bucket(\"my-tf-test-bucket\")\n            .versioning(StorageBucketVersioningArgs.builder()\n                .enabled(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  storageBucket:\n    type: yandex:StorageBucket\n    properties:\n      acl: private\n      bucket: my-tf-test-bucket\n      versioning:\n        enabled: true\n```\n{{% /example %}}\n{{% example %}}\n### Enable Logging\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst logBucket = new yandex.StorageBucket(\"logBucket\", {bucket: \"my-tf-log-bucket\"});\nconst storageBucket = new yandex.StorageBucket(\"storageBucket\", {\n    bucket: \"my-tf-test-bucket\",\n    acl: \"private\",\n    loggings: [{\n        targetBucket: logBucket.id,\n        targetPrefix: \"log/\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nlog_bucket = yandex.StorageBucket(\"logBucket\", bucket=\"my-tf-log-bucket\")\nstorage_bucket = yandex.StorageBucket(\"storageBucket\",\n    bucket=\"my-tf-test-bucket\",\n    acl=\"private\",\n    loggings=[yandex.StorageBucketLoggingArgs(\n        target_bucket=log_bucket.id,\n        target_prefix=\"log/\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var logBucket = new Yandex.StorageBucket(\"logBucket\", new()\n    {\n        Bucket = \"my-tf-log-bucket\",\n    });\n\n    var storageBucket = new Yandex.StorageBucket(\"storageBucket\", new()\n    {\n        Bucket = \"my-tf-test-bucket\",\n        Acl = \"private\",\n        Loggings = new[]\n        {\n            new Yandex.Inputs.StorageBucketLoggingArgs\n            {\n                TargetBucket = logBucket.Id,\n                TargetPrefix = \"log/\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlogBucket, err := yandex.NewStorageBucket(ctx, \"logBucket\", \u0026yandex.StorageBucketArgs{\n\t\t\tBucket: pulumi.String(\"my-tf-log-bucket\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewStorageBucket(ctx, \"storageBucket\", \u0026yandex.StorageBucketArgs{\n\t\t\tBucket: pulumi.String(\"my-tf-test-bucket\"),\n\t\t\tAcl:    pulumi.String(\"private\"),\n\t\t\tLoggings: StorageBucketLoggingArray{\n\t\t\t\t\u0026StorageBucketLoggingArgs{\n\t\t\t\t\tTargetBucket: logBucket.ID(),\n\t\t\t\t\tTargetPrefix: pulumi.String(\"log/\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport com.pulumi.yandex.inputs.StorageBucketLoggingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var logBucket = new StorageBucket(\"logBucket\", StorageBucketArgs.builder()        \n            .bucket(\"my-tf-log-bucket\")\n            .build());\n\n        var storageBucket = new StorageBucket(\"storageBucket\", StorageBucketArgs.builder()        \n            .bucket(\"my-tf-test-bucket\")\n            .acl(\"private\")\n            .loggings(StorageBucketLoggingArgs.builder()\n                .targetBucket(logBucket.id())\n                .targetPrefix(\"log/\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  logBucket:\n    type: yandex:StorageBucket\n    properties:\n      bucket: my-tf-log-bucket\n  storageBucket:\n    type: yandex:StorageBucket\n    properties:\n      bucket: my-tf-test-bucket\n      acl: private\n      loggings:\n        - targetBucket: ${logBucket.id}\n          targetPrefix: log/\n```\n{{% /example %}}\n{{% example %}}\n### Using object lifecycle\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst bucket = new yandex.StorageBucket(\"bucket\", {\n    acl: \"private\",\n    bucket: \"my-bucket\",\n    lifecycleRules: [\n        {\n            enabled: true,\n            expiration: {\n                days: 90,\n            },\n            id: \"log\",\n            prefix: \"log/\",\n            transitions: [{\n                days: 30,\n                storageClass: \"COLD\",\n            }],\n        },\n        {\n            enabled: true,\n            expiration: {\n                date: \"2020-12-21\",\n            },\n            id: \"tmp\",\n            prefix: \"tmp/\",\n        },\n    ],\n});\nconst versioningBucket = new yandex.StorageBucket(\"versioning_bucket\", {\n    acl: \"private\",\n    bucket: \"my-versioning-bucket\",\n    lifecycleRules: [{\n        enabled: true,\n        noncurrentVersionExpiration: {\n            days: 90,\n        },\n        noncurrentVersionTransitions: [{\n            days: 30,\n            storageClass: \"COLD\",\n        }],\n        prefix: \"config/\",\n    }],\n    versioning: {\n        enabled: true,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nbucket = yandex.StorageBucket(\"bucket\",\n    acl=\"private\",\n    bucket=\"my-bucket\",\n    lifecycle_rules=[\n        yandex.StorageBucketLifecycleRuleArgs(\n            enabled=True,\n            expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(\n                days=90,\n            ),\n            id=\"log\",\n            prefix=\"log/\",\n            transitions=[yandex.StorageBucketLifecycleRuleTransitionArgs(\n                days=30,\n                storage_class=\"COLD\",\n            )],\n        ),\n        yandex.StorageBucketLifecycleRuleArgs(\n            enabled=True,\n            expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(\n                date=\"2020-12-21\",\n            ),\n            id=\"tmp\",\n            prefix=\"tmp/\",\n        ),\n    ])\nversioning_bucket = yandex.StorageBucket(\"versioningBucket\",\n    acl=\"private\",\n    bucket=\"my-versioning-bucket\",\n    lifecycle_rules=[yandex.StorageBucketLifecycleRuleArgs(\n        enabled=True,\n        noncurrent_version_expiration=yandex.StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs(\n            days=90,\n        ),\n        noncurrent_version_transitions=[yandex.StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs(\n            days=30,\n            storage_class=\"COLD\",\n        )],\n        prefix=\"config/\",\n    )],\n    versioning=yandex.StorageBucketVersioningArgs(\n        enabled=True,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var bucket = new Yandex.StorageBucket(\"bucket\", new()\n    {\n        Acl = \"private\",\n        Bucket = \"my-bucket\",\n        LifecycleRules = new[]\n        {\n            new Yandex.Inputs.StorageBucketLifecycleRuleArgs\n            {\n                Enabled = true,\n                Expiration = new Yandex.Inputs.StorageBucketLifecycleRuleExpirationArgs\n                {\n                    Days = 90,\n                },\n                Id = \"log\",\n                Prefix = \"log/\",\n                Transitions = new[]\n                {\n                    new Yandex.Inputs.StorageBucketLifecycleRuleTransitionArgs\n                    {\n                        Days = 30,\n                        StorageClass = \"COLD\",\n                    },\n                },\n            },\n            new Yandex.Inputs.StorageBucketLifecycleRuleArgs\n            {\n                Enabled = true,\n                Expiration = new Yandex.Inputs.StorageBucketLifecycleRuleExpirationArgs\n                {\n                    Date = \"2020-12-21\",\n                },\n                Id = \"tmp\",\n                Prefix = \"tmp/\",\n            },\n        },\n    });\n\n    var versioningBucket = new Yandex.StorageBucket(\"versioningBucket\", new()\n    {\n        Acl = \"private\",\n        Bucket = \"my-versioning-bucket\",\n        LifecycleRules = new[]\n        {\n            new Yandex.Inputs.StorageBucketLifecycleRuleArgs\n            {\n                Enabled = true,\n                NoncurrentVersionExpiration = new Yandex.Inputs.StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs\n                {\n                    Days = 90,\n                },\n                NoncurrentVersionTransitions = new[]\n                {\n                    new Yandex.Inputs.StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs\n                    {\n                        Days = 30,\n                        StorageClass = \"COLD\",\n                    },\n                },\n                Prefix = \"config/\",\n            },\n        },\n        Versioning = new Yandex.Inputs.StorageBucketVersioningArgs\n        {\n            Enabled = true,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewStorageBucket(ctx, \"bucket\", \u0026yandex.StorageBucketArgs{\n\t\t\tAcl:    pulumi.String(\"private\"),\n\t\t\tBucket: pulumi.String(\"my-bucket\"),\n\t\t\tLifecycleRules: StorageBucketLifecycleRuleArray{\n\t\t\t\t\u0026StorageBucketLifecycleRuleArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tExpiration: \u0026StorageBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Float64(90),\n\t\t\t\t\t},\n\t\t\t\t\tId:     pulumi.String(\"log\"),\n\t\t\t\t\tPrefix: pulumi.String(\"log/\"),\n\t\t\t\t\tTransitions: StorageBucketLifecycleRuleTransitionArray{\n\t\t\t\t\t\t\u0026StorageBucketLifecycleRuleTransitionArgs{\n\t\t\t\t\t\t\tDays:         pulumi.Float64(30),\n\t\t\t\t\t\t\tStorageClass: pulumi.String(\"COLD\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026StorageBucketLifecycleRuleArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tExpiration: \u0026StorageBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDate: pulumi.String(\"2020-12-21\"),\n\t\t\t\t\t},\n\t\t\t\t\tId:     pulumi.String(\"tmp\"),\n\t\t\t\t\tPrefix: pulumi.String(\"tmp/\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewStorageBucket(ctx, \"versioningBucket\", \u0026yandex.StorageBucketArgs{\n\t\t\tAcl:    pulumi.String(\"private\"),\n\t\t\tBucket: pulumi.String(\"my-versioning-bucket\"),\n\t\t\tLifecycleRules: StorageBucketLifecycleRuleArray{\n\t\t\t\t\u0026StorageBucketLifecycleRuleArgs{\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tNoncurrentVersionExpiration: \u0026StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Float64(90),\n\t\t\t\t\t},\n\t\t\t\t\tNoncurrentVersionTransitions: StorageBucketLifecycleRuleNoncurrentVersionTransitionArray{\n\t\t\t\t\t\t\u0026StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs{\n\t\t\t\t\t\t\tDays:         pulumi.Float64(30),\n\t\t\t\t\t\t\tStorageClass: pulumi.String(\"COLD\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tPrefix: pulumi.String(\"config/\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVersioning: \u0026StorageBucketVersioningArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport com.pulumi.yandex.inputs.StorageBucketLifecycleRuleArgs;\nimport com.pulumi.yandex.inputs.StorageBucketLifecycleRuleExpirationArgs;\nimport com.pulumi.yandex.inputs.StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs;\nimport com.pulumi.yandex.inputs.StorageBucketVersioningArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var bucket = new StorageBucket(\"bucket\", StorageBucketArgs.builder()        \n            .acl(\"private\")\n            .bucket(\"my-bucket\")\n            .lifecycleRules(            \n                StorageBucketLifecycleRuleArgs.builder()\n                    .enabled(true)\n                    .expiration(StorageBucketLifecycleRuleExpirationArgs.builder()\n                        .days(90)\n                        .build())\n                    .id(\"log\")\n                    .prefix(\"log/\")\n                    .transitions(StorageBucketLifecycleRuleTransitionArgs.builder()\n                        .days(30)\n                        .storageClass(\"COLD\")\n                        .build())\n                    .build(),\n                StorageBucketLifecycleRuleArgs.builder()\n                    .enabled(true)\n                    .expiration(StorageBucketLifecycleRuleExpirationArgs.builder()\n                        .date(\"2020-12-21\")\n                        .build())\n                    .id(\"tmp\")\n                    .prefix(\"tmp/\")\n                    .build())\n            .build());\n\n        var versioningBucket = new StorageBucket(\"versioningBucket\", StorageBucketArgs.builder()        \n            .acl(\"private\")\n            .bucket(\"my-versioning-bucket\")\n            .lifecycleRules(StorageBucketLifecycleRuleArgs.builder()\n                .enabled(true)\n                .noncurrentVersionExpiration(StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs.builder()\n                    .days(90)\n                    .build())\n                .noncurrentVersionTransitions(StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs.builder()\n                    .days(30)\n                    .storageClass(\"COLD\")\n                    .build())\n                .prefix(\"config/\")\n                .build())\n            .versioning(StorageBucketVersioningArgs.builder()\n                .enabled(true)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  bucket:\n    type: yandex:StorageBucket\n    properties:\n      acl: private\n      bucket: my-bucket\n      lifecycleRules:\n        - enabled: true\n          expiration:\n            days: 90\n          id: log\n          prefix: log/\n          transitions:\n            - days: 30\n              storageClass: COLD\n        - enabled: true\n          expiration:\n            date: 2020-12-21\n          id: tmp\n          prefix: tmp/\n  versioningBucket:\n    type: yandex:StorageBucket\n    properties:\n      acl: private\n      bucket: my-versioning-bucket\n      lifecycleRules:\n        - enabled: true\n          noncurrentVersionExpiration:\n            days: 90\n          noncurrentVersionTransitions:\n            - days: 30\n              storageClass: COLD\n          prefix: config/\n      versioning:\n        enabled: true\n```\n{{% /example %}}\n{{% example %}}\n### Using SSE\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst key_a = new yandex.KmsSymmetricKey(\"key-a\", {\n    description: \"description for key\",\n    defaultAlgorithm: \"AES_128\",\n    rotationPeriod: \"8760h\",\n});\n// equal to 1 year\nconst test = new yandex.StorageBucket(\"test\", {\n    bucket: \"mybucket\",\n    serverSideEncryptionConfiguration: {\n        rule: {\n            applyServerSideEncryptionByDefault: {\n                kmsMasterKeyId: key_a.id,\n                sseAlgorithm: \"aws:kms\",\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nkey_a = yandex.KmsSymmetricKey(\"key-a\",\n    description=\"description for key\",\n    default_algorithm=\"AES_128\",\n    rotation_period=\"8760h\")\n# equal to 1 year\ntest = yandex.StorageBucket(\"test\",\n    bucket=\"mybucket\",\n    server_side_encryption_configuration=yandex.StorageBucketServerSideEncryptionConfigurationArgs(\n        rule=yandex.StorageBucketServerSideEncryptionConfigurationRuleArgs(\n            apply_server_side_encryption_by_default=yandex.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs(\n                kms_master_key_id=key_a.id,\n                sse_algorithm=\"aws:kms\",\n            ),\n        ),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var key_a = new Yandex.KmsSymmetricKey(\"key-a\", new()\n    {\n        Description = \"description for key\",\n        DefaultAlgorithm = \"AES_128\",\n        RotationPeriod = \"8760h\",\n    });\n\n    // equal to 1 year\n    var test = new Yandex.StorageBucket(\"test\", new()\n    {\n        Bucket = \"mybucket\",\n        ServerSideEncryptionConfiguration = new Yandex.Inputs.StorageBucketServerSideEncryptionConfigurationArgs\n        {\n            Rule = new Yandex.Inputs.StorageBucketServerSideEncryptionConfigurationRuleArgs\n            {\n                ApplyServerSideEncryptionByDefault = new Yandex.Inputs.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs\n                {\n                    KmsMasterKeyId = key_a.Id,\n                    SseAlgorithm = \"aws:kms\",\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewKmsSymmetricKey(ctx, \"key-a\", \u0026yandex.KmsSymmetricKeyArgs{\n\t\t\tDescription:      pulumi.String(\"description for key\"),\n\t\t\tDefaultAlgorithm: pulumi.String(\"AES_128\"),\n\t\t\tRotationPeriod:   pulumi.String(\"8760h\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewStorageBucket(ctx, \"test\", \u0026yandex.StorageBucketArgs{\n\t\t\tBucket: pulumi.String(\"mybucket\"),\n\t\t\tServerSideEncryptionConfiguration: \u0026StorageBucketServerSideEncryptionConfigurationArgs{\n\t\t\t\tRule: \u0026StorageBucketServerSideEncryptionConfigurationRuleArgs{\n\t\t\t\t\tApplyServerSideEncryptionByDefault: \u0026StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs{\n\t\t\t\t\t\tKmsMasterKeyId: key_a.ID(),\n\t\t\t\t\t\tSseAlgorithm:   pulumi.String(\"aws:kms\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.KmsSymmetricKey;\nimport com.pulumi.yandex.KmsSymmetricKeyArgs;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport com.pulumi.yandex.inputs.StorageBucketServerSideEncryptionConfigurationArgs;\nimport com.pulumi.yandex.inputs.StorageBucketServerSideEncryptionConfigurationRuleArgs;\nimport com.pulumi.yandex.inputs.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var key_a = new KmsSymmetricKey(\"key-a\", KmsSymmetricKeyArgs.builder()        \n            .description(\"description for key\")\n            .defaultAlgorithm(\"AES_128\")\n            .rotationPeriod(\"8760h\")\n            .build());\n\n        var test = new StorageBucket(\"test\", StorageBucketArgs.builder()        \n            .bucket(\"mybucket\")\n            .serverSideEncryptionConfiguration(StorageBucketServerSideEncryptionConfigurationArgs.builder()\n                .rule(StorageBucketServerSideEncryptionConfigurationRuleArgs.builder()\n                    .applyServerSideEncryptionByDefault(StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs.builder()\n                        .kmsMasterKeyId(key_a.id())\n                        .sseAlgorithm(\"aws:kms\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  key-a:\n    type: yandex:KmsSymmetricKey\n    properties:\n      description: description for key\n      defaultAlgorithm: AES_128\n      rotationPeriod: 8760h\n  test:\n    type: yandex:StorageBucket\n    properties:\n      bucket: mybucket\n      serverSideEncryptionConfiguration:\n        rule:\n          applyServerSideEncryptionByDefault:\n            kmsMasterKeyId: ${[\"key-a\"].id}\n            sseAlgorithm: aws:kms\n```\n{{% /example %}}\n{{% example %}}\n### Bucket Policy\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst storageBucket = new yandex.StorageBucket(\"b\", {\n    bucket: \"my-policy-bucket\",\n    policy: `{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:*\",\n      \"Resource\": [\n        \"arn:aws:s3:::my-policy-bucket/*\",\n        \"arn:aws:s3:::my-policy-bucket\"\n      ]\n    },\n    {\n      \"Effect\": \"Deny\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:PutObject\",\n      \"Resource\": [\n        \"arn:aws:s3:::my-policy-bucket/*\",\n        \"arn:aws:s3:::my-policy-bucket\"\n      ]\n    }\n  ]\n}\n`,\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nstorage_bucket = yandex.StorageBucket(\"storageBucket\",\n    bucket=\"my-policy-bucket\",\n    policy=\"\"\"{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:*\",\n      \"Resource\": [\n        \"arn:aws:s3:::my-policy-bucket/*\",\n        \"arn:aws:s3:::my-policy-bucket\"\n      ]\n    },\n    {\n      \"Effect\": \"Deny\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:PutObject\",\n      \"Resource\": [\n        \"arn:aws:s3:::my-policy-bucket/*\",\n        \"arn:aws:s3:::my-policy-bucket\"\n      ]\n    }\n  ]\n}\n\n\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var storageBucket = new Yandex.StorageBucket(\"storageBucket\", new()\n    {\n        Bucket = \"my-policy-bucket\",\n        Policy = @\"{\n  \"\"Version\"\": \"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Effect\"\": \"\"Allow\"\",\n      \"\"Principal\"\": \"\"*\"\",\n      \"\"Action\"\": \"\"s3:*\"\",\n      \"\"Resource\"\": [\n        \"\"arn:aws:s3:::my-policy-bucket/*\"\",\n        \"\"arn:aws:s3:::my-policy-bucket\"\"\n      ]\n    },\n    {\n      \"\"Effect\"\": \"\"Deny\"\",\n      \"\"Principal\"\": \"\"*\"\",\n      \"\"Action\"\": \"\"s3:PutObject\"\",\n      \"\"Resource\"\": [\n        \"\"arn:aws:s3:::my-policy-bucket/*\"\",\n        \"\"arn:aws:s3:::my-policy-bucket\"\"\n      ]\n    }\n  ]\n}\n\n\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewStorageBucket(ctx, \"storageBucket\", \u0026yandex.StorageBucketArgs{\n\t\t\tBucket: pulumi.String(\"my-policy-bucket\"),\n\t\t\tPolicy: pulumi.String(fmt.Sprintf(`{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:*\",\n      \"Resource\": [\n        \"arn:aws:s3:::my-policy-bucket/*\",\n        \"arn:aws:s3:::my-policy-bucket\"\n      ]\n    },\n    {\n      \"Effect\": \"Deny\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:PutObject\",\n      \"Resource\": [\n        \"arn:aws:s3:::my-policy-bucket/*\",\n        \"arn:aws:s3:::my-policy-bucket\"\n      ]\n    }\n  ]\n}\n\n`)),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var storageBucket = new StorageBucket(\"storageBucket\", StorageBucketArgs.builder()        \n            .bucket(\"my-policy-bucket\")\n            .policy(\"\"\"\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:*\",\n      \"Resource\": [\n        \"arn:aws:s3:::my-policy-bucket/*\",\n        \"arn:aws:s3:::my-policy-bucket\"\n      ]\n    },\n    {\n      \"Effect\": \"Deny\",\n      \"Principal\": \"*\",\n      \"Action\": \"s3:PutObject\",\n      \"Resource\": [\n        \"arn:aws:s3:::my-policy-bucket/*\",\n        \"arn:aws:s3:::my-policy-bucket\"\n      ]\n    }\n  ]\n}\n\n            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  storageBucket:\n    type: yandex:StorageBucket\n    properties:\n      bucket: my-policy-bucket\n      policy: |+\n        {\n          \"Version\": \"2012-10-17\",\n          \"Statement\": [\n            {\n              \"Effect\": \"Allow\",\n              \"Principal\": \"*\",\n              \"Action\": \"s3:*\",\n              \"Resource\": [\n                \"arn:aws:s3:::my-policy-bucket/*\",\n                \"arn:aws:s3:::my-policy-bucket\"\n              ]\n            },\n            {\n              \"Effect\": \"Deny\",\n              \"Principal\": \"*\",\n              \"Action\": \"s3:PutObject\",\n              \"Resource\": [\n                \"arn:aws:s3:::my-policy-bucket/*\",\n                \"arn:aws:s3:::my-policy-bucket\"\n              ]\n            }\n          ]\n        }\n```\n{{% /example %}}\n{{% example %}}\n### Bucket Max Size\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst storageBucket = new yandex.StorageBucket(\"b\", {\n    bucket: \"my-policy-bucket\",\n    maxSize: 1048576,\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nstorage_bucket = yandex.StorageBucket(\"storageBucket\",\n    bucket=\"my-policy-bucket\",\n    max_size=1048576)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var storageBucket = new Yandex.StorageBucket(\"storageBucket\", new()\n    {\n        Bucket = \"my-policy-bucket\",\n        MaxSize = 1048576,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewStorageBucket(ctx, \"storageBucket\", \u0026yandex.StorageBucketArgs{\n\t\t\tBucket:  pulumi.String(\"my-policy-bucket\"),\n\t\t\tMaxSize: pulumi.Float64(1048576),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var storageBucket = new StorageBucket(\"storageBucket\", StorageBucketArgs.builder()        \n            .bucket(\"my-policy-bucket\")\n            .maxSize(1048576)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  storageBucket:\n    type: yandex:StorageBucket\n    properties:\n      bucket: my-policy-bucket\n      maxSize: 1.048576e+06\n```\n{{% /example %}}\n{{% example %}}\n### Bucket Folder Id\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst storageBucket = new yandex.StorageBucket(\"b\", {\n    bucket: \"my-policy-bucket\",\n    folderId: \"\u003cfolder_id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nstorage_bucket = yandex.StorageBucket(\"storageBucket\",\n    bucket=\"my-policy-bucket\",\n    folder_id=\"\u003cfolder_id\u003e\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var storageBucket = new Yandex.StorageBucket(\"storageBucket\", new()\n    {\n        Bucket = \"my-policy-bucket\",\n        FolderId = \"\u003cfolder_id\u003e\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewStorageBucket(ctx, \"storageBucket\", \u0026yandex.StorageBucketArgs{\n\t\t\tBucket:   pulumi.String(\"my-policy-bucket\"),\n\t\t\tFolderId: pulumi.String(\"\u003cfolder_id\u003e\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var storageBucket = new StorageBucket(\"storageBucket\", StorageBucketArgs.builder()        \n            .bucket(\"my-policy-bucket\")\n            .folderId(\"\u003cfolder_id\u003e\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  storageBucket:\n    type: yandex:StorageBucket\n    properties:\n      bucket: my-policy-bucket\n      folderId: \u003cfolder_id\u003e\n```\n{{% /example %}}\n{{% example %}}\n### Bucket Anonymous Access Flags\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst storageBucket = new yandex.StorageBucket(\"b\", {\n    anonymousAccessFlags: {\n        list: false,\n        read: true,\n    },\n    bucket: \"my-policy-bucket\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nstorage_bucket = yandex.StorageBucket(\"storageBucket\",\n    anonymous_access_flags=yandex.StorageBucketAnonymousAccessFlagsArgs(\n        list=False,\n        read=True,\n    ),\n    bucket=\"my-policy-bucket\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var storageBucket = new Yandex.StorageBucket(\"storageBucket\", new()\n    {\n        AnonymousAccessFlags = new Yandex.Inputs.StorageBucketAnonymousAccessFlagsArgs\n        {\n            List = false,\n            Read = true,\n        },\n        Bucket = \"my-policy-bucket\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewStorageBucket(ctx, \"storageBucket\", \u0026yandex.StorageBucketArgs{\n\t\t\tAnonymousAccessFlags: \u0026StorageBucketAnonymousAccessFlagsArgs{\n\t\t\t\tList: pulumi.Bool(false),\n\t\t\t\tRead: pulumi.Bool(true),\n\t\t\t},\n\t\t\tBucket: pulumi.String(\"my-policy-bucket\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport com.pulumi.yandex.inputs.StorageBucketAnonymousAccessFlagsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var storageBucket = new StorageBucket(\"storageBucket\", StorageBucketArgs.builder()        \n            .anonymousAccessFlags(StorageBucketAnonymousAccessFlagsArgs.builder()\n                .list(false)\n                .read(true)\n                .build())\n            .bucket(\"my-policy-bucket\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  storageBucket:\n    type: yandex:StorageBucket\n    properties:\n      anonymousAccessFlags:\n        list: false\n        read: true\n      bucket: my-policy-bucket\n```\n{{% /example %}}\n{{% example %}}\n### Bucket HTTPS Certificate\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst storageBucket = new yandex.StorageBucket(\"b\", {\n    bucket: \"my-policy-bucket\",\n    https: {\n        certificateId: \"\u003ccertificate_id_from_certificate_manager\u003e\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nstorage_bucket = yandex.StorageBucket(\"storageBucket\",\n    bucket=\"my-policy-bucket\",\n    https=yandex.StorageBucketHttpsArgs(\n        certificate_id=\"\u003ccertificate_id_from_certificate_manager\u003e\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var storageBucket = new Yandex.StorageBucket(\"storageBucket\", new()\n    {\n        Bucket = \"my-policy-bucket\",\n        Https = new Yandex.Inputs.StorageBucketHttpsArgs\n        {\n            CertificateId = \"\u003ccertificate_id_from_certificate_manager\u003e\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewStorageBucket(ctx, \"storageBucket\", \u0026yandex.StorageBucketArgs{\n\t\t\tBucket: pulumi.String(\"my-policy-bucket\"),\n\t\t\tHttps: \u0026StorageBucketHttpsArgs{\n\t\t\t\tCertificateId: pulumi.String(\"\u003ccertificate_id_from_certificate_manager\u003e\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport com.pulumi.yandex.inputs.StorageBucketHttpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var storageBucket = new StorageBucket(\"storageBucket\", StorageBucketArgs.builder()        \n            .bucket(\"my-policy-bucket\")\n            .https(StorageBucketHttpsArgs.builder()\n                .certificateId(\"\u003ccertificate_id_from_certificate_manager\u003e\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  storageBucket:\n    type: yandex:StorageBucket\n    properties:\n      bucket: my-policy-bucket\n      https:\n        certificateId: \u003ccertificate_id_from_certificate_manager\u003e\n```\n{{% /example %}}\n{{% example %}}\n### Bucket Default Storage Class\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst storageBucket = new yandex.StorageBucket(\"b\", {\n    bucket: \"my-policy-bucket\",\n    defaultStorageClass: \"COLD\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nstorage_bucket = yandex.StorageBucket(\"storageBucket\",\n    bucket=\"my-policy-bucket\",\n    default_storage_class=\"COLD\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var storageBucket = new Yandex.StorageBucket(\"storageBucket\", new()\n    {\n        Bucket = \"my-policy-bucket\",\n        DefaultStorageClass = \"COLD\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewStorageBucket(ctx, \"storageBucket\", \u0026yandex.StorageBucketArgs{\n\t\t\tBucket:              pulumi.String(\"my-policy-bucket\"),\n\t\t\tDefaultStorageClass: pulumi.String(\"COLD\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var storageBucket = new StorageBucket(\"storageBucket\", StorageBucketArgs.builder()        \n            .bucket(\"my-policy-bucket\")\n            .defaultStorageClass(\"COLD\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  storageBucket:\n    type: yandex:StorageBucket\n    properties:\n      bucket: my-policy-bucket\n      defaultStorageClass: COLD\n```\n{{% /example %}}\n{{% example %}}\n### All settings example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst logBucket = new yandex.StorageBucket(\"logBucket\", {\n    bucket: \"my-tf-log-bucket\",\n    lifecycleRules: [{\n        id: \"cleanupoldlogs\",\n        enabled: true,\n        expiration: {\n            days: 365,\n        },\n    }],\n});\nconst key_a = new yandex.KmsSymmetricKey(\"key-a\", {\n    description: \"description for key\",\n    defaultAlgorithm: \"AES_128\",\n    rotationPeriod: \"8760h\",\n});\n// equal to 1 year\nconst allSettings = new yandex.StorageBucket(\"allSettings\", {\n    bucket: \"example-tf-settings-bucket\",\n    website: {\n        indexDocument: \"index.html\",\n        errorDocument: \"error.html\",\n    },\n    lifecycleRules: [\n        {\n            id: \"test\",\n            enabled: true,\n            prefix: \"prefix/\",\n            expiration: {\n                days: 30,\n            },\n        },\n        {\n            id: \"log\",\n            enabled: true,\n            prefix: \"log/\",\n            transitions: [{\n                days: 30,\n                storageClass: \"COLD\",\n            }],\n            expiration: {\n                days: 90,\n            },\n        },\n        {\n            id: \"everything180\",\n            prefix: \"\",\n            enabled: true,\n            expiration: {\n                days: 180,\n            },\n        },\n        {\n            id: \"cleanupoldversions\",\n            prefix: \"config/\",\n            enabled: true,\n            noncurrentVersionTransitions: [{\n                days: 30,\n                storageClass: \"COLD\",\n            }],\n            noncurrentVersionExpiration: {\n                days: 90,\n            },\n        },\n        {\n            id: \"abortmultiparts\",\n            prefix: \"\",\n            enabled: true,\n            abortIncompleteMultipartUploadDays: 7,\n        },\n    ],\n    corsRules: [{\n        allowedHeaders: [\"*\"],\n        allowedMethods: [\n            \"GET\",\n            \"PUT\",\n        ],\n        allowedOrigins: [\"https://storage-cloud.example.com\"],\n        exposeHeaders: [\"ETag\"],\n        maxAgeSeconds: 3000,\n    }],\n    versioning: {\n        enabled: true,\n    },\n    serverSideEncryptionConfiguration: {\n        rule: {\n            applyServerSideEncryptionByDefault: {\n                kmsMasterKeyId: key_a.id,\n                sseAlgorithm: \"aws:kms\",\n            },\n        },\n    },\n    loggings: [{\n        targetBucket: logBucket.id,\n        targetPrefix: \"tf-logs/\",\n    }],\n    maxSize: 1024,\n    folderId: \"\u003cfolder_id\u003e\",\n    defaultStorageClass: \"COLD\",\n    anonymousAccessFlags: {\n        read: true,\n        list: true,\n    },\n    https: {\n        certificateId: \"\u003ccertificate_id\u003e\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nlog_bucket = yandex.StorageBucket(\"logBucket\",\n    bucket=\"my-tf-log-bucket\",\n    lifecycle_rules=[yandex.StorageBucketLifecycleRuleArgs(\n        id=\"cleanupoldlogs\",\n        enabled=True,\n        expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(\n            days=365,\n        ),\n    )])\nkey_a = yandex.KmsSymmetricKey(\"key-a\",\n    description=\"description for key\",\n    default_algorithm=\"AES_128\",\n    rotation_period=\"8760h\")\n# equal to 1 year\nall_settings = yandex.StorageBucket(\"allSettings\",\n    bucket=\"example-tf-settings-bucket\",\n    website=yandex.StorageBucketWebsiteArgs(\n        index_document=\"index.html\",\n        error_document=\"error.html\",\n    ),\n    lifecycle_rules=[\n        yandex.StorageBucketLifecycleRuleArgs(\n            id=\"test\",\n            enabled=True,\n            prefix=\"prefix/\",\n            expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(\n                days=30,\n            ),\n        ),\n        yandex.StorageBucketLifecycleRuleArgs(\n            id=\"log\",\n            enabled=True,\n            prefix=\"log/\",\n            transitions=[yandex.StorageBucketLifecycleRuleTransitionArgs(\n                days=30,\n                storage_class=\"COLD\",\n            )],\n            expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(\n                days=90,\n            ),\n        ),\n        yandex.StorageBucketLifecycleRuleArgs(\n            id=\"everything180\",\n            prefix=\"\",\n            enabled=True,\n            expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(\n                days=180,\n            ),\n        ),\n        yandex.StorageBucketLifecycleRuleArgs(\n            id=\"cleanupoldversions\",\n            prefix=\"config/\",\n            enabled=True,\n            noncurrent_version_transitions=[yandex.StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs(\n                days=30,\n                storage_class=\"COLD\",\n            )],\n            noncurrent_version_expiration=yandex.StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs(\n                days=90,\n            ),\n        ),\n        yandex.StorageBucketLifecycleRuleArgs(\n            id=\"abortmultiparts\",\n            prefix=\"\",\n            enabled=True,\n            abort_incomplete_multipart_upload_days=7,\n        ),\n    ],\n    cors_rules=[yandex.StorageBucketCorsRuleArgs(\n        allowed_headers=[\"*\"],\n        allowed_methods=[\n            \"GET\",\n            \"PUT\",\n        ],\n        allowed_origins=[\"https://storage-cloud.example.com\"],\n        expose_headers=[\"ETag\"],\n        max_age_seconds=3000,\n    )],\n    versioning=yandex.StorageBucketVersioningArgs(\n        enabled=True,\n    ),\n    server_side_encryption_configuration=yandex.StorageBucketServerSideEncryptionConfigurationArgs(\n        rule=yandex.StorageBucketServerSideEncryptionConfigurationRuleArgs(\n            apply_server_side_encryption_by_default=yandex.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs(\n                kms_master_key_id=key_a.id,\n                sse_algorithm=\"aws:kms\",\n            ),\n        ),\n    ),\n    loggings=[yandex.StorageBucketLoggingArgs(\n        target_bucket=log_bucket.id,\n        target_prefix=\"tf-logs/\",\n    )],\n    max_size=1024,\n    folder_id=\"\u003cfolder_id\u003e\",\n    default_storage_class=\"COLD\",\n    anonymous_access_flags=yandex.StorageBucketAnonymousAccessFlagsArgs(\n        read=True,\n        list=True,\n    ),\n    https=yandex.StorageBucketHttpsArgs(\n        certificate_id=\"\u003ccertificate_id\u003e\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var logBucket = new Yandex.StorageBucket(\"logBucket\", new()\n    {\n        Bucket = \"my-tf-log-bucket\",\n        LifecycleRules = new[]\n        {\n            new Yandex.Inputs.StorageBucketLifecycleRuleArgs\n            {\n                Id = \"cleanupoldlogs\",\n                Enabled = true,\n                Expiration = new Yandex.Inputs.StorageBucketLifecycleRuleExpirationArgs\n                {\n                    Days = 365,\n                },\n            },\n        },\n    });\n\n    var key_a = new Yandex.KmsSymmetricKey(\"key-a\", new()\n    {\n        Description = \"description for key\",\n        DefaultAlgorithm = \"AES_128\",\n        RotationPeriod = \"8760h\",\n    });\n\n    // equal to 1 year\n    var allSettings = new Yandex.StorageBucket(\"allSettings\", new()\n    {\n        Bucket = \"example-tf-settings-bucket\",\n        Website = new Yandex.Inputs.StorageBucketWebsiteArgs\n        {\n            IndexDocument = \"index.html\",\n            ErrorDocument = \"error.html\",\n        },\n        LifecycleRules = new[]\n        {\n            new Yandex.Inputs.StorageBucketLifecycleRuleArgs\n            {\n                Id = \"test\",\n                Enabled = true,\n                Prefix = \"prefix/\",\n                Expiration = new Yandex.Inputs.StorageBucketLifecycleRuleExpirationArgs\n                {\n                    Days = 30,\n                },\n            },\n            new Yandex.Inputs.StorageBucketLifecycleRuleArgs\n            {\n                Id = \"log\",\n                Enabled = true,\n                Prefix = \"log/\",\n                Transitions = new[]\n                {\n                    new Yandex.Inputs.StorageBucketLifecycleRuleTransitionArgs\n                    {\n                        Days = 30,\n                        StorageClass = \"COLD\",\n                    },\n                },\n                Expiration = new Yandex.Inputs.StorageBucketLifecycleRuleExpirationArgs\n                {\n                    Days = 90,\n                },\n            },\n            new Yandex.Inputs.StorageBucketLifecycleRuleArgs\n            {\n                Id = \"everything180\",\n                Prefix = \"\",\n                Enabled = true,\n                Expiration = new Yandex.Inputs.StorageBucketLifecycleRuleExpirationArgs\n                {\n                    Days = 180,\n                },\n            },\n            new Yandex.Inputs.StorageBucketLifecycleRuleArgs\n            {\n                Id = \"cleanupoldversions\",\n                Prefix = \"config/\",\n                Enabled = true,\n                NoncurrentVersionTransitions = new[]\n                {\n                    new Yandex.Inputs.StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs\n                    {\n                        Days = 30,\n                        StorageClass = \"COLD\",\n                    },\n                },\n                NoncurrentVersionExpiration = new Yandex.Inputs.StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs\n                {\n                    Days = 90,\n                },\n            },\n            new Yandex.Inputs.StorageBucketLifecycleRuleArgs\n            {\n                Id = \"abortmultiparts\",\n                Prefix = \"\",\n                Enabled = true,\n                AbortIncompleteMultipartUploadDays = 7,\n            },\n        },\n        CorsRules = new[]\n        {\n            new Yandex.Inputs.StorageBucketCorsRuleArgs\n            {\n                AllowedHeaders = new[]\n                {\n                    \"*\",\n                },\n                AllowedMethods = new[]\n                {\n                    \"GET\",\n                    \"PUT\",\n                },\n                AllowedOrigins = new[]\n                {\n                    \"https://storage-cloud.example.com\",\n                },\n                ExposeHeaders = new[]\n                {\n                    \"ETag\",\n                },\n                MaxAgeSeconds = 3000,\n            },\n        },\n        Versioning = new Yandex.Inputs.StorageBucketVersioningArgs\n        {\n            Enabled = true,\n        },\n        ServerSideEncryptionConfiguration = new Yandex.Inputs.StorageBucketServerSideEncryptionConfigurationArgs\n        {\n            Rule = new Yandex.Inputs.StorageBucketServerSideEncryptionConfigurationRuleArgs\n            {\n                ApplyServerSideEncryptionByDefault = new Yandex.Inputs.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs\n                {\n                    KmsMasterKeyId = key_a.Id,\n                    SseAlgorithm = \"aws:kms\",\n                },\n            },\n        },\n        Loggings = new[]\n        {\n            new Yandex.Inputs.StorageBucketLoggingArgs\n            {\n                TargetBucket = logBucket.Id,\n                TargetPrefix = \"tf-logs/\",\n            },\n        },\n        MaxSize = 1024,\n        FolderId = \"\u003cfolder_id\u003e\",\n        DefaultStorageClass = \"COLD\",\n        AnonymousAccessFlags = new Yandex.Inputs.StorageBucketAnonymousAccessFlagsArgs\n        {\n            Read = true,\n            List = true,\n        },\n        Https = new Yandex.Inputs.StorageBucketHttpsArgs\n        {\n            CertificateId = \"\u003ccertificate_id\u003e\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlogBucket, err := yandex.NewStorageBucket(ctx, \"logBucket\", \u0026yandex.StorageBucketArgs{\n\t\t\tBucket: pulumi.String(\"my-tf-log-bucket\"),\n\t\t\tLifecycleRules: StorageBucketLifecycleRuleArray{\n\t\t\t\t\u0026StorageBucketLifecycleRuleArgs{\n\t\t\t\t\tId:      pulumi.String(\"cleanupoldlogs\"),\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tExpiration: \u0026StorageBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Float64(365),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewKmsSymmetricKey(ctx, \"key-a\", \u0026yandex.KmsSymmetricKeyArgs{\n\t\t\tDescription:      pulumi.String(\"description for key\"),\n\t\t\tDefaultAlgorithm: pulumi.String(\"AES_128\"),\n\t\t\tRotationPeriod:   pulumi.String(\"8760h\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewStorageBucket(ctx, \"allSettings\", \u0026yandex.StorageBucketArgs{\n\t\t\tBucket: pulumi.String(\"example-tf-settings-bucket\"),\n\t\t\tWebsite: \u0026StorageBucketWebsiteArgs{\n\t\t\t\tIndexDocument: pulumi.String(\"index.html\"),\n\t\t\t\tErrorDocument: pulumi.String(\"error.html\"),\n\t\t\t},\n\t\t\tLifecycleRules: StorageBucketLifecycleRuleArray{\n\t\t\t\t\u0026StorageBucketLifecycleRuleArgs{\n\t\t\t\t\tId:      pulumi.String(\"test\"),\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tPrefix:  pulumi.String(\"prefix/\"),\n\t\t\t\t\tExpiration: \u0026StorageBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Float64(30),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026StorageBucketLifecycleRuleArgs{\n\t\t\t\t\tId:      pulumi.String(\"log\"),\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tPrefix:  pulumi.String(\"log/\"),\n\t\t\t\t\tTransitions: StorageBucketLifecycleRuleTransitionArray{\n\t\t\t\t\t\t\u0026StorageBucketLifecycleRuleTransitionArgs{\n\t\t\t\t\t\t\tDays:         pulumi.Float64(30),\n\t\t\t\t\t\t\tStorageClass: pulumi.String(\"COLD\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tExpiration: \u0026StorageBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Float64(90),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026StorageBucketLifecycleRuleArgs{\n\t\t\t\t\tId:      pulumi.String(\"everything180\"),\n\t\t\t\t\tPrefix:  pulumi.String(\"\"),\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tExpiration: \u0026StorageBucketLifecycleRuleExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Float64(180),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026StorageBucketLifecycleRuleArgs{\n\t\t\t\t\tId:      pulumi.String(\"cleanupoldversions\"),\n\t\t\t\t\tPrefix:  pulumi.String(\"config/\"),\n\t\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t\t\tNoncurrentVersionTransitions: StorageBucketLifecycleRuleNoncurrentVersionTransitionArray{\n\t\t\t\t\t\t\u0026StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs{\n\t\t\t\t\t\t\tDays:         pulumi.Float64(30),\n\t\t\t\t\t\t\tStorageClass: pulumi.String(\"COLD\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tNoncurrentVersionExpiration: \u0026StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs{\n\t\t\t\t\t\tDays: pulumi.Float64(90),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026StorageBucketLifecycleRuleArgs{\n\t\t\t\t\tId:                                 pulumi.String(\"abortmultiparts\"),\n\t\t\t\t\tPrefix:                             pulumi.String(\"\"),\n\t\t\t\t\tEnabled:                            pulumi.Bool(true),\n\t\t\t\t\tAbortIncompleteMultipartUploadDays: pulumi.Float64(7),\n\t\t\t\t},\n\t\t\t},\n\t\t\tCorsRules: StorageBucketCorsRuleArray{\n\t\t\t\t\u0026StorageBucketCorsRuleArgs{\n\t\t\t\t\tAllowedHeaders: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t\tAllowedMethods: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"GET\"),\n\t\t\t\t\t\tpulumi.String(\"PUT\"),\n\t\t\t\t\t},\n\t\t\t\t\tAllowedOrigins: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"https://storage-cloud.example.com\"),\n\t\t\t\t\t},\n\t\t\t\t\tExposeHeaders: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"ETag\"),\n\t\t\t\t\t},\n\t\t\t\t\tMaxAgeSeconds: pulumi.Float64(3000),\n\t\t\t\t},\n\t\t\t},\n\t\t\tVersioning: \u0026StorageBucketVersioningArgs{\n\t\t\t\tEnabled: pulumi.Bool(true),\n\t\t\t},\n\t\t\tServerSideEncryptionConfiguration: \u0026StorageBucketServerSideEncryptionConfigurationArgs{\n\t\t\t\tRule: \u0026StorageBucketServerSideEncryptionConfigurationRuleArgs{\n\t\t\t\t\tApplyServerSideEncryptionByDefault: \u0026StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs{\n\t\t\t\t\t\tKmsMasterKeyId: key_a.ID(),\n\t\t\t\t\t\tSseAlgorithm:   pulumi.String(\"aws:kms\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tLoggings: StorageBucketLoggingArray{\n\t\t\t\t\u0026StorageBucketLoggingArgs{\n\t\t\t\t\tTargetBucket: logBucket.ID(),\n\t\t\t\t\tTargetPrefix: pulumi.String(\"tf-logs/\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMaxSize:             pulumi.Float64(1024),\n\t\t\tFolderId:            pulumi.String(\"\u003cfolder_id\u003e\"),\n\t\t\tDefaultStorageClass: pulumi.String(\"COLD\"),\n\t\t\tAnonymousAccessFlags: \u0026StorageBucketAnonymousAccessFlagsArgs{\n\t\t\t\tRead: pulumi.Bool(true),\n\t\t\t\tList: pulumi.Bool(true),\n\t\t\t},\n\t\t\tHttps: \u0026StorageBucketHttpsArgs{\n\t\t\t\tCertificateId: pulumi.String(\"\u003ccertificate_id\u003e\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.StorageBucket;\nimport com.pulumi.yandex.StorageBucketArgs;\nimport com.pulumi.yandex.inputs.StorageBucketLifecycleRuleArgs;\nimport com.pulumi.yandex.inputs.StorageBucketLifecycleRuleExpirationArgs;\nimport com.pulumi.yandex.KmsSymmetricKey;\nimport com.pulumi.yandex.KmsSymmetricKeyArgs;\nimport com.pulumi.yandex.inputs.StorageBucketWebsiteArgs;\nimport com.pulumi.yandex.inputs.StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs;\nimport com.pulumi.yandex.inputs.StorageBucketCorsRuleArgs;\nimport com.pulumi.yandex.inputs.StorageBucketVersioningArgs;\nimport com.pulumi.yandex.inputs.StorageBucketServerSideEncryptionConfigurationArgs;\nimport com.pulumi.yandex.inputs.StorageBucketServerSideEncryptionConfigurationRuleArgs;\nimport com.pulumi.yandex.inputs.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs;\nimport com.pulumi.yandex.inputs.StorageBucketLoggingArgs;\nimport com.pulumi.yandex.inputs.StorageBucketAnonymousAccessFlagsArgs;\nimport com.pulumi.yandex.inputs.StorageBucketHttpsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var logBucket = new StorageBucket(\"logBucket\", StorageBucketArgs.builder()        \n            .bucket(\"my-tf-log-bucket\")\n            .lifecycleRules(StorageBucketLifecycleRuleArgs.builder()\n                .id(\"cleanupoldlogs\")\n                .enabled(true)\n                .expiration(StorageBucketLifecycleRuleExpirationArgs.builder()\n                    .days(365)\n                    .build())\n                .build())\n            .build());\n\n        var key_a = new KmsSymmetricKey(\"key-a\", KmsSymmetricKeyArgs.builder()        \n            .description(\"description for key\")\n            .defaultAlgorithm(\"AES_128\")\n            .rotationPeriod(\"8760h\")\n            .build());\n\n        var allSettings = new StorageBucket(\"allSettings\", StorageBucketArgs.builder()        \n            .bucket(\"example-tf-settings-bucket\")\n            .website(StorageBucketWebsiteArgs.builder()\n                .indexDocument(\"index.html\")\n                .errorDocument(\"error.html\")\n                .build())\n            .lifecycleRules(            \n                StorageBucketLifecycleRuleArgs.builder()\n                    .id(\"test\")\n                    .enabled(true)\n                    .prefix(\"prefix/\")\n                    .expiration(StorageBucketLifecycleRuleExpirationArgs.builder()\n                        .days(30)\n                        .build())\n                    .build(),\n                StorageBucketLifecycleRuleArgs.builder()\n                    .id(\"log\")\n                    .enabled(true)\n                    .prefix(\"log/\")\n                    .transitions(StorageBucketLifecycleRuleTransitionArgs.builder()\n                        .days(30)\n                        .storageClass(\"COLD\")\n                        .build())\n                    .expiration(StorageBucketLifecycleRuleExpirationArgs.builder()\n                        .days(90)\n                        .build())\n                    .build(),\n                StorageBucketLifecycleRuleArgs.builder()\n                    .id(\"everything180\")\n                    .prefix(\"\")\n                    .enabled(true)\n                    .expiration(StorageBucketLifecycleRuleExpirationArgs.builder()\n                        .days(180)\n                        .build())\n                    .build(),\n                StorageBucketLifecycleRuleArgs.builder()\n                    .id(\"cleanupoldversions\")\n                    .prefix(\"config/\")\n                    .enabled(true)\n                    .noncurrentVersionTransitions(StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs.builder()\n                        .days(30)\n                        .storageClass(\"COLD\")\n                        .build())\n                    .noncurrentVersionExpiration(StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs.builder()\n                        .days(90)\n                        .build())\n                    .build(),\n                StorageBucketLifecycleRuleArgs.builder()\n                    .id(\"abortmultiparts\")\n                    .prefix(\"\")\n                    .enabled(true)\n                    .abortIncompleteMultipartUploadDays(7)\n                    .build())\n            .corsRules(StorageBucketCorsRuleArgs.builder()\n                .allowedHeaders(\"*\")\n                .allowedMethods(                \n                    \"GET\",\n                    \"PUT\")\n                .allowedOrigins(\"https://storage-cloud.example.com\")\n                .exposeHeaders(\"ETag\")\n                .maxAgeSeconds(3000)\n                .build())\n            .versioning(StorageBucketVersioningArgs.builder()\n                .enabled(true)\n                .build())\n            .serverSideEncryptionConfiguration(StorageBucketServerSideEncryptionConfigurationArgs.builder()\n                .rule(StorageBucketServerSideEncryptionConfigurationRuleArgs.builder()\n                    .applyServerSideEncryptionByDefault(StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs.builder()\n                        .kmsMasterKeyId(key_a.id())\n                        .sseAlgorithm(\"aws:kms\")\n                        .build())\n                    .build())\n                .build())\n            .loggings(StorageBucketLoggingArgs.builder()\n                .targetBucket(logBucket.id())\n                .targetPrefix(\"tf-logs/\")\n                .build())\n            .maxSize(1024)\n            .folderId(\"\u003cfolder_id\u003e\")\n            .defaultStorageClass(\"COLD\")\n            .anonymousAccessFlags(StorageBucketAnonymousAccessFlagsArgs.builder()\n                .read(true)\n                .list(true)\n                .build())\n            .https(StorageBucketHttpsArgs.builder()\n                .certificateId(\"\u003ccertificate_id\u003e\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  logBucket:\n    type: yandex:StorageBucket\n    properties:\n      bucket: my-tf-log-bucket\n      lifecycleRules:\n        - id: cleanupoldlogs\n          enabled: true\n          expiration:\n            days: 365\n  key-a:\n    type: yandex:KmsSymmetricKey\n    properties:\n      description: description for key\n      defaultAlgorithm: AES_128\n      rotationPeriod: 8760h\n  allSettings:\n    type: yandex:StorageBucket\n    properties:\n      bucket: example-tf-settings-bucket\n      website:\n        indexDocument: index.html\n        errorDocument: error.html\n      lifecycleRules:\n        - id: test\n          enabled: true\n          prefix: prefix/\n          expiration:\n            days: 30\n        - id: log\n          enabled: true\n          prefix: log/\n          transitions:\n            - days: 30\n              storageClass: COLD\n          expiration:\n            days: 90\n        - id: everything180\n          prefix:\n          enabled: true\n          expiration:\n            days: 180\n        - id: cleanupoldversions\n          prefix: config/\n          enabled: true\n          noncurrentVersionTransitions:\n            - days: 30\n              storageClass: COLD\n          noncurrentVersionExpiration:\n            days: 90\n        - id: abortmultiparts\n          prefix:\n          enabled: true\n          abortIncompleteMultipartUploadDays: 7\n      corsRules:\n        - allowedHeaders:\n            - '*'\n          allowedMethods:\n            - GET\n            - PUT\n          allowedOrigins:\n            - https://storage-cloud.example.com\n          exposeHeaders:\n            - ETag\n          maxAgeSeconds: 3000\n      versioning:\n        enabled: true\n      serverSideEncryptionConfiguration:\n        rule:\n          applyServerSideEncryptionByDefault:\n            kmsMasterKeyId: ${[\"key-a\"].id}\n            sseAlgorithm: aws:kms\n      loggings:\n        - targetBucket: ${logBucket.id}\n          targetPrefix: tf-logs/\n      maxSize: 1024\n      folderId: \u003cfolder_id\u003e\n      defaultStorageClass: COLD\n      anonymousAccessFlags:\n        read: true\n        list: true\n      https:\n        certificateId: \u003ccertificate_id\u003e\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nStorage bucket can be imported using the `bucket`, e.g.\n\n```sh\n $ pulumi import yandex:index/storageBucket:StorageBucket bucket bucket-name\n```\n\n `false` in state. If you've set it to `true` in config, run `terraform apply` to update the value set in state. If you delete this resource before updating the value, objects in the bucket will not be destroyed. ",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key to use when applying changes. If omitted, `storage_access_key` specified in provider config is used.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`. Conflicts with `grant`.\n"
                },
                "anonymousAccessFlags": {
                    "$ref": "#/types/yandex:index/StorageBucketAnonymousAccessFlags:StorageBucketAnonymousAccessFlags",
                    "description": "Provides various access to objects.\nSee [bucket availability](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/bucket-availability)\nfor more infomation.\n"
                },
                "bucket": {
                    "type": "string"
                },
                "bucketDomainName": {
                    "type": "string",
                    "description": "The bucket domain name.\n"
                },
                "bucketPrefix": {
                    "type": "string",
                    "description": "Creates a unique bucket name beginning with the specified prefix. Conflicts with `bucket`.\n"
                },
                "corsRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/StorageBucketCorsRule:StorageBucketCorsRule"
                    },
                    "description": "A rule of [Cross-Origin Resource Sharing](https://cloud.yandex.com/docs/storage/cors/) (documented below).\n"
                },
                "defaultStorageClass": {
                    "type": "string",
                    "description": "Storage class which is used for storing objects by default.\nAvailable values are: \"STANDARD\", \"COLD\". Default is `\"STANDARD\"`.\nSee [storage class](https://cloud.yandex.com/en-ru/docs/storage/concepts/storage-class) for more inforamtion.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Allow to create bucket in different folder.\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.\n"
                },
                "grants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/StorageBucketGrant:StorageBucketGrant"
                    },
                    "description": "An [ACL policy grant](https://cloud.yandex.com/docs/storage/concepts/acl#permissions-types). Conflicts with `acl`.\n"
                },
                "https": {
                    "$ref": "#/types/yandex:index/StorageBucketHttps:StorageBucketHttps",
                    "description": "Manages https certificates for bucket. See [https](https://cloud.yandex.com/en-ru/docs/storage/operations/hosting/certificate) for more infomation.\n"
                },
                "lifecycleRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/StorageBucketLifecycleRule:StorageBucketLifecycleRule"
                    },
                    "description": "A configuration of [object lifecycle management](https://cloud.yandex.com/docs/storage/concepts/lifecycles) (documented below).\n"
                },
                "loggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/StorageBucketLogging:StorageBucketLogging"
                    },
                    "description": "A settings of [bucket logging](https://cloud.yandex.com/docs/storage/concepts/server-logs) (documented below).\n"
                },
                "maxSize": {
                    "type": "number",
                    "description": "The size of bucket, in bytes. See [size limiting](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/limit-max-volume) for more information.\n"
                },
                "policy": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key to use when applying changes. If omitted, `storage_secret_key` specified in provider config is used.\n",
                    "secret": true
                },
                "serverSideEncryptionConfiguration": {
                    "$ref": "#/types/yandex:index/StorageBucketServerSideEncryptionConfiguration:StorageBucketServerSideEncryptionConfiguration",
                    "description": "A configuration of server-side encryption for the bucket (documented below)\n"
                },
                "versioning": {
                    "$ref": "#/types/yandex:index/StorageBucketVersioning:StorageBucketVersioning",
                    "description": "A state of [versioning](https://cloud.yandex.com/docs/storage/concepts/versioning) (documented below)\n"
                },
                "website": {
                    "$ref": "#/types/yandex:index/StorageBucketWebsite:StorageBucketWebsite",
                    "description": "A [website object](https://cloud.yandex.com/docs/storage/concepts/hosting) (documented below).\n"
                },
                "websiteDomain": {
                    "type": "string",
                    "description": "The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string.\n"
                },
                "websiteEndpoint": {
                    "type": "string",
                    "description": "The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.\n"
                }
            },
            "required": [
                "bucket",
                "bucketDomainName",
                "defaultStorageClass",
                "folderId",
                "websiteDomain",
                "websiteEndpoint"
            ],
            "inputProperties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key to use when applying changes. If omitted, `storage_access_key` specified in provider config is used.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`. Conflicts with `grant`.\n"
                },
                "anonymousAccessFlags": {
                    "$ref": "#/types/yandex:index/StorageBucketAnonymousAccessFlags:StorageBucketAnonymousAccessFlags",
                    "description": "Provides various access to objects.\nSee [bucket availability](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/bucket-availability)\nfor more infomation.\n"
                },
                "bucket": {
                    "type": "string"
                },
                "bucketPrefix": {
                    "type": "string",
                    "description": "Creates a unique bucket name beginning with the specified prefix. Conflicts with `bucket`.\n"
                },
                "corsRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/StorageBucketCorsRule:StorageBucketCorsRule"
                    },
                    "description": "A rule of [Cross-Origin Resource Sharing](https://cloud.yandex.com/docs/storage/cors/) (documented below).\n"
                },
                "defaultStorageClass": {
                    "type": "string",
                    "description": "Storage class which is used for storing objects by default.\nAvailable values are: \"STANDARD\", \"COLD\". Default is `\"STANDARD\"`.\nSee [storage class](https://cloud.yandex.com/en-ru/docs/storage/concepts/storage-class) for more inforamtion.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "Allow to create bucket in different folder.\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.\n"
                },
                "grants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/StorageBucketGrant:StorageBucketGrant"
                    },
                    "description": "An [ACL policy grant](https://cloud.yandex.com/docs/storage/concepts/acl#permissions-types). Conflicts with `acl`.\n"
                },
                "https": {
                    "$ref": "#/types/yandex:index/StorageBucketHttps:StorageBucketHttps",
                    "description": "Manages https certificates for bucket. See [https](https://cloud.yandex.com/en-ru/docs/storage/operations/hosting/certificate) for more infomation.\n"
                },
                "lifecycleRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/StorageBucketLifecycleRule:StorageBucketLifecycleRule"
                    },
                    "description": "A configuration of [object lifecycle management](https://cloud.yandex.com/docs/storage/concepts/lifecycles) (documented below).\n"
                },
                "loggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/StorageBucketLogging:StorageBucketLogging"
                    },
                    "description": "A settings of [bucket logging](https://cloud.yandex.com/docs/storage/concepts/server-logs) (documented below).\n"
                },
                "maxSize": {
                    "type": "number",
                    "description": "The size of bucket, in bytes. See [size limiting](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/limit-max-volume) for more information.\n"
                },
                "policy": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key to use when applying changes. If omitted, `storage_secret_key` specified in provider config is used.\n",
                    "secret": true
                },
                "serverSideEncryptionConfiguration": {
                    "$ref": "#/types/yandex:index/StorageBucketServerSideEncryptionConfiguration:StorageBucketServerSideEncryptionConfiguration",
                    "description": "A configuration of server-side encryption for the bucket (documented below)\n"
                },
                "versioning": {
                    "$ref": "#/types/yandex:index/StorageBucketVersioning:StorageBucketVersioning",
                    "description": "A state of [versioning](https://cloud.yandex.com/docs/storage/concepts/versioning) (documented below)\n"
                },
                "website": {
                    "$ref": "#/types/yandex:index/StorageBucketWebsite:StorageBucketWebsite",
                    "description": "A [website object](https://cloud.yandex.com/docs/storage/concepts/hosting) (documented below).\n"
                },
                "websiteDomain": {
                    "type": "string",
                    "description": "The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string.\n"
                },
                "websiteEndpoint": {
                    "type": "string",
                    "description": "The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StorageBucket resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The access key to use when applying changes. If omitted, `storage_access_key` specified in provider config is used.\n"
                    },
                    "acl": {
                        "type": "string",
                        "description": "The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`. Conflicts with `grant`.\n"
                    },
                    "anonymousAccessFlags": {
                        "$ref": "#/types/yandex:index/StorageBucketAnonymousAccessFlags:StorageBucketAnonymousAccessFlags",
                        "description": "Provides various access to objects.\nSee [bucket availability](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/bucket-availability)\nfor more infomation.\n"
                    },
                    "bucket": {
                        "type": "string"
                    },
                    "bucketDomainName": {
                        "type": "string",
                        "description": "The bucket domain name.\n"
                    },
                    "bucketPrefix": {
                        "type": "string",
                        "description": "Creates a unique bucket name beginning with the specified prefix. Conflicts with `bucket`.\n"
                    },
                    "corsRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/StorageBucketCorsRule:StorageBucketCorsRule"
                        },
                        "description": "A rule of [Cross-Origin Resource Sharing](https://cloud.yandex.com/docs/storage/cors/) (documented below).\n"
                    },
                    "defaultStorageClass": {
                        "type": "string",
                        "description": "Storage class which is used for storing objects by default.\nAvailable values are: \"STANDARD\", \"COLD\". Default is `\"STANDARD\"`.\nSee [storage class](https://cloud.yandex.com/en-ru/docs/storage/concepts/storage-class) for more inforamtion.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Allow to create bucket in different folder.\n"
                    },
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.\n"
                    },
                    "grants": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/StorageBucketGrant:StorageBucketGrant"
                        },
                        "description": "An [ACL policy grant](https://cloud.yandex.com/docs/storage/concepts/acl#permissions-types). Conflicts with `acl`.\n"
                    },
                    "https": {
                        "$ref": "#/types/yandex:index/StorageBucketHttps:StorageBucketHttps",
                        "description": "Manages https certificates for bucket. See [https](https://cloud.yandex.com/en-ru/docs/storage/operations/hosting/certificate) for more infomation.\n"
                    },
                    "lifecycleRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/StorageBucketLifecycleRule:StorageBucketLifecycleRule"
                        },
                        "description": "A configuration of [object lifecycle management](https://cloud.yandex.com/docs/storage/concepts/lifecycles) (documented below).\n"
                    },
                    "loggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/StorageBucketLogging:StorageBucketLogging"
                        },
                        "description": "A settings of [bucket logging](https://cloud.yandex.com/docs/storage/concepts/server-logs) (documented below).\n"
                    },
                    "maxSize": {
                        "type": "number",
                        "description": "The size of bucket, in bytes. See [size limiting](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/limit-max-volume) for more information.\n"
                    },
                    "policy": {
                        "type": "string"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret key to use when applying changes. If omitted, `storage_secret_key` specified in provider config is used.\n",
                        "secret": true
                    },
                    "serverSideEncryptionConfiguration": {
                        "$ref": "#/types/yandex:index/StorageBucketServerSideEncryptionConfiguration:StorageBucketServerSideEncryptionConfiguration",
                        "description": "A configuration of server-side encryption for the bucket (documented below)\n"
                    },
                    "versioning": {
                        "$ref": "#/types/yandex:index/StorageBucketVersioning:StorageBucketVersioning",
                        "description": "A state of [versioning](https://cloud.yandex.com/docs/storage/concepts/versioning) (documented below)\n"
                    },
                    "website": {
                        "$ref": "#/types/yandex:index/StorageBucketWebsite:StorageBucketWebsite",
                        "description": "A [website object](https://cloud.yandex.com/docs/storage/concepts/hosting) (documented below).\n"
                    },
                    "websiteDomain": {
                        "type": "string",
                        "description": "The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string.\n"
                    },
                    "websiteEndpoint": {
                        "type": "string",
                        "description": "The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/storageObject:StorageObject": {
            "description": "Allows management of [Yandex.Cloud Storage Object](https://cloud.yandex.com/docs/storage/concepts/object).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nExample creating an object in an existing `cat-pictures` bucket.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst cute_cat_picture = new yandex.StorageObject(\"cute-cat-picture\", {\n    bucket: \"cat-pictures\",\n    key: \"cute-cat\",\n    source: \"/images/cats/cute-cat.jpg\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ncute_cat_picture = yandex.StorageObject(\"cute-cat-picture\",\n    bucket=\"cat-pictures\",\n    key=\"cute-cat\",\n    source=\"/images/cats/cute-cat.jpg\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var cute_cat_picture = new Yandex.StorageObject(\"cute-cat-picture\", new()\n    {\n        Bucket = \"cat-pictures\",\n        Key = \"cute-cat\",\n        Source = \"/images/cats/cute-cat.jpg\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewStorageObject(ctx, \"cute-cat-picture\", \u0026yandex.StorageObjectArgs{\n\t\t\tBucket: pulumi.String(\"cat-pictures\"),\n\t\t\tKey:    pulumi.String(\"cute-cat\"),\n\t\t\tSource: pulumi.String(\"/images/cats/cute-cat.jpg\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.StorageObject;\nimport com.pulumi.yandex.StorageObjectArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var cute_cat_picture = new StorageObject(\"cute-cat-picture\", StorageObjectArgs.builder()        \n            .bucket(\"cat-pictures\")\n            .key(\"cute-cat\")\n            .source(\"/images/cats/cute-cat.jpg\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  cute-cat-picture:\n    type: yandex:StorageObject\n    properties:\n      bucket: cat-pictures\n      key: cute-cat\n      source: /images/cats/cute-cat.jpg\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key to use when applying changes. If omitted, `storage_access_key` specified in config is used.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`.\n"
                },
                "bucket": {
                    "type": "string",
                    "description": "The name of the containing bucket.\n"
                },
                "content": {
                    "type": "string",
                    "description": "Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.\n"
                },
                "contentBase64": {
                    "type": "string",
                    "description": "Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "A standard MIME type describing the format of the object data, e.g. `application/octet-stream`. All Valid MIME Types are valid for this input.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the object once it is in the bucket.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key to use when applying changes. If omitted, `storage_secret_key` specified in config is used.\n",
                    "secret": true
                },
                "source": {
                    "type": "string",
                    "description": "The path to a file that will be read and uploaded as raw bytes for the object content.\n"
                }
            },
            "required": [
                "bucket",
                "contentType",
                "key"
            ],
            "inputProperties": {
                "accessKey": {
                    "type": "string",
                    "description": "The access key to use when applying changes. If omitted, `storage_access_key` specified in config is used.\n"
                },
                "acl": {
                    "type": "string",
                    "description": "The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`.\n"
                },
                "bucket": {
                    "type": "string",
                    "description": "The name of the containing bucket.\n"
                },
                "content": {
                    "type": "string",
                    "description": "Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.\n"
                },
                "contentBase64": {
                    "type": "string",
                    "description": "Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "A standard MIME type describing the format of the object data, e.g. `application/octet-stream`. All Valid MIME Types are valid for this input.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The name of the object once it is in the bucket.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key to use when applying changes. If omitted, `storage_secret_key` specified in config is used.\n",
                    "secret": true
                },
                "source": {
                    "type": "string",
                    "description": "The path to a file that will be read and uploaded as raw bytes for the object content.\n"
                }
            },
            "requiredInputs": [
                "bucket",
                "key"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StorageObject resources.\n",
                "properties": {
                    "accessKey": {
                        "type": "string",
                        "description": "The access key to use when applying changes. If omitted, `storage_access_key` specified in config is used.\n"
                    },
                    "acl": {
                        "type": "string",
                        "description": "The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`.\n"
                    },
                    "bucket": {
                        "type": "string",
                        "description": "The name of the containing bucket.\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.\n"
                    },
                    "contentBase64": {
                        "type": "string",
                        "description": "Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.\n"
                    },
                    "contentType": {
                        "type": "string",
                        "description": "A standard MIME type describing the format of the object data, e.g. `application/octet-stream`. All Valid MIME Types are valid for this input.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The name of the object once it is in the bucket.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "description": "The secret key to use when applying changes. If omitted, `storage_secret_key` specified in config is used.\n",
                        "secret": true
                    },
                    "source": {
                        "type": "string",
                        "description": "The path to a file that will be read and uploaded as raw bytes for the object content.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/vpcAddress:VpcAddress": {
            "description": "Manages a address within the Yandex.Cloud. You can only create a reserved (static) address via this resource. An ephemeral address could be obtained via implicit creation at a compute instance creation only. For more information, see [the official documentation](https://cloud.yandex.com/docs/vpc/concepts/address).\n\n* How-to Guides\n    * [Cloud Networking](https://cloud.yandex.com/docs/vpc/)\n    * [VPC Addressing](https://cloud.yandex.com/docs/vpc/concepts/address)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### External ipv4 address\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst addr = new yandex.VpcAddress(\"addr\", {\n    externalIpv4Address: {\n        zoneId: \"ru-central1-a\",\n    },\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcAddress;\nimport com.pulumi.yandex.VpcAddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var addr = new VpcAddress(\"addr\", VpcAddressArgs.builder()        \n            .externalIpv4Address(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  addr:\n    type: yandex:VpcAddress\n    properties:\n      externalIpv4Address:\n        zoneId: ru-central1-a\n```\n{{% /example %}}\n{{% example %}}\n### Address with DDoS protection\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst vpnaddr = new yandex.VpcAddress(\"vpnaddr\", {\n    externalIpv4Address: {\n        ddosProtectionProvider: \"qrator\",\n        zoneId: \"ru-central1-a\",\n    },\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcAddress;\nimport com.pulumi.yandex.VpcAddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var vpnaddr = new VpcAddress(\"vpnaddr\", VpcAddressArgs.builder()        \n            .externalIpv4Address(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  vpnaddr:\n    type: yandex:VpcAddress\n    properties:\n      externalIpv4Address:\n        ddosProtectionProvider: qrator\n        zoneId: ru-central1-a\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA address can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/vpcAddress:VpcAddress addr address_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the key.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of this resource. Provide this property when\nyou create the resource.\n"
                },
                "externalIpv4Address": {
                    "$ref": "#/types/yandex:index/VpcAddressExternalIpv4Address:VpcAddressExternalIpv4Address",
                    "description": "spec of IP v4 address\n---\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to this resource. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the address. Provided by the client when the address is created.\n"
                },
                "reserved": {
                    "type": "boolean",
                    "description": "`false` means that address is ephemeral.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcAddressTimeouts:VpcAddressTimeouts"
                },
                "used": {
                    "type": "boolean",
                    "description": "`true` if address is used.\n"
                }
            },
            "required": [
                "createdAt",
                "externalIpv4Address",
                "folderId",
                "labels",
                "name",
                "reserved",
                "timeouts",
                "used"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "An optional description of this resource. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to this resource. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the address. Provided by the client when the address is created.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcAddressTimeouts:VpcAddressTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcAddress resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of this resource. Provide this property when\nyou create the resource.\n"
                    },
                    "externalIpv4Address": {
                        "$ref": "#/types/yandex:index/VpcAddressExternalIpv4Address:VpcAddressExternalIpv4Address",
                        "description": "spec of IP v4 address\n---\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to apply to this resource. A list of key/value pairs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the address. Provided by the client when the address is created.\n"
                    },
                    "reserved": {
                        "type": "boolean",
                        "description": "`false` means that address is ephemeral.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/VpcAddressTimeouts:VpcAddressTimeouts"
                    },
                    "used": {
                        "type": "boolean",
                        "description": "`true` if address is used.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/vpcDefaultSecurityGroup:VpcDefaultSecurityGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst lab_net = new yandex.VpcNetwork(\"lab-net\", {});\nconst default_sg = new yandex.VpcDefaultSecurityGroup(\"default-sg\", {\n    description: \"description for default security group\",\n    egresses: [\n        {\n            description: \"rule2 description\",\n            fromPort: 8090,\n            protocol: \"ANY\",\n            toPort: 8099,\n            v4CidrBlocks: [\n                \"10.0.1.0/24\",\n                \"10.0.2.0/24\",\n            ],\n        },\n        {\n            description: \"rule3 description\",\n            fromPort: 8090,\n            protocol: \"UDP\",\n            toPort: 8099,\n            v4CidrBlocks: [\"10.0.1.0/24\"],\n        },\n    ],\n    ingresses: [{\n        description: \"rule1 description\",\n        port: 8080,\n        protocol: \"TCP\",\n        v4CidrBlocks: [\n            \"10.0.1.0/24\",\n            \"10.0.2.0/24\",\n        ],\n    }],\n    labels: {\n        \"my-label\": \"my-label-value\",\n    },\n    networkId: lab_net.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nlab_net = yandex.VpcNetwork(\"lab-net\")\ndefault_sg = yandex.VpcDefaultSecurityGroup(\"default-sg\",\n    description=\"description for default security group\",\n    egresses=[\n        yandex.VpcDefaultSecurityGroupEgressArgs(\n            description=\"rule2 description\",\n            from_port=8090,\n            protocol=\"ANY\",\n            to_port=8099,\n            v4_cidr_blocks=[\n                \"10.0.1.0/24\",\n                \"10.0.2.0/24\",\n            ],\n        ),\n        yandex.VpcDefaultSecurityGroupEgressArgs(\n            description=\"rule3 description\",\n            from_port=8090,\n            protocol=\"UDP\",\n            to_port=8099,\n            v4_cidr_blocks=[\"10.0.1.0/24\"],\n        ),\n    ],\n    ingresses=[yandex.VpcDefaultSecurityGroupIngressArgs(\n        description=\"rule1 description\",\n        port=8080,\n        protocol=\"TCP\",\n        v4_cidr_blocks=[\n            \"10.0.1.0/24\",\n            \"10.0.2.0/24\",\n        ],\n    )],\n    labels={\n        \"my-label\": \"my-label-value\",\n    },\n    network_id=lab_net.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var lab_net = new Yandex.VpcNetwork(\"lab-net\");\n\n    var default_sg = new Yandex.VpcDefaultSecurityGroup(\"default-sg\", new()\n    {\n        Description = \"description for default security group\",\n        Egresses = new[]\n        {\n            new Yandex.Inputs.VpcDefaultSecurityGroupEgressArgs\n            {\n                Description = \"rule2 description\",\n                FromPort = 8090,\n                Protocol = \"ANY\",\n                ToPort = 8099,\n                V4CidrBlocks = new[]\n                {\n                    \"10.0.1.0/24\",\n                    \"10.0.2.0/24\",\n                },\n            },\n            new Yandex.Inputs.VpcDefaultSecurityGroupEgressArgs\n            {\n                Description = \"rule3 description\",\n                FromPort = 8090,\n                Protocol = \"UDP\",\n                ToPort = 8099,\n                V4CidrBlocks = new[]\n                {\n                    \"10.0.1.0/24\",\n                },\n            },\n        },\n        Ingresses = new[]\n        {\n            new Yandex.Inputs.VpcDefaultSecurityGroupIngressArgs\n            {\n                Description = \"rule1 description\",\n                Port = 8080,\n                Protocol = \"TCP\",\n                V4CidrBlocks = new[]\n                {\n                    \"10.0.1.0/24\",\n                    \"10.0.2.0/24\",\n                },\n            },\n        },\n        Labels = \n        {\n            { \"my-label\", \"my-label-value\" },\n        },\n        NetworkId = lab_net.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewVpcNetwork(ctx, \"lab-net\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewVpcDefaultSecurityGroup(ctx, \"default-sg\", \u0026yandex.VpcDefaultSecurityGroupArgs{\n\t\t\tDescription: pulumi.String(\"description for default security group\"),\n\t\t\tEgresses: VpcDefaultSecurityGroupEgressArray{\n\t\t\t\t\u0026VpcDefaultSecurityGroupEgressArgs{\n\t\t\t\t\tDescription: pulumi.String(\"rule2 description\"),\n\t\t\t\t\tFromPort:    pulumi.Float64(8090),\n\t\t\t\t\tProtocol:    pulumi.String(\"ANY\"),\n\t\t\t\t\tToPort:      pulumi.Float64(8099),\n\t\t\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"10.0.1.0/24\"),\n\t\t\t\t\t\tpulumi.String(\"10.0.2.0/24\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026VpcDefaultSecurityGroupEgressArgs{\n\t\t\t\t\tDescription: pulumi.String(\"rule3 description\"),\n\t\t\t\t\tFromPort:    pulumi.Float64(8090),\n\t\t\t\t\tProtocol:    pulumi.String(\"UDP\"),\n\t\t\t\t\tToPort:      pulumi.Float64(8099),\n\t\t\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"10.0.1.0/24\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tIngresses: VpcDefaultSecurityGroupIngressArray{\n\t\t\t\t\u0026VpcDefaultSecurityGroupIngressArgs{\n\t\t\t\t\tDescription: pulumi.String(\"rule1 description\"),\n\t\t\t\t\tPort:        pulumi.Float64(8080),\n\t\t\t\t\tProtocol:    pulumi.String(\"TCP\"),\n\t\t\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"10.0.1.0/24\"),\n\t\t\t\t\t\tpulumi.String(\"10.0.2.0/24\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"my-label\": pulumi.String(\"my-label-value\"),\n\t\t\t},\n\t\t\tNetworkId: lab_net.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcDefaultSecurityGroup;\nimport com.pulumi.yandex.VpcDefaultSecurityGroupArgs;\nimport com.pulumi.yandex.inputs.VpcDefaultSecurityGroupEgressArgs;\nimport com.pulumi.yandex.inputs.VpcDefaultSecurityGroupIngressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var lab_net = new VpcNetwork(\"lab-net\");\n\n        var default_sg = new VpcDefaultSecurityGroup(\"default-sg\", VpcDefaultSecurityGroupArgs.builder()        \n            .description(\"description for default security group\")\n            .egresses(            \n                VpcDefaultSecurityGroupEgressArgs.builder()\n                    .description(\"rule2 description\")\n                    .fromPort(8090)\n                    .protocol(\"ANY\")\n                    .toPort(8099)\n                    .v4CidrBlocks(                    \n                        \"10.0.1.0/24\",\n                        \"10.0.2.0/24\")\n                    .build(),\n                VpcDefaultSecurityGroupEgressArgs.builder()\n                    .description(\"rule3 description\")\n                    .fromPort(8090)\n                    .protocol(\"UDP\")\n                    .toPort(8099)\n                    .v4CidrBlocks(\"10.0.1.0/24\")\n                    .build())\n            .ingresses(VpcDefaultSecurityGroupIngressArgs.builder()\n                .description(\"rule1 description\")\n                .port(8080)\n                .protocol(\"TCP\")\n                .v4CidrBlocks(                \n                    \"10.0.1.0/24\",\n                    \"10.0.2.0/24\")\n                .build())\n            .labels(Map.of(\"my-label\", \"my-label-value\"))\n            .networkId(lab_net.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  lab-net:\n    type: yandex:VpcNetwork\n  default-sg:\n    type: yandex:VpcDefaultSecurityGroup\n    properties:\n      description: description for default security group\n      egresses:\n        - description: rule2 description\n          fromPort: 8090\n          protocol: ANY\n          toPort: 8099\n          v4CidrBlocks:\n            - 10.0.1.0/24\n            - 10.0.2.0/24\n        - description: rule3 description\n          fromPort: 8090\n          protocol: UDP\n          toPort: 8099\n          v4CidrBlocks:\n            - 10.0.1.0/24\n      ingresses:\n        - description: rule1 description\n          port: 8080\n          protocol: TCP\n          v4CidrBlocks:\n            - 10.0.1.0/24\n            - 10.0.2.0/24\n      labels:\n        my-label: my-label-value\n      networkId: ${[\"lab-net\"].id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of this security group.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the security group.\n"
                },
                "egresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/VpcDefaultSecurityGroupEgress:VpcDefaultSecurityGroupEgress"
                    },
                    "description": "A list of egress rules. The structure is documented below.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder this security group belongs to.\n"
                },
                "ingresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/VpcDefaultSecurityGroupIngress:VpcDefaultSecurityGroupIngress"
                    },
                    "description": "A list of ingress rules.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this security group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of this security group.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network this security group belongs to.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of this security group.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcDefaultSecurityGroupTimeouts:VpcDefaultSecurityGroupTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "labels",
                "name",
                "networkId",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the security group.\n"
                },
                "egresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/VpcDefaultSecurityGroupEgress:VpcDefaultSecurityGroupEgress"
                    },
                    "description": "A list of egress rules. The structure is documented below.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder this security group belongs to.\n"
                },
                "ingresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/VpcDefaultSecurityGroupIngress:VpcDefaultSecurityGroupIngress"
                    },
                    "description": "A list of ingress rules.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this security group.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network this security group belongs to.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcDefaultSecurityGroupTimeouts:VpcDefaultSecurityGroupTimeouts"
                }
            },
            "requiredInputs": [
                "networkId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcDefaultSecurityGroup resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of this security group.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the security group.\n"
                    },
                    "egresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/VpcDefaultSecurityGroupEgress:VpcDefaultSecurityGroupEgress"
                        },
                        "description": "A list of egress rules. The structure is documented below.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder this security group belongs to.\n"
                    },
                    "ingresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/VpcDefaultSecurityGroupIngress:VpcDefaultSecurityGroupIngress"
                        },
                        "description": "A list of ingress rules.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this security group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of this security group.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network this security group belongs to.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of this security group.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/VpcDefaultSecurityGroupTimeouts:VpcDefaultSecurityGroupTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/vpcGateway:VpcGateway": {
            "description": "Manages a gateway within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/vpc/concepts/gateway#gateway).\n\n* How-to Guides\n    * [Cloud Networking](https://cloud.yandex.com/docs/vpc/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst defaultVpcGateway = new yandex.VpcGateway(\"default\", {\n    sharedEgressGateway: {},\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcGateway;\nimport com.pulumi.yandex.VpcGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new VpcGateway(\"default\", VpcGatewayArgs.builder()        \n            .sharedEgressGateway()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: yandex:VpcGateway\n    properties:\n      sharedEgressGateway: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA gateway can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/vpcGateway:VpcGateway default gateway_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the key.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of this resource. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to this VPC Gateway. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the VPC Gateway. Provided by the client when the VPC Gateway is created.\n"
                },
                "sharedEgressGateway": {
                    "$ref": "#/types/yandex:index/VpcGatewaySharedEgressGateway:VpcGatewaySharedEgressGateway",
                    "description": "Shared egress gateway configuration. Currently empty.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcGatewayTimeouts:VpcGatewayTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "labels",
                "name",
                "sharedEgressGateway",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "An optional description of this resource. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to this VPC Gateway. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the VPC Gateway. Provided by the client when the VPC Gateway is created.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcGatewayTimeouts:VpcGatewayTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcGateway resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of this resource. Provide this property when\nyou create the resource.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to apply to this VPC Gateway. A list of key/value pairs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the VPC Gateway. Provided by the client when the VPC Gateway is created.\n"
                    },
                    "sharedEgressGateway": {
                        "$ref": "#/types/yandex:index/VpcGatewaySharedEgressGateway:VpcGatewaySharedEgressGateway",
                        "description": "Shared egress gateway configuration. Currently empty.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/VpcGatewayTimeouts:VpcGatewayTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/vpcNetwork:VpcNetwork": {
            "description": "Manages a network within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/vpc/concepts/network#network).\n\n* How-to Guides\n    * [Cloud Networking](https://cloud.yandex.com/docs/vpc/)\n    * [VPC Addressing](https://cloud.yandex.com/docs/vpc/concepts/address)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst defaultVpcNetwork = new yandex.VpcNetwork(\"default\", {});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ndefault = yandex.VpcNetwork(\"default\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = new Yandex.VpcNetwork(\"default\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewVpcNetwork(ctx, \"default\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var default_ = new VpcNetwork(\"default\");\n\n    }\n}\n```\n```yaml\nresources:\n  default:\n    type: yandex:VpcNetwork\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA network can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/vpcNetwork:VpcNetwork default network_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the key.\n"
                },
                "defaultSecurityGroupId": {
                    "type": "string",
                    "description": "ID of default Security Group of this network.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of this resource. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to this network. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network. Provided by the client when the network is created.\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcNetworkTimeouts:VpcNetworkTimeouts"
                }
            },
            "required": [
                "createdAt",
                "defaultSecurityGroupId",
                "folderId",
                "labels",
                "name",
                "subnetIds",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "An optional description of this resource. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to this network. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network. Provided by the client when the network is created.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcNetworkTimeouts:VpcNetworkTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcNetwork resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "defaultSecurityGroupId": {
                        "type": "string",
                        "description": "ID of default Security Group of this network.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of this resource. Provide this property when\nyou create the resource.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the resource belongs to. If it\nis not provided, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to apply to this network. A list of key/value pairs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the network. Provided by the client when the network is created.\n"
                    },
                    "subnetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/VpcNetworkTimeouts:VpcNetworkTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/vpcRouteTable:VpcRouteTable": {
            "description": "Manages a route table within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/vpc/concepts).\n\n* How-to Guides\n    * [Cloud Networking](https://cloud.yandex.com/docs/vpc/)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst lab_net = new yandex.VpcNetwork(\"lab-net\", {});\nconst egress_gateway = new yandex.VpcGateway(\"egress-gateway\", {\n    sharedEgressGateway: {},\n});\nconst lab_rt_a = new yandex.VpcRouteTable(\"lab-rt-a\", {\n    networkId: lab_net.id,\n    staticRoutes: [\n        {\n            destinationPrefix: \"10.2.0.0/16\",\n            nextHopAddress: \"172.16.10.10\",\n        },\n        {\n            destinationPrefix: \"0.0.0.0/0\",\n            gatewayId: egress_gateway.id,\n        },\n    ],\n});\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcGateway;\nimport com.pulumi.yandex.VpcGatewayArgs;\nimport com.pulumi.yandex.VpcRouteTable;\nimport com.pulumi.yandex.VpcRouteTableArgs;\nimport com.pulumi.yandex.inputs.VpcRouteTableStaticRouteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var lab_net = new VpcNetwork(\"lab-net\");\n\n        var egress_gateway = new VpcGateway(\"egress-gateway\", VpcGatewayArgs.builder()        \n            .sharedEgressGateway()\n            .build());\n\n        var lab_rt_a = new VpcRouteTable(\"lab-rt-a\", VpcRouteTableArgs.builder()        \n            .networkId(lab_net.id())\n            .staticRoutes(            \n                VpcRouteTableStaticRouteArgs.builder()\n                    .destinationPrefix(\"10.2.0.0/16\")\n                    .nextHopAddress(\"172.16.10.10\")\n                    .build(),\n                VpcRouteTableStaticRouteArgs.builder()\n                    .destinationPrefix(\"0.0.0.0/0\")\n                    .gatewayId(egress_gateway.id())\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  lab-net:\n    type: yandex:VpcNetwork\n  egress-gateway:\n    type: yandex:VpcGateway\n    properties:\n      sharedEgressGateway: {}\n  lab-rt-a:\n    type: yandex:VpcRouteTable\n    properties:\n      networkId: ${[\"lab-net\"].id}\n      staticRoutes:\n        - destinationPrefix: 10.2.0.0/16\n          nextHopAddress: 172.16.10.10\n        - destinationPrefix: 0.0.0.0/0\n          gatewayId: ${[\"egress-gateway\"].id}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA route table can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/vpcRouteTable:VpcRouteTable default route_table_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of the route table.\n"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of the route table. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this route table. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the route table. Provided by the client when the route table is created.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network this route table belongs to.\n"
                },
                "staticRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/VpcRouteTableStaticRoute:VpcRouteTableStaticRoute"
                    },
                    "description": "A list of static route records for the route table. The structure is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcRouteTableTimeouts:VpcRouteTableTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "labels",
                "name",
                "networkId",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "An optional description of the route table. Provide this property when\nyou create the resource.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this route table. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the route table. Provided by the client when the route table is created.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network this route table belongs to.\n"
                },
                "staticRoutes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/VpcRouteTableStaticRoute:VpcRouteTableStaticRoute"
                    },
                    "description": "A list of static route records for the route table. The structure is documented below.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcRouteTableTimeouts:VpcRouteTableTimeouts"
                }
            },
            "requiredInputs": [
                "networkId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcRouteTable resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the route table.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of the route table. Provide this property when\nyou create the resource.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this route table. A list of key/value pairs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the route table. Provided by the client when the route table is created.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network this route table belongs to.\n"
                    },
                    "staticRoutes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/VpcRouteTableStaticRoute:VpcRouteTableStaticRoute"
                        },
                        "description": "A list of static route records for the route table. The structure is documented below.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/VpcRouteTableTimeouts:VpcRouteTableTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/vpcSecurityGroup:VpcSecurityGroup": {
            "description": "Manages a Security Group within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/vpc/concepts/security-groups).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst lab_net = new yandex.VpcNetwork(\"lab-net\", {});\nconst group1 = new yandex.VpcSecurityGroup(\"group1\", {\n    description: \"description for my security group\",\n    egresses: [\n        {\n            description: \"rule2 description\",\n            fromPort: 8090,\n            protocol: \"ANY\",\n            toPort: 8099,\n            v4CidrBlocks: [\n                \"10.0.1.0/24\",\n                \"10.0.2.0/24\",\n            ],\n        },\n        {\n            description: \"rule3 description\",\n            fromPort: 8090,\n            protocol: \"UDP\",\n            toPort: 8099,\n            v4CidrBlocks: [\"10.0.1.0/24\"],\n        },\n    ],\n    ingresses: [{\n        description: \"rule1 description\",\n        port: 8080,\n        protocol: \"TCP\",\n        v4CidrBlocks: [\n            \"10.0.1.0/24\",\n            \"10.0.2.0/24\",\n        ],\n    }],\n    labels: {\n        \"my-label\": \"my-label-value\",\n    },\n    networkId: lab_net.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nlab_net = yandex.VpcNetwork(\"lab-net\")\ngroup1 = yandex.VpcSecurityGroup(\"group1\",\n    description=\"description for my security group\",\n    egresses=[\n        yandex.VpcSecurityGroupEgressArgs(\n            description=\"rule2 description\",\n            from_port=8090,\n            protocol=\"ANY\",\n            to_port=8099,\n            v4_cidr_blocks=[\n                \"10.0.1.0/24\",\n                \"10.0.2.0/24\",\n            ],\n        ),\n        yandex.VpcSecurityGroupEgressArgs(\n            description=\"rule3 description\",\n            from_port=8090,\n            protocol=\"UDP\",\n            to_port=8099,\n            v4_cidr_blocks=[\"10.0.1.0/24\"],\n        ),\n    ],\n    ingresses=[yandex.VpcSecurityGroupIngressArgs(\n        description=\"rule1 description\",\n        port=8080,\n        protocol=\"TCP\",\n        v4_cidr_blocks=[\n            \"10.0.1.0/24\",\n            \"10.0.2.0/24\",\n        ],\n    )],\n    labels={\n        \"my-label\": \"my-label-value\",\n    },\n    network_id=lab_net.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var lab_net = new Yandex.VpcNetwork(\"lab-net\");\n\n    var group1 = new Yandex.VpcSecurityGroup(\"group1\", new()\n    {\n        Description = \"description for my security group\",\n        Egresses = new[]\n        {\n            new Yandex.Inputs.VpcSecurityGroupEgressArgs\n            {\n                Description = \"rule2 description\",\n                FromPort = 8090,\n                Protocol = \"ANY\",\n                ToPort = 8099,\n                V4CidrBlocks = new[]\n                {\n                    \"10.0.1.0/24\",\n                    \"10.0.2.0/24\",\n                },\n            },\n            new Yandex.Inputs.VpcSecurityGroupEgressArgs\n            {\n                Description = \"rule3 description\",\n                FromPort = 8090,\n                Protocol = \"UDP\",\n                ToPort = 8099,\n                V4CidrBlocks = new[]\n                {\n                    \"10.0.1.0/24\",\n                },\n            },\n        },\n        Ingresses = new[]\n        {\n            new Yandex.Inputs.VpcSecurityGroupIngressArgs\n            {\n                Description = \"rule1 description\",\n                Port = 8080,\n                Protocol = \"TCP\",\n                V4CidrBlocks = new[]\n                {\n                    \"10.0.1.0/24\",\n                    \"10.0.2.0/24\",\n                },\n            },\n        },\n        Labels = \n        {\n            { \"my-label\", \"my-label-value\" },\n        },\n        NetworkId = lab_net.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewVpcNetwork(ctx, \"lab-net\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewVpcSecurityGroup(ctx, \"group1\", \u0026yandex.VpcSecurityGroupArgs{\n\t\t\tDescription: pulumi.String(\"description for my security group\"),\n\t\t\tEgresses: VpcSecurityGroupEgressArray{\n\t\t\t\t\u0026VpcSecurityGroupEgressArgs{\n\t\t\t\t\tDescription: pulumi.String(\"rule2 description\"),\n\t\t\t\t\tFromPort:    pulumi.Float64(8090),\n\t\t\t\t\tProtocol:    pulumi.String(\"ANY\"),\n\t\t\t\t\tToPort:      pulumi.Float64(8099),\n\t\t\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"10.0.1.0/24\"),\n\t\t\t\t\t\tpulumi.String(\"10.0.2.0/24\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026VpcSecurityGroupEgressArgs{\n\t\t\t\t\tDescription: pulumi.String(\"rule3 description\"),\n\t\t\t\t\tFromPort:    pulumi.Float64(8090),\n\t\t\t\t\tProtocol:    pulumi.String(\"UDP\"),\n\t\t\t\t\tToPort:      pulumi.Float64(8099),\n\t\t\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"10.0.1.0/24\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tIngresses: VpcSecurityGroupIngressArray{\n\t\t\t\t\u0026VpcSecurityGroupIngressArgs{\n\t\t\t\t\tDescription: pulumi.String(\"rule1 description\"),\n\t\t\t\t\tPort:        pulumi.Float64(8080),\n\t\t\t\t\tProtocol:    pulumi.String(\"TCP\"),\n\t\t\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"10.0.1.0/24\"),\n\t\t\t\t\t\tpulumi.String(\"10.0.2.0/24\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"my-label\": pulumi.String(\"my-label-value\"),\n\t\t\t},\n\t\t\tNetworkId: lab_net.ID(),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSecurityGroup;\nimport com.pulumi.yandex.VpcSecurityGroupArgs;\nimport com.pulumi.yandex.inputs.VpcSecurityGroupEgressArgs;\nimport com.pulumi.yandex.inputs.VpcSecurityGroupIngressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var lab_net = new VpcNetwork(\"lab-net\");\n\n        var group1 = new VpcSecurityGroup(\"group1\", VpcSecurityGroupArgs.builder()        \n            .description(\"description for my security group\")\n            .egresses(            \n                VpcSecurityGroupEgressArgs.builder()\n                    .description(\"rule2 description\")\n                    .fromPort(8090)\n                    .protocol(\"ANY\")\n                    .toPort(8099)\n                    .v4CidrBlocks(                    \n                        \"10.0.1.0/24\",\n                        \"10.0.2.0/24\")\n                    .build(),\n                VpcSecurityGroupEgressArgs.builder()\n                    .description(\"rule3 description\")\n                    .fromPort(8090)\n                    .protocol(\"UDP\")\n                    .toPort(8099)\n                    .v4CidrBlocks(\"10.0.1.0/24\")\n                    .build())\n            .ingresses(VpcSecurityGroupIngressArgs.builder()\n                .description(\"rule1 description\")\n                .port(8080)\n                .protocol(\"TCP\")\n                .v4CidrBlocks(                \n                    \"10.0.1.0/24\",\n                    \"10.0.2.0/24\")\n                .build())\n            .labels(Map.of(\"my-label\", \"my-label-value\"))\n            .networkId(lab_net.id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  lab-net:\n    type: yandex:VpcNetwork\n  group1:\n    type: yandex:VpcSecurityGroup\n    properties:\n      description: description for my security group\n      egresses:\n        - description: rule2 description\n          fromPort: 8090\n          protocol: ANY\n          toPort: 8099\n          v4CidrBlocks:\n            - 10.0.1.0/24\n            - 10.0.2.0/24\n        - description: rule3 description\n          fromPort: 8090\n          protocol: UDP\n          toPort: 8099\n          v4CidrBlocks:\n            - 10.0.1.0/24\n      ingresses:\n        - description: rule1 description\n          port: 8080\n          protocol: TCP\n          v4CidrBlocks:\n            - 10.0.1.0/24\n            - 10.0.2.0/24\n      labels:\n        my-label: my-label-value\n      networkId: ${[\"lab-net\"].id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation timestamp of this security group.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the security group.\n"
                },
                "egresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/VpcSecurityGroupEgress:VpcSecurityGroupEgress"
                    },
                    "description": "A list of egress rules. The structure is documented below.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder this security group belongs to.\n"
                },
                "ingresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/VpcSecurityGroupIngress:VpcSecurityGroupIngress"
                    },
                    "description": "A list of ingress rules.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this security group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the security group.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network this security group belongs to.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of this security group.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcSecurityGroupTimeouts:VpcSecurityGroupTimeouts"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "labels",
                "name",
                "networkId",
                "status",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the security group.\n"
                },
                "egresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/VpcSecurityGroupEgress:VpcSecurityGroupEgress"
                    },
                    "description": "A list of egress rules. The structure is documented below.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder this security group belongs to.\n"
                },
                "ingresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/yandex:index/VpcSecurityGroupIngress:VpcSecurityGroupIngress"
                    },
                    "description": "A list of ingress rules.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this security group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the security group.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network this security group belongs to.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcSecurityGroupTimeouts:VpcSecurityGroupTimeouts"
                }
            },
            "requiredInputs": [
                "networkId",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcSecurityGroup resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of this security group.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the security group.\n"
                    },
                    "egresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/VpcSecurityGroupEgress:VpcSecurityGroupEgress"
                        },
                        "description": "A list of egress rules. The structure is documented below.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder this security group belongs to.\n"
                    },
                    "ingresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/VpcSecurityGroupIngress:VpcSecurityGroupIngress"
                        },
                        "description": "A list of ingress rules.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this security group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the security group.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network this security group belongs to.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of this security group.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/VpcSecurityGroupTimeouts:VpcSecurityGroupTimeouts"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/vpcSecurityGroupRule:VpcSecurityGroupRule": {
            "description": "Manages a single Secuirity Group Rule within the Yandex.Cloud. For more information, see the official documentation\nof [security groups](https://cloud.yandex.com/docs/vpc/concepts/security-groups)\nand [security group rules](https://cloud.yandex.com/docs/vpc/concepts/security-groups#rules).\n\n\u003e **NOTE:** There is another way to manage security group rules by `ingress` and `egress` arguments in yandex_vpc_security_group. Both ways are equivalent but not compatible now. Using in-line rules of yandex.VpcSecurityGroup with Security Group Rule resource at the same time will cause a conflict of rules configuration.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst lab_net = new yandex.VpcNetwork(\"lab-net\", {});\nconst group1 = new yandex.VpcSecurityGroup(\"group1\", {\n    description: \"description for my security group\",\n    networkId: lab_net.id,\n    labels: {\n        \"my-label\": \"my-label-value\",\n    },\n});\nconst rule1 = new yandex.VpcSecurityGroupRule(\"rule1\", {\n    securityGroupBinding: group1.id,\n    direction: \"ingress\",\n    description: \"rule1 description\",\n    v4CidrBlocks: [\n        \"10.0.1.0/24\",\n        \"10.0.2.0/24\",\n    ],\n    port: 8080,\n    protocol: \"TCP\",\n});\nconst rule2 = new yandex.VpcSecurityGroupRule(\"rule2\", {\n    securityGroupBinding: group1.id,\n    direction: \"egress\",\n    description: \"rule2 description\",\n    v4CidrBlocks: [\"10.0.1.0/24\"],\n    fromPort: 8090,\n    toPort: 8099,\n    protocol: \"UDP\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nlab_net = yandex.VpcNetwork(\"lab-net\")\ngroup1 = yandex.VpcSecurityGroup(\"group1\",\n    description=\"description for my security group\",\n    network_id=lab_net.id,\n    labels={\n        \"my-label\": \"my-label-value\",\n    })\nrule1 = yandex.VpcSecurityGroupRule(\"rule1\",\n    security_group_binding=group1.id,\n    direction=\"ingress\",\n    description=\"rule1 description\",\n    v4_cidr_blocks=[\n        \"10.0.1.0/24\",\n        \"10.0.2.0/24\",\n    ],\n    port=8080,\n    protocol=\"TCP\")\nrule2 = yandex.VpcSecurityGroupRule(\"rule2\",\n    security_group_binding=group1.id,\n    direction=\"egress\",\n    description=\"rule2 description\",\n    v4_cidr_blocks=[\"10.0.1.0/24\"],\n    from_port=8090,\n    to_port=8099,\n    protocol=\"UDP\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var lab_net = new Yandex.VpcNetwork(\"lab-net\");\n\n    var group1 = new Yandex.VpcSecurityGroup(\"group1\", new()\n    {\n        Description = \"description for my security group\",\n        NetworkId = lab_net.Id,\n        Labels = \n        {\n            { \"my-label\", \"my-label-value\" },\n        },\n    });\n\n    var rule1 = new Yandex.VpcSecurityGroupRule(\"rule1\", new()\n    {\n        SecurityGroupBinding = group1.Id,\n        Direction = \"ingress\",\n        Description = \"rule1 description\",\n        V4CidrBlocks = new[]\n        {\n            \"10.0.1.0/24\",\n            \"10.0.2.0/24\",\n        },\n        Port = 8080,\n        Protocol = \"TCP\",\n    });\n\n    var rule2 = new Yandex.VpcSecurityGroupRule(\"rule2\", new()\n    {\n        SecurityGroupBinding = group1.Id,\n        Direction = \"egress\",\n        Description = \"rule2 description\",\n        V4CidrBlocks = new[]\n        {\n            \"10.0.1.0/24\",\n        },\n        FromPort = 8090,\n        ToPort = 8099,\n        Protocol = \"UDP\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewVpcNetwork(ctx, \"lab-net\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tgroup1, err := yandex.NewVpcSecurityGroup(ctx, \"group1\", \u0026yandex.VpcSecurityGroupArgs{\n\t\t\tDescription: pulumi.String(\"description for my security group\"),\n\t\t\tNetworkId:   lab_net.ID(),\n\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\"my-label\": pulumi.String(\"my-label-value\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewVpcSecurityGroupRule(ctx, \"rule1\", \u0026yandex.VpcSecurityGroupRuleArgs{\n\t\t\tSecurityGroupBinding: group1.ID(),\n\t\t\tDirection:            pulumi.String(\"ingress\"),\n\t\t\tDescription:          pulumi.String(\"rule1 description\"),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.1.0/24\"),\n\t\t\t\tpulumi.String(\"10.0.2.0/24\"),\n\t\t\t},\n\t\t\tPort:     pulumi.Float64(8080),\n\t\t\tProtocol: pulumi.String(\"TCP\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewVpcSecurityGroupRule(ctx, \"rule2\", \u0026yandex.VpcSecurityGroupRuleArgs{\n\t\t\tSecurityGroupBinding: group1.ID(),\n\t\t\tDirection:            pulumi.String(\"egress\"),\n\t\t\tDescription:          pulumi.String(\"rule2 description\"),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.1.0/24\"),\n\t\t\t},\n\t\t\tFromPort: pulumi.Float64(8090),\n\t\t\tToPort:   pulumi.Float64(8099),\n\t\t\tProtocol: pulumi.String(\"UDP\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSecurityGroup;\nimport com.pulumi.yandex.VpcSecurityGroupArgs;\nimport com.pulumi.yandex.VpcSecurityGroupRule;\nimport com.pulumi.yandex.VpcSecurityGroupRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var lab_net = new VpcNetwork(\"lab-net\");\n\n        var group1 = new VpcSecurityGroup(\"group1\", VpcSecurityGroupArgs.builder()        \n            .description(\"description for my security group\")\n            .networkId(lab_net.id())\n            .labels(Map.of(\"my-label\", \"my-label-value\"))\n            .build());\n\n        var rule1 = new VpcSecurityGroupRule(\"rule1\", VpcSecurityGroupRuleArgs.builder()        \n            .securityGroupBinding(group1.id())\n            .direction(\"ingress\")\n            .description(\"rule1 description\")\n            .v4CidrBlocks(            \n                \"10.0.1.0/24\",\n                \"10.0.2.0/24\")\n            .port(8080)\n            .protocol(\"TCP\")\n            .build());\n\n        var rule2 = new VpcSecurityGroupRule(\"rule2\", VpcSecurityGroupRuleArgs.builder()        \n            .securityGroupBinding(group1.id())\n            .direction(\"egress\")\n            .description(\"rule2 description\")\n            .v4CidrBlocks(\"10.0.1.0/24\")\n            .fromPort(8090)\n            .toPort(8099)\n            .protocol(\"UDP\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  lab-net:\n    type: yandex:VpcNetwork\n  group1:\n    type: yandex:VpcSecurityGroup\n    properties:\n      description: description for my security group\n      networkId: ${[\"lab-net\"].id}\n      labels:\n        my-label: my-label-value\n  rule1:\n    type: yandex:VpcSecurityGroupRule\n    properties:\n      securityGroupBinding: ${group1.id}\n      direction: ingress\n      description: rule1 description\n      v4CidrBlocks:\n        - 10.0.1.0/24\n        - 10.0.2.0/24\n      port: 8080\n      protocol: TCP\n  rule2:\n    type: yandex:VpcSecurityGroupRule\n    properties:\n      securityGroupBinding: ${group1.id}\n      direction: egress\n      description: rule2 description\n      v4CidrBlocks:\n        - 10.0.1.0/24\n      fromPort: 8090\n      toPort: 8099\n      protocol: UDP\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the rule.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "direction of the rule. Can be `ingress` (inbound) or `egress` (outbound).\n"
                },
                "fromPort": {
                    "type": "number",
                    "description": "Minimum port number.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this rule.\n"
                },
                "port": {
                    "type": "number",
                    "description": "Port number (if applied to a single port).\n"
                },
                "predefinedTarget": {
                    "type": "string",
                    "description": "Special-purpose targets such as \"self_security_group\". [See docs](https://cloud.yandex.com/docs/vpc/concepts/security-groups) for possible options.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "One of `ANY`, `TCP`, `UDP`, `ICMP`, `IPV6_ICMP`.\n"
                },
                "securityGroupBinding": {
                    "type": "string",
                    "description": "ID of the security group this rule belongs to.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "Target security group ID for this rule.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcSecurityGroupRuleTimeouts:VpcSecurityGroupRuleTimeouts"
                },
                "toPort": {
                    "type": "number",
                    "description": "Maximum port number.\n"
                },
                "v4CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The blocks of IPv4 addresses for this rule.\n"
                },
                "v6CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The blocks of IPv6 addresses for this rule. `v6_cidr_blocks` argument is currently not supported. It will be available in the future.\n"
                }
            },
            "required": [
                "direction",
                "labels",
                "securityGroupBinding",
                "timeouts"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the rule.\n"
                },
                "direction": {
                    "type": "string",
                    "description": "direction of the rule. Can be `ingress` (inbound) or `egress` (outbound).\n"
                },
                "fromPort": {
                    "type": "number",
                    "description": "Minimum port number.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this rule.\n"
                },
                "port": {
                    "type": "number",
                    "description": "Port number (if applied to a single port).\n"
                },
                "predefinedTarget": {
                    "type": "string",
                    "description": "Special-purpose targets such as \"self_security_group\". [See docs](https://cloud.yandex.com/docs/vpc/concepts/security-groups) for possible options.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "One of `ANY`, `TCP`, `UDP`, `ICMP`, `IPV6_ICMP`.\n"
                },
                "securityGroupBinding": {
                    "type": "string",
                    "description": "ID of the security group this rule belongs to.\n"
                },
                "securityGroupId": {
                    "type": "string",
                    "description": "Target security group ID for this rule.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcSecurityGroupRuleTimeouts:VpcSecurityGroupRuleTimeouts"
                },
                "toPort": {
                    "type": "number",
                    "description": "Maximum port number.\n"
                },
                "v4CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The blocks of IPv4 addresses for this rule.\n"
                },
                "v6CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The blocks of IPv6 addresses for this rule. `v6_cidr_blocks` argument is currently not supported. It will be available in the future.\n"
                }
            },
            "requiredInputs": [
                "direction",
                "securityGroupBinding",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcSecurityGroupRule resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the rule.\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "direction of the rule. Can be `ingress` (inbound) or `egress` (outbound).\n"
                    },
                    "fromPort": {
                        "type": "number",
                        "description": "Minimum port number.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this rule.\n"
                    },
                    "port": {
                        "type": "number",
                        "description": "Port number (if applied to a single port).\n"
                    },
                    "predefinedTarget": {
                        "type": "string",
                        "description": "Special-purpose targets such as \"self_security_group\". [See docs](https://cloud.yandex.com/docs/vpc/concepts/security-groups) for possible options.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "One of `ANY`, `TCP`, `UDP`, `ICMP`, `IPV6_ICMP`.\n"
                    },
                    "securityGroupBinding": {
                        "type": "string",
                        "description": "ID of the security group this rule belongs to.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "Target security group ID for this rule.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/VpcSecurityGroupRuleTimeouts:VpcSecurityGroupRuleTimeouts"
                    },
                    "toPort": {
                        "type": "number",
                        "description": "Maximum port number.\n"
                    },
                    "v4CidrBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The blocks of IPv4 addresses for this rule.\n"
                    },
                    "v6CidrBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The blocks of IPv6 addresses for this rule. `v6_cidr_blocks` argument is currently not supported. It will be available in the future.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/vpcSubnet:VpcSubnet": {
            "description": "Manages a subnet within the Yandex.Cloud. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/vpc/concepts/network#subnet).\n\n* How-to Guides\n    * [Cloud Networking](https://cloud.yandex.com/docs/vpc/)\n    * [VPC Addressing](https://cloud.yandex.com/docs/vpc/concepts/address)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst lab_net = new yandex.VpcNetwork(\"lab-net\", {});\nconst lab_subnet_a = new yandex.VpcSubnet(\"lab-subnet-a\", {\n    networkId: lab_net.id,\n    v4CidrBlocks: [\"10.2.0.0/16\"],\n    zone: \"ru-central1-a\",\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nlab_net = yandex.VpcNetwork(\"lab-net\")\nlab_subnet_a = yandex.VpcSubnet(\"lab-subnet-a\",\n    network_id=lab_net.id,\n    v4_cidr_blocks=[\"10.2.0.0/16\"],\n    zone=\"ru-central1-a\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var lab_net = new Yandex.VpcNetwork(\"lab-net\");\n\n    var lab_subnet_a = new Yandex.VpcSubnet(\"lab-subnet-a\", new()\n    {\n        NetworkId = lab_net.Id,\n        V4CidrBlocks = new[]\n        {\n            \"10.2.0.0/16\",\n        },\n        Zone = \"ru-central1-a\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewVpcNetwork(ctx, \"lab-net\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewVpcSubnet(ctx, \"lab-subnet-a\", \u0026yandex.VpcSubnetArgs{\n\t\t\tNetworkId: lab_net.ID(),\n\t\t\tV4CidrBlocks: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.2.0.0/16\"),\n\t\t\t},\n\t\t\tZone: pulumi.String(\"ru-central1-a\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.VpcNetwork;\nimport com.pulumi.yandex.VpcSubnet;\nimport com.pulumi.yandex.VpcSubnetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var lab_net = new VpcNetwork(\"lab-net\");\n\n        var lab_subnet_a = new VpcSubnet(\"lab-subnet-a\", VpcSubnetArgs.builder()        \n            .networkId(lab_net.id())\n            .v4CidrBlocks(\"10.2.0.0/16\")\n            .zone(\"ru-central1-a\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  lab-net:\n    type: yandex:VpcNetwork\n  lab-subnet-a:\n    type: yandex:VpcSubnet\n    properties:\n      networkId: ${[\"lab-net\"].id}\n      v4CidrBlocks:\n        - 10.2.0.0/16\n      zone: ru-central1-a\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nA subnet can be imported using the `id` of the resource, e.g.\n\n```sh\n $ pulumi import yandex:index/vpcSubnet:VpcSubnet default subnet_id\n```\n\n ",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of the subnet. Provide this property when\nyou create the resource.\n"
                },
                "dhcpOptions": {
                    "$ref": "#/types/yandex:index/VpcSubnetDhcpOptions:VpcSubnetDhcpOptions",
                    "description": "Options for DHCP client. The structure is documented below.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this subnet. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the subnet. Provided by the client when the subnet is created.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network this subnet belongs to.\nOnly networks that are in the distributed mode can have subnets.\n"
                },
                "routeTableId": {
                    "type": "string",
                    "description": "The ID of the route table to assign to this subnet. Assigned route table should\nbelong to the same network as this subnet.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcSubnetTimeouts:VpcSubnetTimeouts"
                },
                "v4CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of blocks of internal IPv4 addresses that are owned by this subnet.\nProvide this property when you create the subnet. For example, 10.0.0.0/22 or 192.168.0.0/16.\nBlocks of addresses must be unique and non-overlapping within a network.\nMinimum subnet size is /28, and maximum subnet size is /16. Only IPv4 is supported.\n"
                },
                "v6CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional list of blocks of IPv6 addresses that are owned by this subnet.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Name of the Yandex.Cloud zone for this subnet.\n"
                }
            },
            "required": [
                "createdAt",
                "folderId",
                "labels",
                "name",
                "networkId",
                "timeouts",
                "v4CidrBlocks",
                "v6CidrBlocks",
                "zone"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "An optional description of the subnet. Provide this property when\nyou create the resource.\n"
                },
                "dhcpOptions": {
                    "$ref": "#/types/yandex:index/VpcSubnetDhcpOptions:VpcSubnetDhcpOptions",
                    "description": "Options for DHCP client. The structure is documented below.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to assign to this subnet. A list of key/value pairs.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the subnet. Provided by the client when the subnet is created.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network this subnet belongs to.\nOnly networks that are in the distributed mode can have subnets.\n"
                },
                "routeTableId": {
                    "type": "string",
                    "description": "The ID of the route table to assign to this subnet. Assigned route table should\nbelong to the same network as this subnet.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/VpcSubnetTimeouts:VpcSubnetTimeouts"
                },
                "v4CidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of blocks of internal IPv4 addresses that are owned by this subnet.\nProvide this property when you create the subnet. For example, 10.0.0.0/22 or 192.168.0.0/16.\nBlocks of addresses must be unique and non-overlapping within a network.\nMinimum subnet size is /28, and maximum subnet size is /16. Only IPv4 is supported.\n"
                },
                "zone": {
                    "type": "string",
                    "description": "Name of the Yandex.Cloud zone for this subnet.\n"
                }
            },
            "requiredInputs": [
                "networkId",
                "timeouts",
                "v4CidrBlocks"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VpcSubnet resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of the subnet. Provide this property when\nyou create the resource.\n"
                    },
                    "dhcpOptions": {
                        "$ref": "#/types/yandex:index/VpcSubnetDhcpOptions:VpcSubnetDhcpOptions",
                        "description": "Options for DHCP client. The structure is documented below.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder to which the resource belongs.\nIf omitted, the provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this subnet. A list of key/value pairs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the subnet. Provided by the client when the subnet is created.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network this subnet belongs to.\nOnly networks that are in the distributed mode can have subnets.\n"
                    },
                    "routeTableId": {
                        "type": "string",
                        "description": "The ID of the route table to assign to this subnet. Assigned route table should\nbelong to the same network as this subnet.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/VpcSubnetTimeouts:VpcSubnetTimeouts"
                    },
                    "v4CidrBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of blocks of internal IPv4 addresses that are owned by this subnet.\nProvide this property when you create the subnet. For example, 10.0.0.0/22 or 192.168.0.0/16.\nBlocks of addresses must be unique and non-overlapping within a network.\nMinimum subnet size is /28, and maximum subnet size is /16. Only IPv4 is supported.\n"
                    },
                    "v6CidrBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional list of blocks of IPv6 addresses that are owned by this subnet.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "Name of the Yandex.Cloud zone for this subnet.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/ydbDatabaseDedicated:YdbDatabaseDedicated": {
            "description": "Yandex Database (dedicated) resource.\nFor more information, see [the official documentation](https://cloud.yandex.com/en/docs/ydb/concepts/serverless_and_dedicated).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst database1 = new yandex.YdbDatabaseDedicated(\"database1\", {\n    deletionProtection: true,\n    folderId: yandex_resourcemanager_folder_test_folder.id,\n    location: {\n        region: {\n            id: \"ru-central1\",\n        },\n    },\n    networkId: yandex_vpc_network_my_inst_group_network.id,\n    resourcePresetId: \"medium\",\n    scalePolicy: {\n        fixedScale: {\n            size: 1,\n        },\n    },\n    storageConfig: {\n        groupCount: 1,\n        storageTypeId: \"ssd\",\n    },\n    subnetIds: [yandex_vpc_subnet_my_inst_group_subnet.id],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ndatabase1 = yandex.YdbDatabaseDedicated(\"database1\",\n    deletion_protection=True,\n    folder_id=data[\"yandex_resourcemanager_folder\"][\"test_folder\"][\"id\"],\n    location=yandex.YdbDatabaseDedicatedLocationArgs(\n        region=yandex.YdbDatabaseDedicatedLocationRegionArgs(\n            id=\"ru-central1\",\n        ),\n    ),\n    network_id=yandex_vpc_network[\"my-inst-group-network\"][\"id\"],\n    resource_preset_id=\"medium\",\n    scale_policy=yandex.YdbDatabaseDedicatedScalePolicyArgs(\n        fixed_scale=yandex.YdbDatabaseDedicatedScalePolicyFixedScaleArgs(\n            size=1,\n        ),\n    ),\n    storage_config=yandex.YdbDatabaseDedicatedStorageConfigArgs(\n        group_count=1,\n        storage_type_id=\"ssd\",\n    ),\n    subnet_ids=[yandex_vpc_subnet[\"my-inst-group-subnet\"][\"id\"]])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var database1 = new Yandex.YdbDatabaseDedicated(\"database1\", new()\n    {\n        DeletionProtection = true,\n        FolderId = data.Yandex_resourcemanager_folder.Test_folder.Id,\n        Location = new Yandex.Inputs.YdbDatabaseDedicatedLocationArgs\n        {\n            Region = new Yandex.Inputs.YdbDatabaseDedicatedLocationRegionArgs\n            {\n                Id = \"ru-central1\",\n            },\n        },\n        NetworkId = yandex_vpc_network.My_inst_group_network.Id,\n        ResourcePresetId = \"medium\",\n        ScalePolicy = new Yandex.Inputs.YdbDatabaseDedicatedScalePolicyArgs\n        {\n            FixedScale = new Yandex.Inputs.YdbDatabaseDedicatedScalePolicyFixedScaleArgs\n            {\n                Size = 1,\n            },\n        },\n        StorageConfig = new Yandex.Inputs.YdbDatabaseDedicatedStorageConfigArgs\n        {\n            GroupCount = 1,\n            StorageTypeId = \"ssd\",\n        },\n        SubnetIds = new[]\n        {\n            yandex_vpc_subnet.My_inst_group_subnet.Id,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewYdbDatabaseDedicated(ctx, \"database1\", \u0026yandex.YdbDatabaseDedicatedArgs{\n\t\t\tDeletionProtection: pulumi.Bool(true),\n\t\t\tFolderId:           pulumi.Any(data.Yandex_resourcemanager_folder.Test_folder.Id),\n\t\t\tLocation: \u0026YdbDatabaseDedicatedLocationArgs{\n\t\t\t\tRegion: \u0026YdbDatabaseDedicatedLocationRegionArgs{\n\t\t\t\t\tId: pulumi.String(\"ru-central1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tNetworkId:        pulumi.Any(yandex_vpc_network.MyInstGroupNetwork.Id),\n\t\t\tResourcePresetId: pulumi.String(\"medium\"),\n\t\t\tScalePolicy: \u0026YdbDatabaseDedicatedScalePolicyArgs{\n\t\t\t\tFixedScale: \u0026YdbDatabaseDedicatedScalePolicyFixedScaleArgs{\n\t\t\t\t\tSize: pulumi.Float64(1),\n\t\t\t\t},\n\t\t\t},\n\t\t\tStorageConfig: \u0026YdbDatabaseDedicatedStorageConfigArgs{\n\t\t\t\tGroupCount:    pulumi.Float64(1),\n\t\t\t\tStorageTypeId: pulumi.String(\"ssd\"),\n\t\t\t},\n\t\t\tSubnetIds: pulumi.StringArray{\n\t\t\t\tpulumi.Any(yandex_vpc_subnet.MyInstGroupSubnet.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YdbDatabaseDedicated;\nimport com.pulumi.yandex.YdbDatabaseDedicatedArgs;\nimport com.pulumi.yandex.inputs.YdbDatabaseDedicatedLocationArgs;\nimport com.pulumi.yandex.inputs.YdbDatabaseDedicatedLocationRegionArgs;\nimport com.pulumi.yandex.inputs.YdbDatabaseDedicatedScalePolicyArgs;\nimport com.pulumi.yandex.inputs.YdbDatabaseDedicatedScalePolicyFixedScaleArgs;\nimport com.pulumi.yandex.inputs.YdbDatabaseDedicatedStorageConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var database1 = new YdbDatabaseDedicated(\"database1\", YdbDatabaseDedicatedArgs.builder()        \n            .deletionProtection(true)\n            .folderId(data.yandex_resourcemanager_folder().test_folder().id())\n            .location(YdbDatabaseDedicatedLocationArgs.builder()\n                .region(YdbDatabaseDedicatedLocationRegionArgs.builder()\n                    .id(\"ru-central1\")\n                    .build())\n                .build())\n            .networkId(yandex_vpc_network.my-inst-group-network().id())\n            .resourcePresetId(\"medium\")\n            .scalePolicy(YdbDatabaseDedicatedScalePolicyArgs.builder()\n                .fixedScale(YdbDatabaseDedicatedScalePolicyFixedScaleArgs.builder()\n                    .size(1)\n                    .build())\n                .build())\n            .storageConfig(YdbDatabaseDedicatedStorageConfigArgs.builder()\n                .groupCount(1)\n                .storageTypeId(\"ssd\")\n                .build())\n            .subnetIds(yandex_vpc_subnet.my-inst-group-subnet().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  database1:\n    type: yandex:YdbDatabaseDedicated\n    properties:\n      deletionProtection: true\n      folderId: ${data.yandex_resourcemanager_folder.test_folder.id}\n      location:\n        region:\n          id: ru-central1\n      networkId: ${yandex_vpc_network\"my-inst-group-network\"[%!s(MISSING)].id}\n      resourcePresetId: medium\n      scalePolicy:\n        fixedScale:\n          size: 1\n      storageConfig:\n        groupCount: 1\n        storageTypeId: ssd\n      subnetIds:\n        - ${yandex_vpc_subnet\"my-inst-group-subnet\"[%!s(MISSING)].id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "assignPublicIps": {
                    "type": "boolean",
                    "description": "Whether public IP addresses should be assigned to the Yandex Database cluster.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "The Yandex Database cluster creation timestamp.\n"
                },
                "databasePath": {
                    "type": "string",
                    "description": "Full database path of the Yandex Database cluster.\nUseful for SDK configuration.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the database. Can be either `true` or `false`\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Yandex Database cluster.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the Yandex Database cluster belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Database cluster.\n"
                },
                "location": {
                    "$ref": "#/types/yandex:index/YdbDatabaseDedicatedLocation:YdbDatabaseDedicatedLocation",
                    "description": "Location for the Yandex Database cluster.\nThe structure is documented below.\n"
                },
                "locationId": {
                    "type": "string",
                    "description": "Location ID for the Yandex Database cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Yandex Database cluster.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network to attach the Yandex Database cluster to.\n"
                },
                "resourcePresetId": {
                    "type": "string",
                    "description": "The Yandex Database cluster preset.\nAvailable presets can be obtained via `yc ydb resource-preset list` command.\n"
                },
                "scalePolicy": {
                    "$ref": "#/types/yandex:index/YdbDatabaseDedicatedScalePolicy:YdbDatabaseDedicatedScalePolicy",
                    "description": "Scaling policy for the Yandex Database cluster.\nThe structure is documented below.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the Yandex Database cluster.\n"
                },
                "storageConfig": {
                    "$ref": "#/types/yandex:index/YdbDatabaseDedicatedStorageConfig:YdbDatabaseDedicatedStorageConfig",
                    "description": "A list of storage configuration options for the Yandex Database cluster.\nThe structure is documented below.\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subnet IDs to attach the Yandex Database cluster to.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/YdbDatabaseDedicatedTimeouts:YdbDatabaseDedicatedTimeouts"
                },
                "tlsEnabled": {
                    "type": "boolean",
                    "description": "Whether TLS is enabled for the Yandex Database cluster.\nUseful for SDK configuration.\n"
                },
                "ydbApiEndpoint": {
                    "type": "string",
                    "description": "API endpoint of the Yandex Database cluster.\nUseful for SDK configuration.\n"
                },
                "ydbFullEndpoint": {
                    "type": "string",
                    "description": "Full endpoint of the Yandex Database cluster.\n"
                }
            },
            "required": [
                "createdAt",
                "databasePath",
                "folderId",
                "locationId",
                "name",
                "networkId",
                "resourcePresetId",
                "scalePolicy",
                "status",
                "storageConfig",
                "subnetIds",
                "timeouts",
                "tlsEnabled",
                "ydbApiEndpoint",
                "ydbFullEndpoint"
            ],
            "inputProperties": {
                "assignPublicIps": {
                    "type": "boolean",
                    "description": "Whether public IP addresses should be assigned to the Yandex Database cluster.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the database. Can be either `true` or `false`\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Yandex Database cluster.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the Yandex Database cluster belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Database cluster.\n"
                },
                "location": {
                    "$ref": "#/types/yandex:index/YdbDatabaseDedicatedLocation:YdbDatabaseDedicatedLocation",
                    "description": "Location for the Yandex Database cluster.\nThe structure is documented below.\n"
                },
                "locationId": {
                    "type": "string",
                    "description": "Location ID for the Yandex Database cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Yandex Database cluster.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the network to attach the Yandex Database cluster to.\n"
                },
                "resourcePresetId": {
                    "type": "string",
                    "description": "The Yandex Database cluster preset.\nAvailable presets can be obtained via `yc ydb resource-preset list` command.\n"
                },
                "scalePolicy": {
                    "$ref": "#/types/yandex:index/YdbDatabaseDedicatedScalePolicy:YdbDatabaseDedicatedScalePolicy",
                    "description": "Scaling policy for the Yandex Database cluster.\nThe structure is documented below.\n"
                },
                "storageConfig": {
                    "$ref": "#/types/yandex:index/YdbDatabaseDedicatedStorageConfig:YdbDatabaseDedicatedStorageConfig",
                    "description": "A list of storage configuration options for the Yandex Database cluster.\nThe structure is documented below.\n"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of subnet IDs to attach the Yandex Database cluster to.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/YdbDatabaseDedicatedTimeouts:YdbDatabaseDedicatedTimeouts"
                }
            },
            "requiredInputs": [
                "networkId",
                "resourcePresetId",
                "scalePolicy",
                "storageConfig",
                "subnetIds",
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering YdbDatabaseDedicated resources.\n",
                "properties": {
                    "assignPublicIps": {
                        "type": "boolean",
                        "description": "Whether public IP addresses should be assigned to the Yandex Database cluster.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The Yandex Database cluster creation timestamp.\n"
                    },
                    "databasePath": {
                        "type": "string",
                        "description": "Full database path of the Yandex Database cluster.\nUseful for SDK configuration.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the database. Can be either `true` or `false`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the Yandex Database cluster.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the Yandex Database cluster belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Yandex Database cluster.\n"
                    },
                    "location": {
                        "$ref": "#/types/yandex:index/YdbDatabaseDedicatedLocation:YdbDatabaseDedicatedLocation",
                        "description": "Location for the Yandex Database cluster.\nThe structure is documented below.\n"
                    },
                    "locationId": {
                        "type": "string",
                        "description": "Location ID for the Yandex Database cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Yandex Database cluster.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network to attach the Yandex Database cluster to.\n"
                    },
                    "resourcePresetId": {
                        "type": "string",
                        "description": "The Yandex Database cluster preset.\nAvailable presets can be obtained via `yc ydb resource-preset list` command.\n"
                    },
                    "scalePolicy": {
                        "$ref": "#/types/yandex:index/YdbDatabaseDedicatedScalePolicy:YdbDatabaseDedicatedScalePolicy",
                        "description": "Scaling policy for the Yandex Database cluster.\nThe structure is documented below.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Yandex Database cluster.\n"
                    },
                    "storageConfig": {
                        "$ref": "#/types/yandex:index/YdbDatabaseDedicatedStorageConfig:YdbDatabaseDedicatedStorageConfig",
                        "description": "A list of storage configuration options for the Yandex Database cluster.\nThe structure is documented below.\n"
                    },
                    "subnetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of subnet IDs to attach the Yandex Database cluster to.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/YdbDatabaseDedicatedTimeouts:YdbDatabaseDedicatedTimeouts"
                    },
                    "tlsEnabled": {
                        "type": "boolean",
                        "description": "Whether TLS is enabled for the Yandex Database cluster.\nUseful for SDK configuration.\n"
                    },
                    "ydbApiEndpoint": {
                        "type": "string",
                        "description": "API endpoint of the Yandex Database cluster.\nUseful for SDK configuration.\n"
                    },
                    "ydbFullEndpoint": {
                        "type": "string",
                        "description": "Full endpoint of the Yandex Database cluster.\n"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/ydbDatabaseIamBinding:YdbDatabaseIamBinding": {
            "description": "## yandex\\_ydb\\_database\\_iam\\_binding\n\nAllows creation and management of a single binding within IAM policy for\nan existing Managed YDB Database instance.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst database1 = new yandex.YdbDatabaseServerless(\"database1\", {folderId: data.yandex_resourcemanager_folder.test_folder.id});\nconst viewer = new yandex.YdbDatabaseIamBinding(\"viewer\", {\n    databaseId: database1.id,\n    role: \"ydb.viewer\",\n    members: [\"userAccount:foo_user_id\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ndatabase1 = yandex.YdbDatabaseServerless(\"database1\", folder_id=data[\"yandex_resourcemanager_folder\"][\"test_folder\"][\"id\"])\nviewer = yandex.YdbDatabaseIamBinding(\"viewer\",\n    database_id=database1.id,\n    role=\"ydb.viewer\",\n    members=[\"userAccount:foo_user_id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var database1 = new Yandex.YdbDatabaseServerless(\"database1\", new()\n    {\n        FolderId = data.Yandex_resourcemanager_folder.Test_folder.Id,\n    });\n\n    var viewer = new Yandex.YdbDatabaseIamBinding(\"viewer\", new()\n    {\n        DatabaseId = database1.Id,\n        Role = \"ydb.viewer\",\n        Members = new[]\n        {\n            \"userAccount:foo_user_id\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdatabase1, err := yandex.NewYdbDatabaseServerless(ctx, \"database1\", \u0026yandex.YdbDatabaseServerlessArgs{\n\t\t\tFolderId: pulumi.Any(data.Yandex_resourcemanager_folder.Test_folder.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.NewYdbDatabaseIamBinding(ctx, \"viewer\", \u0026yandex.YdbDatabaseIamBindingArgs{\n\t\t\tDatabaseId: database1.ID(),\n\t\t\tRole:       pulumi.String(\"ydb.viewer\"),\n\t\t\tMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"userAccount:foo_user_id\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YdbDatabaseServerless;\nimport com.pulumi.yandex.YdbDatabaseServerlessArgs;\nimport com.pulumi.yandex.YdbDatabaseIamBinding;\nimport com.pulumi.yandex.YdbDatabaseIamBindingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var database1 = new YdbDatabaseServerless(\"database1\", YdbDatabaseServerlessArgs.builder()        \n            .folderId(data.yandex_resourcemanager_folder().test_folder().id())\n            .build());\n\n        var viewer = new YdbDatabaseIamBinding(\"viewer\", YdbDatabaseIamBindingArgs.builder()        \n            .databaseId(database1.id())\n            .role(\"ydb.viewer\")\n            .members(\"userAccount:foo_user_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  database1:\n    type: yandex:YdbDatabaseServerless\n    properties:\n      folderId: ${data.yandex_resourcemanager_folder.test_folder.id}\n  viewer:\n    type: yandex:YdbDatabaseIamBinding\n    properties:\n      databaseId: ${database1.id}\n      role: ydb.viewer\n      members:\n        - userAccount:foo_user_id\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nIAM binding imports use space-delimited identifiers; first the resource in question and then the role. These bindings can be imported using the `database_id` and role, e.g.\n\n```sh\n $ pulumi import yandex:index/ydbDatabaseIamBinding:YdbDatabaseIamBinding viewer \"database_id ydb.viewer\"\n```\n\n ",
            "properties": {
                "databaseId": {
                    "type": "string",
                    "description": "The [Managed Service YDB instance](https://cloud.yandex.com/docs/ydb/) Database ID to apply a binding to.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/ydb/security/).\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "required": [
                "databaseId",
                "members",
                "role"
            ],
            "inputProperties": {
                "databaseId": {
                    "type": "string",
                    "description": "The [Managed Service YDB instance](https://cloud.yandex.com/docs/ydb/) Database ID to apply a binding to.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/ydb/security/).\n"
                },
                "sleepAfter": {
                    "type": "number"
                }
            },
            "requiredInputs": [
                "databaseId",
                "members",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering YdbDatabaseIamBinding resources.\n",
                "properties": {
                    "databaseId": {
                        "type": "string",
                        "description": "The [Managed Service YDB instance](https://cloud.yandex.com/docs/ydb/) Database ID to apply a binding to.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Identities that will be granted the privilege in `role`.\nEach entry can have one of the following values:\n* **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.\n* **serviceAccount:{service_account_id}**: A unique service account ID.\n* **system:{allUsers|allAuthenticatedUsers}**: see [system groups](https://cloud.yandex.com/docs/iam/concepts/access-control/system-group)\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role that should be applied. See [roles](https://cloud.yandex.com/docs/ydb/security/).\n"
                    },
                    "sleepAfter": {
                        "type": "number"
                    }
                },
                "type": "object"
            }
        },
        "yandex:index/ydbDatabaseServerless:YdbDatabaseServerless": {
            "description": "Yandex Database (serverless) resource. For more information, see\n    [the official documentation](https://cloud.yandex.com/en/docs/ydb/concepts/serverless_and_dedicated).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst database1 = new yandex.YdbDatabaseServerless(\"database1\", {\n    deletionProtection: true,\n    folderId: yandex_resourcemanager_folder_test_folder.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ndatabase1 = yandex.YdbDatabaseServerless(\"database1\",\n    deletion_protection=True,\n    folder_id=data[\"yandex_resourcemanager_folder\"][\"test_folder\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var database1 = new Yandex.YdbDatabaseServerless(\"database1\", new()\n    {\n        DeletionProtection = true,\n        FolderId = data.Yandex_resourcemanager_folder.Test_folder.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := yandex.NewYdbDatabaseServerless(ctx, \"database1\", \u0026yandex.YdbDatabaseServerlessArgs{\n\t\t\tDeletionProtection: pulumi.Bool(true),\n\t\t\tFolderId:           pulumi.Any(data.Yandex_resourcemanager_folder.Test_folder.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YdbDatabaseServerless;\nimport com.pulumi.yandex.YdbDatabaseServerlessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var database1 = new YdbDatabaseServerless(\"database1\", YdbDatabaseServerlessArgs.builder()        \n            .deletionProtection(true)\n            .folderId(data.yandex_resourcemanager_folder().test_folder().id())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  database1:\n    type: yandex:YdbDatabaseServerless\n    properties:\n      deletionProtection: true\n      folderId: ${data.yandex_resourcemanager_folder.test_folder.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The Yandex Database serverless cluster creation timestamp.\n"
                },
                "databasePath": {
                    "type": "string",
                    "description": "Full database path of the Yandex Database serverless cluster.\nUseful for SDK configuration.\n"
                },
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the database. Can be either `true` or `false`\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Yandex Database serverless cluster.\n"
                },
                "documentApiEndpoint": {
                    "type": "string",
                    "description": "Document API endpoint of the Yandex Database serverless cluster.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the Yandex Database serverless cluster belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Database serverless cluster.\n"
                },
                "locationId": {
                    "type": "string",
                    "description": "Location ID for the Yandex Database serverless cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the Yandex Database serverless cluster.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the Yandex Database serverless cluster.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/YdbDatabaseServerlessTimeouts:YdbDatabaseServerlessTimeouts"
                },
                "tlsEnabled": {
                    "type": "boolean",
                    "description": "Whether TLS is enabled for the Yandex Database serverless cluster.\nUseful for SDK configuration.\n"
                },
                "ydbApiEndpoint": {
                    "type": "string",
                    "description": "API endpoint of the Yandex Database serverless cluster.\nUseful for SDK configuration.\n"
                },
                "ydbFullEndpoint": {
                    "type": "string",
                    "description": "Full endpoint of the Yandex Database serverless cluster.\n"
                }
            },
            "required": [
                "createdAt",
                "databasePath",
                "documentApiEndpoint",
                "folderId",
                "locationId",
                "name",
                "status",
                "timeouts",
                "tlsEnabled",
                "ydbApiEndpoint",
                "ydbFullEndpoint"
            ],
            "inputProperties": {
                "deletionProtection": {
                    "type": "boolean",
                    "description": "Inhibits deletion of the database. Can be either `true` or `false`\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description for the Yandex Database serverless cluster.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder that the Yandex Database serverless cluster belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of key/value label pairs to assign to the Yandex Database serverless cluster.\n"
                },
                "locationId": {
                    "type": "string",
                    "description": "Location ID for the Yandex Database serverless cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the Yandex Database serverless cluster.\n"
                },
                "timeouts": {
                    "$ref": "#/types/yandex:index/YdbDatabaseServerlessTimeouts:YdbDatabaseServerlessTimeouts"
                }
            },
            "requiredInputs": [
                "timeouts"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering YdbDatabaseServerless resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The Yandex Database serverless cluster creation timestamp.\n"
                    },
                    "databasePath": {
                        "type": "string",
                        "description": "Full database path of the Yandex Database serverless cluster.\nUseful for SDK configuration.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the database. Can be either `true` or `false`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description for the Yandex Database serverless cluster.\n"
                    },
                    "documentApiEndpoint": {
                        "type": "string",
                        "description": "Document API endpoint of the Yandex Database serverless cluster.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the Yandex Database serverless cluster belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Yandex Database serverless cluster.\n"
                    },
                    "locationId": {
                        "type": "string",
                        "description": "Location ID for the Yandex Database serverless cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name for the Yandex Database serverless cluster.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Yandex Database serverless cluster.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/YdbDatabaseServerlessTimeouts:YdbDatabaseServerlessTimeouts"
                    },
                    "tlsEnabled": {
                        "type": "boolean",
                        "description": "Whether TLS is enabled for the Yandex Database serverless cluster.\nUseful for SDK configuration.\n"
                    },
                    "ydbApiEndpoint": {
                        "type": "string",
                        "description": "API endpoint of the Yandex Database serverless cluster.\nUseful for SDK configuration.\n"
                    },
                    "ydbFullEndpoint": {
                        "type": "string",
                        "description": "Full endpoint of the Yandex Database serverless cluster.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "yandex:index/getAlbBackendGroup:getAlbBackendGroup": {
            "description": "Get information about a Yandex Application Load Balancer Backend Group. For more information, see\n[Yandex.Cloud Application Load Balancer](https://cloud.yandex.com/en/docs/application-load-balancer/quickstart).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getAlbBackendGroup({\n    backendGroupId: \"my-backend-group-id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_alb_backend_group(backend_group_id=\"my-backend-group-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetAlbBackendGroup.Invoke(new()\n    {\n        BackendGroupId = \"my-backend-group-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupAlbBackendGroup(ctx, \u0026GetAlbBackendGroupArgs{\n\t\t\tBackendGroupId: pulumi.StringRef(\"my-backend-group-id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetAlbBackendGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getAlbBackendGroup(GetAlbBackendGroupArgs.builder()\n            .backendGroupId(\"my-backend-group-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getAlbBackendGroup\n      Arguments:\n        backendGroupId: my-backend-group-id\n```\n\nThis data source is used to define [Application Load Balancer Backend Groups] that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlbBackendGroup.\n",
                "properties": {
                    "backendGroupId": {
                        "type": "string",
                        "description": "Backend Group ID.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the backend group.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this backend group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- Name of the Backend Group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAlbBackendGroup.\n",
                "properties": {
                    "backendGroupId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of this backend group.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the backend group.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "grpcBackends": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getAlbBackendGroupGrpcBackend:getAlbBackendGroupGrpcBackend"
                        },
                        "description": "Grpc backend specification that will be used by the ALB Backend Group. Structure is documented below.\n"
                    },
                    "httpBackends": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getAlbBackendGroupHttpBackend:getAlbBackendGroupHttpBackend"
                        },
                        "description": "Http backend specification that will be used by the ALB Backend Group. Structure is documented below.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this backend group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the backend.\n"
                    },
                    "sessionAffinity": {
                        "$ref": "#/types/yandex:index/getAlbBackendGroupSessionAffinity:getAlbBackendGroupSessionAffinity"
                    },
                    "streamBackends": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getAlbBackendGroupStreamBackend:getAlbBackendGroupStreamBackend"
                        },
                        "description": "Stream backend specification that will be used by the ALB Backend Group. Structure is documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "backendGroupId",
                    "createdAt",
                    "description",
                    "folderId",
                    "grpcBackends",
                    "httpBackends",
                    "id",
                    "labels",
                    "name",
                    "sessionAffinity",
                    "streamBackends"
                ]
            }
        },
        "yandex:index/getAlbHttpRouter:getAlbHttpRouter": {
            "description": "Get information about a Yandex Application Load Balancer HTTP Router. For more information, see\n[Yandex.Cloud Application Load Balancer](https://cloud.yandex.com/en/docs/application-load-balancer/quickstart).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst tf_router = pulumi.output(yandex.getAlbHttpRouter({\n    httpRouterId: \"my-http-router-id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ntf_router = yandex.get_alb_http_router(http_router_id=\"my-http-router-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tf_router = Yandex.GetAlbHttpRouter.Invoke(new()\n    {\n        HttpRouterId = \"my-http-router-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupAlbHttpRouter(ctx, \u0026GetAlbHttpRouterArgs{\n\t\t\tHttpRouterId: pulumi.StringRef(\"my-http-router-id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetAlbHttpRouterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tf-router = YandexFunctions.getAlbHttpRouter(GetAlbHttpRouterArgs.builder()\n            .httpRouterId(\"my-http-router-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  tf-router:\n    fn::invoke:\n      Function: yandex:getAlbHttpRouter\n      Arguments:\n        httpRouterId: my-http-router-id\n```\n\nThis data source is used to define [Application Load Balancer HTTP Router] that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlbHttpRouter.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the HTTP Router.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "httpRouterId": {
                        "type": "string",
                        "description": "HTTP Router ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- Name of the HTTP Router.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAlbHttpRouter.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of this HTTP Router.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the HTTP Router.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "httpRouterId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this HTTP Router.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "routeOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getAlbHttpRouterRouteOption:getAlbHttpRouterRouteOption"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "folderId",
                    "httpRouterId",
                    "id",
                    "labels",
                    "name",
                    "routeOptions"
                ]
            }
        },
        "yandex:index/getAlbLoadBalancer:getAlbLoadBalancer": {
            "description": "Get information about a Yandex Application Load Balancer. For more information, see\n[Yandex.Cloud Application Load Balancer](https://cloud.yandex.com/en/docs/application-load-balancer/quickstart).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst tf_alb_data = pulumi.output(yandex.getAlbLoadBalancer({\n    loadBalancerId: \"my-alb-id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ntf_alb_data = yandex.get_alb_load_balancer(load_balancer_id=\"my-alb-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tf_alb_data = Yandex.GetAlbLoadBalancer.Invoke(new()\n    {\n        LoadBalancerId = \"my-alb-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupAlbLoadBalancer(ctx, \u0026GetAlbLoadBalancerArgs{\n\t\t\tLoadBalancerId: pulumi.StringRef(\"my-alb-id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetAlbLoadBalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var tf-alb-data = YandexFunctions.getAlbLoadBalancer(GetAlbLoadBalancerArgs.builder()\n            .loadBalancerId(\"my-alb-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  tf-alb-data:\n    fn::invoke:\n      Function: yandex:getAlbLoadBalancer\n      Arguments:\n        loadBalancerId: my-alb-id\n```\n\nThis data source is used to define [Application Load Balancer] that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlbLoadBalancer.\n",
                "properties": {
                    "loadBalancerId": {
                        "type": "string",
                        "description": "Load Balancer ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Load Balancer.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerTimeouts:getAlbLoadBalancerTimeouts"
                    }
                },
                "type": "object",
                "required": [
                    "timeouts"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlbLoadBalancer.\n",
                "properties": {
                    "allocationPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getAlbLoadBalancerAllocationPolicy:getAlbLoadBalancerAllocationPolicy"
                        },
                        "description": "Allocation zones for the Load Balancer instance. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The Load Balancer creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of the Load Balancer.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder to which the resource belongs. If omitted, the provider folder is used.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this Load Balancer. A list of key/value pairs.\n"
                    },
                    "listeners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getAlbLoadBalancerListener:getAlbLoadBalancerListener"
                        },
                        "description": "List of listeners for the Load Balancer. The structure is documented below.\n"
                    },
                    "loadBalancerId": {
                        "type": "string"
                    },
                    "logGroupId": {
                        "type": "string",
                        "description": "Cloud log group used by the Load Balancer to store access logs.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of SNI match.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network that the Load Balancer is located at.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "ID of the region that the Load Balancer is located at.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of ID's of security groups attached to the Load Balancer.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Load Balancer.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/getAlbLoadBalancerTimeouts:getAlbLoadBalancerTimeouts"
                    }
                },
                "type": "object",
                "required": [
                    "allocationPolicies",
                    "createdAt",
                    "description",
                    "folderId",
                    "id",
                    "labels",
                    "listeners",
                    "loadBalancerId",
                    "logGroupId",
                    "name",
                    "networkId",
                    "regionId",
                    "securityGroupIds",
                    "status",
                    "timeouts"
                ]
            }
        },
        "yandex:index/getAlbTargetGroup:getAlbTargetGroup": {
            "description": "Get information about a Yandex Application Load Balancer target group. For more information, see\n[Yandex.Cloud Application Load Balancer](https://cloud.yandex.com/en/docs/application-load-balancer/quickstart).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getAlbTargetGroup({\n    targetGroupId: \"my-target-group-id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_alb_target_group(target_group_id=\"my-target-group-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetAlbTargetGroup.Invoke(new()\n    {\n        TargetGroupId = \"my-target-group-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupAlbTargetGroup(ctx, \u0026GetAlbTargetGroupArgs{\n\t\t\tTargetGroupId: pulumi.StringRef(\"my-target-group-id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetAlbTargetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getAlbTargetGroup(GetAlbTargetGroupArgs.builder()\n            .targetGroupId(\"my-target-group-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getAlbTargetGroup\n      Arguments:\n        targetGroupId: my-target-group-id\n```\n\nThis data source is used to define [Application Load Balancer Target Groups] that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlbTargetGroup.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the target group.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- Name of the Target Group.\n"
                    },
                    "targetGroupId": {
                        "type": "string",
                        "description": "Target Group ID.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAlbTargetGroup.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of this target group.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the target group.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this target group.\n* `target.0.ip_address` - IP address of the target.\n* `target.0.subnet_id` - ID of the subnet that targets are connected to.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "targetGroupId": {
                        "type": "string"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getAlbTargetGroupTarget:getAlbTargetGroupTarget"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "folderId",
                    "id",
                    "labels",
                    "name",
                    "targets",
                    "targetGroupId"
                ]
            }
        },
        "yandex:index/getAlbVirtualHost:getAlbVirtualHost": {
            "description": "Get information about a Yandex ALB Virtual Host. For more information, see\n[Yandex.Cloud Application Load Balancer](https://cloud.yandex.com/en/docs/application-load-balancer/quickstart).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst my-vh-data = yandex.getAlbVirtualHost({\n    name: yandex_alb_virtual_host[\"my-vh\"].name,\n    httpRouterId: yandex_alb_virtual_host[\"my-router\"].id,\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_vh_data = yandex.get_alb_virtual_host(name=yandex_alb_virtual_host[\"my-vh\"][\"name\"],\n    http_router_id=yandex_alb_virtual_host[\"my-router\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_vh_data = Yandex.GetAlbVirtualHost.Invoke(new()\n    {\n        Name = yandex_alb_virtual_host.My_vh.Name,\n        HttpRouterId = yandex_alb_virtual_host.My_router.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupAlbVirtualHost(ctx, \u0026GetAlbVirtualHostArgs{\n\t\t\tName:         pulumi.StringRef(yandex_alb_virtual_host.MyVh.Name),\n\t\t\tHttpRouterId: pulumi.StringRef(yandex_alb_virtual_host.MyRouter.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetAlbVirtualHostArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-vh-data = YandexFunctions.getAlbVirtualHost(GetAlbVirtualHostArgs.builder()\n            .name(yandex_alb_virtual_host.my-vh().name())\n            .httpRouterId(yandex_alb_virtual_host.my-router().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-vh-data:\n    fn::invoke:\n      Function: yandex:getAlbVirtualHost\n      Arguments:\n        name: ${yandex_alb_virtual_host\"my-vh\"[%!s(MISSING)].name}\n        httpRouterId: ${yandex_alb_virtual_host\"my-router\"[%!s(MISSING)].id}\n```\n\nThis data source is used to define [Application Load Balancer Virtual Host] that can be used by other resources.\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAlbVirtualHost.\n",
                "properties": {
                    "httpRouterId": {
                        "type": "string",
                        "description": "HTTP Router that the resource belongs to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Virtual Host.\n"
                    },
                    "virtualHostId": {
                        "type": "string",
                        "description": "The ID of a specific Virtual Host. Virtual Host ID is concatenation of HTTP Router ID\nand Virtual Host name with `/` symbol between them. For Example, \"http_router_id/vhost_name\".\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAlbVirtualHost.\n",
                "properties": {
                    "authorities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of domains (host/authority header) that will be matched to this virtual host. Wildcard hosts are\nsupported in the form of '*.foo.com' or '*-bar.foo.com'. If not specified, all domains will be matched.\n"
                    },
                    "httpRouterId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "modifyRequestHeaders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getAlbVirtualHostModifyRequestHeader:getAlbVirtualHostModifyRequestHeader"
                        },
                        "description": "Apply the following modifications to the request headers. The structure is documented\nbelow.\n"
                    },
                    "modifyResponseHeaders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getAlbVirtualHostModifyResponseHeader:getAlbVirtualHostModifyResponseHeader"
                        },
                        "description": "Apply the following modifications to the response headers. The structure is documented\nbelow.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the route.\n"
                    },
                    "routeOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getAlbVirtualHostRouteOption:getAlbVirtualHostRouteOption"
                        }
                    },
                    "routes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getAlbVirtualHostRoute:getAlbVirtualHostRoute"
                        },
                        "description": "A Route resource. Routes are matched *in-order*. Be careful when adding them to the end. For instance,\nhaving http '/' match first makes all other routes unused. The structure is documented below.\n"
                    },
                    "virtualHostId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "authorities",
                    "httpRouterId",
                    "id",
                    "modifyRequestHeaders",
                    "modifyResponseHeaders",
                    "name",
                    "routes",
                    "routeOptions",
                    "virtualHostId"
                ]
            }
        },
        "yandex:index/getApiGateway:getApiGateway": {
            "description": "Get information about a Yandex Cloud API Gateway. For more information, see the official documentation \n[Yandex Cloud API Gateway](https://cloud.yandex.com/docs/api-gateway/).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst my_api_gateway = pulumi.output(yandex.getApiGateway({\n    name: \"my-api-gateway\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_api_gateway = yandex.get_api_gateway(name=\"my-api-gateway\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_api_gateway = Yandex.GetApiGateway.Invoke(new()\n    {\n        Name = \"my-api-gateway\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupApiGateway(ctx, \u0026GetApiGatewayArgs{\n\t\t\tName: pulumi.StringRef(\"my-api-gateway\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetApiGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-api-gateway = YandexFunctions.getApiGateway(GetApiGatewayArgs.builder()\n            .name(\"my-api-gateway\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-api-gateway:\n    fn::invoke:\n      Function: yandex:getApiGateway\n      Arguments:\n        name: my-api-gateway\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getApiGateway.\n",
                "properties": {
                    "apiGatewayId": {
                        "type": "string",
                        "description": "Yandex Cloud API Gateway id used to define api gateway.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID for the Yandex Cloud API Gateway.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Yandex Cloud API Gateway name used to define api gateway.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getApiGateway.\n",
                "properties": {
                    "apiGatewayId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the Yandex Cloud API Gateway.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Yandex Cloud API Gateway.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Default domain for the Yandex API Gateway.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Yandex Cloud API Gateway.\n"
                    },
                    "logGroupId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Yandex API Gateway.\n"
                    },
                    "userDomains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Set of user domains attached to Yandex API Gateway.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "domain",
                    "id",
                    "labels",
                    "logGroupId",
                    "status",
                    "userDomains"
                ]
            }
        },
        "yandex:index/getCdnOriginGroup:getCdnOriginGroup": {
            "description": "Get information about a Yandex CDN Origin Group. For more information, see\n[the official documentation](https://cloud.yandex.ru/docs/cdn/concepts/origins).\n\n\u003e **_NOTE:_**  CDN provider must be activated prior usage of CDN resources, either via UI console or via yc cli command: ```yc cdn provider activate --folder-id \u003cfolder-id\u003e --type gcore```\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myGroup = pulumi.output(yandex.getCdnOriginGroup({\n    originGroupId: Number.parseFloat(\"some_instance_id\"),\n}));\n\nexport const originGroupName = myGroup.name!;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_group = yandex.get_cdn_origin_group(origin_group_id=\"some_instance_id\")\npulumi.export(\"originGroupName\", my_group.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myGroup = Yandex.GetCdnOriginGroup.Invoke(new()\n    {\n        OriginGroupId = \"some_instance_id\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"originGroupName\"] = myGroup.Apply(getCdnOriginGroupResult =\u003e getCdnOriginGroupResult.Name),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyGroup, err := yandex.LookupCdnOriginGroup(ctx, \u0026GetCdnOriginGroupArgs{\n\t\t\tOriginGroupId: pulumi.Float64Ref(\"some_instance_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"originGroupName\", myGroup.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetCdnOriginGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myGroup = YandexFunctions.getCdnOriginGroup(GetCdnOriginGroupArgs.builder()\n            .originGroupId(\"some_instance_id\")\n            .build());\n\n        ctx.export(\"originGroupName\", myGroup.applyValue(getCdnOriginGroupResult -\u003e getCdnOriginGroupResult.name()));\n    }\n}\n```\n```yaml\nvariables:\n  myGroup:\n    fn::invoke:\n      Function: yandex:getCdnOriginGroup\n      Arguments:\n        originGroupId: some_instance_id\noutputs:\n  originGroupName: ${myGroup.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCdnOriginGroup.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the origin group.\n"
                    },
                    "originGroupId": {
                        "type": "number",
                        "description": "The ID of a specific origin group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCdnOriginGroup.\n",
                "properties": {
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "originGroupId": {
                        "type": "number"
                    },
                    "origins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getCdnOriginGroupOrigin:getCdnOriginGroupOrigin"
                        }
                    },
                    "useNext": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "folderId",
                    "id",
                    "name",
                    "origins",
                    "originGroupId",
                    "useNext"
                ]
            }
        },
        "yandex:index/getCdnResource:getCdnResource": {
            "description": "Get information about a Yandex CDN Resource. For more information, see\n[the official documentation](https://cloud.yandex.ru/docs/cdn/concepts/resource).\n\n\u003e **_NOTE:_**  CDN provider must be activated prior usage of CDN resources, either via UI console or via yc cli command: ```yc cdn provider activate --folder-id \u003cfolder-id\u003e --type gcore```\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myResource = pulumi.output(yandex.getCdnResource({\n    resourceId: \"some resource id\",\n}));\n\nexport const resourceCname = myResource.cname!;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_resource = yandex.get_cdn_resource(resource_id=\"some resource id\")\npulumi.export(\"resourceCname\", my_resource.cname)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myResource = Yandex.GetCdnResource.Invoke(new()\n    {\n        ResourceId = \"some resource id\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"resourceCname\"] = myResource.Apply(getCdnResourceResult =\u003e getCdnResourceResult.Cname),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyResource, err := yandex.LookupCdnResource(ctx, \u0026GetCdnResourceArgs{\n\t\t\tResourceId: pulumi.StringRef(\"some resource id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"resourceCname\", myResource.Cname)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetCdnResourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myResource = YandexFunctions.getCdnResource(GetCdnResourceArgs.builder()\n            .resourceId(\"some resource id\")\n            .build());\n\n        ctx.export(\"resourceCname\", myResource.applyValue(getCdnResourceResult -\u003e getCdnResourceResult.cname()));\n    }\n}\n```\n```yaml\nvariables:\n  myResource:\n    fn::invoke:\n      Function: yandex:getCdnResource\n      Arguments:\n        resourceId: some resource id\noutputs:\n  resourceCname: ${myResource.cname}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCdnResource.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "Flag to create Resource either in active or disabled state. True - the content from CDN is available to clients.\n"
                    },
                    "cname": {
                        "type": "string",
                        "description": "CDN endpoint CNAME, must be unique among resources.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "originGroupId": {
                        "type": "number"
                    },
                    "originGroupName": {
                        "type": "string"
                    },
                    "originProtocol": {
                        "type": "string"
                    },
                    "resourceId": {
                        "type": "string"
                    },
                    "secondaryHostnames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "list of secondary hostname strings.\n"
                    },
                    "sslCertificate": {
                        "$ref": "#/types/yandex:index/getCdnResourceSslCertificate:getCdnResourceSslCertificate",
                        "description": "SSL certificate of CDN resource.\n"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCdnResource.\n",
                "properties": {
                    "active": {
                        "type": "boolean"
                    },
                    "cname": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "options": {
                        "$ref": "#/types/yandex:index/getCdnResourceOptions:getCdnResourceOptions"
                    },
                    "originGroupId": {
                        "type": "number"
                    },
                    "originGroupName": {
                        "type": "string"
                    },
                    "originProtocol": {
                        "type": "string"
                    },
                    "resourceId": {
                        "type": "string"
                    },
                    "secondaryHostnames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sslCertificate": {
                        "$ref": "#/types/yandex:index/getCdnResourceSslCertificate:getCdnResourceSslCertificate"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cname",
                    "createdAt",
                    "folderId",
                    "id",
                    "options",
                    "resourceId",
                    "updatedAt"
                ]
            }
        },
        "yandex:index/getClientConfig:getClientConfig": {
            "description": "Get attributes used by provider to configure client connection.\n",
            "outputs": {
                "description": "A collection of values returned by getClientConfig.\n",
                "properties": {
                    "cloudId": {
                        "type": "string",
                        "description": "The ID of the cloud that the provider is connecting to.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder in which we operate.\n"
                    },
                    "iamToken": {
                        "type": "string",
                        "description": "A short-lived token that can be used for authentication in a Kubernetes cluster.\n",
                        "secret": true
                    },
                    "id": {
                        "type": "string"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The default availability zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudId",
                    "folderId",
                    "iamToken",
                    "id",
                    "zone"
                ]
            }
        },
        "yandex:index/getComputeDisk:getComputeDisk": {
            "description": "Get information about a Yandex Compute disk. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/compute/concepts/disk).\n",
            "inputs": {
                "description": "A collection of arguments for invoking getComputeDisk.\n",
                "properties": {
                    "diskId": {
                        "type": "string",
                        "description": "The ID of a specific disk.\n"
                    },
                    "diskPlacementPolicy": {
                        "$ref": "#/types/yandex:index/getComputeDiskDiskPlacementPolicy:getComputeDiskDiskPlacementPolicy"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the disk belongs to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the disk.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getComputeDisk.\n",
                "properties": {
                    "blockSize": {
                        "type": "number",
                        "description": "The block size of the disk in bytes.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Disk creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional description of this disk.\n"
                    },
                    "diskId": {
                        "type": "string"
                    },
                    "diskPlacementPolicy": {
                        "$ref": "#/types/yandex:index/getComputeDiskDiskPlacementPolicy:getComputeDiskDiskPlacementPolicy"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the disk belongs to.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "ID of the source image that was used to create this disk.\n"
                    },
                    "instanceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of instances to which this disk is attached.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of labels applied to this disk.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "productIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "License IDs that indicate which licenses are attached to this disk.\n"
                    },
                    "size": {
                        "type": "number",
                        "description": "Size of the disk, specified in Gb.\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "Source snapshot that was used to create this disk.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the disk.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the disk.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "ID of the zone where the disk resides.\n"
                    }
                },
                "type": "object",
                "required": [
                    "blockSize",
                    "createdAt",
                    "description",
                    "diskId",
                    "folderId",
                    "id",
                    "imageId",
                    "instanceIds",
                    "labels",
                    "name",
                    "productIds",
                    "size",
                    "snapshotId",
                    "status",
                    "type",
                    "zone"
                ]
            }
        },
        "yandex:index/getComputeDiskPlacementGroup:getComputeDiskPlacementGroup": {
            "description": "Get information about a Yandex Compute Disk Placement group. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/compute/concepts/disk#nr-disks).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myGroup = pulumi.output(yandex.getComputeDiskPlacementGroup({\n    groupId: \"some_group_id\",\n}));\n\nexport const placementGroupName = myGroup.name!;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_group = yandex.get_compute_disk_placement_group(group_id=\"some_group_id\")\npulumi.export(\"placementGroupName\", my_group.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myGroup = Yandex.GetComputeDiskPlacementGroup.Invoke(new()\n    {\n        GroupId = \"some_group_id\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"placementGroupName\"] = myGroup.Apply(getComputeDiskPlacementGroupResult =\u003e getComputeDiskPlacementGroupResult.Name),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyGroup, err := yandex.LookupComputeDiskPlacementGroup(ctx, \u0026GetComputeDiskPlacementGroupArgs{\n\t\t\tGroupId: pulumi.StringRef(\"some_group_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"placementGroupName\", myGroup.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetComputeDiskPlacementGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myGroup = YandexFunctions.getComputeDiskPlacementGroup(GetComputeDiskPlacementGroupArgs.builder()\n            .groupId(\"some_group_id\")\n            .build());\n\n        ctx.export(\"placementGroupName\", myGroup.applyValue(getComputeDiskPlacementGroupResult -\u003e getComputeDiskPlacementGroupResult.name()));\n    }\n}\n```\n```yaml\nvariables:\n  myGroup:\n    fn::invoke:\n      Function: yandex:getComputeDiskPlacementGroup\n      Arguments:\n        groupId: some_group_id\noutputs:\n  placementGroupName: ${myGroup.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getComputeDiskPlacementGroup.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the Disk Placement Group.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The ID of a specific group.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the Disk Placement Group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the group.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "ID of the zone where the Disk Placement Group resides.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getComputeDiskPlacementGroup.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The creation timestamp of the Disk Placement Group.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Disk Placement Group.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the Disk Placement Group.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Disk Placement Group.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "ID of the zone where the Disk Placement Group resides.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "folderId",
                    "groupId",
                    "id",
                    "status"
                ]
            }
        },
        "yandex:index/getComputeImage:getComputeImage": {
            "inputs": {
                "description": "A collection of arguments for invoking getComputeImage.\n",
                "properties": {
                    "family": {
                        "type": "string",
                        "description": "The family name of an image. Used to search the latest image in a family.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "imageId": {
                        "type": "string",
                        "description": "The ID of a specific image.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the image.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getComputeImage.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Image creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of this image.\n"
                    },
                    "family": {
                        "type": "string",
                        "description": "The OS family name of the image.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "imageId": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of labels applied to this image.\n"
                    },
                    "minDiskSize": {
                        "type": "number",
                        "description": "Minimum size of the disk which is created from this image.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "osType": {
                        "type": "string",
                        "description": "Operating system type that the image contains.\n"
                    },
                    "pooled": {
                        "type": "boolean",
                        "description": "Optimize the image to create a disk.\n"
                    },
                    "productIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "License IDs that indicate which licenses are attached to this image.\n"
                    },
                    "size": {
                        "type": "number",
                        "description": "The size of the image, specified in Gb.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the image.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "family",
                    "folderId",
                    "id",
                    "imageId",
                    "labels",
                    "minDiskSize",
                    "name",
                    "osType",
                    "pooled",
                    "productIds",
                    "size",
                    "status"
                ]
            }
        },
        "yandex:index/getComputeInstance:getComputeInstance": {
            "description": "Get information about a Yandex Compute instance. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/compute/concepts/vm).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myInstance = pulumi.output(yandex.getComputeInstance({\n    instanceId: \"some_instance_id\",\n}));\n\nexport const instanceExternalIp = myInstance.networkInterfaces[0].natIpAddress;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_instance = yandex.get_compute_instance(instance_id=\"some_instance_id\")\npulumi.export(\"instanceExternalIp\", my_instance.network_interfaces[0].nat_ip_address)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myInstance = Yandex.GetComputeInstance.Invoke(new()\n    {\n        InstanceId = \"some_instance_id\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"instanceExternalIp\"] = myInstance.Apply(getComputeInstanceResult =\u003e getComputeInstanceResult.NetworkInterfaces[0]?.NatIpAddress),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyInstance, err := yandex.LookupComputeInstance(ctx, \u0026GetComputeInstanceArgs{\n\t\t\tInstanceId: pulumi.StringRef(\"some_instance_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"instanceExternalIp\", myInstance.NetworkInterfaces[0].NatIpAddress)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetComputeInstanceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myInstance = YandexFunctions.getComputeInstance(GetComputeInstanceArgs.builder()\n            .instanceId(\"some_instance_id\")\n            .build());\n\n        ctx.export(\"instanceExternalIp\", myInstance.applyValue(getComputeInstanceResult -\u003e getComputeInstanceResult.networkInterfaces()[0].natIpAddress()));\n    }\n}\n```\n```yaml\nvariables:\n  myInstance:\n    fn::invoke:\n      Function: yandex:getComputeInstance\n      Arguments:\n        instanceId: some_instance_id\noutputs:\n  instanceExternalIp: ${myInstance.networkInterfaces[0].natIpAddress}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getComputeInstance.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "instanceId": {
                        "type": "string",
                        "description": "The ID of a specific instance.\n"
                    },
                    "localDisks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceLocalDisk:getComputeInstanceLocalDisk"
                        },
                        "description": "List of local disks that are attached to the instance. Structure is documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the instance.\n"
                    },
                    "placementPolicy": {
                        "$ref": "#/types/yandex:index/getComputeInstancePlacementPolicy:getComputeInstancePlacementPolicy",
                        "description": "The placement policy configuration. The structure is documented below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getComputeInstance.\n",
                "properties": {
                    "bootDisks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceBootDisk:getComputeInstanceBootDisk"
                        },
                        "description": "The boot disk for the instance. Structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Instance creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the boot disk.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "DNS record FQDN.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceId": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the instance.\n"
                    },
                    "localDisks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceLocalDisk:getComputeInstanceLocalDisk"
                        },
                        "description": "List of local disks that are attached to the instance. Structure is documented below.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Metadata key/value pairs to make available from\nwithin the instance.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the boot disk.\n"
                    },
                    "networkAccelerationType": {
                        "type": "string",
                        "description": "Type of network acceleration. The default is `standard`. Values: `standard`, `software_accelerated`\n"
                    },
                    "networkInterfaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceNetworkInterface:getComputeInstanceNetworkInterface"
                        },
                        "description": "The networks attached to the instance. Structure is documented below.\n* `network_interface.0.ip_address` - An internal IP address of the instance, either manually or dynamically assigned.\n* `network_interface.0.nat_ip_address` - An assigned external IP address if the instance has NAT enabled.\n"
                    },
                    "placementPolicy": {
                        "$ref": "#/types/yandex:index/getComputeInstancePlacementPolicy:getComputeInstancePlacementPolicy",
                        "description": "The placement policy configuration. The structure is documented below.\n"
                    },
                    "platformId": {
                        "type": "string",
                        "description": "Type of virtual machine to create. Default is 'standard-v1'.\n"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceResource:getComputeInstanceResource"
                        }
                    },
                    "schedulingPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceSchedulingPolicy:getComputeInstanceSchedulingPolicy"
                        },
                        "description": "Scheduling policy configuration. The structure is documented below.\n"
                    },
                    "secondaryDisks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceSecondaryDisk:getComputeInstanceSecondaryDisk"
                        },
                        "description": "List of secondary disks attached to the instance. Structure is documented below.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "ID of the service account authorized for this instance.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the instance.\n* `resources.0.memory` - Memory size allocated for the instance.\n* `resources.0.cores` - Number of CPU cores allocated for the instance.\n* `resources.0.core_fraction` - Baseline performance for a core, set as a percent.\n* `resources.0.gpus` - Number of GPU cores allocated for the instance.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "Availability zone where the instance resides.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bootDisks",
                    "createdAt",
                    "description",
                    "folderId",
                    "fqdn",
                    "id",
                    "instanceId",
                    "labels",
                    "metadata",
                    "name",
                    "networkAccelerationType",
                    "networkInterfaces",
                    "platformId",
                    "resources",
                    "schedulingPolicies",
                    "secondaryDisks",
                    "serviceAccountId",
                    "status",
                    "zone"
                ]
            }
        },
        "yandex:index/getComputeInstanceGroup:getComputeInstanceGroup": {
            "description": "Get information about a Yandex Compute instance group.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myGroup = pulumi.output(yandex.getComputeInstanceGroup({\n    instanceGroupId: \"some_instance_group_id\",\n}));\n\nexport const instanceExternalIp = myGroup.instances[*].networkInterface.0.natIpAddress;\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getComputeInstanceGroup.\n",
                "properties": {
                    "instanceGroupId": {
                        "type": "string",
                        "description": "The ID of a specific instance group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "instanceGroupId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getComputeInstanceGroup.\n",
                "properties": {
                    "allocationPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceGroupAllocationPolicy:getComputeInstanceGroupAllocationPolicy"
                        },
                        "description": "The allocation policy of the instance group by zone and region. The structure is documented below.\n"
                    },
                    "applicationBalancerStates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceGroupApplicationBalancerState:getComputeInstanceGroupApplicationBalancerState"
                        }
                    },
                    "applicationLoadBalancers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceGroupApplicationLoadBalancer:getComputeInstanceGroupApplicationLoadBalancer"
                        },
                        "description": "Application Load balancing (L7) specifications. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The instance group creation timestamp.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Flag that protects the instance group from accidental deletion.\n"
                    },
                    "deployPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceGroupDeployPolicy:getComputeInstanceGroupDeployPolicy"
                        },
                        "description": "The deployment policy of the instance group. The structure is documented below.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the boot disk.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID of custom metric in Yandex Monitoring that should be used for scaling.\n"
                    },
                    "healthChecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceGroupHealthCheck:getComputeInstanceGroupHealthCheck"
                        },
                        "description": "Health check specification. The structure is documented below.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceGroupId": {
                        "type": "string"
                    },
                    "instanceTemplates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceGroupInstanceTemplate:getComputeInstanceGroupInstanceTemplate"
                        },
                        "description": "The instance template that the instance group belongs to. The structure is documented below.\n"
                    },
                    "instances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceGroupInstance:getComputeInstanceGroupInstance"
                        },
                        "description": "A list of instances in the specified instance group. The structure is documented below.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of labels applied to this instance.\n* `resources.0.memory` - The memory size allocated to the instance.\n* `resources.0.cores` - Number of CPU cores allocated to the instance.\n* `resources.0.core_fraction` - Baseline core performance as a percent.\n* `resources.0.gpus` - Number of GPU cores allocated to the instance.\n"
                    },
                    "loadBalancerStates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceGroupLoadBalancerState:getComputeInstanceGroupLoadBalancerState"
                        },
                        "description": "Information about which entities can be attached to this load balancer. The structure is documented below.\n"
                    },
                    "loadBalancers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceGroupLoadBalancer:getComputeInstanceGroupLoadBalancer"
                        },
                        "description": "Load balancing specification. The structure is documented below.\n"
                    },
                    "maxCheckingHealthDuration": {
                        "type": "number",
                        "description": "Timeout for waiting for the VM to become healthy. If the timeout is exceeded, the VM will be turned off based on the deployment policy. Specified in seconds.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the managed instance.\n"
                    },
                    "scalePolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getComputeInstanceGroupScalePolicy:getComputeInstanceGroupScalePolicy"
                        },
                        "description": "The scaling policy of the instance group. The structure is documented below.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "The service account ID for the instance.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the instance.\n"
                    },
                    "variables": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value  variables pairs to assign to the instance group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allocationPolicies",
                    "applicationBalancerStates",
                    "applicationLoadBalancers",
                    "createdAt",
                    "deletionProtection",
                    "deployPolicies",
                    "description",
                    "folderId",
                    "healthChecks",
                    "id",
                    "instanceGroupId",
                    "instanceTemplates",
                    "instances",
                    "labels",
                    "loadBalancers",
                    "loadBalancerStates",
                    "maxCheckingHealthDuration",
                    "name",
                    "scalePolicies",
                    "serviceAccountId",
                    "status",
                    "variables"
                ]
            }
        },
        "yandex:index/getComputePlacementGroup:getComputePlacementGroup": {
            "description": "Get information about a Yandex Compute Placement group. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/compute/concepts/placement-groups).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myGroup = pulumi.output(yandex.getComputePlacementGroup({\n    groupId: \"some_group_id\",\n}));\n\nexport const placementGroupName = myGroup.name!;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_group = yandex.get_compute_placement_group(group_id=\"some_group_id\")\npulumi.export(\"placementGroupName\", my_group.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myGroup = Yandex.GetComputePlacementGroup.Invoke(new()\n    {\n        GroupId = \"some_group_id\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"placementGroupName\"] = myGroup.Apply(getComputePlacementGroupResult =\u003e getComputePlacementGroupResult.Name),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyGroup, err := yandex.LookupComputePlacementGroup(ctx, \u0026GetComputePlacementGroupArgs{\n\t\t\tGroupId: pulumi.StringRef(\"some_group_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"placementGroupName\", myGroup.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetComputePlacementGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myGroup = YandexFunctions.getComputePlacementGroup(GetComputePlacementGroupArgs.builder()\n            .groupId(\"some_group_id\")\n            .build());\n\n        ctx.export(\"placementGroupName\", myGroup.applyValue(getComputePlacementGroupResult -\u003e getComputePlacementGroupResult.name()));\n    }\n}\n```\n```yaml\nvariables:\n  myGroup:\n    fn::invoke:\n      Function: yandex:getComputePlacementGroup\n      Arguments:\n        groupId: some_group_id\noutputs:\n  placementGroupName: ${myGroup.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getComputePlacementGroup.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the group.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The ID of a specific group.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getComputePlacementGroup.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Placement group creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the group.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the group.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "folderId",
                    "groupId",
                    "id"
                ]
            }
        },
        "yandex:index/getComputeSnapshot:getComputeSnapshot": {
            "description": "Get information about a Yandex Compute snapshot. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/compute/concepts/snapshot).\n",
            "inputs": {
                "description": "A collection of arguments for invoking getComputeSnapshot.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the snapshot belongs to.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the snapshot.\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "The ID of a specific snapshot.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getComputeSnapshot.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Snapshot creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "An optional description of this snapshot.\n"
                    },
                    "diskSize": {
                        "type": "number",
                        "description": "Minimum required size of the disk which is created from this snapshot.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the snapshot belongs to.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of labels applied to this snapshot.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "productIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "License IDs that indicate which licenses are attached to this snapshot.\n"
                    },
                    "snapshotId": {
                        "type": "string"
                    },
                    "sourceDiskId": {
                        "type": "string",
                        "description": "ID of the source disk.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the snapshot.\n"
                    },
                    "storageSize": {
                        "type": "number",
                        "description": "The size of the snapshot, specified in Gb.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "diskSize",
                    "folderId",
                    "id",
                    "labels",
                    "name",
                    "productIds",
                    "snapshotId",
                    "sourceDiskId",
                    "status",
                    "storageSize"
                ]
            }
        },
        "yandex:index/getContainerRegistry:getContainerRegistry": {
            "description": "Get information about a Yandex Container Registry. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/container-registry/concepts/registry)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst source = pulumi.output(yandex.getContainerRegistry({\n    registryId: \"some_registry_id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nsource = yandex.get_container_registry(registry_id=\"some_registry_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var source = Yandex.GetContainerRegistry.Invoke(new()\n    {\n        RegistryId = \"some_registry_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupContainerRegistry(ctx, \u0026GetContainerRegistryArgs{\n\t\t\tRegistryId: pulumi.StringRef(\"some_registry_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetContainerRegistryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var source = YandexFunctions.getContainerRegistry(GetContainerRegistryArgs.builder()\n            .registryId(\"some_registry_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  source:\n    fn::invoke:\n      Function: yandex:getContainerRegistry\n      Arguments:\n        registryId: some_registry_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getContainerRegistry.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this registry.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the registry.\n"
                    },
                    "registryId": {
                        "type": "string",
                        "description": "The ID of a specific registry.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getContainerRegistry.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of this registry.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this registry.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "registryId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the registry.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "folderId",
                    "id",
                    "name",
                    "registryId",
                    "status"
                ]
            }
        },
        "yandex:index/getContainerRepository:getContainerRepository": {
            "description": "Get information about a Yandex Container Repository. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/container-registry/concepts/repository)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst repo_1 = pulumi.output(yandex.getContainerRepository({\n    name: \"some_repository_name\",\n}));\nconst repo_2 = pulumi.output(yandex.getContainerRepository({\n    repositoryId: \"some_repository_id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nrepo_1 = yandex.get_container_repository(name=\"some_repository_name\")\nrepo_2 = yandex.get_container_repository(repository_id=\"some_repository_id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var repo_1 = Yandex.GetContainerRepository.Invoke(new()\n    {\n        Name = \"some_repository_name\",\n    });\n\n    var repo_2 = Yandex.GetContainerRepository.Invoke(new()\n    {\n        RepositoryId = \"some_repository_id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupContainerRepository(ctx, \u0026GetContainerRepositoryArgs{\n\t\t\tName: pulumi.StringRef(\"some_repository_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.LookupContainerRepository(ctx, \u0026GetContainerRepositoryArgs{\n\t\t\tRepositoryId: pulumi.StringRef(\"some_repository_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetContainerRepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var repo-1 = YandexFunctions.getContainerRepository(GetContainerRepositoryArgs.builder()\n            .name(\"some_repository_name\")\n            .build());\n\n        final var repo-2 = YandexFunctions.getContainerRepository(GetContainerRepositoryArgs.builder()\n            .repositoryId(\"some_repository_id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  repo-1:\n    fn::invoke:\n      Function: yandex:getContainerRepository\n      Arguments:\n        name: some_repository_name\n  repo-2:\n    fn::invoke:\n      Function: yandex:getContainerRepository\n      Arguments:\n        repositoryId: some_repository_id\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getContainerRepository.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the repository. The name of the repository should start with id of a container registry and match the name of the images in the repository.\n"
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "The ID of a specific repository.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getContainerRepository.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "repositoryId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "repositoryId"
                ]
            }
        },
        "yandex:index/getContainerRepositoryLifecyclePolicy:getContainerRepositoryLifecyclePolicy": {
            "description": "Get information about a Yandex Container Repository. For more information, see\n[the official documentation](https://cloud.yandex.com/en-ru/docs/container-registry/concepts/lifecycle-policy)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myLifecyclePolicyById = yandex.getContainerRepositoryLifecyclePolicy({\n    lifecyclePolicyId: yandex_container_repository_lifecycle_policy.my_lifecycle_policy.id,\n});\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_lifecycle_policy_by_id = yandex.get_container_repository_lifecycle_policy(lifecycle_policy_id=yandex_container_repository_lifecycle_policy[\"my_lifecycle_policy\"][\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myLifecyclePolicyById = Yandex.GetContainerRepositoryLifecyclePolicy.Invoke(new()\n    {\n        LifecyclePolicyId = yandex_container_repository_lifecycle_policy.My_lifecycle_policy.Id,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupContainerRepositoryLifecyclePolicy(ctx, \u0026GetContainerRepositoryLifecyclePolicyArgs{\n\t\t\tLifecyclePolicyId: pulumi.StringRef(yandex_container_repository_lifecycle_policy.My_lifecycle_policy.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetContainerRepositoryLifecyclePolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myLifecyclePolicyById = YandexFunctions.getContainerRepositoryLifecyclePolicy(GetContainerRepositoryLifecyclePolicyArgs.builder()\n            .lifecyclePolicyId(yandex_container_repository_lifecycle_policy.my_lifecycle_policy().id())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myLifecyclePolicyById:\n    fn::invoke:\n      Function: yandex:getContainerRepositoryLifecyclePolicy\n      Arguments:\n        lifecyclePolicyId: ${yandex_container_repository_lifecycle_policy.my_lifecycle_policy.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getContainerRepositoryLifecyclePolicy.\n",
                "properties": {
                    "lifecyclePolicyId": {
                        "type": "string",
                        "description": "The ID of a specific Lifecycle Policy.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of Lifecycle Policy.\n"
                    },
                    "repositoryId": {
                        "type": "string",
                        "description": "The ID of a repository which Lifecycle Policy belongs to.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/getContainerRepositoryLifecyclePolicyTimeouts:getContainerRepositoryLifecyclePolicyTimeouts"
                    }
                },
                "type": "object",
                "required": [
                    "timeouts"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getContainerRepositoryLifecyclePolicy.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the lifecycle policy.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "lifecyclePolicyId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "repositoryId": {
                        "type": "string"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getContainerRepositoryLifecyclePolicyRule:getContainerRepositoryLifecyclePolicyRule"
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of lifecycle policy.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/getContainerRepositoryLifecyclePolicyTimeouts:getContainerRepositoryLifecyclePolicyTimeouts"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "lifecyclePolicyId",
                    "name",
                    "repositoryId",
                    "rules",
                    "status",
                    "timeouts"
                ]
            }
        },
        "yandex:index/getDataprocCluster:getDataprocCluster": {
            "description": "Get information about a Yandex Data Proc cluster. For more information, see [the official documentation](https://cloud.yandex.com/docs/data-proc/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getDataprocCluster({\n    name: \"test\",\n}));\n\nexport const serviceAccountId = foo.serviceAccountId;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_dataproc_cluster(name=\"test\")\npulumi.export(\"serviceAccountId\", foo.service_account_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetDataprocCluster.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"serviceAccountId\"] = foo.Apply(getDataprocClusterResult =\u003e getDataprocClusterResult.ServiceAccountId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.LookupDataprocCluster(ctx, \u0026GetDataprocClusterArgs{\n\t\t\tName: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"serviceAccountId\", foo.ServiceAccountId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetDataprocClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getDataprocCluster(GetDataprocClusterArgs.builder()\n            .name(\"test\")\n            .build());\n\n        ctx.export(\"serviceAccountId\", foo.applyValue(getDataprocClusterResult -\u003e getDataprocClusterResult.serviceAccountId()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getDataprocCluster\n      Arguments:\n        name: test\noutputs:\n  serviceAccountId: ${foo.serviceAccountId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDataprocCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the Data Proc cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Data Proc cluster.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDataprocCluster.\n",
                "properties": {
                    "bucket": {
                        "type": "string",
                        "description": "Name of the Object Storage bucket used for Data Proc jobs.\n"
                    },
                    "clusterConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getDataprocClusterClusterConfig:getDataprocClusterClusterConfig"
                        },
                        "description": "Configuration and resources of the cluster. The structure is documented below.\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The Data Proc cluster creation timestamp.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Data Proc cluster.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "hostGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IDs of the host groups hosting VMs of the cluster.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the Data Proc subcluster.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the Data Proc cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Data Proc subcluster.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "Service account used by the Data Proc agent to access resources of Yandex.Cloud.\n"
                    },
                    "uiProxy": {
                        "type": "boolean",
                        "description": "Whether UI proxy feature is enabled.\n"
                    },
                    "zoneId": {
                        "type": "string",
                        "description": "ID of the availability zone where the cluster resides.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bucket",
                    "clusterConfigs",
                    "clusterId",
                    "createdAt",
                    "deletionProtection",
                    "description",
                    "folderId",
                    "hostGroupIds",
                    "id",
                    "labels",
                    "name",
                    "securityGroupIds",
                    "serviceAccountId",
                    "uiProxy",
                    "zoneId"
                ]
            }
        },
        "yandex:index/getDnsZone:getDnsZone": {
            "description": "Get information about a DNS Zone.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = yandex.getDnsZone({\n    dnsZoneId: yandex_dns_zone.zone1.id,\n});\nexport const zone = foo.then(foo =\u003e foo.zone);\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_dns_zone(dns_zone_id=yandex_dns_zone[\"zone1\"][\"id\"])\npulumi.export(\"zone\", foo.zone)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetDnsZone.Invoke(new()\n    {\n        DnsZoneId = yandex_dns_zone.Zone1.Id,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"zone\"] = foo.Apply(getDnsZoneResult =\u003e getDnsZoneResult.Zone),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.LookupDnsZone(ctx, \u0026GetDnsZoneArgs{\n\t\t\tDnsZoneId: pulumi.StringRef(yandex_dns_zone.Zone1.Id),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"zone\", foo.Zone)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetDnsZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getDnsZone(GetDnsZoneArgs.builder()\n            .dnsZoneId(yandex_dns_zone.zone1().id())\n            .build());\n\n        ctx.export(\"zone\", foo.applyValue(getDnsZoneResult -\u003e getDnsZoneResult.zone()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getDnsZone\n      Arguments:\n        dnsZoneId: ${yandex_dns_zone.zone1.id}\noutputs:\n  zone: ${foo.zone}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDnsZone.\n",
                "properties": {
                    "dnsZoneId": {
                        "type": "string",
                        "description": "The ID of the DNS Zone.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- Name of the DNS Zone.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/getDnsZoneTimeouts:getDnsZoneTimeouts"
                    }
                },
                "type": "object",
                "required": [
                    "timeouts"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDnsZone.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "(Computed) The DNS zone creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Computed) Description of the DNS zone.\n"
                    },
                    "dnsZoneId": {
                        "type": "string"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "(Computed) The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "(Computed) A set of key/value label pairs to assign to the DNS zone.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(Computed) User assigned name of a specific resource. Must be unique within the folder.\n"
                    },
                    "privateNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Computed) For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "(Computed) The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.\n"
                    },
                    "timeouts": {
                        "$ref": "#/types/yandex:index/getDnsZoneTimeouts:getDnsZoneTimeouts"
                    },
                    "zone": {
                        "type": "string",
                        "description": "(Computed) The DNS name of this zone, e.g. \"example.com.\". Must ends with dot.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "dnsZoneId",
                    "folderId",
                    "id",
                    "labels",
                    "name",
                    "privateNetworks",
                    "public",
                    "timeouts",
                    "zone"
                ]
            }
        },
        "yandex:index/getFunction:getFunction": {
            "description": "Get information about a Yandex Cloud Function. For more information about Yandex Cloud Functions, see \n[Yandex Cloud Functions](https://cloud.yandex.com/docs/functions/).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myFunction = pulumi.output(yandex.getFunction({\n    functionId: \"are1samplefunction11\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_function = yandex.get_function(function_id=\"are1samplefunction11\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFunction = Yandex.GetFunction.Invoke(new()\n    {\n        FunctionId = \"are1samplefunction11\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupFunction(ctx, \u0026GetFunctionArgs{\n\t\t\tFunctionId: pulumi.StringRef(\"are1samplefunction11\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetFunctionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myFunction = YandexFunctions.getFunction(GetFunctionArgs.builder()\n            .functionId(\"are1samplefunction11\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myFunction:\n    fn::invoke:\n      Function: yandex:getFunction\n      Arguments:\n        functionId: are1samplefunction11\n```\n\nThis data source is used to define [Yandex Cloud Function](https://cloud.yandex.com/docs/functions/concepts/function) that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFunction.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID for the Yandex Cloud Function\n"
                    },
                    "functionId": {
                        "type": "string",
                        "description": "Yandex Cloud Function id used to define function\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Yandex Cloud Function name used to define function\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getFunctionSecret:getFunctionSecret"
                        },
                        "description": "Secrets for Yandex Cloud Function.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFunction.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the Yandex Cloud Function\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Yandex Cloud Function\n"
                    },
                    "entrypoint": {
                        "type": "string",
                        "description": "Entrypoint for Yandex Cloud Function\n"
                    },
                    "environment": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value environment variables for Yandex Cloud Function\n"
                    },
                    "executionTimeout": {
                        "type": "string",
                        "description": "Execution timeout in seconds for Yandex Cloud Function\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "functionId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "imageSize": {
                        "type": "number",
                        "description": "Image size for Yandex Cloud Function.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Yandex Cloud Function\n"
                    },
                    "loggroupId": {
                        "type": "string",
                        "description": "Log group ID size for Yandex Cloud Function.\n"
                    },
                    "memory": {
                        "type": "number",
                        "description": "Memory in megabytes (**aligned to 128MB**) for Yandex Cloud Function\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "runtime": {
                        "type": "string",
                        "description": "Runtime for Yandex Cloud Function\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getFunctionSecret:getFunctionSecret"
                        },
                        "description": "Secrets for Yandex Cloud Function.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "Service account ID for Yandex Cloud Function\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags for Yandex Cloud Function. Tag \"$latest\" isn't returned.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version for Yandex Cloud Function.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "entrypoint",
                    "environment",
                    "executionTimeout",
                    "id",
                    "imageSize",
                    "labels",
                    "loggroupId",
                    "memory",
                    "runtime",
                    "serviceAccountId",
                    "tags",
                    "version"
                ]
            }
        },
        "yandex:index/getFunctionScalingPolicy:getFunctionScalingPolicy": {
            "inputs": {
                "description": "A collection of arguments for invoking getFunctionScalingPolicy.\n",
                "properties": {
                    "functionId": {
                        "type": "string"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getFunctionScalingPolicyPolicy:getFunctionScalingPolicyPolicy"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "functionId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFunctionScalingPolicy.\n",
                "properties": {
                    "functionId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getFunctionScalingPolicyPolicy:getFunctionScalingPolicyPolicy"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "functionId",
                    "id"
                ]
            }
        },
        "yandex:index/getFunctionTrigger:getFunctionTrigger": {
            "description": "Get information about a Yandex Cloud Function Trigger. For more information about Yandex Cloud Functions, see \n[Yandex Cloud Functions](https://cloud.yandex.com/docs/functions/).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myTrigger = pulumi.output(yandex.getFunctionTrigger({\n    triggerId: \"are1sampletrigger11\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_trigger = yandex.get_function_trigger(trigger_id=\"are1sampletrigger11\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myTrigger = Yandex.GetFunctionTrigger.Invoke(new()\n    {\n        TriggerId = \"are1sampletrigger11\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupFunctionTrigger(ctx, \u0026GetFunctionTriggerArgs{\n\t\t\tTriggerId: pulumi.StringRef(\"are1sampletrigger11\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetFunctionTriggerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myTrigger = YandexFunctions.getFunctionTrigger(GetFunctionTriggerArgs.builder()\n            .triggerId(\"are1sampletrigger11\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myTrigger:\n    fn::invoke:\n      Function: yandex:getFunctionTrigger\n      Arguments:\n        triggerId: are1sampletrigger11\n```\n\nThis data source is used to define [Yandex Cloud Functions Trigger](https://cloud.yandex.com/docs/functions/concepts/trigger) that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFunctionTrigger.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID for the Yandex Cloud Functions Trigger\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Yandex Cloud Functions Trigger name used to define trigger\n"
                    },
                    "triggerId": {
                        "type": "string",
                        "description": "Yandex Cloud Functions Trigger id used to define trigger\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFunctionTrigger.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the Yandex Cloud Functions Trigger\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Yandex Cloud Functions Trigger\n"
                    },
                    "dlqs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getFunctionTriggerDlq:getFunctionTriggerDlq"
                        },
                        "description": "Dead Letter Queue settings definition for Yandex Cloud Functions Trigger\n* `dlq.0.queue_id` - ID of Dead Letter Queue for Trigger (Queue ARN)\n* `dlq.0.service_account_id` - Service Account ID for Dead Letter Queue for Yandex Cloud Functions Trigger\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID for the Yandex Cloud Functions Trigger\n"
                    },
                    "functions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getFunctionTriggerFunction:getFunctionTriggerFunction"
                        },
                        "description": "[Yandex.Cloud Function](https://cloud.yandex.com/docs/functions/concepts/function) settings definition for Yandex Cloud Functions Trigger\n* `function.0.id` - Yandex.Cloud Function ID for Yandex Cloud Functions Trigger\n* `function.0.service_account_id` - Service account ID for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n* `function.0.tag` - Tag for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n* `function.0.retry_attempts` - Retry attempts for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n* `function.0.retry_interval` - Retry interval in seconds for Yandex.Cloud Function for Yandex Cloud Functions Trigger\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "iots": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getFunctionTriggerIot:getFunctionTriggerIot"
                        },
                        "description": "[IoT](https://cloud.yandex.com/docs/functions/concepts/trigger/iot-core-trigger) settings definition for Yandex Cloud Functions Trigger, if present\n* `iot.0.registry_id` - IoT Registry ID for Yandex Cloud Functions Trigger\n* `iot.0.device_id` - IoT Device ID for Yandex Cloud Functions Trigger\n* `iot.0.topic` - IoT Topic for Yandex Cloud Functions Trigger\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Yandex Cloud Functions Trigger\n"
                    },
                    "logGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getFunctionTriggerLogGroup:getFunctionTriggerLogGroup"
                        }
                    },
                    "loggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getFunctionTriggerLogging:getFunctionTriggerLogging"
                        }
                    },
                    "messageQueues": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getFunctionTriggerMessageQueue:getFunctionTriggerMessageQueue"
                        },
                        "description": "[Message Queue](https://cloud.yandex.com/docs/functions/concepts/trigger/ymq-trigger) settings definition for Yandex Cloud Functions Trigger, if present\n* `message_queue.0.queue_id` - Message Queue ID for Yandex Cloud Functions Trigger\n* `message_queue.0.service_account_id` - Message Queue Service Account ID for Yandex Cloud Functions Trigger\n* `message_queue.0.batch_cutoff` - Batch Duration in seconds for Yandex Cloud Functions Trigger\n* `message_queue.0.batch_size` - Batch Size for Yandex Cloud Functions Trigger\n* `message_queue.0.visibility_timeout` - Visibility timeout for Yandex Cloud Functions Trigger\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "objectStorages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getFunctionTriggerObjectStorage:getFunctionTriggerObjectStorage"
                        },
                        "description": "[Object Storage](https://cloud.yandex.com/docs/functions/concepts/trigger/os-trigger) settings definition for Yandex Cloud Functions Trigger, if present\n* `object_storage.0.bucket_id` - Object Storage Bucket ID for Yandex Cloud Functions Trigger\n* `object_storage.0.prefix` - Prefix for Object Storage for Yandex Cloud Functions Trigger\n* `object_storage.0.suffix` - Suffix for Object Storage for Yandex Cloud Functions Trigger\n* `object_storage.0.create` - Boolean flag for setting create event for Yandex Cloud Functions Trigger\n* `object_storage.0.update` - Boolean flag for setting update event for Yandex Cloud Functions Trigger\n* `object_storage.0.delete` - Boolean flag for setting delete event for Yandex Cloud Functions Trigger\n"
                    },
                    "timers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getFunctionTriggerTimer:getFunctionTriggerTimer"
                        },
                        "description": "[Timer](https://cloud.yandex.com/docs/functions/concepts/trigger/timer) settings definition for Yandex Cloud Functions Trigger, if present\n* `timer.0.cron_expression` - Cron expression for timer for Yandex Cloud Functions Trigger\n"
                    },
                    "triggerId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "dlqs",
                    "functions",
                    "id",
                    "iots",
                    "labels",
                    "logGroups",
                    "loggings",
                    "messageQueues",
                    "objectStorages",
                    "timers"
                ]
            }
        },
        "yandex:index/getIamPolicy:getIamPolicy": {
            "description": "Generates an [IAM] policy document that may be referenced by and applied to\nother Yandex.Cloud Platform resources, such as the `yandex.ResourcemanagerFolder` resource. \n\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst admin = pulumi.output(yandex.getIamPolicy({\n    bindings: [\n        {\n            members: [\"userAccount:user_id_1\"],\n            role: \"admin\",\n        },\n        {\n            members: [\"userAccount:user_id_2\"],\n            role: \"viewer\",\n        },\n    ],\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nadmin = yandex.get_iam_policy(bindings=[\n    yandex.GetIamPolicyBindingArgs(\n        members=[\"userAccount:user_id_1\"],\n        role=\"admin\",\n    ),\n    yandex.GetIamPolicyBindingArgs(\n        members=[\"userAccount:user_id_2\"],\n        role=\"viewer\",\n    ),\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var admin = Yandex.GetIamPolicy.Invoke(new()\n    {\n        Bindings = new[]\n        {\n            new Yandex.Inputs.GetIamPolicyBindingInputArgs\n            {\n                Members = new[]\n                {\n                    \"userAccount:user_id_1\",\n                },\n                Role = \"admin\",\n            },\n            new Yandex.Inputs.GetIamPolicyBindingInputArgs\n            {\n                Members = new[]\n                {\n                    \"userAccount:user_id_2\",\n                },\n                Role = \"viewer\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.GetIamPolicy(ctx, \u0026GetIamPolicyArgs{\n\t\t\tBindings: []GetIamPolicyBinding{\n\t\t\t\tGetIamPolicyBinding{\n\t\t\t\t\tMembers: []string{\n\t\t\t\t\t\t\"userAccount:user_id_1\",\n\t\t\t\t\t},\n\t\t\t\t\tRole: \"admin\",\n\t\t\t\t},\n\t\t\t\tGetIamPolicyBinding{\n\t\t\t\t\tMembers: []string{\n\t\t\t\t\t\t\"userAccount:user_id_2\",\n\t\t\t\t\t},\n\t\t\t\t\tRole: \"viewer\",\n\t\t\t\t},\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetIamPolicyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var admin = YandexFunctions.getIamPolicy(GetIamPolicyArgs.builder()\n            .bindings(            \n                GetIamPolicyBindingArgs.builder()\n                    .members(\"userAccount:user_id_1\")\n                    .role(\"admin\")\n                    .build(),\n                GetIamPolicyBindingArgs.builder()\n                    .members(\"userAccount:user_id_2\")\n                    .role(\"viewer\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  admin:\n    fn::invoke:\n      Function: yandex:getIamPolicy\n      Arguments:\n        bindings:\n          - members:\n              - userAccount:user_id_1\n            role: admin\n          - members:\n              - userAccount:user_id_2\n            role: viewer\n```\n\nThis data source is used to define [IAM] policies to apply to other resources.\nCurrently, defining a policy through a data source and referencing that policy\nfrom another resource is the only way to apply an IAM policy to a resource.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIamPolicy.\n",
                "properties": {
                    "bindings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getIamPolicyBinding:getIamPolicyBinding"
                        },
                        "description": "A nested configuration block (described below)\nthat defines a binding to be included in the policy document. Multiple\n`binding` arguments are supported.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bindings"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIamPolicy.\n",
                "properties": {
                    "bindings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getIamPolicyBinding:getIamPolicyBinding"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "policyData": {
                        "type": "string",
                        "description": "The above bindings serialized in a format suitable for\nreferencing from a resource that supports IAM.\n"
                    }
                },
                "type": "object",
                "required": [
                    "bindings",
                    "id",
                    "policyData"
                ]
            }
        },
        "yandex:index/getIamRole:getIamRole": {
            "description": "Generates an [IAM] role document that may be referenced by and applied to\nother Yandex.Cloud Platform resources, such as the `yandex.ResourcemanagerFolder` resource. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/iam/concepts/access-control/roles).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst admin = pulumi.output(yandex.getIamRole({\n    binding: [{\n        members: [\"userAccount:user_id_1\"],\n        role: \"admin\",\n    }],\n}));\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetIamRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var admin = YandexFunctions.getIamRole(GetIamRoleArgs.builder()\n            .binding(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  admin:\n    fn::invoke:\n      Function: yandex:getIamRole\n      Arguments:\n        binding:\n          - members:\n              - userAccount:user_id_1\n            role: admin\n```\n\nThis data source is used to define [IAM] roles in order to apply them to other resources.\nCurrently, defining a role through a data source and referencing that role\nfrom another resource is the only way to apply an IAM role to a resource.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIamRole.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "roleId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamRole.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "roleId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "roleId"
                ]
            }
        },
        "yandex:index/getIamServiceAccount:getIamServiceAccount": {
            "description": "Get information about a Yandex IAM service account. For more information about accounts, see \n[Yandex.Cloud IAM accounts](https://cloud.yandex.com/docs/iam/concepts/#accounts).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst builder = pulumi.output(yandex.getIamServiceAccount({\n    serviceAccountId: \"sa_id\",\n}));\nconst deployer = pulumi.output(yandex.getIamServiceAccount({\n    name: \"sa_name\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nbuilder = yandex.get_iam_service_account(service_account_id=\"sa_id\")\ndeployer = yandex.get_iam_service_account(name=\"sa_name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var builder = Yandex.GetIamServiceAccount.Invoke(new()\n    {\n        ServiceAccountId = \"sa_id\",\n    });\n\n    var deployer = Yandex.GetIamServiceAccount.Invoke(new()\n    {\n        Name = \"sa_name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupIamServiceAccount(ctx, \u0026GetIamServiceAccountArgs{\n\t\t\tServiceAccountId: pulumi.StringRef(\"sa_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = yandex.LookupIamServiceAccount(ctx, \u0026GetIamServiceAccountArgs{\n\t\t\tName: pulumi.StringRef(\"sa_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetIamServiceAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var builder = YandexFunctions.getIamServiceAccount(GetIamServiceAccountArgs.builder()\n            .serviceAccountId(\"sa_id\")\n            .build());\n\n        final var deployer = YandexFunctions.getIamServiceAccount(GetIamServiceAccountArgs.builder()\n            .name(\"sa_name\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  builder:\n    fn::invoke:\n      Function: yandex:getIamServiceAccount\n      Arguments:\n        serviceAccountId: sa_id\n  deployer:\n    fn::invoke:\n      Function: yandex:getIamServiceAccount\n      Arguments:\n        name: sa_name\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIamServiceAccount.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a specific service account.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "ID of a specific service account.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamServiceAccount.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the service account.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "serviceAccountId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "folderId",
                    "id",
                    "name",
                    "serviceAccountId"
                ]
            }
        },
        "yandex:index/getIamUser:getIamUser": {
            "description": "Get information about a Yandex IAM user account. For more information about accounts, see \n[Yandex.Cloud IAM accounts](https://cloud.yandex.com/docs/iam/concepts/#accounts).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst admin = pulumi.output(yandex.getIamUser({\n    login: \"my-yandex-login\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nadmin = yandex.get_iam_user(login=\"my-yandex-login\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var admin = Yandex.GetIamUser.Invoke(new()\n    {\n        Login = \"my-yandex-login\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.GetIamUser(ctx, \u0026GetIamUserArgs{\n\t\t\tLogin: pulumi.StringRef(\"my-yandex-login\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetIamUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var admin = YandexFunctions.getIamUser(GetIamUserArgs.builder()\n            .login(\"my-yandex-login\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  admin:\n    fn::invoke:\n      Function: yandex:getIamUser\n      Arguments:\n        login: my-yandex-login\n```\n\nThis data source is used to define [IAM User] that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIamUser.\n",
                "properties": {
                    "login": {
                        "type": "string",
                        "description": "Login name used to sign in to Yandex Passport.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID used to manage IAM access bindings.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIamUser.\n",
                "properties": {
                    "defaultEmail": {
                        "type": "string",
                        "description": "Email address of user account.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "login": {
                        "type": "string",
                        "description": "Login name of IAM user account.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "ID of IAM user account.\n"
                    }
                },
                "type": "object",
                "required": [
                    "defaultEmail",
                    "id",
                    "login",
                    "userId"
                ]
            }
        },
        "yandex:index/getIotCoreBroker:getIotCoreBroker": {
            "description": "Get information about a Yandex IoT Core Broker. For more information IoT Core, see \n[Yandex.Cloud IoT Broker](https://cloud.yandex.com/docs/iot-core/quickstart).\n\nThe service is at the Preview stage.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myBroker = pulumi.output(yandex.getIotCoreBroker({\n    brokerId: \"are1samplebroker11\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_broker = yandex.get_iot_core_broker(broker_id=\"are1samplebroker11\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myBroker = Yandex.GetIotCoreBroker.Invoke(new()\n    {\n        BrokerId = \"are1samplebroker11\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupIotCoreBroker(ctx, \u0026GetIotCoreBrokerArgs{\n\t\t\tBrokerId: pulumi.StringRef(\"are1samplebroker11\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetIotCoreBrokerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myBroker = YandexFunctions.getIotCoreBroker(GetIotCoreBrokerArgs.builder()\n            .brokerId(\"are1samplebroker11\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myBroker:\n    fn::invoke:\n      Function: yandex:getIotCoreBroker\n      Arguments:\n        brokerId: are1samplebroker11\n```\n\nThis data source is used to define [Yandex.Cloud IoT Broker](https://cloud.yandex.com/docs/iot-core/quickstart) that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIotCoreBroker.\n",
                "properties": {
                    "brokerId": {
                        "type": "string",
                        "description": "IoT Core Broker id used to define broker\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID for the IoT Core Broker\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IoT Core Broker name used to define broker\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIotCoreBroker.\n",
                "properties": {
                    "brokerId": {
                        "type": "string"
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of certificates fingerprints for the IoT Core Broker\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the IoT Core Broker\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the IoT Core Broker\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the IoT Core Broker.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "certificates",
                    "createdAt",
                    "description",
                    "id",
                    "labels"
                ]
            }
        },
        "yandex:index/getIotCoreDevice:getIotCoreDevice": {
            "description": "Get information about a Yandex IoT Core device. For more information about IoT Core, see \n[Yandex.Cloud IoT Device](https://cloud.yandex.com/docs/iot-core/quickstart).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myDevice = pulumi.output(yandex.getIotCoreDevice({\n    deviceId: \"are1sampleregistry11\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_device = yandex.get_iot_core_device(device_id=\"are1sampleregistry11\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDevice = Yandex.GetIotCoreDevice.Invoke(new()\n    {\n        DeviceId = \"are1sampleregistry11\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupIotCoreDevice(ctx, \u0026GetIotCoreDeviceArgs{\n\t\t\tDeviceId: pulumi.StringRef(\"are1sampleregistry11\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetIotCoreDeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDevice = YandexFunctions.getIotCoreDevice(GetIotCoreDeviceArgs.builder()\n            .deviceId(\"are1sampleregistry11\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myDevice:\n    fn::invoke:\n      Function: yandex:getIotCoreDevice\n      Arguments:\n        deviceId: are1sampleregistry11\n```\n\nThis data source is used to define [Yandex.Cloud IoT Device](https://cloud.yandex.com/docs/iot-core/quickstart) that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIotCoreDevice.\n",
                "properties": {
                    "deviceId": {
                        "type": "string",
                        "description": "IoT Core Device id used to define device\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IoT Core Device name used to define device\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIotCoreDevice.\n",
                "properties": {
                    "aliases": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value aliases pairs to assign to the IoT Core Device\n"
                    },
                    "certificates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of certificate's fingerprints for the IoT Core Device\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the IoT Core Device\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the IoT Core Device\n"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "passwords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of passwords's id for the IoT Core Device\n"
                    },
                    "registryId": {
                        "type": "string",
                        "description": "IoT Core Registry ID for the IoT Core Device\n"
                    }
                },
                "type": "object",
                "required": [
                    "aliases",
                    "certificates",
                    "createdAt",
                    "description",
                    "id",
                    "passwords",
                    "registryId"
                ]
            }
        },
        "yandex:index/getIotCoreRegistry:getIotCoreRegistry": {
            "description": "Get information about a Yandex IoT Core Registry. For more information IoT Core, see \n[Yandex.Cloud IoT Registry](https://cloud.yandex.com/docs/iot-core/quickstart).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myRegistry = pulumi.output(yandex.getIotCoreRegistry({\n    registryId: \"are1sampleregistry11\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_registry = yandex.get_iot_core_registry(registry_id=\"are1sampleregistry11\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myRegistry = Yandex.GetIotCoreRegistry.Invoke(new()\n    {\n        RegistryId = \"are1sampleregistry11\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupIotCoreRegistry(ctx, \u0026GetIotCoreRegistryArgs{\n\t\t\tRegistryId: pulumi.StringRef(\"are1sampleregistry11\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetIotCoreRegistryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myRegistry = YandexFunctions.getIotCoreRegistry(GetIotCoreRegistryArgs.builder()\n            .registryId(\"are1sampleregistry11\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myRegistry:\n    fn::invoke:\n      Function: yandex:getIotCoreRegistry\n      Arguments:\n        registryId: are1sampleregistry11\n```\n\nThis data source is used to define [Yandex.Cloud IoT Registry](https://cloud.yandex.com/docs/iot-core/quickstart) that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIotCoreRegistry.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID for the IoT Core Registry\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IoT Core Registry name used to define registry\n"
                    },
                    "registryId": {
                        "type": "string",
                        "description": "IoT Core Registry id used to define registry\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIotCoreRegistry.\n",
                "properties": {
                    "certificates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of certificate's fingerprints for the IoT Core Registry\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the IoT Core Registry\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the IoT Core Registry\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the IoT Core Registry.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "passwords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of passwords's id for the IoT Core Registry\n"
                    },
                    "registryId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "certificates",
                    "createdAt",
                    "description",
                    "id",
                    "labels",
                    "passwords"
                ]
            }
        },
        "yandex:index/getKubernetesCluster:getKubernetesCluster": {
            "description": "Get information about a Yandex Kubernetes Cluster.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myCluster = pulumi.output(yandex.getKubernetesCluster({\n    clusterId: \"some_k8s_cluster_id\",\n}));\n\nexport const clusterExternalV4Endpoint = myCluster.masters[0].externalV4Endpoint;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_cluster = yandex.get_kubernetes_cluster(cluster_id=\"some_k8s_cluster_id\")\npulumi.export(\"clusterExternalV4Endpoint\", my_cluster.masters[0].external_v4_endpoint)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myCluster = Yandex.GetKubernetesCluster.Invoke(new()\n    {\n        ClusterId = \"some_k8s_cluster_id\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"clusterExternalV4Endpoint\"] = myCluster.Apply(getKubernetesClusterResult =\u003e getKubernetesClusterResult.Masters[0]?.ExternalV4Endpoint),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyCluster, err := yandex.LookupKubernetesCluster(ctx, \u0026GetKubernetesClusterArgs{\n\t\t\tClusterId: pulumi.StringRef(\"some_k8s_cluster_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"clusterExternalV4Endpoint\", myCluster.Masters[0].ExternalV4Endpoint)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetKubernetesClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myCluster = YandexFunctions.getKubernetesCluster(GetKubernetesClusterArgs.builder()\n            .clusterId(\"some_k8s_cluster_id\")\n            .build());\n\n        ctx.export(\"clusterExternalV4Endpoint\", myCluster.applyValue(getKubernetesClusterResult -\u003e getKubernetesClusterResult.masters()[0].externalV4Endpoint()));\n    }\n}\n```\n```yaml\nvariables:\n  myCluster:\n    fn::invoke:\n      Function: yandex:getKubernetesCluster\n      Arguments:\n        clusterId: some_k8s_cluster_id\noutputs:\n  clusterExternalV4Endpoint: ${myCluster.masters[0].externalV4Endpoint}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "ID of a specific Kubernetes cluster.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a specific Kubernetes cluster.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "clusterIpv4Range": {
                        "type": "string",
                        "description": "IP range for allocating pod addresses.\n"
                    },
                    "clusterIpv6Range": {
                        "type": "string",
                        "description": "Identical to cluster_ipv4_range but for the IPv6 protocol.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The Kubernetes cluster creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the Kubernetes cluster.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "health": {
                        "type": "string",
                        "description": "Health of the Kubernetes cluster.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kmsProviders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getKubernetesClusterKmsProvider:getKubernetesClusterKmsProvider"
                        },
                        "description": "cluster KMS provider parameters.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Kubernetes cluster.\n"
                    },
                    "logGroupId": {
                        "type": "string",
                        "description": "Log group where cluster stores cluster system logs, like audit, events, or controlplane logs.\n"
                    },
                    "masters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getKubernetesClusterMaster:getKubernetesClusterMaster"
                        },
                        "description": "Kubernetes master configuration options. The structure is documented below.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The ID of the cluster network.\n"
                    },
                    "networkImplementations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getKubernetesClusterNetworkImplementation:getKubernetesClusterNetworkImplementation"
                        },
                        "description": "(Optional) Network Implementation options. The structure is documented below.\n"
                    },
                    "networkPolicyProvider": {
                        "type": "string",
                        "description": "Network policy provider for the cluster, if present. Possible values: `CALICO`.\n"
                    },
                    "nodeIpv4CidrMaskSize": {
                        "type": "number",
                        "description": "Size of the masks that are assigned to each node in the cluster.\n"
                    },
                    "nodeServiceAccountId": {
                        "type": "string",
                        "description": "Service account to be used by the worker nodes of the Kubernetes cluster\nto access Container Registry or to push node logs and metrics.\n"
                    },
                    "releaseChannel": {
                        "type": "string",
                        "description": "Cluster release channel.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "Service account to be used for provisioning Compute Cloud and VPC resources\nfor Kubernetes cluster. Selected service account should have `edit` role on the folder where the Kubernetes\ncluster will be located and on the folder where selected network resides.\n"
                    },
                    "serviceIpv4Range": {
                        "type": "string",
                        "description": "IP range Kubernetes services Kubernetes cluster IP addresses will be allocated from.\n"
                    },
                    "serviceIpv6Range": {
                        "type": "string",
                        "description": "Identical to service_ipv4_range but for the IPv6 protocol.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Kubernetes cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "clusterIpv4Range",
                    "clusterIpv6Range",
                    "createdAt",
                    "description",
                    "folderId",
                    "health",
                    "id",
                    "kmsProviders",
                    "labels",
                    "logGroupId",
                    "masters",
                    "name",
                    "networkId",
                    "networkImplementations",
                    "networkPolicyProvider",
                    "nodeIpv4CidrMaskSize",
                    "nodeServiceAccountId",
                    "releaseChannel",
                    "serviceAccountId",
                    "serviceIpv4Range",
                    "serviceIpv6Range",
                    "status"
                ]
            }
        },
        "yandex:index/getKubernetesNodeGroup:getKubernetesNodeGroup": {
            "description": "Get information about a Yandex Kubernetes Node Group. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-kubernetes/concepts/#node-group).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myNodeGroup = pulumi.output(yandex.getKubernetesNodeGroup({\n    nodeGroupId: \"some_k8s_node_group_id\",\n}));\n\nexport const my_node_group_status = myNodeGroup.status;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_node_group = yandex.get_kubernetes_node_group(node_group_id=\"some_k8s_node_group_id\")\npulumi.export(\"myNodeGroup.status\", my_node_group.status)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myNodeGroup = Yandex.GetKubernetesNodeGroup.Invoke(new()\n    {\n        NodeGroupId = \"some_k8s_node_group_id\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"myNodeGroup.status\"] = myNodeGroup.Apply(getKubernetesNodeGroupResult =\u003e getKubernetesNodeGroupResult.Status),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyNodeGroup, err := yandex.LookupKubernetesNodeGroup(ctx, \u0026GetKubernetesNodeGroupArgs{\n\t\t\tNodeGroupId: pulumi.StringRef(\"some_k8s_node_group_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"myNodeGroup.status\", myNodeGroup.Status)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetKubernetesNodeGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myNodeGroup = YandexFunctions.getKubernetesNodeGroup(GetKubernetesNodeGroupArgs.builder()\n            .nodeGroupId(\"some_k8s_node_group_id\")\n            .build());\n\n        ctx.export(\"myNodeGroup.status\", myNodeGroup.applyValue(getKubernetesNodeGroupResult -\u003e getKubernetesNodeGroupResult.status()));\n    }\n}\n```\n```yaml\nvariables:\n  myNodeGroup:\n    fn::invoke:\n      Function: yandex:getKubernetesNodeGroup\n      Arguments:\n        nodeGroupId: some_k8s_node_group_id\noutputs:\n  myNodeGroup.status: ${myNodeGroup.status}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getKubernetesNodeGroup.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a specific Kubernetes node group.\n"
                    },
                    "nodeGroupId": {
                        "type": "string",
                        "description": "ID of a specific Kubernetes node group.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getKubernetesNodeGroup.\n",
                "properties": {
                    "allocationPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getKubernetesNodeGroupAllocationPolicy:getKubernetesNodeGroupAllocationPolicy"
                        },
                        "description": "This argument specify subnets (zones), that will be used by node group compute instances. The structure is documented below.\n"
                    },
                    "allowedUnsafeSysctls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of allowed unsafe sysctl parameters for this node group. For more details see [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/).\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the Kubernetes cluster that this node group belongs to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The Kubernetes node group creation timestamp.\n"
                    },
                    "deployPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getKubernetesNodeGroupDeployPolicy:getKubernetesNodeGroupDeployPolicy"
                        },
                        "description": "Deploy policy of the node group. The structure is documented below.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the Kubernetes node group.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceGroupId": {
                        "type": "string",
                        "description": "ID of instance group that is used to manage this Kubernetes node group.\n"
                    },
                    "instanceTemplates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getKubernetesNodeGroupInstanceTemplate:getKubernetesNodeGroupInstanceTemplate"
                        },
                        "description": "Template used to create compute instances in this Kubernetes node group. The structure is documented below.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels assigned to compute nodes (instances), created by the Node Group.\n---\n"
                    },
                    "maintenancePolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getKubernetesNodeGroupMaintenancePolicy:getKubernetesNodeGroupMaintenancePolicy"
                        },
                        "description": "Information about maintenance policy for this Kubernetes node group. The structure is documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name template of the instance.\n"
                    },
                    "nodeGroupId": {
                        "type": "string"
                    },
                    "nodeLabels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.\n"
                    },
                    "nodeTaints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.\n"
                    },
                    "scalePolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getKubernetesNodeGroupScalePolicy:getKubernetesNodeGroupScalePolicy"
                        },
                        "description": "Scale policy of the node group. The structure is documented below.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Kubernetes node group.\n"
                    },
                    "versionInfos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getKubernetesNodeGroupVersionInfo:getKubernetesNodeGroupVersionInfo"
                        },
                        "description": "Information about Kubernetes node group version. The structure is documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allocationPolicies",
                    "allowedUnsafeSysctls",
                    "clusterId",
                    "createdAt",
                    "deployPolicies",
                    "description",
                    "folderId",
                    "id",
                    "instanceGroupId",
                    "instanceTemplates",
                    "labels",
                    "maintenancePolicies",
                    "name",
                    "nodeGroupId",
                    "nodeLabels",
                    "nodeTaints",
                    "scalePolicies",
                    "status",
                    "versionInfos"
                ]
            }
        },
        "yandex:index/getLbNetworkLoadBalancer:getLbNetworkLoadBalancer": {
            "description": "Get information about a Yandex Load Balancer network load balancer. For more information, see\n[Yandex.Cloud Network Load Balancer](https://cloud.yandex.com/docs/load-balancer/concepts/).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getLbNetworkLoadBalancer({\n    networkLoadBalancerId: \"my-network-load-balancer\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_lb_network_load_balancer(network_load_balancer_id=\"my-network-load-balancer\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetLbNetworkLoadBalancer.Invoke(new()\n    {\n        NetworkLoadBalancerId = \"my-network-load-balancer\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupLbNetworkLoadBalancer(ctx, \u0026GetLbNetworkLoadBalancerArgs{\n\t\t\tNetworkLoadBalancerId: pulumi.StringRef(\"my-network-load-balancer\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetLbNetworkLoadBalancerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getLbNetworkLoadBalancer(GetLbNetworkLoadBalancerArgs.builder()\n            .networkLoadBalancerId(\"my-network-load-balancer\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getLbNetworkLoadBalancer\n      Arguments:\n        networkLoadBalancerId: my-network-load-balancer\n```\n\nThis data source is used to define [Load Balancer Network Load Balancers] that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLbNetworkLoadBalancer.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- Name of the network load balancer.\n"
                    },
                    "networkLoadBalancerId": {
                        "type": "string",
                        "description": "Network load balancer ID.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbNetworkLoadBalancer.\n",
                "properties": {
                    "attachedTargetGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getLbNetworkLoadBalancerAttachedTargetGroup:getLbNetworkLoadBalancerAttachedTargetGroup"
                        },
                        "description": "An attached target group is a group of targets that is attached to a load balancer. Structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of this network load balancer.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the network load balancer.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this network load balancer.\n"
                    },
                    "listeners": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getLbNetworkLoadBalancerListener:getLbNetworkLoadBalancerListener"
                        },
                        "description": "Listener specification that will be used by a network load balancer. Structure is documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the listener.\n"
                    },
                    "networkLoadBalancerId": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "ID of the region where the network load balancer resides.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the network load balancer.\n"
                    }
                },
                "type": "object",
                "required": [
                    "attachedTargetGroups",
                    "createdAt",
                    "description",
                    "folderId",
                    "id",
                    "labels",
                    "listeners",
                    "name",
                    "networkLoadBalancerId",
                    "regionId",
                    "type"
                ]
            }
        },
        "yandex:index/getLbTargetGroup:getLbTargetGroup": {
            "description": "Get information about a Yandex Load Balancer target group. For more information, see\n[Yandex.Cloud Load Balancer](https://cloud.yandex.com/docs/load-balancer/quickstart).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getLbTargetGroup({\n    targetGroupId: \"my-target-group-id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_lb_target_group(target_group_id=\"my-target-group-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetLbTargetGroup.Invoke(new()\n    {\n        TargetGroupId = \"my-target-group-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupLbTargetGroup(ctx, \u0026GetLbTargetGroupArgs{\n\t\t\tTargetGroupId: pulumi.StringRef(\"my-target-group-id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetLbTargetGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getLbTargetGroup(GetLbTargetGroupArgs.builder()\n            .targetGroupId(\"my-target-group-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getLbTargetGroup\n      Arguments:\n        targetGroupId: my-target-group-id\n```\n\nThis data source is used to define [Load Balancer Target Groups] that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLbTargetGroup.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- Name of the Target Group.\n"
                    },
                    "targetGroupId": {
                        "type": "string",
                        "description": "Target Group ID.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLbTargetGroup.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of this target group.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the target group.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this target group.\n* `target.0.address` - IP address of the target.\n* `target.0.subnet_id` - ID of the subnet that targets are connected to.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "targetGroupId": {
                        "type": "string"
                    },
                    "targets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getLbTargetGroupTarget:getLbTargetGroupTarget"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "folderId",
                    "id",
                    "labels",
                    "name",
                    "targets",
                    "targetGroupId"
                ]
            }
        },
        "yandex:index/getLockboxSecret:getLockboxSecret": {
            "description": "Get information about Yandex Cloud Lockbox secret. For more information,\nsee [the official documentation](https://cloud.yandex.com/en/docs/lockbox/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst mySecret = yandex.getLockboxSecret({\n    secretId: \"some ID\",\n});\nexport const mySecretCreatedAt = mySecret.then(mySecret =\u003e mySecret.createdAt);\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_secret = yandex.get_lockbox_secret(secret_id=\"some ID\")\npulumi.export(\"mySecretCreatedAt\", my_secret.created_at)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySecret = Yandex.GetLockboxSecret.Invoke(new()\n    {\n        SecretId = \"some ID\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"mySecretCreatedAt\"] = mySecret.Apply(getLockboxSecretResult =\u003e getLockboxSecretResult.CreatedAt),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmySecret, err := yandex.LookupLockboxSecret(ctx, \u0026GetLockboxSecretArgs{\n\t\t\tSecretId: \"some ID\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"mySecretCreatedAt\", mySecret.CreatedAt)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetLockboxSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySecret = YandexFunctions.getLockboxSecret(GetLockboxSecretArgs.builder()\n            .secretId(\"some ID\")\n            .build());\n\n        ctx.export(\"mySecretCreatedAt\", mySecret.applyValue(getLockboxSecretResult -\u003e getLockboxSecretResult.createdAt()));\n    }\n}\n```\n```yaml\nvariables:\n  mySecret:\n    fn::invoke:\n      Function: yandex:getLockboxSecret\n      Arguments:\n        secretId: some ID\noutputs:\n  mySecretCreatedAt: ${mySecret.createdAt}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLockboxSecret.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "The Yandex Cloud Lockbox secret ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "secretId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLockboxSecret.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The version creation timestamp.\n"
                    },
                    "currentVersions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getLockboxSecretCurrentVersion:getLockboxSecretCurrentVersion"
                        },
                        "description": "Information about the current version of the Yandex Cloud Lockbox secret.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Whether the Yandex Cloud Lockbox secret is protected from deletion.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The version description.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the Yandex Cloud Lockbox secret belongs to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The version ID.\n"
                    },
                    "kmsKeyId": {
                        "type": "string",
                        "description": "The KMS key used to encrypt the Yandex Cloud Lockbox secret (if an explicit key was used).\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the Yandex Cloud Lockbox secret.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Yandex Cloud Lockbox secret name.\n"
                    },
                    "secretId": {
                        "type": "string",
                        "description": "The secret ID the version belongs to (it's the same as the `secret_id` argument indicated above)\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The version status.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "currentVersions",
                    "deletionProtection",
                    "description",
                    "folderId",
                    "id",
                    "kmsKeyId",
                    "labels",
                    "name",
                    "secretId",
                    "status"
                ]
            }
        },
        "yandex:index/getLockboxSecretVersion:getLockboxSecretVersion": {
            "description": "Get information about Yandex Cloud Lockbox secret version. For more information,\nsee [the official documentation](https://cloud.yandex.com/en/docs/lockbox/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst mySecretVersion = yandex.getLockboxSecretVersion({\n    secretId: \"some ID\",\n});\nexport const mySecretEntries = data.yandex_lockbox_secret.my_secret_version.entries;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_secret_version = yandex.get_lockbox_secret_version(secret_id=\"some ID\")\npulumi.export(\"mySecretEntries\", data[\"yandex_lockbox_secret\"][\"my_secret_version\"][\"entries\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySecretVersion = Yandex.GetLockboxSecretVersion.Invoke(new()\n    {\n        SecretId = \"some ID\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"mySecretEntries\"] = data.Yandex_lockbox_secret.My_secret_version.Entries,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupLockboxSecretVersion(ctx, \u0026GetLockboxSecretVersionArgs{\n\t\t\tSecretId: \"some ID\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"mySecretEntries\", data.Yandex_lockbox_secret.My_secret_version.Entries)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetLockboxSecretVersionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySecretVersion = YandexFunctions.getLockboxSecretVersion(GetLockboxSecretVersionArgs.builder()\n            .secretId(\"some ID\")\n            .build());\n\n        ctx.export(\"mySecretEntries\", data.yandex_lockbox_secret().my_secret_version().entries());\n    }\n}\n```\n```yaml\nvariables:\n  mySecretVersion:\n    fn::invoke:\n      Function: yandex:getLockboxSecretVersion\n      Arguments:\n        secretId: some ID\noutputs:\n  mySecretEntries: ${data.yandex_lockbox_secret.my_secret_version.entries}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLockboxSecretVersion.\n",
                "properties": {
                    "secretId": {
                        "type": "string",
                        "description": "The Yandex Cloud Lockbox secret ID.\n"
                    },
                    "versionId": {
                        "type": "string",
                        "description": "The Yandex Cloud Lockbox secret version ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "secretId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLockboxSecretVersion.\n",
                "properties": {
                    "entries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getLockboxSecretVersionEntry:getLockboxSecretVersionEntry"
                        },
                        "description": "List of entries in the Yandex Cloud Lockbox secret version.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "secretId": {
                        "type": "string"
                    },
                    "versionId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "entries",
                    "id",
                    "secretId",
                    "versionId"
                ]
            }
        },
        "yandex:index/getLoggingGroup:getLoggingGroup": {
            "description": "Get information about a Yandex Cloud Logging group. For more information,\nsee [the official documentation](https://cloud.yandex.com/en/docs/logging/concepts/log-group).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myGroup = pulumi.output(yandex.getLoggingGroup({\n    groupId: \"some_yandex_logging_group_id\",\n}));\n\nexport const logGroupRetentionPeriod = myGroup.retentionPeriod;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_group = yandex.get_logging_group(group_id=\"some_yandex_logging_group_id\")\npulumi.export(\"logGroupRetentionPeriod\", my_group.retention_period)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myGroup = Yandex.GetLoggingGroup.Invoke(new()\n    {\n        GroupId = \"some_yandex_logging_group_id\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"logGroupRetentionPeriod\"] = myGroup.Apply(getLoggingGroupResult =\u003e getLoggingGroupResult.RetentionPeriod),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyGroup, err := yandex.LookupLoggingGroup(ctx, \u0026GetLoggingGroupArgs{\n\t\t\tGroupId: pulumi.StringRef(\"some_yandex_logging_group_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"logGroupRetentionPeriod\", myGroup.RetentionPeriod)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetLoggingGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myGroup = YandexFunctions.getLoggingGroup(GetLoggingGroupArgs.builder()\n            .groupId(\"some_yandex_logging_group_id\")\n            .build());\n\n        ctx.export(\"logGroupRetentionPeriod\", myGroup.applyValue(getLoggingGroupResult -\u003e getLoggingGroupResult.retentionPeriod()));\n    }\n}\n```\n```yaml\nvariables:\n  myGroup:\n    fn::invoke:\n      Function: yandex:getLoggingGroup\n      Arguments:\n        groupId: some_yandex_logging_group_id\noutputs:\n  logGroupRetentionPeriod: ${myGroup.retentionPeriod}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLoggingGroup.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the Yandex Cloud Logging group belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                    },
                    "groupId": {
                        "type": "string",
                        "description": "The Yandex Cloud Logging group ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Yandex Cloud Logging group name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLoggingGroup.\n",
                "properties": {
                    "cloudId": {
                        "type": "string",
                        "description": "ID of the cloud that the Yandex Cloud Logging group belong to.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The Yandex Cloud Logging group creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The Yandex Cloud Logging group description.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "groupId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the Yandex Cloud Logging group.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "retentionPeriod": {
                        "type": "string",
                        "description": "The Yandex Cloud Logging group log entries retention period.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The Yandex Cloud Logging group status.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudId",
                    "createdAt",
                    "description",
                    "folderId",
                    "groupId",
                    "id",
                    "labels",
                    "name",
                    "retentionPeriod",
                    "status"
                ]
            }
        },
        "yandex:index/getMdbClickhouseCluster:getMdbClickhouseCluster": {
            "description": "Get information about a Yandex Managed ClickHouse cluster. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getMdbClickhouseCluster({\n    name: \"test\",\n}));\n\nexport const networkId = foo.networkId;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_mdb_clickhouse_cluster(name=\"test\")\npulumi.export(\"networkId\", foo.network_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetMdbClickhouseCluster.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"networkId\"] = foo.Apply(getMdbClickhouseClusterResult =\u003e getMdbClickhouseClusterResult.NetworkId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.LookupMdbClickhouseCluster(ctx, \u0026GetMdbClickhouseClusterArgs{\n\t\t\tName: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"networkId\", foo.NetworkId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetMdbClickhouseClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getMdbClickhouseCluster(GetMdbClickhouseClusterArgs.builder()\n            .name(\"test\")\n            .build());\n\n        ctx.export(\"networkId\", foo.applyValue(getMdbClickhouseClusterResult -\u003e getMdbClickhouseClusterResult.networkId()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getMdbClickhouseCluster\n      Arguments:\n        name: test\noutputs:\n  networkId: ${foo.networkId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMdbClickhouseCluster.\n",
                "properties": {
                    "cloudStorage": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterCloudStorage:getMdbClickhouseClusterCloudStorage"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the ClickHouse cluster.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ClickHouse cluster.\n"
                    },
                    "serviceAccountId": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMdbClickhouseCluster.\n",
                "properties": {
                    "accesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbClickhouseClusterAccess:getMdbClickhouseClusterAccess"
                        },
                        "description": "Access policy to the ClickHouse cluster. The structure is documented below.\n"
                    },
                    "backupWindowStarts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbClickhouseClusterBackupWindowStart:getMdbClickhouseClusterBackupWindowStart"
                        },
                        "description": "Time to start the daily backup, in the UTC timezone. The structure is documented below.\n"
                    },
                    "clickhouses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbClickhouseClusterClickhouse:getMdbClickhouseClusterClickhouse"
                        },
                        "description": "Configuration of the ClickHouse subcluster. The structure is documented below.\n"
                    },
                    "cloudStorage": {
                        "$ref": "#/types/yandex:index/getMdbClickhouseClusterCloudStorage:getMdbClickhouseClusterCloudStorage"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbClickhouseClusterDatabase:getMdbClickhouseClusterDatabase"
                        },
                        "description": "A database of the ClickHouse cluster. The structure is documented below.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the shard group.\n"
                    },
                    "embeddedKeeper": {
                        "type": "boolean",
                        "description": "Whether to use ClickHouse Keeper as a coordination system and place it on the same hosts with ClickHouse. If not, it's used ZooKeeper with placement on separate hosts.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the ClickHouse cluster.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "formatSchemas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbClickhouseClusterFormatSchema:getMdbClickhouseClusterFormatSchema"
                        },
                        "description": "A set of protobuf or cap'n proto format schemas. The structure is documented below.\n"
                    },
                    "health": {
                        "type": "string",
                        "description": "Aggregated health of the cluster.\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbClickhouseClusterHost:getMdbClickhouseClusterHost"
                        },
                        "description": "A host of the ClickHouse cluster. The structure is documented below.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the ClickHouse cluster.\n"
                    },
                    "maintenanceWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbClickhouseClusterMaintenanceWindow:getMdbClickhouseClusterMaintenanceWindow"
                        }
                    },
                    "mlModels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbClickhouseClusterMlModel:getMdbClickhouseClusterMlModel"
                        },
                        "description": "A group of machine learning models. The structure is documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Graphite rollup configuration name.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the ClickHouse cluster belongs.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "serviceAccountId": {
                        "type": "string"
                    },
                    "shardGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbClickhouseClusterShardGroup:getMdbClickhouseClusterShardGroup"
                        },
                        "description": "A group of clickhouse shards. The structure is documented below.\n"
                    },
                    "sqlDatabaseManagement": {
                        "type": "boolean",
                        "description": "Grants `admin` user database management permission.\n"
                    },
                    "sqlUserManagement": {
                        "type": "boolean",
                        "description": "Enables `admin` user with user management permission.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbClickhouseClusterUser:getMdbClickhouseClusterUser"
                        },
                        "description": "A user of the ClickHouse cluster. The structure is documented below.\n"
                    },
                    "version": {
                        "type": "string"
                    },
                    "zookeepers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbClickhouseClusterZookeeper:getMdbClickhouseClusterZookeeper"
                        },
                        "description": "Configuration of the ZooKeeper subcluster. The structure is documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accesses",
                    "backupWindowStarts",
                    "clickhouses",
                    "clusterId",
                    "createdAt",
                    "databases",
                    "deletionProtection",
                    "description",
                    "embeddedKeeper",
                    "environment",
                    "folderId",
                    "formatSchemas",
                    "health",
                    "hosts",
                    "id",
                    "labels",
                    "maintenanceWindows",
                    "mlModels",
                    "name",
                    "networkId",
                    "securityGroupIds",
                    "serviceAccountId",
                    "shardGroups",
                    "sqlDatabaseManagement",
                    "sqlUserManagement",
                    "status",
                    "users",
                    "version",
                    "zookeepers"
                ]
            }
        },
        "yandex:index/getMdbElasticSearchCluster:getMdbElasticSearchCluster": {
            "description": "Get information about a Yandex Managed Elasticsearch cluster. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-elasticsearch/concepts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getMdbElasticSearchCluster({\n    name: \"test\",\n}));\n\nexport const networkId = foo.networkId;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_mdb_elastic_search_cluster(name=\"test\")\npulumi.export(\"networkId\", foo.network_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetMdbElasticSearchCluster.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"networkId\"] = foo.Apply(getMdbElasticSearchClusterResult =\u003e getMdbElasticSearchClusterResult.NetworkId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.LookupMdbElasticSearchCluster(ctx, \u0026GetMdbElasticSearchClusterArgs{\n\t\t\tName: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"networkId\", foo.NetworkId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetMdbElasticSearchClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getMdbElasticSearchCluster(GetMdbElasticSearchClusterArgs.builder()\n            .name(\"test\")\n            .build());\n\n        ctx.export(\"networkId\", foo.applyValue(getMdbElasticSearchClusterResult -\u003e getMdbElasticSearchClusterResult.networkId()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getMdbElasticSearchCluster\n      Arguments:\n        name: test\noutputs:\n  networkId: ${foo.networkId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMdbElasticSearchCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the Elasticsearch cluster.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Elasticsearch cluster.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Elasticsearch cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Elasticsearch cluster.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "ID of the service account authorized for this cluster.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMdbElasticSearchCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbElasticSearchClusterConfig:getMdbElasticSearchClusterConfig"
                        },
                        "description": "Configuration of the Elasticsearch cluster. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Elasticsearch cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the Elasticsearch cluster.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "health": {
                        "type": "string",
                        "description": "Aggregated health of the cluster.\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbElasticSearchClusterHost:getMdbElasticSearchClusterHost"
                        },
                        "description": "A host of the Elasticsearch cluster. The structure is documented below.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Elasticsearch cluster.\n"
                    },
                    "maintenanceWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbElasticSearchClusterMaintenanceWindow:getMdbElasticSearchClusterMaintenanceWindow"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the Elasticsearch cluster belongs.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "ID of the service account authorized for this cluster.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "configs",
                    "createdAt",
                    "deletionProtection",
                    "description",
                    "environment",
                    "folderId",
                    "health",
                    "hosts",
                    "id",
                    "labels",
                    "maintenanceWindows",
                    "name",
                    "networkId",
                    "securityGroupIds",
                    "serviceAccountId",
                    "status"
                ]
            }
        },
        "yandex:index/getMdbGreenplumCluster:getMdbGreenplumCluster": {
            "description": "Get information about a Yandex Managed Greenplum cluster. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-greenplum/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getMdbGreenplumCluster({\n    name: \"test\",\n}));\n\nexport const networkId = foo.networkId;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_mdb_greenplum_cluster(name=\"test\")\npulumi.export(\"networkId\", foo.network_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetMdbGreenplumCluster.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"networkId\"] = foo.Apply(getMdbGreenplumClusterResult =\u003e getMdbGreenplumClusterResult.NetworkId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.LookupMdbGreenplumCluster(ctx, \u0026GetMdbGreenplumClusterArgs{\n\t\t\tName: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"networkId\", foo.NetworkId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetMdbGreenplumClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getMdbGreenplumCluster(GetMdbGreenplumClusterArgs.builder()\n            .name(\"test\")\n            .build());\n\n        ctx.export(\"networkId\", foo.applyValue(getMdbGreenplumClusterResult -\u003e getMdbGreenplumClusterResult.networkId()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getMdbGreenplumCluster\n      Arguments:\n        name: test\noutputs:\n  networkId: ${foo.networkId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMdbGreenplumCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the Greenplum cluster.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.\n"
                    },
                    "greenplumConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Greenplum cluster config.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Greenplum cluster.\n"
                    },
                    "poolerConfig": {
                        "$ref": "#/types/yandex:index/getMdbGreenplumClusterPoolerConfig:getMdbGreenplumClusterPoolerConfig",
                        "description": "Configuration of the connection pooler. The structure is documented below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMdbGreenplumCluster.\n",
                "properties": {
                    "accesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbGreenplumClusterAccess:getMdbGreenplumClusterAccess"
                        },
                        "description": "Access policy to the Greenplum cluster. The structure is documented below.\n"
                    },
                    "assignPublicIp": {
                        "type": "boolean",
                        "description": "Flag that indicates whether master hosts was created with a public IP.\n"
                    },
                    "backupWindowStarts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbGreenplumClusterBackupWindowStart:getMdbGreenplumClusterBackupWindowStart"
                        },
                        "description": "Time to start the daily backup, in the UTC timezone. The structure is documented below.\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp of cluster creation.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Flag to protect the cluster from deletion.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Greenplum cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the Greenplum cluster.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "greenplumConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Greenplum cluster config.\n"
                    },
                    "health": {
                        "type": "string",
                        "description": "Aggregated health of the cluster.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Greenplum cluster.\n"
                    },
                    "maintenanceWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbGreenplumClusterMaintenanceWindow:getMdbGreenplumClusterMaintenanceWindow"
                        },
                        "description": "Maintenance window settings of the Greenplum cluster. The structure is documented below.\n"
                    },
                    "masterHostCount": {
                        "type": "number",
                        "description": "Number of hosts in master subcluster.\n"
                    },
                    "masterHosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbGreenplumClusterMasterHost:getMdbGreenplumClusterMasterHost"
                        },
                        "description": "Info about hosts in master subcluster. The structure is documented below.\n"
                    },
                    "masterSubclusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbGreenplumClusterMasterSubcluster:getMdbGreenplumClusterMasterSubcluster"
                        },
                        "description": "Settings for master subcluster. The structure is documented below.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the Greenplum cluster belongs.\n"
                    },
                    "poolerConfig": {
                        "$ref": "#/types/yandex:index/getMdbGreenplumClusterPoolerConfig:getMdbGreenplumClusterPoolerConfig",
                        "description": "Configuration of the connection pooler. The structure is documented below.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "segmentHostCount": {
                        "type": "number",
                        "description": "Number of hosts in segment subcluster.\n"
                    },
                    "segmentHosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbGreenplumClusterSegmentHost:getMdbGreenplumClusterSegmentHost"
                        },
                        "description": "Info about hosts in segment subcluster. The structure is documented below.\n"
                    },
                    "segmentInHost": {
                        "type": "number",
                        "description": "Number of segments on segment host.\n"
                    },
                    "segmentSubclusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbGreenplumClusterSegmentSubcluster:getMdbGreenplumClusterSegmentSubcluster"
                        },
                        "description": "Settings for segment subcluster. The structure is documented below.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "The ID of the subnet, to which the hosts belongs. The subnet must be a part of the network to which the cluster belongs.\n"
                    },
                    "userName": {
                        "type": "string",
                        "description": "Greenplum cluster admin user name.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the Greenplum cluster.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "The availability zone where the Greenplum hosts will be created.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accesses",
                    "assignPublicIp",
                    "backupWindowStarts",
                    "clusterId",
                    "createdAt",
                    "deletionProtection",
                    "description",
                    "environment",
                    "folderId",
                    "greenplumConfig",
                    "health",
                    "id",
                    "labels",
                    "maintenanceWindows",
                    "masterHostCount",
                    "masterHosts",
                    "masterSubclusters",
                    "name",
                    "networkId",
                    "securityGroupIds",
                    "segmentHostCount",
                    "segmentHosts",
                    "segmentInHost",
                    "segmentSubclusters",
                    "status",
                    "subnetId",
                    "userName",
                    "version",
                    "zone"
                ]
            }
        },
        "yandex:index/getMdbKafkaCluster:getMdbKafkaCluster": {
            "description": "Get information about a Yandex Managed Kafka cluster. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-kafka/concepts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getMdbKafkaCluster({\n    name: \"test\",\n}));\n\nexport const networkId = foo.networkId;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_mdb_kafka_cluster(name=\"test\")\npulumi.export(\"networkId\", foo.network_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetMdbKafkaCluster.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"networkId\"] = foo.Apply(getMdbKafkaClusterResult =\u003e getMdbKafkaClusterResult.NetworkId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.LookupMdbKafkaCluster(ctx, \u0026GetMdbKafkaClusterArgs{\n\t\t\tName: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"networkId\", foo.NetworkId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetMdbKafkaClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getMdbKafkaCluster(GetMdbKafkaClusterArgs.builder()\n            .name(\"test\")\n            .build());\n\n        ctx.export(\"networkId\", foo.applyValue(getMdbKafkaClusterResult -\u003e getMdbKafkaClusterResult.networkId()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getMdbKafkaCluster\n      Arguments:\n        name: test\noutputs:\n  networkId: ${foo.networkId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMdbKafkaCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the Kafka cluster.\n"
                    },
                    "config": {
                        "$ref": "#/types/yandex:index/getMdbKafkaClusterConfig:getMdbKafkaClusterConfig",
                        "description": "Configuration of the Kafka cluster. The structure is documented below.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Kafka cluster.\n"
                    },
                    "subnetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbKafkaClusterTopic:getMdbKafkaClusterTopic"
                        },
                        "description": "A topic of the Kafka cluster. The structure is documented below.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbKafkaClusterUser:getMdbKafkaClusterUser"
                        },
                        "description": "A user of the Kafka cluster. The structure is documented below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMdbKafkaCluster.\n",
                "properties": {
                    "accesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbKafkaClusterAccess:getMdbKafkaClusterAccess"
                        },
                        "description": "(Optional) Access policy to the Kafka cluster. The structure is documented below.\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "config": {
                        "$ref": "#/types/yandex:index/getMdbKafkaClusterConfig:getMdbKafkaClusterConfig",
                        "description": "Configuration of the Kafka cluster. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Kafka cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the Kafka cluster.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "health": {
                        "type": "string",
                        "description": "Health of the host.\n"
                    },
                    "hostGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IDs of the host groups hosting VMs of the cluster.\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbKafkaClusterHost:getMdbKafkaClusterHost"
                        },
                        "description": "A host of the Kafka cluster. The structure is documented below.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Kafka cluster.\n"
                    },
                    "maintenanceWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbKafkaClusterMaintenanceWindow:getMdbKafkaClusterMaintenanceWindow"
                        },
                        "description": "Maintenance window settings of the Kafka cluster. The structure is documented below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The fully qualified domain name of the host.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the Kafka cluster belongs.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of security groups IDs of the Kafka cluster.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster.\n"
                    },
                    "subnetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbKafkaClusterTopic:getMdbKafkaClusterTopic"
                        },
                        "description": "A topic of the Kafka cluster. The structure is documented below.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbKafkaClusterUser:getMdbKafkaClusterUser"
                        },
                        "description": "A user of the Kafka cluster. The structure is documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accesses",
                    "clusterId",
                    "createdAt",
                    "deletionProtection",
                    "description",
                    "environment",
                    "folderId",
                    "health",
                    "hosts",
                    "hostGroupIds",
                    "id",
                    "labels",
                    "maintenanceWindows",
                    "name",
                    "networkId",
                    "securityGroupIds",
                    "status"
                ]
            }
        },
        "yandex:index/getMdbKafkaConnector:getMdbKafkaConnector": {
            "description": "Get information about a connector of the Yandex Managed Kafka cluster. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-kafka/concepts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getMdbKafkaConnector({\n    clusterId: \"some_cluster_id\",\n    name: \"test\",\n}));\n\nexport const tasksMax = foo.tasksMax;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_mdb_kafka_connector(cluster_id=\"some_cluster_id\",\n    name=\"test\")\npulumi.export(\"tasksMax\", foo.tasks_max)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetMdbKafkaConnector.Invoke(new()\n    {\n        ClusterId = \"some_cluster_id\",\n        Name = \"test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"tasksMax\"] = foo.Apply(getMdbKafkaConnectorResult =\u003e getMdbKafkaConnectorResult.TasksMax),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.LookupMdbKafkaConnector(ctx, \u0026GetMdbKafkaConnectorArgs{\n\t\t\tClusterId: \"some_cluster_id\",\n\t\t\tName:      \"test\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"tasksMax\", foo.TasksMax)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetMdbKafkaConnectorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getMdbKafkaConnector(GetMdbKafkaConnectorArgs.builder()\n            .clusterId(\"some_cluster_id\")\n            .name(\"test\")\n            .build());\n\n        ctx.export(\"tasksMax\", foo.applyValue(getMdbKafkaConnectorResult -\u003e getMdbKafkaConnectorResult.tasksMax()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getMdbKafkaConnector\n      Arguments:\n        clusterId: some_cluster_id\n        name: test\noutputs:\n  tasksMax: ${foo.tasksMax}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMdbKafkaConnector.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the Kafka cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Kafka connector.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMdbKafkaConnector.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "connectorConfigMirrormakers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbKafkaConnectorConnectorConfigMirrormaker:getMdbKafkaConnectorConnectorConfigMirrormaker"
                        },
                        "description": "Params for MirrorMaker2 connector. The structure is documented below.\n"
                    },
                    "connectorConfigS3Sinks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbKafkaConnectorConnectorConfigS3Sink:getMdbKafkaConnectorConnectorConfigS3Sink"
                        },
                        "description": "Params for S3 Sink connector. The structure is documented below.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "properties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Additional properties for connector.\n"
                    },
                    "tasksMax": {
                        "type": "number",
                        "description": "The number of the connector's parallel working tasks. Default is the number of brokers\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "connectorConfigMirrormakers",
                    "connectorConfigS3Sinks",
                    "id",
                    "name",
                    "properties",
                    "tasksMax"
                ]
            }
        },
        "yandex:index/getMdbKafkaTopic:getMdbKafkaTopic": {
            "inputs": {
                "description": "A collection of arguments for invoking getMdbKafkaTopic.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMdbKafkaTopic.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "partitions": {
                        "type": "number"
                    },
                    "replicationFactor": {
                        "type": "number"
                    },
                    "topicConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbKafkaTopicTopicConfig:getMdbKafkaTopicTopicConfig"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "id",
                    "name",
                    "partitions",
                    "replicationFactor",
                    "topicConfigs"
                ]
            }
        },
        "yandex:index/getMdbMongodbCluster:getMdbMongodbCluster": {
            "description": "Get information about a Yandex Managed MongoDB cluster. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-mongodb/concepts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getMdbMongodbCluster({\n    name: \"test\",\n}));\n\nexport const networkId = foo.networkId!;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_mdb_mongodb_cluster(name=\"test\")\npulumi.export(\"networkId\", foo.network_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetMdbMongodbCluster.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"networkId\"] = foo.Apply(getMdbMongodbClusterResult =\u003e getMdbMongodbClusterResult.NetworkId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.LookupMdbMongodbCluster(ctx, \u0026GetMdbMongodbClusterArgs{\n\t\t\tName: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"networkId\", foo.NetworkId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetMdbMongodbClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getMdbMongodbCluster(GetMdbMongodbClusterArgs.builder()\n            .name(\"test\")\n            .build());\n\n        ctx.export(\"networkId\", foo.applyValue(getMdbMongodbClusterResult -\u003e getMdbMongodbClusterResult.networkId()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getMdbMongodbCluster\n      Arguments:\n        name: test\noutputs:\n  networkId: ${foo.networkId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMdbMongodbCluster.\n",
                "properties": {
                    "clusterConfig": {
                        "$ref": "#/types/yandex:index/getMdbMongodbClusterClusterConfig:getMdbMongodbClusterClusterConfig",
                        "description": "Configuration of the MongoDB cluster. The structure is documented below.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the MongoDB cluster.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMongodbClusterDatabase:getMdbMongodbClusterDatabase"
                        },
                        "description": "A database of the MongoDB cluster. The structure is documented below.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the MongoDB cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the MongoDB cluster.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "health": {
                        "type": "string",
                        "description": "The health of the host.\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMongodbClusterHost:getMdbMongodbClusterHost"
                        },
                        "description": "A host of the MongoDB cluster. The structure is documented below.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the MongoDB cluster.\n"
                    },
                    "maintenanceWindow": {
                        "$ref": "#/types/yandex:index/getMdbMongodbClusterMaintenanceWindow:getMdbMongodbClusterMaintenanceWindow"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the MongoDB cluster.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the MongoDB cluster belongs.\n"
                    },
                    "resources": {
                        "$ref": "#/types/yandex:index/getMdbMongodbClusterResources:getMdbMongodbClusterResources",
                        "description": "Resources allocated to hosts of the MongoDB cluster. The structure is documented below.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "sharded": {
                        "type": "boolean",
                        "description": "MongoDB Cluster mode enabled/disabled.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMongodbClusterUser:getMdbMongodbClusterUser"
                        },
                        "description": "A user of the MongoDB cluster. The structure is documented below.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMdbMongodbCluster.\n",
                "properties": {
                    "clusterConfig": {
                        "$ref": "#/types/yandex:index/getMdbMongodbClusterClusterConfig:getMdbMongodbClusterClusterConfig",
                        "description": "Configuration of the MongoDB cluster. The structure is documented below.\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMongodbClusterDatabase:getMdbMongodbClusterDatabase"
                        },
                        "description": "A database of the MongoDB cluster. The structure is documented below.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the MongoDB cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the MongoDB cluster.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "health": {
                        "type": "string",
                        "description": "The health of the host.\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMongodbClusterHost:getMdbMongodbClusterHost"
                        },
                        "description": "A host of the MongoDB cluster. The structure is documented below.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the MongoDB cluster.\n"
                    },
                    "maintenanceWindow": {
                        "$ref": "#/types/yandex:index/getMdbMongodbClusterMaintenanceWindow:getMdbMongodbClusterMaintenanceWindow"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the MongoDB cluster belongs.\n"
                    },
                    "resources": {
                        "$ref": "#/types/yandex:index/getMdbMongodbClusterResources:getMdbMongodbClusterResources",
                        "description": "Resources allocated to hosts of the MongoDB cluster. The structure is documented below.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "sharded": {
                        "type": "boolean",
                        "description": "MongoDB Cluster mode enabled/disabled.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMongodbClusterUser:getMdbMongodbClusterUser"
                        },
                        "description": "A user of the MongoDB cluster. The structure is documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "createdAt",
                    "deletionProtection",
                    "description",
                    "folderId",
                    "health",
                    "id",
                    "labels",
                    "sharded",
                    "status"
                ]
            }
        },
        "yandex:index/getMdbMysqlCluster:getMdbMysqlCluster": {
            "description": "Get information about a Yandex Managed MySQL cluster. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-mysql/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getMdbMysqlCluster({\n    name: \"test\",\n}));\n\nexport const networkId = foo.networkId;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_mdb_mysql_cluster(name=\"test\")\npulumi.export(\"networkId\", foo.network_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetMdbMysqlCluster.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"networkId\"] = foo.Apply(getMdbMysqlClusterResult =\u003e getMdbMysqlClusterResult.NetworkId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.LookupMdbMysqlCluster(ctx, \u0026GetMdbMysqlClusterArgs{\n\t\t\tName: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"networkId\", foo.NetworkId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetMdbMysqlClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getMdbMysqlCluster(GetMdbMysqlClusterArgs.builder()\n            .name(\"test\")\n            .build());\n\n        ctx.export(\"networkId\", foo.applyValue(getMdbMysqlClusterResult -\u003e getMdbMysqlClusterResult.networkId()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getMdbMysqlCluster\n      Arguments:\n        name: test\noutputs:\n  networkId: ${foo.networkId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMdbMysqlCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the MySQL cluster.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the MySQL cluster.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the MySQL cluster.\n"
                    },
                    "mysqlConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "MySQL cluster config.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the MySQL cluster.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMdbMysqlCluster.\n",
                "properties": {
                    "access": {
                        "$ref": "#/types/yandex:index/getMdbMysqlClusterAccess:getMdbMysqlClusterAccess",
                        "description": "Access policy to the MySQL cluster. The structure is documented below.\n"
                    },
                    "backupRetainPeriodDays": {
                        "type": "number",
                        "description": "The period in days during which backups are stored.\n"
                    },
                    "backupWindowStarts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMysqlClusterBackupWindowStart:getMdbMysqlClusterBackupWindowStart"
                        }
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMysqlClusterDatabase:getMdbMysqlClusterDatabase"
                        },
                        "description": "A database of the MySQL cluster. The structure is documented below.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the MySQL cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the MySQL cluster.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "health": {
                        "type": "string",
                        "description": "Aggregated health of the cluster.\n"
                    },
                    "hostGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMysqlClusterHost:getMdbMysqlClusterHost"
                        },
                        "description": "A host of the MySQL cluster. The structure is documented below.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the MySQL cluster.\n"
                    },
                    "maintenanceWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMysqlClusterMaintenanceWindow:getMdbMysqlClusterMaintenanceWindow"
                        },
                        "description": "Maintenance window settings of the MySQL cluster. The structure is documented below.\n"
                    },
                    "mysqlConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "MySQL cluster config.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the MySQL cluster belongs.\n"
                    },
                    "performanceDiagnostics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMysqlClusterPerformanceDiagnostic:getMdbMysqlClusterPerformanceDiagnostic"
                        },
                        "description": "Cluster performance diagnostics settings. The structure is documented below. [YC Documentation](https://cloud.yandex.com/docs/managed-mysql/api-ref/grpc/cluster_service#PerformanceDiagnostics)\n"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMysqlClusterResource:getMdbMysqlClusterResource"
                        },
                        "description": "Resources allocated to hosts of the MySQL cluster. The structure is documented below.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMysqlClusterUser:getMdbMysqlClusterUser"
                        },
                        "description": "A user of the MySQL cluster. The structure is documented below.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the MySQL cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "access",
                    "backupRetainPeriodDays",
                    "backupWindowStarts",
                    "clusterId",
                    "createdAt",
                    "databases",
                    "deletionProtection",
                    "environment",
                    "folderId",
                    "health",
                    "hosts",
                    "hostGroupIds",
                    "id",
                    "maintenanceWindows",
                    "mysqlConfig",
                    "name",
                    "networkId",
                    "performanceDiagnostics",
                    "resources",
                    "securityGroupIds",
                    "status",
                    "users",
                    "version"
                ]
            }
        },
        "yandex:index/getMdbMysqlDatabase:getMdbMysqlDatabase": {
            "inputs": {
                "description": "A collection of arguments for invoking getMdbMysqlDatabase.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMdbMysqlDatabase.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "id",
                    "name"
                ]
            }
        },
        "yandex:index/getMdbMysqlUser:getMdbMysqlUser": {
            "description": "Get information about a Yandex Managed MySQL user. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-mysql/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getMdbMysqlUser({\n    clusterId: \"some_cluster_id\",\n    name: \"test\",\n}));\n\nexport const permission = foo.permissions!;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_mdb_mysql_user(cluster_id=\"some_cluster_id\",\n    name=\"test\")\npulumi.export(\"permission\", foo.permissions)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetMdbMysqlUser.Invoke(new()\n    {\n        ClusterId = \"some_cluster_id\",\n        Name = \"test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"permission\"] = foo.Apply(getMdbMysqlUserResult =\u003e getMdbMysqlUserResult.Permissions),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.LookupMdbMysqlUser(ctx, \u0026GetMdbMysqlUserArgs{\n\t\t\tClusterId: \"some_cluster_id\",\n\t\t\tName:      \"test\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"permission\", foo.Permissions)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetMdbMysqlUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getMdbMysqlUser(GetMdbMysqlUserArgs.builder()\n            .clusterId(\"some_cluster_id\")\n            .name(\"test\")\n            .build());\n\n        ctx.export(\"permission\", foo.applyValue(getMdbMysqlUserResult -\u003e getMdbMysqlUserResult.permissions()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getMdbMysqlUser\n      Arguments:\n        clusterId: some_cluster_id\n        name: test\noutputs:\n  permission: ${foo.permissions}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMdbMysqlUser.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the MySQL cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the MySQL user.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMysqlUserPermission:getMdbMysqlUserPermission"
                        },
                        "description": "Set of permissions granted to the user. The structure is documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMdbMysqlUser.\n",
                "properties": {
                    "authenticationPlugin": {
                        "type": "string",
                        "description": "Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD`\n"
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "connectionLimits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMysqlUserConnectionLimit:getMdbMysqlUserConnectionLimit"
                        },
                        "description": "User's connection limits. The structure is documented below.\n"
                    },
                    "globalPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List user's global permissions. Allowed values: `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS` or empty list.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbMysqlUserPermission:getMdbMysqlUserPermission"
                        },
                        "description": "Set of permissions granted to the user. The structure is documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authenticationPlugin",
                    "clusterId",
                    "connectionLimits",
                    "globalPermissions",
                    "id",
                    "name"
                ]
            }
        },
        "yandex:index/getMdbPostgresqlCluster:getMdbPostgresqlCluster": {
            "description": "Get information about a Yandex Managed PostgreSQL cluster. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-postgresql/).\n[How to connect to the DB](https://cloud.yandex.com/en-ru/docs/managed-postgresql/quickstart#connect). To connect, use port 6432. The port number is not configurable.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getMdbPostgresqlCluster({\n    name: \"test\",\n}));\n\nexport const fqdn = foo.hosts[0].fqdn;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_mdb_postgresql_cluster(name=\"test\")\npulumi.export(\"fqdn\", foo.hosts[0].fqdn)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetMdbPostgresqlCluster.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"fqdn\"] = foo.Apply(getMdbPostgresqlClusterResult =\u003e getMdbPostgresqlClusterResult.Hosts[0]?.Fqdn),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.LookupMdbPostgresqlCluster(ctx, \u0026GetMdbPostgresqlClusterArgs{\n\t\t\tName: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"fqdn\", foo.Hosts[0].Fqdn)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetMdbPostgresqlClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getMdbPostgresqlCluster(GetMdbPostgresqlClusterArgs.builder()\n            .name(\"test\")\n            .build());\n\n        ctx.export(\"fqdn\", foo.applyValue(getMdbPostgresqlClusterResult -\u003e getMdbPostgresqlClusterResult.hosts()[0].fqdn()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getMdbPostgresqlCluster\n      Arguments:\n        name: test\noutputs:\n  fqdn: ${foo.hosts[0].fqdn}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMdbPostgresqlCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the PostgreSQL cluster.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the PostgreSQL cluster.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the PostgreSQL cluster.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMdbPostgresqlCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbPostgresqlClusterConfig:getMdbPostgresqlClusterConfig"
                        },
                        "description": "Configuration of the PostgreSQL cluster. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp of cluster creation.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the PostgreSQL cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the PostgreSQL cluster.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "health": {
                        "type": "string",
                        "description": "Aggregated health of the cluster.\n"
                    },
                    "hostGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbPostgresqlClusterHost:getMdbPostgresqlClusterHost"
                        },
                        "description": "A host of the PostgreSQL cluster. The structure is documented below.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the PostgreSQL cluster.\n"
                    },
                    "maintenanceWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbPostgresqlClusterMaintenanceWindow:getMdbPostgresqlClusterMaintenanceWindow"
                        },
                        "description": "Maintenance window settings of the PostgreSQL cluster. The structure is documented below.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the PostgreSQL cluster belongs.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "configs",
                    "createdAt",
                    "deletionProtection",
                    "environment",
                    "folderId",
                    "health",
                    "hosts",
                    "hostGroupIds",
                    "id",
                    "labels",
                    "maintenanceWindows",
                    "name",
                    "networkId",
                    "securityGroupIds",
                    "status"
                ]
            }
        },
        "yandex:index/getMdbPostgresqlDatabase:getMdbPostgresqlDatabase": {
            "description": "Get information about a Yandex Managed PostgreSQL database. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-postgresql/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getMdbPostgresqlDatabase({\n    clusterId: \"some_cluster_id\",\n    name: \"test\",\n}));\n\nexport const owner = foo.owner!;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_mdb_postgresql_database(cluster_id=\"some_cluster_id\",\n    name=\"test\")\npulumi.export(\"owner\", foo.owner)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetMdbPostgresqlDatabase.Invoke(new()\n    {\n        ClusterId = \"some_cluster_id\",\n        Name = \"test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"owner\"] = foo.Apply(getMdbPostgresqlDatabaseResult =\u003e getMdbPostgresqlDatabaseResult.Owner),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.LookupMdbPostgresqlDatabase(ctx, \u0026GetMdbPostgresqlDatabaseArgs{\n\t\t\tClusterId: \"some_cluster_id\",\n\t\t\tName:      \"test\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"owner\", foo.Owner)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetMdbPostgresqlDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getMdbPostgresqlDatabase(GetMdbPostgresqlDatabaseArgs.builder()\n            .clusterId(\"some_cluster_id\")\n            .name(\"test\")\n            .build());\n\n        ctx.export(\"owner\", foo.applyValue(getMdbPostgresqlDatabaseResult -\u003e getMdbPostgresqlDatabaseResult.owner()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getMdbPostgresqlDatabase\n      Arguments:\n        clusterId: some_cluster_id\n        name: test\noutputs:\n  owner: ${foo.owner}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMdbPostgresqlDatabase.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the PostgreSQL cluster.\n"
                    },
                    "extensions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbPostgresqlDatabaseExtension:getMdbPostgresqlDatabaseExtension"
                        },
                        "description": "Set of database extensions. The structure is documented below\n"
                    },
                    "lcCollate": {
                        "type": "string",
                        "description": "POSIX locale for string sorting order. Forbidden to change in an existing database.\n"
                    },
                    "lcType": {
                        "type": "string",
                        "description": "POSIX locale for character classification. Forbidden to change in an existing database.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the PostgreSQL cluster.\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the user assigned as the owner of the database.\n"
                    },
                    "templateDb": {
                        "type": "string",
                        "description": "Name of the template database.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMdbPostgresqlDatabase.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "extensions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbPostgresqlDatabaseExtension:getMdbPostgresqlDatabaseExtension"
                        },
                        "description": "Set of database extensions. The structure is documented below\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "lcCollate": {
                        "type": "string",
                        "description": "POSIX locale for string sorting order. Forbidden to change in an existing database.\n"
                    },
                    "lcType": {
                        "type": "string",
                        "description": "POSIX locale for character classification. Forbidden to change in an existing database.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the database extension. For more information on available extensions see [the official documentation](https://cloud.yandex.com/docs/managed-postgresql/operations/cluster-extensions).\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Name of the user assigned as the owner of the database.\n"
                    },
                    "templateDb": {
                        "type": "string",
                        "description": "Name of the template database.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "id",
                    "lcCollate",
                    "lcType",
                    "name",
                    "owner",
                    "templateDb"
                ]
            }
        },
        "yandex:index/getMdbPostgresqlUser:getMdbPostgresqlUser": {
            "description": "Get information about a Yandex Managed PostgreSQL user. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-postgresql/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getMdbPostgresqlUser({\n    clusterId: \"some_cluster_id\",\n    name: \"test\",\n}));\n\nexport const permission = foo.permissions;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_mdb_postgresql_user(cluster_id=\"some_cluster_id\",\n    name=\"test\")\npulumi.export(\"permission\", foo.permissions)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetMdbPostgresqlUser.Invoke(new()\n    {\n        ClusterId = \"some_cluster_id\",\n        Name = \"test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"permission\"] = foo.Apply(getMdbPostgresqlUserResult =\u003e getMdbPostgresqlUserResult.Permissions),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.LookupMdbPostgresqlUser(ctx, \u0026GetMdbPostgresqlUserArgs{\n\t\t\tClusterId: \"some_cluster_id\",\n\t\t\tName:      \"test\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"permission\", foo.Permissions)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetMdbPostgresqlUserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getMdbPostgresqlUser(GetMdbPostgresqlUserArgs.builder()\n            .clusterId(\"some_cluster_id\")\n            .name(\"test\")\n            .build());\n\n        ctx.export(\"permission\", foo.applyValue(getMdbPostgresqlUserResult -\u003e getMdbPostgresqlUserResult.permissions()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getMdbPostgresqlUser\n      Arguments:\n        clusterId: some_cluster_id\n        name: test\noutputs:\n  permission: ${foo.permissions}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMdbPostgresqlUser.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the PostgreSQL cluster.\n"
                    },
                    "connLimit": {
                        "type": "number",
                        "description": "The maximum number of connections per user.\n"
                    },
                    "login": {
                        "type": "boolean",
                        "description": "User's ability to login.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the PostgreSQL user.\n"
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of user settings.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMdbPostgresqlUser.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "connLimit": {
                        "type": "number",
                        "description": "The maximum number of connections per user.\n"
                    },
                    "grants": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the user's grants.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "login": {
                        "type": "boolean",
                        "description": "User's ability to login.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user.\n",
                        "secret": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbPostgresqlUserPermission:getMdbPostgresqlUserPermission"
                        },
                        "description": "Set of permissions granted to the user. The structure is documented below.\n"
                    },
                    "settings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Map of user settings.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "grants",
                    "id",
                    "name",
                    "password",
                    "permissions",
                    "settings"
                ]
            }
        },
        "yandex:index/getMdbRedisCluster:getMdbRedisCluster": {
            "description": "Get information about a Yandex Managed Redis cluster. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-redis/concepts).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getMdbRedisCluster({\n    name: \"test\",\n}));\n\nexport const networkId = foo.networkId;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_mdb_redis_cluster(name=\"test\")\npulumi.export(\"networkId\", foo.network_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetMdbRedisCluster.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"networkId\"] = foo.Apply(getMdbRedisClusterResult =\u003e getMdbRedisClusterResult.NetworkId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.LookupMdbRedisCluster(ctx, \u0026GetMdbRedisClusterArgs{\n\t\t\tName: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"networkId\", foo.NetworkId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetMdbRedisClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getMdbRedisCluster(GetMdbRedisClusterArgs.builder()\n            .name(\"test\")\n            .build());\n\n        ctx.export(\"networkId\", foo.applyValue(getMdbRedisClusterResult -\u003e getMdbRedisClusterResult.networkId()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getMdbRedisCluster\n      Arguments:\n        name: test\noutputs:\n  networkId: ${foo.networkId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMdbRedisCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the Redis cluster.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Redis cluster.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMdbRedisCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string"
                    },
                    "configs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbRedisClusterConfig:getMdbRedisClusterConfig"
                        },
                        "description": "Configuration of the Redis cluster. The structure is documented below.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Redis cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the Redis cluster.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "health": {
                        "type": "string",
                        "description": "Aggregated health of the cluster.\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbRedisClusterHost:getMdbRedisClusterHost"
                        },
                        "description": "A host of the Redis cluster. The structure is documented below.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the Redis cluster.\n"
                    },
                    "maintenanceWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbRedisClusterMaintenanceWindow:getMdbRedisClusterMaintenanceWindow"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the Redis cluster belongs.\n"
                    },
                    "persistenceMode": {
                        "type": "string",
                        "description": "Persistence mode.\n"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbRedisClusterResource:getMdbRedisClusterResource"
                        },
                        "description": "Resources allocated to hosts of the Redis cluster. The structure is documented below.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "sharded": {
                        "type": "boolean",
                        "description": "Redis Cluster mode enabled/disabled.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster.\n"
                    },
                    "tlsEnabled": {
                        "type": "boolean",
                        "description": "TLS support mode enabled/disabled.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "configs",
                    "createdAt",
                    "deletionProtection",
                    "description",
                    "environment",
                    "folderId",
                    "health",
                    "hosts",
                    "id",
                    "labels",
                    "maintenanceWindows",
                    "name",
                    "networkId",
                    "persistenceMode",
                    "resources",
                    "securityGroupIds",
                    "sharded",
                    "status",
                    "tlsEnabled"
                ]
            }
        },
        "yandex:index/getMdbSqlserverCluster:getMdbSqlserverCluster": {
            "description": "Get information about a Yandex Managed SQLServer cluster. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/managed-sqlserver/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getMdbSqlserverCluster({\n    name: \"test\",\n}));\n\nexport const networkId = foo.networkId;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_mdb_sqlserver_cluster(name=\"test\")\npulumi.export(\"networkId\", foo.network_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetMdbSqlserverCluster.Invoke(new()\n    {\n        Name = \"test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"networkId\"] = foo.Apply(getMdbSqlserverClusterResult =\u003e getMdbSqlserverClusterResult.NetworkId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.GetMdbSqlserverCluster(ctx, \u0026GetMdbSqlserverClusterArgs{\n\t\t\tName: pulumi.StringRef(\"test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"networkId\", foo.NetworkId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetMdbSqlserverClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getMdbSqlserverCluster(GetMdbSqlserverClusterArgs.builder()\n            .name(\"test\")\n            .build());\n\n        ctx.export(\"networkId\", foo.applyValue(getMdbSqlserverClusterResult -\u003e getMdbSqlserverClusterResult.networkId()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getMdbSqlserverCluster\n      Arguments:\n        name: test\noutputs:\n  networkId: ${foo.networkId}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMdbSqlserverCluster.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "The ID of the SQLServer cluster.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "The ID of the folder that the resource belongs to. If it is not provided, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the SQLServer cluster.\n"
                    },
                    "sqlcollation": {
                        "type": "string",
                        "description": "SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!\n"
                    },
                    "sqlserverConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "SQLServer cluster config.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getMdbSqlserverCluster.\n",
                "properties": {
                    "backupWindowStarts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbSqlserverClusterBackupWindowStart:getMdbSqlserverClusterBackupWindowStart"
                        }
                    },
                    "clusterId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the key.\n"
                    },
                    "databases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbSqlserverClusterDatabase:getMdbSqlserverClusterDatabase"
                        },
                        "description": "A database of the SQLServer cluster. The structure is documented below.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the cluster.  Can be either `true` or `false`.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the SQLServer cluster.\n"
                    },
                    "environment": {
                        "type": "string",
                        "description": "Deployment environment of the SQLServer cluster.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "health": {
                        "type": "string",
                        "description": "Aggregated health of the cluster.\n"
                    },
                    "hostGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IDs of the host groups hosting VMs of the cluster.\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbSqlserverClusterHost:getMdbSqlserverClusterHost"
                        },
                        "description": "A host of the SQLServer cluster. The structure is documented below.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs to assign to the SQLServer cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network, to which the SQLServer cluster belongs.\n"
                    },
                    "resources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbSqlserverClusterResource:getMdbSqlserverClusterResource"
                        },
                        "description": "Resources allocated to hosts of the SQLServer cluster. The structure is documented below.\n"
                    },
                    "securityGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of ids of security groups assigned to hosts of the cluster.\n"
                    },
                    "sqlcollation": {
                        "type": "string",
                        "description": "SQL Collation cluster will be created with. This attribute cannot be changed when cluster is created!\n"
                    },
                    "sqlserverConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "SQLServer cluster config.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getMdbSqlserverClusterUser:getMdbSqlserverClusterUser"
                        },
                        "description": "A user of the SQLServer cluster. The structure is documented below.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the SQLServer cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "backupWindowStarts",
                    "clusterId",
                    "createdAt",
                    "databases",
                    "deletionProtection",
                    "description",
                    "environment",
                    "folderId",
                    "health",
                    "hosts",
                    "hostGroupIds",
                    "id",
                    "labels",
                    "name",
                    "networkId",
                    "resources",
                    "securityGroupIds",
                    "sqlcollation",
                    "sqlserverConfig",
                    "status",
                    "users",
                    "version"
                ]
            }
        },
        "yandex:index/getMessageQueue:getMessageQueue": {
            "description": "Get information about a Yandex Message Queue. For more information about Yandex Message Queue, see\n[Yandex.Cloud Message Queue](https://cloud.yandex.com/docs/message-queue).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst exampleQueue = pulumi.output(yandex.getMessageQueue({\n    name: \"ymq_terraform_example\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nexample_queue = yandex.get_message_queue(name=\"ymq_terraform_example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleQueue = Yandex.GetMessageQueue.Invoke(new()\n    {\n        Name = \"ymq_terraform_example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupMessageQueue(ctx, \u0026GetMessageQueueArgs{\n\t\t\tName: \"ymq_terraform_example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetMessageQueueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleQueue = YandexFunctions.getMessageQueue(GetMessageQueueArgs.builder()\n            .name(\"ymq_terraform_example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  exampleQueue:\n    fn::invoke:\n      Function: yandex:getMessageQueue\n      Arguments:\n        name: ymq_terraform_example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMessageQueue.\n",
                "properties": {
                    "accessKey": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Queue name.\n"
                    },
                    "regionId": {
                        "type": "string",
                        "description": "The region ID where the message queue is located.\n"
                    },
                    "secretKey": {
                        "type": "string",
                        "secret": true
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMessageQueue.\n",
                "properties": {
                    "accessKey": {
                        "type": "string"
                    },
                    "arn": {
                        "type": "string",
                        "description": "ARN of the queue. It is used for setting up a [redrive policy](https://cloud.yandex.com/docs/message-queue/concepts/dlq). See [documentation](https://cloud.yandex.com/docs/message-queue/api-ref/queue/SetQueueAttributes).\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "regionId": {
                        "type": "string"
                    },
                    "secretKey": {
                        "type": "string",
                        "secret": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL of the queue.\n"
                    }
                },
                "type": "object",
                "required": [
                    "arn",
                    "id",
                    "name",
                    "url"
                ]
            }
        },
        "yandex:index/getOrganizationmanagerGroup:getOrganizationmanagerGroup": {
            "description": "Get information about a Yandex.Cloud Organization Manager Group. For more information, see\n[the official documentation](https://cloud.yandex.com/en-ru/docs/organization/manage-groups).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst group = pulumi.output(yandex.getOrganizationmanagerGroup({\n    groupId: \"some_group_id\",\n    organizationId: \"some_organization_id\",\n}));\n\nexport const my_group_name = group.name!;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ngroup = yandex.get_organizationmanager_group(group_id=\"some_group_id\",\n    organization_id=\"some_organization_id\")\npulumi.export(\"myGroup.name\", group.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @group = Yandex.GetOrganizationmanagerGroup.Invoke(new()\n    {\n        GroupId = \"some_group_id\",\n        OrganizationId = \"some_organization_id\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"myGroup.name\"] = @group.Apply(getOrganizationmanagerGroupResult =\u003e getOrganizationmanagerGroupResult).Apply(@group =\u003e @group.Apply(getOrganizationmanagerGroupResult =\u003e getOrganizationmanagerGroupResult.Name)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgroup, err := yandex.GetOrganizationmanagerGroup(ctx, \u0026GetOrganizationmanagerGroupArgs{\n\t\t\tGroupId:        pulumi.StringRef(\"some_group_id\"),\n\t\t\tOrganizationId: pulumi.StringRef(\"some_organization_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"myGroup.name\", group.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetOrganizationmanagerGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var group = YandexFunctions.getOrganizationmanagerGroup(GetOrganizationmanagerGroupArgs.builder()\n            .groupId(\"some_group_id\")\n            .organizationId(\"some_organization_id\")\n            .build());\n\n        ctx.export(\"myGroup.name\", group.applyValue(getOrganizationmanagerGroupResult -\u003e getOrganizationmanagerGroupResult.name()));\n    }\n}\n```\n```yaml\nvariables:\n  group:\n    fn::invoke:\n      Function: yandex:getOrganizationmanagerGroup\n      Arguments:\n        groupId: some_group_id\n        organizationId: some_organization_id\noutputs:\n  myGroup.name: ${group.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganizationmanagerGroup.\n",
                "properties": {
                    "groupId": {
                        "type": "string",
                        "description": "ID of a Group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a Group.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "Organization that the Group belongs to. If value is omitted, the default provider organization is used.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganizationmanagerGroup.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The Group creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Group.\n"
                    },
                    "groupId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the member.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getOrganizationmanagerGroupMember:getOrganizationmanagerGroupMember"
                        },
                        "description": "A list of members of the Group. The structure is documented below.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "groupId",
                    "id",
                    "members",
                    "name"
                ]
            }
        },
        "yandex:index/getOrganizationmanagerSamlFederation:getOrganizationmanagerSamlFederation": {
            "description": "Get information about a Yandex SAML Federation. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/organization/add-federation).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst federation = pulumi.output(yandex.getOrganizationmanagerSamlFederation({\n    federationId: \"some_federation_id\",\n    organizationId: \"some_organization_id\",\n}));\n\nexport const my_federation_name = federation.name!;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfederation = yandex.get_organizationmanager_saml_federation(federation_id=\"some_federation_id\",\n    organization_id=\"some_organization_id\")\npulumi.export(\"myFederation.name\", federation.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var federation = Yandex.GetOrganizationmanagerSamlFederation.Invoke(new()\n    {\n        FederationId = \"some_federation_id\",\n        OrganizationId = \"some_organization_id\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"myFederation.name\"] = federation.Apply(getOrganizationmanagerSamlFederationResult =\u003e getOrganizationmanagerSamlFederationResult.Name),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfederation, err := yandex.GetOrganizationmanagerSamlFederation(ctx, \u0026GetOrganizationmanagerSamlFederationArgs{\n\t\t\tFederationId:   pulumi.StringRef(\"some_federation_id\"),\n\t\t\tOrganizationId: pulumi.StringRef(\"some_organization_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"myFederation.name\", federation.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetOrganizationmanagerSamlFederationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var federation = YandexFunctions.getOrganizationmanagerSamlFederation(GetOrganizationmanagerSamlFederationArgs.builder()\n            .federationId(\"some_federation_id\")\n            .organizationId(\"some_organization_id\")\n            .build());\n\n        ctx.export(\"myFederation.name\", federation.applyValue(getOrganizationmanagerSamlFederationResult -\u003e getOrganizationmanagerSamlFederationResult.name()));\n    }\n}\n```\n```yaml\nvariables:\n  federation:\n    fn::invoke:\n      Function: yandex:getOrganizationmanagerSamlFederation\n      Arguments:\n        federationId: some_federation_id\n        organizationId: some_organization_id\noutputs:\n  myFederation.name: ${federation.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganizationmanagerSamlFederation.\n",
                "properties": {
                    "federationId": {
                        "type": "string",
                        "description": "ID of a SAML Federation.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the SAML Federation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of a SAML Federation.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "Organization that the federation belongs to. If value is omitted, the default provider organization is used.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganizationmanagerSamlFederation.\n",
                "properties": {
                    "autoCreateAccountOnLogin": {
                        "type": "boolean",
                        "description": "Indicates whether new users get added automatically on successful authentication.\n"
                    },
                    "caseInsensitiveNameIds": {
                        "type": "boolean",
                        "description": "Indicates whether case-insensitive name ids are in use.\n"
                    },
                    "cookieMaxAge": {
                        "type": "string",
                        "description": "The lifetime of a Browser cookie in seconds.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The SAML Federation creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the SAML Federation.\n"
                    },
                    "federationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The ID of the IdP server used for authentication.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the SAML Federation.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "organizationId": {
                        "type": "string"
                    },
                    "securitySettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getOrganizationmanagerSamlFederationSecuritySetting:getOrganizationmanagerSamlFederationSecuritySetting"
                        },
                        "description": "Federation security settings, structure is documented below.\n"
                    },
                    "ssoBinding": {
                        "type": "string",
                        "description": "Single sign-on endpoint binding type.\n"
                    },
                    "ssoUrl": {
                        "type": "string",
                        "description": "Single sign-on endpoint URL.\n"
                    }
                },
                "type": "object",
                "required": [
                    "autoCreateAccountOnLogin",
                    "caseInsensitiveNameIds",
                    "cookieMaxAge",
                    "createdAt",
                    "description",
                    "federationId",
                    "id",
                    "issuer",
                    "name",
                    "securitySettings",
                    "ssoBinding",
                    "ssoUrl"
                ]
            }
        },
        "yandex:index/getOrganizationmanagerSamlFederationUserAccount:getOrganizationmanagerSamlFederationUserAccount": {
            "description": "Get information about a user of Yandex SAML Federation. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/organization/operations/federations/integration-common).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst account = pulumi.output(yandex.getOrganizationmanagerSamlFederationUserAccount({\n    federationId: \"some_federation_id\",\n    nameId: \"example@example.org\",\n}));\n\nexport const my_federation_id = account.id;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\naccount = yandex.get_organizationmanager_saml_federation_user_account(federation_id=\"some_federation_id\",\n    name_id=\"example@example.org\")\npulumi.export(\"myFederation.id\", account.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var account = Yandex.GetOrganizationmanagerSamlFederationUserAccount.Invoke(new()\n    {\n        FederationId = \"some_federation_id\",\n        NameId = \"example@example.org\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"myFederation.id\"] = account.Apply(getOrganizationmanagerSamlFederationUserAccountResult =\u003e getOrganizationmanagerSamlFederationUserAccountResult.Id),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\taccount, err := yandex.GetOrganizationmanagerSamlFederationUserAccount(ctx, \u0026GetOrganizationmanagerSamlFederationUserAccountArgs{\n\t\t\tFederationId: \"some_federation_id\",\n\t\t\tNameId:       \"example@example.org\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"myFederation.id\", account.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetOrganizationmanagerSamlFederationUserAccountArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var account = YandexFunctions.getOrganizationmanagerSamlFederationUserAccount(GetOrganizationmanagerSamlFederationUserAccountArgs.builder()\n            .federationId(\"some_federation_id\")\n            .nameId(\"example@example.org\")\n            .build());\n\n        ctx.export(\"myFederation.id\", account.applyValue(getOrganizationmanagerSamlFederationUserAccountResult -\u003e getOrganizationmanagerSamlFederationUserAccountResult.id()));\n    }\n}\n```\n```yaml\nvariables:\n  account:\n    fn::invoke:\n      Function: yandex:getOrganizationmanagerSamlFederationUserAccount\n      Arguments:\n        federationId: some_federation_id\n        nameId: example@example.org\noutputs:\n  myFederation.id: ${account.id}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganizationmanagerSamlFederationUserAccount.\n",
                "properties": {
                    "federationId": {
                        "type": "string",
                        "description": "ID of a SAML Federation.\n"
                    },
                    "nameId": {
                        "type": "string",
                        "description": "Name Id of the SAML federated user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "federationId",
                    "nameId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrganizationmanagerSamlFederationUserAccount.\n",
                "properties": {
                    "federationId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "nameId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "federationId",
                    "id",
                    "nameId"
                ]
            }
        },
        "yandex:index/getResourcemanagerCloud:getResourcemanagerCloud": {
            "description": "Use this data source to get cloud details.\nFor more information, see [Cloud](https://cloud.yandex.com/docs/resource-manager/concepts/resources-hierarchy#cloud).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst foo = pulumi.output(yandex.getResourcemanagerCloud({\n    name: \"foo-cloud\",\n}));\n\nexport const cloudCreateTimestamp = foo.createdAt;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nfoo = yandex.get_resourcemanager_cloud(name=\"foo-cloud\")\npulumi.export(\"cloudCreateTimestamp\", foo.created_at)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Yandex.GetResourcemanagerCloud.Invoke(new()\n    {\n        Name = \"foo-cloud\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"cloudCreateTimestamp\"] = foo.Apply(getResourcemanagerCloudResult =\u003e getResourcemanagerCloudResult.CreatedAt),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfoo, err := yandex.GetResourcemanagerCloud(ctx, \u0026GetResourcemanagerCloudArgs{\n\t\t\tName: pulumi.StringRef(\"foo-cloud\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"cloudCreateTimestamp\", foo.CreatedAt)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetResourcemanagerCloudArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = YandexFunctions.getResourcemanagerCloud(GetResourcemanagerCloudArgs.builder()\n            .name(\"foo-cloud\")\n            .build());\n\n        ctx.export(\"cloudCreateTimestamp\", foo.applyValue(getResourcemanagerCloudResult -\u003e getResourcemanagerCloudResult.createdAt()));\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: yandex:getResourcemanagerCloud\n      Arguments:\n        name: foo-cloud\noutputs:\n  cloudCreateTimestamp: ${foo.createdAt}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getResourcemanagerCloud.\n",
                "properties": {
                    "cloudId": {
                        "type": "string",
                        "description": "ID of the cloud.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the cloud.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the cloud.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getResourcemanagerCloud.\n",
                "properties": {
                    "cloudId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Cloud creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the cloud.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the cloud.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudId",
                    "createdAt",
                    "id",
                    "name"
                ]
            }
        },
        "yandex:index/getResourcemanagerFolder:getResourcemanagerFolder": {
            "description": "Use this data source to get information about a Yandex Resource Manager Folder. For more information, see\n[the official documentation](https://cloud.yandex.com/docs/resource-manager/concepts/resources-hierarchy#folder).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myFolder1 = pulumi.output(yandex.getResourcemanagerFolder({\n    folderId: \"folder_id_number_1\",\n}));\nconst myFolder2 = pulumi.output(yandex.getResourcemanagerFolder({\n    cloudId: \"some_cloud_id\",\n    name: \"folder_name\",\n}));\n\nexport const myFolder1Name = myFolder1.name!;\nexport const myFolder2CloudId = myFolder2.cloudId!;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_folder1 = yandex.get_resourcemanager_folder(folder_id=\"folder_id_number_1\")\nmy_folder2 = yandex.get_resourcemanager_folder(cloud_id=\"some_cloud_id\",\n    name=\"folder_name\")\npulumi.export(\"myFolder1Name\", my_folder1.name)\npulumi.export(\"myFolder2CloudId\", my_folder2.cloud_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFolder1 = Yandex.GetResourcemanagerFolder.Invoke(new()\n    {\n        FolderId = \"folder_id_number_1\",\n    });\n\n    var myFolder2 = Yandex.GetResourcemanagerFolder.Invoke(new()\n    {\n        CloudId = \"some_cloud_id\",\n        Name = \"folder_name\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"myFolder1Name\"] = myFolder1.Apply(getResourcemanagerFolderResult =\u003e getResourcemanagerFolderResult.Name),\n        [\"myFolder2CloudId\"] = myFolder2.Apply(getResourcemanagerFolderResult =\u003e getResourcemanagerFolderResult.CloudId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyFolder1, err := yandex.LookupResourcemanagerFolder(ctx, \u0026GetResourcemanagerFolderArgs{\n\t\t\tFolderId: pulumi.StringRef(\"folder_id_number_1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyFolder2, err := yandex.LookupResourcemanagerFolder(ctx, \u0026GetResourcemanagerFolderArgs{\n\t\t\tCloudId: pulumi.StringRef(\"some_cloud_id\"),\n\t\t\tName:    pulumi.StringRef(\"folder_name\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"myFolder1Name\", myFolder1.Name)\n\t\tctx.Export(\"myFolder2CloudId\", myFolder2.CloudId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetResourcemanagerFolderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myFolder1 = YandexFunctions.getResourcemanagerFolder(GetResourcemanagerFolderArgs.builder()\n            .folderId(\"folder_id_number_1\")\n            .build());\n\n        final var myFolder2 = YandexFunctions.getResourcemanagerFolder(GetResourcemanagerFolderArgs.builder()\n            .cloudId(\"some_cloud_id\")\n            .name(\"folder_name\")\n            .build());\n\n        ctx.export(\"myFolder1Name\", myFolder1.applyValue(getResourcemanagerFolderResult -\u003e getResourcemanagerFolderResult.name()));\n        ctx.export(\"myFolder2CloudId\", myFolder2.applyValue(getResourcemanagerFolderResult -\u003e getResourcemanagerFolderResult.cloudId()));\n    }\n}\n```\n```yaml\nvariables:\n  myFolder1:\n    fn::invoke:\n      Function: yandex:getResourcemanagerFolder\n      Arguments:\n        folderId: folder_id_number_1\n  myFolder2:\n    fn::invoke:\n      Function: yandex:getResourcemanagerFolder\n      Arguments:\n        cloudId: some_cloud_id\n        name: folder_name\noutputs:\n  myFolder1Name: ${myFolder1.name}\n  myFolder2CloudId: ${myFolder2.cloudId}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getResourcemanagerFolder.\n",
                "properties": {
                    "cloudId": {
                        "type": "string",
                        "description": "Cloud that the resource belongs to. If value is omitted, the default provider cloud is used.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of labels applied to this folder.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the folder.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getResourcemanagerFolder.\n",
                "properties": {
                    "cloudId": {
                        "type": "string",
                        "description": "ID of the cloud that contains the folder.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Folder creation timestamp.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the folder.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of labels applied to this folder.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the folder.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudId",
                    "createdAt",
                    "description",
                    "folderId",
                    "id",
                    "name",
                    "status"
                ]
            }
        },
        "yandex:index/getServerlessContainer:getServerlessContainer": {
            "description": "Get information about a Yandex Cloud Serverless Container. \n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst my_container = pulumi.output(yandex.getServerlessContainer({\n    containerId: \"are1samplecontainer11\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_container = yandex.get_serverless_container(container_id=\"are1samplecontainer11\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_container = Yandex.GetServerlessContainer.Invoke(new()\n    {\n        ContainerId = \"are1samplecontainer11\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupServerlessContainer(ctx, \u0026GetServerlessContainerArgs{\n\t\t\tContainerId: pulumi.StringRef(\"are1samplecontainer11\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetServerlessContainerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-container = YandexFunctions.getServerlessContainer(GetServerlessContainerArgs.builder()\n            .containerId(\"are1samplecontainer11\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-container:\n    fn::invoke:\n      Function: yandex:getServerlessContainer\n      Arguments:\n        containerId: are1samplecontainer11\n```\n\nThis data source is used to define Yandex Cloud Container that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getServerlessContainer.\n",
                "properties": {
                    "containerId": {
                        "type": "string",
                        "description": "Yandex Cloud Serverless Container id used to define container\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder ID for the Yandex Cloud Serverless Container\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Yandex Cloud Serverless Container name used to define container\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getServerlessContainerSecret:getServerlessContainerSecret"
                        },
                        "description": "Secrets for Yandex Cloud Serverless Container\n* `image.0.url` - URL of image that deployed as Yandex Cloud Serverless Container\n* `image.0.work_dir` - Working directory of Yandex Cloud Serverless Container\n* `image.0.digest` - Digest of image that deployed as Yandex Cloud Serverless Container\n* `image.0.command` - List of commands of the Yandex Cloud Serverless Container\n* `image.0.args` - List of arguments of the Yandex Cloud Serverless Container\n* `image.0.environment` -  A set of key/value environment variable pairs of Yandex Cloud Serverless Container\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServerlessContainer.\n",
                "properties": {
                    "concurrency": {
                        "type": "number",
                        "description": "Concurrency of Yandex Cloud Serverless Container\n"
                    },
                    "containerId": {
                        "type": "string"
                    },
                    "coreFraction": {
                        "type": "number",
                        "description": "Core fraction (**0...100**) of the Yandex Cloud Serverless Container\n"
                    },
                    "cores": {
                        "type": "number"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of the Yandex Cloud Serverless Container\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Yandex Cloud Serverless Container\n"
                    },
                    "executionTimeout": {
                        "type": "string",
                        "description": "Execution timeout (duration format) of Yandex Cloud Serverless Container\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getServerlessContainerImage:getServerlessContainerImage"
                        }
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the Yandex Cloud Serverless Container\n"
                    },
                    "memory": {
                        "type": "number",
                        "description": "Memory in megabytes of Yandex Cloud Serverless Container\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "revisionId": {
                        "type": "string",
                        "description": "Last revision ID of the Yandex Cloud Serverless Container\n"
                    },
                    "secrets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getServerlessContainerSecret:getServerlessContainerSecret"
                        },
                        "description": "Secrets for Yandex Cloud Serverless Container\n* `image.0.url` - URL of image that deployed as Yandex Cloud Serverless Container\n* `image.0.work_dir` - Working directory of Yandex Cloud Serverless Container\n* `image.0.digest` - Digest of image that deployed as Yandex Cloud Serverless Container\n* `image.0.command` - List of commands of the Yandex Cloud Serverless Container\n* `image.0.args` - List of arguments of the Yandex Cloud Serverless Container\n* `image.0.environment` -  A set of key/value environment variable pairs of Yandex Cloud Serverless Container\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "Service account ID of Yandex Cloud Serverless Container\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "Invoke URL of the Yandex Cloud Serverless Container\n"
                    }
                },
                "type": "object",
                "required": [
                    "concurrency",
                    "coreFraction",
                    "cores",
                    "createdAt",
                    "description",
                    "executionTimeout",
                    "id",
                    "images",
                    "labels",
                    "memory",
                    "revisionId",
                    "serviceAccountId",
                    "url"
                ]
            }
        },
        "yandex:index/getVpcAddress:getVpcAddress": {
            "description": "Get information about a Yandex VPC address. For more information, see\nYandex.Cloud VPC.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst addr = pulumi.output(yandex.getVpcAddress({\n    addressId: \"my-address-id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\naddr = yandex.get_vpc_address(address_id=\"my-address-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var addr = Yandex.GetVpcAddress.Invoke(new()\n    {\n        AddressId = \"my-address-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupVpcAddress(ctx, \u0026GetVpcAddressArgs{\n\t\t\tAddressId: pulumi.StringRef(\"my-address-id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetVpcAddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var addr = YandexFunctions.getVpcAddress(GetVpcAddressArgs.builder()\n            .addressId(\"my-address-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  addr:\n    fn::invoke:\n      Function: yandex:getVpcAddress\n      Arguments:\n        addressId: my-address-id\n```\n\nThis data source is used to define [VPC Address] that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcAddress.\n",
                "properties": {
                    "addressId": {
                        "type": "string",
                        "description": "ID of the address.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the address.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcAddress.\n",
                "properties": {
                    "addressId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of this address.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the address.\n"
                    },
                    "externalIpv4Addresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getVpcAddressExternalIpv4Address:getVpcAddressExternalIpv4Address"
                        },
                        "description": "spec of IP v4 address.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels assigned to this address.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "reserved": {
                        "type": "boolean",
                        "description": "`false` means that address is ephemeral.\n"
                    },
                    "used": {
                        "type": "boolean",
                        "description": "`true` if address is used.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addressId",
                    "createdAt",
                    "description",
                    "externalIpv4Addresses",
                    "folderId",
                    "id",
                    "labels",
                    "name",
                    "reserved",
                    "used"
                ]
            }
        },
        "yandex:index/getVpcGateway:getVpcGateway": {
            "description": "Get information about a Yandex VPC gateway. For more information, see\n[Yandex.Cloud VPC](https://cloud.yandex.com/docs/vpc/concepts/index).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst defaultVpcGateway = pulumi.output(yandex.getVpcGateway({\n    gatewayId: \"my-gateway-id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ndefault = yandex.get_vpc_gateway(gateway_id=\"my-gateway-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @default = Yandex.GetVpcGateway.Invoke(new()\n    {\n        GatewayId = \"my-gateway-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupVpcGateway(ctx, \u0026GetVpcGatewayArgs{\n\t\t\tGatewayId: pulumi.StringRef(\"my-gateway-id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetVpcGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var default = YandexFunctions.getVpcGateway(GetVpcGatewayArgs.builder()\n            .gatewayId(\"my-gateway-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  default:\n    fn::invoke:\n      Function: yandex:getVpcGateway\n      Arguments:\n        gatewayId: my-gateway-id\n```\n\nThis data source is used to define [VPC Gateways] that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcGateway.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "gatewayId": {
                        "type": "string",
                        "description": "ID of the VPC Gateway.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the VPC Gateway.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcGateway.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of this VPC Gateway.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the VPC Gateway.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "gatewayId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels assigned to this VPC Gateway.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "sharedEgressGateway": {
                        "$ref": "#/types/yandex:index/getVpcGatewaySharedEgressGateway:getVpcGatewaySharedEgressGateway",
                        "description": "Shared egress gateway configuration\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "folderId",
                    "gatewayId",
                    "id",
                    "labels",
                    "name",
                    "sharedEgressGateway"
                ]
            }
        },
        "yandex:index/getVpcNetwork:getVpcNetwork": {
            "description": "Get information about a Yandex VPC network. For more information, see\n[Yandex.Cloud VPC](https://cloud.yandex.com/docs/vpc/concepts/index).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst admin = pulumi.output(yandex.getVpcNetwork({\n    networkId: \"my-network-id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nadmin = yandex.get_vpc_network(network_id=\"my-network-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var admin = Yandex.GetVpcNetwork.Invoke(new()\n    {\n        NetworkId = \"my-network-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupVpcNetwork(ctx, \u0026GetVpcNetworkArgs{\n\t\t\tNetworkId: pulumi.StringRef(\"my-network-id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetVpcNetworkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var admin = YandexFunctions.getVpcNetwork(GetVpcNetworkArgs.builder()\n            .networkId(\"my-network-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  admin:\n    fn::invoke:\n      Function: yandex:getVpcNetwork\n      Arguments:\n        networkId: my-network-id\n```\n\nThis data source is used to define [VPC Networks] that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcNetwork.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the network.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcNetwork.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of this network.\n"
                    },
                    "defaultSecurityGroupId": {
                        "type": "string",
                        "description": "ID of default Security Group of this network.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the network.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels assigned to this network.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string"
                    },
                    "subnetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of subnet ids.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "defaultSecurityGroupId",
                    "description",
                    "folderId",
                    "id",
                    "labels",
                    "name",
                    "networkId",
                    "subnetIds"
                ]
            }
        },
        "yandex:index/getVpcRouteTable:getVpcRouteTable": {
            "description": "Get information about a Yandex VPC route table. For more information, see\n[Yandex.Cloud VPC](https://cloud.yandex.com/docs/vpc/concepts/index).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst thisVpcRouteTable = pulumi.output(yandex.getVpcRouteTable({\n    routeTableId: \"my-rt-id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nthis = yandex.get_vpc_route_table(route_table_id=\"my-rt-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Yandex.GetVpcRouteTable.Invoke(new()\n    {\n        RouteTableId = \"my-rt-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupVpcRouteTable(ctx, \u0026GetVpcRouteTableArgs{\n\t\t\tRouteTableId: pulumi.StringRef(\"my-rt-id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetVpcRouteTableArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = YandexFunctions.getVpcRouteTable(GetVpcRouteTableArgs.builder()\n            .routeTableId(\"my-rt-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: yandex:getVpcRouteTable\n      Arguments:\n        routeTableId: my-rt-id\n```\n\nThis data source is used to define [VPC Route Table] that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcRouteTable.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- Name of the route table.\n"
                    },
                    "routeTableId": {
                        "type": "string",
                        "description": "Route table ID.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcRouteTable.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of this route table.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the route table.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this route table.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network this route table belongs to.\n"
                    },
                    "routeTableId": {
                        "type": "string"
                    },
                    "staticRoutes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getVpcRouteTableStaticRoute:getVpcRouteTableStaticRoute"
                        },
                        "description": "List of static route records of the route table. Structure is documented below.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "folderId",
                    "id",
                    "labels",
                    "name",
                    "networkId",
                    "routeTableId",
                    "staticRoutes"
                ]
            }
        },
        "yandex:index/getVpcSecurityGroup:getVpcSecurityGroup": {
            "description": "Get information about a Yandex VPC Security Group. For more information, see\n[Yandex.Cloud VPC](https://cloud.yandex.com/docs/vpc/concepts/security-groups).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst group1 = pulumi.output(yandex.getVpcSecurityGroup({\n    securityGroupId: \"my-id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ngroup1 = yandex.get_vpc_security_group(security_group_id=\"my-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var group1 = Yandex.GetVpcSecurityGroup.Invoke(new()\n    {\n        SecurityGroupId = \"my-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupVpcSecurityGroup(ctx, \u0026GetVpcSecurityGroupArgs{\n\t\t\tSecurityGroupId: pulumi.StringRef(\"my-id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetVpcSecurityGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var group1 = YandexFunctions.getVpcSecurityGroup(GetVpcSecurityGroupArgs.builder()\n            .securityGroupId(\"my-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  group1:\n    fn::invoke:\n      Function: yandex:getVpcSecurityGroup\n      Arguments:\n        securityGroupId: my-id\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst group1 = pulumi.output(yandex.getVpcSecurityGroup({\n    name: \"my-group1\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\ngroup1 = yandex.get_vpc_security_group(name=\"my-group1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var group1 = Yandex.GetVpcSecurityGroup.Invoke(new()\n    {\n        Name = \"my-group1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupVpcSecurityGroup(ctx, \u0026GetVpcSecurityGroupArgs{\n\t\t\tName: pulumi.StringRef(\"my-group1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetVpcSecurityGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var group1 = YandexFunctions.getVpcSecurityGroup(GetVpcSecurityGroupArgs.builder()\n            .name(\"my-group1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  group1:\n    fn::invoke:\n      Function: yandex:getVpcSecurityGroup\n      Arguments:\n        name: my-group1\n```\n\nThis data source is used to define Security Group that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcSecurityGroup.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- Name of the security group.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "Security Group ID.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcSecurityGroup.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of this security group.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the rule.\n"
                    },
                    "egresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getVpcSecurityGroupEgress:getVpcSecurityGroupEgress"
                        },
                        "description": "A list of egress rules. The structure is documented below.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder this security group belongs to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Id of the rule.\n"
                    },
                    "ingresses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getVpcSecurityGroupIngress:getVpcSecurityGroupIngress"
                        },
                        "description": "A list of ingress rules. The structure is documented below.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this rule.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the security group.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network this security group belongs to.\n"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "Target security group ID for this rule.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of this security group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "egresses",
                    "folderId",
                    "id",
                    "ingresses",
                    "labels",
                    "name",
                    "networkId",
                    "securityGroupId",
                    "status"
                ]
            }
        },
        "yandex:index/getVpcSecurityGroupRule:getVpcSecurityGroupRule": {
            "description": "Get information about a Yandex VPC Security Group Rule. For more information, see\n[Yandex.Cloud VPC](https://cloud.yandex.com/docs/vpc/concepts/security-groups).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst rule1 = pulumi.output(yandex.getVpcSecurityGroupRule({\n    ruleId: \"my-rule-id\",\n    securityGroupBinding: \"my-sg-id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nrule1 = yandex.get_vpc_security_group_rule(rule_id=\"my-rule-id\",\n    security_group_binding=\"my-sg-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var rule1 = Yandex.GetVpcSecurityGroupRule.Invoke(new()\n    {\n        RuleId = \"my-rule-id\",\n        SecurityGroupBinding = \"my-sg-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupVpcSecurityGroupRule(ctx, \u0026GetVpcSecurityGroupRuleArgs{\n\t\t\tRuleId:               \"my-rule-id\",\n\t\t\tSecurityGroupBinding: \"my-sg-id\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetVpcSecurityGroupRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var rule1 = YandexFunctions.getVpcSecurityGroupRule(GetVpcSecurityGroupRuleArgs.builder()\n            .ruleId(\"my-rule-id\")\n            .securityGroupBinding(\"my-sg-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  rule1:\n    fn::invoke:\n      Function: yandex:getVpcSecurityGroupRule\n      Arguments:\n        ruleId: my-rule-id\n        securityGroupBinding: my-sg-id\n```\n\nThis data source used to define Security Group Rule that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcSecurityGroupRule.\n",
                "properties": {
                    "ruleId": {
                        "type": "string",
                        "description": "- ID of the Security Group Rule.\n"
                    },
                    "securityGroupBinding": {
                        "type": "string",
                        "description": "ID of Security Group that owns the rule.\n"
                    }
                },
                "type": "object",
                "required": [
                    "ruleId",
                    "securityGroupBinding"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVpcSecurityGroupRule.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the rule.\n"
                    },
                    "direction": {
                        "type": "string",
                        "description": "Direction of the rule. Can be `ingress` (inbound) or `egress` (outbound).\n"
                    },
                    "fromPort": {
                        "type": "number",
                        "description": "Minimum port number.\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this rule.\n"
                    },
                    "port": {
                        "type": "number",
                        "description": "Port number (if applied to a single port).\n"
                    },
                    "predefinedTarget": {
                        "type": "string",
                        "description": "Special-purpose targets. `self_security_group` refers to this particular security group. `loadbalancer_healthchecks` represents [loadbalancer health check nodes](https://cloud.yandex.com/docs/network-load-balancer/concepts/health-check).\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "One of `ANY`, `TCP`, `UDP`, `ICMP`, `IPV6_ICMP`.\n"
                    },
                    "ruleId": {
                        "type": "string"
                    },
                    "securityGroupBinding": {
                        "type": "string"
                    },
                    "securityGroupId": {
                        "type": "string",
                        "description": "Target security group ID for this rule.\n"
                    },
                    "toPort": {
                        "type": "number",
                        "description": "Maximum port number.\n"
                    },
                    "v4CidrBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The blocks of  IPv4 addresses for this rule.\n"
                    },
                    "v6CidrBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The blocks of  IPv6 addresses for this rule.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "direction",
                    "fromPort",
                    "id",
                    "labels",
                    "port",
                    "predefinedTarget",
                    "protocol",
                    "ruleId",
                    "securityGroupBinding",
                    "securityGroupId",
                    "toPort",
                    "v4CidrBlocks",
                    "v6CidrBlocks"
                ]
            }
        },
        "yandex:index/getVpcSubnet:getVpcSubnet": {
            "description": "Get information about a Yandex VPC subnet. For more information, see\n[Yandex.Cloud VPC](https://cloud.yandex.com/docs/vpc/concepts/index).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst admin = pulumi.output(yandex.getVpcSubnet({\n    subnetId: \"my-subnet-id\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nadmin = yandex.get_vpc_subnet(subnet_id=\"my-subnet-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var admin = Yandex.GetVpcSubnet.Invoke(new()\n    {\n        SubnetId = \"my-subnet-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err = yandex.LookupVpcSubnet(ctx, \u0026GetVpcSubnetArgs{\n\t\t\tSubnetId: pulumi.StringRef(\"my-subnet-id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetVpcSubnetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var admin = YandexFunctions.getVpcSubnet(GetVpcSubnetArgs.builder()\n            .subnetId(\"my-subnet-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  admin:\n    fn::invoke:\n      Function: yandex:getVpcSubnet\n      Arguments:\n        subnetId: my-subnet-id\n```\n\nThis data source is used to define [VPC Subnets] that can be used by other resources.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVpcSubnet.\n",
                "properties": {
                    "folderId": {
                        "type": "string",
                        "description": "Folder that the resource belongs to. If value is omitted, the default provider folder is used.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "- Name of the subnet.\n"
                    },
                    "subnetId": {
                        "type": "string",
                        "description": "Subnet ID.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getVpcSubnet.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation timestamp of this subnet.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the subnet.\n"
                    },
                    "dhcpOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getVpcSubnetDhcpOption:getVpcSubnetDhcpOption"
                        },
                        "description": "Options for DHCP client. The structure is documented below.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to assign to this subnet.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network this subnet belongs to.\n"
                    },
                    "routeTableId": {
                        "type": "string",
                        "description": "ID of the route table to assign to this subnet.\n"
                    },
                    "subnetId": {
                        "type": "string"
                    },
                    "v4CidrBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The blocks of internal IPv4 addresses owned by this subnet.\n"
                    },
                    "v6CidrBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The blocks of internal IPv6 addresses owned by this subnet.\n"
                    },
                    "zone": {
                        "type": "string",
                        "description": "Name of the availability zone for this subnet.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "dhcpOptions",
                    "folderId",
                    "id",
                    "labels",
                    "name",
                    "networkId",
                    "routeTableId",
                    "subnetId",
                    "v4CidrBlocks",
                    "v6CidrBlocks",
                    "zone"
                ]
            }
        },
        "yandex:index/getYdbDatabaseDedicated:getYdbDatabaseDedicated": {
            "description": "Get information about a Yandex Database (dedicated) cluster.\nFor more information, see [the official documentation](https://cloud.yandex.com/en/docs/ydb/concepts/serverless_and_dedicated).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myDatabase = pulumi.output(yandex.getYdbDatabaseDedicated({\n    databaseId: \"some_ydb_dedicated_database_id\",\n}));\n\nexport const ydbApiEndpoint = myDatabase.ydbApiEndpoint;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_database = yandex.get_ydb_database_dedicated(database_id=\"some_ydb_dedicated_database_id\")\npulumi.export(\"ydbApiEndpoint\", my_database.ydb_api_endpoint)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDatabase = Yandex.GetYdbDatabaseDedicated.Invoke(new()\n    {\n        DatabaseId = \"some_ydb_dedicated_database_id\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ydbApiEndpoint\"] = myDatabase.Apply(getYdbDatabaseDedicatedResult =\u003e getYdbDatabaseDedicatedResult.YdbApiEndpoint),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyDatabase, err := yandex.LookupYdbDatabaseDedicated(ctx, \u0026GetYdbDatabaseDedicatedArgs{\n\t\t\tDatabaseId: pulumi.StringRef(\"some_ydb_dedicated_database_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ydbApiEndpoint\", myDatabase.YdbApiEndpoint)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetYdbDatabaseDedicatedArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDatabase = YandexFunctions.getYdbDatabaseDedicated(GetYdbDatabaseDedicatedArgs.builder()\n            .databaseId(\"some_ydb_dedicated_database_id\")\n            .build());\n\n        ctx.export(\"ydbApiEndpoint\", myDatabase.applyValue(getYdbDatabaseDedicatedResult -\u003e getYdbDatabaseDedicatedResult.ydbApiEndpoint()));\n    }\n}\n```\n```yaml\nvariables:\n  myDatabase:\n    fn::invoke:\n      Function: yandex:getYdbDatabaseDedicated\n      Arguments:\n        databaseId: some_ydb_dedicated_database_id\noutputs:\n  ydbApiEndpoint: ${myDatabase.ydbApiEndpoint}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getYdbDatabaseDedicated.\n",
                "properties": {
                    "databaseId": {
                        "type": "string",
                        "description": "ID of the Yandex Database cluster.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the database. Can be either `true` or `false`\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the Yandex Database cluster belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Yandex Database cluster.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getYdbDatabaseDedicated.\n",
                "properties": {
                    "assignPublicIps": {
                        "type": "boolean",
                        "description": "Whether public IP addresses are assigned to the Yandex Database cluster.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "The Yandex Database cluster creation timestamp.\n"
                    },
                    "databaseId": {
                        "type": "string"
                    },
                    "databasePath": {
                        "type": "string",
                        "description": "Full database path of the Yandex Database cluster.\nUseful for SDK configuration.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the database. Can be either `true` or `false`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the Yandex Database cluster.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "Region ID of the Yandex Database cluster.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the Yandex Database cluster.\n"
                    },
                    "locationId": {
                        "type": "string",
                        "description": "Location ID of the Yandex Database cluster.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getYdbDatabaseDedicatedLocation:getYdbDatabaseDedicatedLocation"
                        },
                        "description": "Location of the Yandex Database cluster.\nThe structure is documented below.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "ID of the network the Yandex Database cluster is attached to.\n"
                    },
                    "resourcePresetId": {
                        "type": "string",
                        "description": "The Yandex Database cluster preset.\n"
                    },
                    "scalePolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getYdbDatabaseDedicatedScalePolicy:getYdbDatabaseDedicatedScalePolicy"
                        },
                        "description": "Scaling policy of the Yandex Database cluster.\nThe structure is documented below.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Yandex Database cluster.\n"
                    },
                    "storageConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/yandex:index/getYdbDatabaseDedicatedStorageConfig:getYdbDatabaseDedicatedStorageConfig"
                        },
                        "description": "A list of storage configuration options of the Yandex Database cluster.\nThe structure is documented below.\n"
                    },
                    "subnetIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of subnet IDs the Yandex Database cluster is attached to.\n"
                    },
                    "tlsEnabled": {
                        "type": "boolean",
                        "description": "Whether TLS is enabled for the Yandex Database cluster.\nUseful for SDK configuration.\n"
                    },
                    "ydbApiEndpoint": {
                        "type": "string",
                        "description": "API endpoint of the Yandex Database cluster.\nUseful for SDK configuration.\n"
                    },
                    "ydbFullEndpoint": {
                        "type": "string",
                        "description": "Full endpoint of the Yandex Database cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "assignPublicIps",
                    "createdAt",
                    "databasePath",
                    "deletionProtection",
                    "description",
                    "id",
                    "labels",
                    "locations",
                    "locationId",
                    "networkId",
                    "resourcePresetId",
                    "scalePolicies",
                    "status",
                    "storageConfigs",
                    "subnetIds",
                    "tlsEnabled",
                    "ydbApiEndpoint",
                    "ydbFullEndpoint"
                ]
            }
        },
        "yandex:index/getYdbDatabaseServerless:getYdbDatabaseServerless": {
            "description": "Get information about a Yandex Database serverless cluster.\nFor more information, see [the official documentation](https://cloud.yandex.com/en/docs/ydb/concepts/serverless_and_dedicated).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as yandex from \"@pulumi/yandex\";\n\nconst myDatabase = pulumi.output(yandex.getYdbDatabaseServerless({\n    databaseId: \"some_ydb_serverless_database_id\",\n}));\n\nexport const ydbApiEndpoint = myDatabase.ydbApiEndpoint;\n```\n```python\nimport pulumi\nimport pulumi_yandex as yandex\n\nmy_database = yandex.get_ydb_database_serverless(database_id=\"some_ydb_serverless_database_id\")\npulumi.export(\"ydbApiEndpoint\", my_database.ydb_api_endpoint)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Yandex = Pulumi.Yandex;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myDatabase = Yandex.GetYdbDatabaseServerless.Invoke(new()\n    {\n        DatabaseId = \"some_ydb_serverless_database_id\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ydbApiEndpoint\"] = myDatabase.Apply(getYdbDatabaseServerlessResult =\u003e getYdbDatabaseServerlessResult.YdbApiEndpoint),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"go.pact.im/x/tf2pulumi/yandex\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyDatabase, err := yandex.LookupYdbDatabaseServerless(ctx, \u0026GetYdbDatabaseServerlessArgs{\n\t\t\tDatabaseId: pulumi.StringRef(\"some_ydb_serverless_database_id\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ydbApiEndpoint\", myDatabase.YdbApiEndpoint)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.yandex.YandexFunctions;\nimport com.pulumi.yandex.inputs.GetYdbDatabaseServerlessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myDatabase = YandexFunctions.getYdbDatabaseServerless(GetYdbDatabaseServerlessArgs.builder()\n            .databaseId(\"some_ydb_serverless_database_id\")\n            .build());\n\n        ctx.export(\"ydbApiEndpoint\", myDatabase.applyValue(getYdbDatabaseServerlessResult -\u003e getYdbDatabaseServerlessResult.ydbApiEndpoint()));\n    }\n}\n```\n```yaml\nvariables:\n  myDatabase:\n    fn::invoke:\n      Function: yandex:getYdbDatabaseServerless\n      Arguments:\n        databaseId: some_ydb_serverless_database_id\noutputs:\n  ydbApiEndpoint: ${myDatabase.ydbApiEndpoint}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getYdbDatabaseServerless.\n",
                "properties": {
                    "databaseId": {
                        "type": "string",
                        "description": "ID of the Yandex Database serverless cluster.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the database. Can be either `true` or `false`\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder that the Yandex Database serverless cluster belongs to.\nIt will be deduced from provider configuration if not set explicitly.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Yandex Database serverless cluster.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getYdbDatabaseServerless.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The Yandex Database serverless cluster creation timestamp.\n"
                    },
                    "databaseId": {
                        "type": "string"
                    },
                    "databasePath": {
                        "type": "string",
                        "description": "Full database path of the Yandex Database serverless cluster.\nUseful for SDK configuration.\n"
                    },
                    "deletionProtection": {
                        "type": "boolean",
                        "description": "Inhibits deletion of the database. Can be either `true` or `false`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the Yandex Database serverless cluster.\n"
                    },
                    "documentApiEndpoint": {
                        "type": "string",
                        "description": "Document API endpoint of the Yandex Database serverless cluster.\n"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A set of key/value label pairs assigned to the Yandex Database serverless cluster.\n"
                    },
                    "locationId": {
                        "type": "string",
                        "description": "Location ID of the Yandex Database serverless cluster.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Yandex Database serverless cluster.\n"
                    },
                    "tlsEnabled": {
                        "type": "boolean",
                        "description": "Whether TLS is enabled for the Yandex Database serverless cluster.\nUseful for SDK configuration.\n"
                    },
                    "ydbApiEndpoint": {
                        "type": "string",
                        "description": "API endpoint of the Yandex Database serverless cluster.\nUseful for SDK configuration.\n"
                    },
                    "ydbFullEndpoint": {
                        "type": "string",
                        "description": "Full endpoint of the Yandex Database serverless cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "databasePath",
                    "deletionProtection",
                    "description",
                    "documentApiEndpoint",
                    "id",
                    "labels",
                    "locationId",
                    "status",
                    "tlsEnabled",
                    "ydbApiEndpoint",
                    "ydbFullEndpoint"
                ]
            }
        }
    }
}