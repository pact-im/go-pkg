// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Container Repository. For more information, see
// [the official documentation](https://cloud.yandex.com/en-ru/docs/container-registry/concepts/lifecycle-policy)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"go.pact.im/x/tf2pulumi/yandex"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err = yandex.LookupContainerRepositoryLifecyclePolicy(ctx, &GetContainerRepositoryLifecyclePolicyArgs{
// 			LifecyclePolicyId: pulumi.StringRef(yandex_container_repository_lifecycle_policy.My_lifecycle_policy.Id),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupContainerRepositoryLifecyclePolicy(ctx *pulumi.Context, args *LookupContainerRepositoryLifecyclePolicyArgs, opts ...pulumi.InvokeOption) (*LookupContainerRepositoryLifecyclePolicyResult, error) {
	var rv LookupContainerRepositoryLifecyclePolicyResult
	err := ctx.Invoke("yandex:index/getContainerRepositoryLifecyclePolicy:getContainerRepositoryLifecyclePolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContainerRepositoryLifecyclePolicy.
type LookupContainerRepositoryLifecyclePolicyArgs struct {
	// The ID of a specific Lifecycle Policy.
	LifecyclePolicyId *string `pulumi:"lifecyclePolicyId"`
	// Name of Lifecycle Policy.
	Name *string `pulumi:"name"`
	// The ID of a repository which Lifecycle Policy belongs to.
	RepositoryId *string                                       `pulumi:"repositoryId"`
	Timeouts     GetContainerRepositoryLifecyclePolicyTimeouts `pulumi:"timeouts"`
}

// A collection of values returned by getContainerRepositoryLifecyclePolicy.
type LookupContainerRepositoryLifecyclePolicyResult struct {
	CreatedAt string `pulumi:"createdAt"`
	// Description of the lifecycle policy.
	Description       string                                      `pulumi:"description"`
	Id                string                                      `pulumi:"id"`
	LifecyclePolicyId string                                      `pulumi:"lifecyclePolicyId"`
	Name              string                                      `pulumi:"name"`
	RepositoryId      string                                      `pulumi:"repositoryId"`
	Rules             []GetContainerRepositoryLifecyclePolicyRule `pulumi:"rules"`
	// The status of lifecycle policy.
	Status   string                                        `pulumi:"status"`
	Timeouts GetContainerRepositoryLifecyclePolicyTimeouts `pulumi:"timeouts"`
}

func LookupContainerRepositoryLifecyclePolicyOutput(ctx *pulumi.Context, args LookupContainerRepositoryLifecyclePolicyOutputArgs, opts ...pulumi.InvokeOption) LookupContainerRepositoryLifecyclePolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupContainerRepositoryLifecyclePolicyResult, error) {
			args := v.(LookupContainerRepositoryLifecyclePolicyArgs)
			r, err := LookupContainerRepositoryLifecyclePolicy(ctx, &args, opts...)
			var s LookupContainerRepositoryLifecyclePolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupContainerRepositoryLifecyclePolicyResultOutput)
}

// A collection of arguments for invoking getContainerRepositoryLifecyclePolicy.
type LookupContainerRepositoryLifecyclePolicyOutputArgs struct {
	// The ID of a specific Lifecycle Policy.
	LifecyclePolicyId pulumi.StringPtrInput `pulumi:"lifecyclePolicyId"`
	// Name of Lifecycle Policy.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The ID of a repository which Lifecycle Policy belongs to.
	RepositoryId pulumi.StringPtrInput                              `pulumi:"repositoryId"`
	Timeouts     GetContainerRepositoryLifecyclePolicyTimeoutsInput `pulumi:"timeouts"`
}

func (LookupContainerRepositoryLifecyclePolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerRepositoryLifecyclePolicyArgs)(nil)).Elem()
}

// A collection of values returned by getContainerRepositoryLifecyclePolicy.
type LookupContainerRepositoryLifecyclePolicyResultOutput struct{ *pulumi.OutputState }

func (LookupContainerRepositoryLifecyclePolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupContainerRepositoryLifecyclePolicyResult)(nil)).Elem()
}

func (o LookupContainerRepositoryLifecyclePolicyResultOutput) ToLookupContainerRepositoryLifecyclePolicyResultOutput() LookupContainerRepositoryLifecyclePolicyResultOutput {
	return o
}

func (o LookupContainerRepositoryLifecyclePolicyResultOutput) ToLookupContainerRepositoryLifecyclePolicyResultOutputWithContext(ctx context.Context) LookupContainerRepositoryLifecyclePolicyResultOutput {
	return o
}

func (o LookupContainerRepositoryLifecyclePolicyResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the lifecycle policy.
func (o LookupContainerRepositoryLifecyclePolicyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupContainerRepositoryLifecyclePolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupContainerRepositoryLifecyclePolicyResultOutput) LifecyclePolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) string { return v.LifecyclePolicyId }).(pulumi.StringOutput)
}

func (o LookupContainerRepositoryLifecyclePolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupContainerRepositoryLifecyclePolicyResultOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) string { return v.RepositoryId }).(pulumi.StringOutput)
}

func (o LookupContainerRepositoryLifecyclePolicyResultOutput) Rules() GetContainerRepositoryLifecyclePolicyRuleArrayOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) []GetContainerRepositoryLifecyclePolicyRule {
		return v.Rules
	}).(GetContainerRepositoryLifecyclePolicyRuleArrayOutput)
}

// The status of lifecycle policy.
func (o LookupContainerRepositoryLifecyclePolicyResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupContainerRepositoryLifecyclePolicyResultOutput) Timeouts() GetContainerRepositoryLifecyclePolicyTimeoutsOutput {
	return o.ApplyT(func(v LookupContainerRepositoryLifecyclePolicyResult) GetContainerRepositoryLifecyclePolicyTimeouts {
		return v.Timeouts
	}).(GetContainerRepositoryLifecyclePolicyTimeoutsOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupContainerRepositoryLifecyclePolicyResultOutput{})
}
