// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex Managed MySQL user. For more information, see
// [the official documentation](https://cloud.yandex.com/docs/managed-mysql/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"go.pact.im/x/tf2pulumi/yandex"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		foo, err := yandex.LookupMdbMysqlUser(ctx, &GetMdbMysqlUserArgs{
// 			ClusterId: "some_cluster_id",
// 			Name:      "test",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("permission", foo.Permissions)
// 		return nil
// 	})
// }
// ```
func LookupMdbMysqlUser(ctx *pulumi.Context, args *LookupMdbMysqlUserArgs, opts ...pulumi.InvokeOption) (*LookupMdbMysqlUserResult, error) {
	var rv LookupMdbMysqlUserResult
	err := ctx.Invoke("yandex:index/getMdbMysqlUser:getMdbMysqlUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMdbMysqlUser.
type LookupMdbMysqlUserArgs struct {
	// The ID of the MySQL cluster.
	ClusterId string `pulumi:"clusterId"`
	// The name of the MySQL user.
	Name string `pulumi:"name"`
	// Set of permissions granted to the user. The structure is documented below.
	Permissions []GetMdbMysqlUserPermission `pulumi:"permissions"`
}

// A collection of values returned by getMdbMysqlUser.
type LookupMdbMysqlUserResult struct {
	// Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD`
	AuthenticationPlugin string `pulumi:"authenticationPlugin"`
	ClusterId            string `pulumi:"clusterId"`
	// User's connection limits. The structure is documented below.
	ConnectionLimits []GetMdbMysqlUserConnectionLimit `pulumi:"connectionLimits"`
	// List user's global permissions. Allowed values: `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS` or empty list.
	GlobalPermissions []string `pulumi:"globalPermissions"`
	Id                string   `pulumi:"id"`
	// The name of the user.
	Name string `pulumi:"name"`
	// Set of permissions granted to the user. The structure is documented below.
	Permissions []GetMdbMysqlUserPermission `pulumi:"permissions"`
}

func LookupMdbMysqlUserOutput(ctx *pulumi.Context, args LookupMdbMysqlUserOutputArgs, opts ...pulumi.InvokeOption) LookupMdbMysqlUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMdbMysqlUserResult, error) {
			args := v.(LookupMdbMysqlUserArgs)
			r, err := LookupMdbMysqlUser(ctx, &args, opts...)
			var s LookupMdbMysqlUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMdbMysqlUserResultOutput)
}

// A collection of arguments for invoking getMdbMysqlUser.
type LookupMdbMysqlUserOutputArgs struct {
	// The ID of the MySQL cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The name of the MySQL user.
	Name pulumi.StringInput `pulumi:"name"`
	// Set of permissions granted to the user. The structure is documented below.
	Permissions GetMdbMysqlUserPermissionArrayInput `pulumi:"permissions"`
}

func (LookupMdbMysqlUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbMysqlUserArgs)(nil)).Elem()
}

// A collection of values returned by getMdbMysqlUser.
type LookupMdbMysqlUserResultOutput struct{ *pulumi.OutputState }

func (LookupMdbMysqlUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbMysqlUserResult)(nil)).Elem()
}

func (o LookupMdbMysqlUserResultOutput) ToLookupMdbMysqlUserResultOutput() LookupMdbMysqlUserResultOutput {
	return o
}

func (o LookupMdbMysqlUserResultOutput) ToLookupMdbMysqlUserResultOutputWithContext(ctx context.Context) LookupMdbMysqlUserResultOutput {
	return o
}

// Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD`
func (o LookupMdbMysqlUserResultOutput) AuthenticationPlugin() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) string { return v.AuthenticationPlugin }).(pulumi.StringOutput)
}

func (o LookupMdbMysqlUserResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// User's connection limits. The structure is documented below.
func (o LookupMdbMysqlUserResultOutput) ConnectionLimits() GetMdbMysqlUserConnectionLimitArrayOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) []GetMdbMysqlUserConnectionLimit { return v.ConnectionLimits }).(GetMdbMysqlUserConnectionLimitArrayOutput)
}

// List user's global permissions. Allowed values: `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS` or empty list.
func (o LookupMdbMysqlUserResultOutput) GlobalPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) []string { return v.GlobalPermissions }).(pulumi.StringArrayOutput)
}

func (o LookupMdbMysqlUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the user.
func (o LookupMdbMysqlUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// Set of permissions granted to the user. The structure is documented below.
func (o LookupMdbMysqlUserResultOutput) Permissions() GetMdbMysqlUserPermissionArrayOutput {
	return o.ApplyT(func(v LookupMdbMysqlUserResult) []GetMdbMysqlUserPermission { return v.Permissions }).(GetMdbMysqlUserPermissionArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMdbMysqlUserResultOutput{})
}
