// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupMdbKafkaTopic(ctx *pulumi.Context, args *LookupMdbKafkaTopicArgs, opts ...pulumi.InvokeOption) (*LookupMdbKafkaTopicResult, error) {
	var rv LookupMdbKafkaTopicResult
	err := ctx.Invoke("yandex:index/getMdbKafkaTopic:getMdbKafkaTopic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMdbKafkaTopic.
type LookupMdbKafkaTopicArgs struct {
	ClusterId string `pulumi:"clusterId"`
	Name      string `pulumi:"name"`
}

// A collection of values returned by getMdbKafkaTopic.
type LookupMdbKafkaTopicResult struct {
	ClusterId         string                        `pulumi:"clusterId"`
	Id                string                        `pulumi:"id"`
	Name              string                        `pulumi:"name"`
	Partitions        float64                       `pulumi:"partitions"`
	ReplicationFactor float64                       `pulumi:"replicationFactor"`
	TopicConfigs      []GetMdbKafkaTopicTopicConfig `pulumi:"topicConfigs"`
}

func LookupMdbKafkaTopicOutput(ctx *pulumi.Context, args LookupMdbKafkaTopicOutputArgs, opts ...pulumi.InvokeOption) LookupMdbKafkaTopicResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMdbKafkaTopicResult, error) {
			args := v.(LookupMdbKafkaTopicArgs)
			r, err := LookupMdbKafkaTopic(ctx, &args, opts...)
			var s LookupMdbKafkaTopicResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMdbKafkaTopicResultOutput)
}

// A collection of arguments for invoking getMdbKafkaTopic.
type LookupMdbKafkaTopicOutputArgs struct {
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	Name      pulumi.StringInput `pulumi:"name"`
}

func (LookupMdbKafkaTopicOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbKafkaTopicArgs)(nil)).Elem()
}

// A collection of values returned by getMdbKafkaTopic.
type LookupMdbKafkaTopicResultOutput struct{ *pulumi.OutputState }

func (LookupMdbKafkaTopicResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdbKafkaTopicResult)(nil)).Elem()
}

func (o LookupMdbKafkaTopicResultOutput) ToLookupMdbKafkaTopicResultOutput() LookupMdbKafkaTopicResultOutput {
	return o
}

func (o LookupMdbKafkaTopicResultOutput) ToLookupMdbKafkaTopicResultOutputWithContext(ctx context.Context) LookupMdbKafkaTopicResultOutput {
	return o
}

func (o LookupMdbKafkaTopicResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbKafkaTopicResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o LookupMdbKafkaTopicResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbKafkaTopicResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupMdbKafkaTopicResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdbKafkaTopicResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupMdbKafkaTopicResultOutput) Partitions() pulumi.Float64Output {
	return o.ApplyT(func(v LookupMdbKafkaTopicResult) float64 { return v.Partitions }).(pulumi.Float64Output)
}

func (o LookupMdbKafkaTopicResultOutput) ReplicationFactor() pulumi.Float64Output {
	return o.ApplyT(func(v LookupMdbKafkaTopicResult) float64 { return v.ReplicationFactor }).(pulumi.Float64Output)
}

func (o LookupMdbKafkaTopicResultOutput) TopicConfigs() GetMdbKafkaTopicTopicConfigArrayOutput {
	return o.ApplyT(func(v LookupMdbKafkaTopicResult) []GetMdbKafkaTopicTopicConfig { return v.TopicConfigs }).(GetMdbKafkaTopicTopicConfigArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMdbKafkaTopicResultOutput{})
}
