// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows creation and management of a single member for a single binding within
// the IAM policy for an existing Yandex Organization Manager Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"go.pact.im/x/tf2pulumi/yandex"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := yandex.NewOrganizationManagerGroupIamMember(ctx, "editor", &yandex.OrganizationManagerGroupIamMemberArgs{
// 			GroupId: pulumi.String("some_group_id"),
// 			Member:  pulumi.String("userAccount:user_id"),
// 			Role:    pulumi.String("editor"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// IAM member imports use space-delimited identifiers; the resource in question, the role, and the account. This member resource can be imported using the `group_id`, role, and account, e.g.
//
// ```sh
//  $ pulumi import yandex:index/organizationManagerGroupIamMember:OrganizationManagerGroupIamMember my_project "group_id viewer foo@example.com"
// ```
type OrganizationManagerGroupIamMember struct {
	pulumi.CustomResourceState

	// ID of the organization to attach a policy to.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The identity that will be granted the privilege that is specified in the `role` field.
	// This field can have one of the following values:
	// * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	// * **federatedUser:{federated_user_id}**: A unique federated user ID.
	Member pulumi.StringOutput `pulumi:"member"`
	// The role that should be assigned.
	Role       pulumi.StringOutput     `pulumi:"role"`
	SleepAfter pulumi.Float64PtrOutput `pulumi:"sleepAfter"`
}

// NewOrganizationManagerGroupIamMember registers a new resource with the given unique name, arguments, and options.
func NewOrganizationManagerGroupIamMember(ctx *pulumi.Context,
	name string, args *OrganizationManagerGroupIamMemberArgs, opts ...pulumi.ResourceOption) (*OrganizationManagerGroupIamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Member == nil {
		return nil, errors.New("invalid value for required argument 'Member'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource OrganizationManagerGroupIamMember
	err := ctx.RegisterResource("yandex:index/organizationManagerGroupIamMember:OrganizationManagerGroupIamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationManagerGroupIamMember gets an existing OrganizationManagerGroupIamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationManagerGroupIamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationManagerGroupIamMemberState, opts ...pulumi.ResourceOption) (*OrganizationManagerGroupIamMember, error) {
	var resource OrganizationManagerGroupIamMember
	err := ctx.ReadResource("yandex:index/organizationManagerGroupIamMember:OrganizationManagerGroupIamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationManagerGroupIamMember resources.
type organizationManagerGroupIamMemberState struct {
	// ID of the organization to attach a policy to.
	GroupId *string `pulumi:"groupId"`
	// The identity that will be granted the privilege that is specified in the `role` field.
	// This field can have one of the following values:
	// * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	// * **federatedUser:{federated_user_id}**: A unique federated user ID.
	Member *string `pulumi:"member"`
	// The role that should be assigned.
	Role       *string  `pulumi:"role"`
	SleepAfter *float64 `pulumi:"sleepAfter"`
}

type OrganizationManagerGroupIamMemberState struct {
	// ID of the organization to attach a policy to.
	GroupId pulumi.StringPtrInput
	// The identity that will be granted the privilege that is specified in the `role` field.
	// This field can have one of the following values:
	// * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	// * **federatedUser:{federated_user_id}**: A unique federated user ID.
	Member pulumi.StringPtrInput
	// The role that should be assigned.
	Role       pulumi.StringPtrInput
	SleepAfter pulumi.Float64PtrInput
}

func (OrganizationManagerGroupIamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationManagerGroupIamMemberState)(nil)).Elem()
}

type organizationManagerGroupIamMemberArgs struct {
	// ID of the organization to attach a policy to.
	GroupId string `pulumi:"groupId"`
	// The identity that will be granted the privilege that is specified in the `role` field.
	// This field can have one of the following values:
	// * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	// * **federatedUser:{federated_user_id}**: A unique federated user ID.
	Member string `pulumi:"member"`
	// The role that should be assigned.
	Role       string   `pulumi:"role"`
	SleepAfter *float64 `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a OrganizationManagerGroupIamMember resource.
type OrganizationManagerGroupIamMemberArgs struct {
	// ID of the organization to attach a policy to.
	GroupId pulumi.StringInput
	// The identity that will be granted the privilege that is specified in the `role` field.
	// This field can have one of the following values:
	// * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	// * **federatedUser:{federated_user_id}**: A unique federated user ID.
	Member pulumi.StringInput
	// The role that should be assigned.
	Role       pulumi.StringInput
	SleepAfter pulumi.Float64PtrInput
}

func (OrganizationManagerGroupIamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationManagerGroupIamMemberArgs)(nil)).Elem()
}

type OrganizationManagerGroupIamMemberInput interface {
	pulumi.Input

	ToOrganizationManagerGroupIamMemberOutput() OrganizationManagerGroupIamMemberOutput
	ToOrganizationManagerGroupIamMemberOutputWithContext(ctx context.Context) OrganizationManagerGroupIamMemberOutput
}

func (*OrganizationManagerGroupIamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationManagerGroupIamMember)(nil)).Elem()
}

func (i *OrganizationManagerGroupIamMember) ToOrganizationManagerGroupIamMemberOutput() OrganizationManagerGroupIamMemberOutput {
	return i.ToOrganizationManagerGroupIamMemberOutputWithContext(context.Background())
}

func (i *OrganizationManagerGroupIamMember) ToOrganizationManagerGroupIamMemberOutputWithContext(ctx context.Context) OrganizationManagerGroupIamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationManagerGroupIamMemberOutput)
}

// OrganizationManagerGroupIamMemberArrayInput is an input type that accepts OrganizationManagerGroupIamMemberArray and OrganizationManagerGroupIamMemberArrayOutput values.
// You can construct a concrete instance of `OrganizationManagerGroupIamMemberArrayInput` via:
//
//          OrganizationManagerGroupIamMemberArray{ OrganizationManagerGroupIamMemberArgs{...} }
type OrganizationManagerGroupIamMemberArrayInput interface {
	pulumi.Input

	ToOrganizationManagerGroupIamMemberArrayOutput() OrganizationManagerGroupIamMemberArrayOutput
	ToOrganizationManagerGroupIamMemberArrayOutputWithContext(context.Context) OrganizationManagerGroupIamMemberArrayOutput
}

type OrganizationManagerGroupIamMemberArray []OrganizationManagerGroupIamMemberInput

func (OrganizationManagerGroupIamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationManagerGroupIamMember)(nil)).Elem()
}

func (i OrganizationManagerGroupIamMemberArray) ToOrganizationManagerGroupIamMemberArrayOutput() OrganizationManagerGroupIamMemberArrayOutput {
	return i.ToOrganizationManagerGroupIamMemberArrayOutputWithContext(context.Background())
}

func (i OrganizationManagerGroupIamMemberArray) ToOrganizationManagerGroupIamMemberArrayOutputWithContext(ctx context.Context) OrganizationManagerGroupIamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationManagerGroupIamMemberArrayOutput)
}

// OrganizationManagerGroupIamMemberMapInput is an input type that accepts OrganizationManagerGroupIamMemberMap and OrganizationManagerGroupIamMemberMapOutput values.
// You can construct a concrete instance of `OrganizationManagerGroupIamMemberMapInput` via:
//
//          OrganizationManagerGroupIamMemberMap{ "key": OrganizationManagerGroupIamMemberArgs{...} }
type OrganizationManagerGroupIamMemberMapInput interface {
	pulumi.Input

	ToOrganizationManagerGroupIamMemberMapOutput() OrganizationManagerGroupIamMemberMapOutput
	ToOrganizationManagerGroupIamMemberMapOutputWithContext(context.Context) OrganizationManagerGroupIamMemberMapOutput
}

type OrganizationManagerGroupIamMemberMap map[string]OrganizationManagerGroupIamMemberInput

func (OrganizationManagerGroupIamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationManagerGroupIamMember)(nil)).Elem()
}

func (i OrganizationManagerGroupIamMemberMap) ToOrganizationManagerGroupIamMemberMapOutput() OrganizationManagerGroupIamMemberMapOutput {
	return i.ToOrganizationManagerGroupIamMemberMapOutputWithContext(context.Background())
}

func (i OrganizationManagerGroupIamMemberMap) ToOrganizationManagerGroupIamMemberMapOutputWithContext(ctx context.Context) OrganizationManagerGroupIamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationManagerGroupIamMemberMapOutput)
}

type OrganizationManagerGroupIamMemberOutput struct{ *pulumi.OutputState }

func (OrganizationManagerGroupIamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationManagerGroupIamMember)(nil)).Elem()
}

func (o OrganizationManagerGroupIamMemberOutput) ToOrganizationManagerGroupIamMemberOutput() OrganizationManagerGroupIamMemberOutput {
	return o
}

func (o OrganizationManagerGroupIamMemberOutput) ToOrganizationManagerGroupIamMemberOutputWithContext(ctx context.Context) OrganizationManagerGroupIamMemberOutput {
	return o
}

// ID of the organization to attach a policy to.
func (o OrganizationManagerGroupIamMemberOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationManagerGroupIamMember) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The identity that will be granted the privilege that is specified in the `role` field.
// This field can have one of the following values:
// * **userAccount:{user_id}**: A unique user ID that represents a specific Yandex account.
// * **serviceAccount:{service_account_id}**: A unique service account ID.
// * **federatedUser:{federated_user_id}**: A unique federated user ID.
func (o OrganizationManagerGroupIamMemberOutput) Member() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationManagerGroupIamMember) pulumi.StringOutput { return v.Member }).(pulumi.StringOutput)
}

// The role that should be assigned.
func (o OrganizationManagerGroupIamMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationManagerGroupIamMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o OrganizationManagerGroupIamMemberOutput) SleepAfter() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *OrganizationManagerGroupIamMember) pulumi.Float64PtrOutput { return v.SleepAfter }).(pulumi.Float64PtrOutput)
}

type OrganizationManagerGroupIamMemberArrayOutput struct{ *pulumi.OutputState }

func (OrganizationManagerGroupIamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationManagerGroupIamMember)(nil)).Elem()
}

func (o OrganizationManagerGroupIamMemberArrayOutput) ToOrganizationManagerGroupIamMemberArrayOutput() OrganizationManagerGroupIamMemberArrayOutput {
	return o
}

func (o OrganizationManagerGroupIamMemberArrayOutput) ToOrganizationManagerGroupIamMemberArrayOutputWithContext(ctx context.Context) OrganizationManagerGroupIamMemberArrayOutput {
	return o
}

func (o OrganizationManagerGroupIamMemberArrayOutput) Index(i pulumi.IntInput) OrganizationManagerGroupIamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationManagerGroupIamMember {
		return vs[0].([]*OrganizationManagerGroupIamMember)[vs[1].(int)]
	}).(OrganizationManagerGroupIamMemberOutput)
}

type OrganizationManagerGroupIamMemberMapOutput struct{ *pulumi.OutputState }

func (OrganizationManagerGroupIamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationManagerGroupIamMember)(nil)).Elem()
}

func (o OrganizationManagerGroupIamMemberMapOutput) ToOrganizationManagerGroupIamMemberMapOutput() OrganizationManagerGroupIamMemberMapOutput {
	return o
}

func (o OrganizationManagerGroupIamMemberMapOutput) ToOrganizationManagerGroupIamMemberMapOutputWithContext(ctx context.Context) OrganizationManagerGroupIamMemberMapOutput {
	return o
}

func (o OrganizationManagerGroupIamMemberMapOutput) MapIndex(k pulumi.StringInput) OrganizationManagerGroupIamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationManagerGroupIamMember {
		return vs[0].(map[string]*OrganizationManagerGroupIamMember)[vs[1].(string)]
	}).(OrganizationManagerGroupIamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationManagerGroupIamMemberInput)(nil)).Elem(), &OrganizationManagerGroupIamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationManagerGroupIamMemberArrayInput)(nil)).Elem(), OrganizationManagerGroupIamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationManagerGroupIamMemberMapInput)(nil)).Elem(), OrganizationManagerGroupIamMemberMap{})
	pulumi.RegisterOutputType(OrganizationManagerGroupIamMemberOutput{})
	pulumi.RegisterOutputType(OrganizationManagerGroupIamMemberArrayOutput{})
	pulumi.RegisterOutputType(OrganizationManagerGroupIamMemberMapOutput{})
}
