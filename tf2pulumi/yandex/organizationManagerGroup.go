// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows management of a single Group within an existing Yandex.Cloud Organization. For more information, see [the official documentation](https://cloud.yandex.com/en-ru/docs/organization/manage-groups).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"go.pact.im/x/tf2pulumi/yandex"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := yandex.NewOrganizationManagerGroup(ctx, "group", &yandex.OrganizationManagerGroupArgs{
// 			Description:    pulumi.String("My new Group"),
// 			OrganizationId: pulumi.String("sdf4*********3fr"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// A Yandex.Cloud Organization Manager Group can be imported using the `id` of the resource, e.g.
//
// ```sh
//  $ pulumi import yandex:index/organizationManagerGroup:OrganizationManagerGroup group "group_id"
// ```
type OrganizationManagerGroup struct {
	pulumi.CustomResourceState

	// (Computed) The SAML Federation creation timestamp.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the Group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The organization to attach this Group to.
	OrganizationId pulumi.StringOutput                    `pulumi:"organizationId"`
	Timeouts       OrganizationManagerGroupTimeoutsOutput `pulumi:"timeouts"`
}

// NewOrganizationManagerGroup registers a new resource with the given unique name, arguments, and options.
func NewOrganizationManagerGroup(ctx *pulumi.Context,
	name string, args *OrganizationManagerGroupArgs, opts ...pulumi.ResourceOption) (*OrganizationManagerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	if args.Timeouts == nil {
		return nil, errors.New("invalid value for required argument 'Timeouts'")
	}
	var resource OrganizationManagerGroup
	err := ctx.RegisterResource("yandex:index/organizationManagerGroup:OrganizationManagerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganizationManagerGroup gets an existing OrganizationManagerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganizationManagerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationManagerGroupState, opts ...pulumi.ResourceOption) (*OrganizationManagerGroup, error) {
	var resource OrganizationManagerGroup
	err := ctx.ReadResource("yandex:index/organizationManagerGroup:OrganizationManagerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OrganizationManagerGroup resources.
type organizationManagerGroupState struct {
	// (Computed) The SAML Federation creation timestamp.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the Group.
	Description *string `pulumi:"description"`
	// The name of the Group.
	Name *string `pulumi:"name"`
	// The organization to attach this Group to.
	OrganizationId *string                           `pulumi:"organizationId"`
	Timeouts       *OrganizationManagerGroupTimeouts `pulumi:"timeouts"`
}

type OrganizationManagerGroupState struct {
	// (Computed) The SAML Federation creation timestamp.
	CreatedAt pulumi.StringPtrInput
	// The description of the Group.
	Description pulumi.StringPtrInput
	// The name of the Group.
	Name pulumi.StringPtrInput
	// The organization to attach this Group to.
	OrganizationId pulumi.StringPtrInput
	Timeouts       OrganizationManagerGroupTimeoutsPtrInput
}

func (OrganizationManagerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationManagerGroupState)(nil)).Elem()
}

type organizationManagerGroupArgs struct {
	// The description of the Group.
	Description *string `pulumi:"description"`
	// The name of the Group.
	Name *string `pulumi:"name"`
	// The organization to attach this Group to.
	OrganizationId string                           `pulumi:"organizationId"`
	Timeouts       OrganizationManagerGroupTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a OrganizationManagerGroup resource.
type OrganizationManagerGroupArgs struct {
	// The description of the Group.
	Description pulumi.StringPtrInput
	// The name of the Group.
	Name pulumi.StringPtrInput
	// The organization to attach this Group to.
	OrganizationId pulumi.StringInput
	Timeouts       OrganizationManagerGroupTimeoutsInput
}

func (OrganizationManagerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationManagerGroupArgs)(nil)).Elem()
}

type OrganizationManagerGroupInput interface {
	pulumi.Input

	ToOrganizationManagerGroupOutput() OrganizationManagerGroupOutput
	ToOrganizationManagerGroupOutputWithContext(ctx context.Context) OrganizationManagerGroupOutput
}

func (*OrganizationManagerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationManagerGroup)(nil)).Elem()
}

func (i *OrganizationManagerGroup) ToOrganizationManagerGroupOutput() OrganizationManagerGroupOutput {
	return i.ToOrganizationManagerGroupOutputWithContext(context.Background())
}

func (i *OrganizationManagerGroup) ToOrganizationManagerGroupOutputWithContext(ctx context.Context) OrganizationManagerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationManagerGroupOutput)
}

// OrganizationManagerGroupArrayInput is an input type that accepts OrganizationManagerGroupArray and OrganizationManagerGroupArrayOutput values.
// You can construct a concrete instance of `OrganizationManagerGroupArrayInput` via:
//
//          OrganizationManagerGroupArray{ OrganizationManagerGroupArgs{...} }
type OrganizationManagerGroupArrayInput interface {
	pulumi.Input

	ToOrganizationManagerGroupArrayOutput() OrganizationManagerGroupArrayOutput
	ToOrganizationManagerGroupArrayOutputWithContext(context.Context) OrganizationManagerGroupArrayOutput
}

type OrganizationManagerGroupArray []OrganizationManagerGroupInput

func (OrganizationManagerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationManagerGroup)(nil)).Elem()
}

func (i OrganizationManagerGroupArray) ToOrganizationManagerGroupArrayOutput() OrganizationManagerGroupArrayOutput {
	return i.ToOrganizationManagerGroupArrayOutputWithContext(context.Background())
}

func (i OrganizationManagerGroupArray) ToOrganizationManagerGroupArrayOutputWithContext(ctx context.Context) OrganizationManagerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationManagerGroupArrayOutput)
}

// OrganizationManagerGroupMapInput is an input type that accepts OrganizationManagerGroupMap and OrganizationManagerGroupMapOutput values.
// You can construct a concrete instance of `OrganizationManagerGroupMapInput` via:
//
//          OrganizationManagerGroupMap{ "key": OrganizationManagerGroupArgs{...} }
type OrganizationManagerGroupMapInput interface {
	pulumi.Input

	ToOrganizationManagerGroupMapOutput() OrganizationManagerGroupMapOutput
	ToOrganizationManagerGroupMapOutputWithContext(context.Context) OrganizationManagerGroupMapOutput
}

type OrganizationManagerGroupMap map[string]OrganizationManagerGroupInput

func (OrganizationManagerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationManagerGroup)(nil)).Elem()
}

func (i OrganizationManagerGroupMap) ToOrganizationManagerGroupMapOutput() OrganizationManagerGroupMapOutput {
	return i.ToOrganizationManagerGroupMapOutputWithContext(context.Background())
}

func (i OrganizationManagerGroupMap) ToOrganizationManagerGroupMapOutputWithContext(ctx context.Context) OrganizationManagerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationManagerGroupMapOutput)
}

type OrganizationManagerGroupOutput struct{ *pulumi.OutputState }

func (OrganizationManagerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OrganizationManagerGroup)(nil)).Elem()
}

func (o OrganizationManagerGroupOutput) ToOrganizationManagerGroupOutput() OrganizationManagerGroupOutput {
	return o
}

func (o OrganizationManagerGroupOutput) ToOrganizationManagerGroupOutputWithContext(ctx context.Context) OrganizationManagerGroupOutput {
	return o
}

// (Computed) The SAML Federation creation timestamp.
func (o OrganizationManagerGroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationManagerGroup) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the Group.
func (o OrganizationManagerGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OrganizationManagerGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Group.
func (o OrganizationManagerGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationManagerGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The organization to attach this Group to.
func (o OrganizationManagerGroupOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *OrganizationManagerGroup) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o OrganizationManagerGroupOutput) Timeouts() OrganizationManagerGroupTimeoutsOutput {
	return o.ApplyT(func(v *OrganizationManagerGroup) OrganizationManagerGroupTimeoutsOutput { return v.Timeouts }).(OrganizationManagerGroupTimeoutsOutput)
}

type OrganizationManagerGroupArrayOutput struct{ *pulumi.OutputState }

func (OrganizationManagerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OrganizationManagerGroup)(nil)).Elem()
}

func (o OrganizationManagerGroupArrayOutput) ToOrganizationManagerGroupArrayOutput() OrganizationManagerGroupArrayOutput {
	return o
}

func (o OrganizationManagerGroupArrayOutput) ToOrganizationManagerGroupArrayOutputWithContext(ctx context.Context) OrganizationManagerGroupArrayOutput {
	return o
}

func (o OrganizationManagerGroupArrayOutput) Index(i pulumi.IntInput) OrganizationManagerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OrganizationManagerGroup {
		return vs[0].([]*OrganizationManagerGroup)[vs[1].(int)]
	}).(OrganizationManagerGroupOutput)
}

type OrganizationManagerGroupMapOutput struct{ *pulumi.OutputState }

func (OrganizationManagerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OrganizationManagerGroup)(nil)).Elem()
}

func (o OrganizationManagerGroupMapOutput) ToOrganizationManagerGroupMapOutput() OrganizationManagerGroupMapOutput {
	return o
}

func (o OrganizationManagerGroupMapOutput) ToOrganizationManagerGroupMapOutputWithContext(ctx context.Context) OrganizationManagerGroupMapOutput {
	return o
}

func (o OrganizationManagerGroupMapOutput) MapIndex(k pulumi.StringInput) OrganizationManagerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OrganizationManagerGroup {
		return vs[0].(map[string]*OrganizationManagerGroup)[vs[1].(string)]
	}).(OrganizationManagerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationManagerGroupInput)(nil)).Elem(), &OrganizationManagerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationManagerGroupArrayInput)(nil)).Elem(), OrganizationManagerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationManagerGroupMapInput)(nil)).Elem(), OrganizationManagerGroupMap{})
	pulumi.RegisterOutputType(OrganizationManagerGroupOutput{})
	pulumi.RegisterOutputType(OrganizationManagerGroupArrayOutput{})
	pulumi.RegisterOutputType(OrganizationManagerGroupMapOutput{})
}
